#pragma once

// IFC SDK : IFC2X3 C++ Early Classes
// Copyright (C) 2009-2018 CSTB   
//   
// For further information please contact
//                                       
//         eveBIM-support@cstb.fr        
//   or                                  
//         CSTB DTI/MIC                  
//         290, route des Lucioles       
//         BP 209                        
//         06904 Sophia Antipolis, France
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 2.1 of the License, or (at your option) any later version.
// The full license is in Licence.txt file included with this
// distribution or is available at :
//     http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.


#include <ifc2x3/Export.h>

#include <ifc2x3/IfcOrganization.h>
#include <ifc2x3/IfcActorRole.h>
#include <ifc2x3/IfcAddress.h>
#include <ifc2x3/IfcPerson.h>
#include <ifc2x3/IfcPersonAndOrganization.h>
#include <ifc2x3/IfcOrganizationRelationship.h>
#include <ifc2x3/IfcMeasureWithUnit.h>
#include <ifc2x3/IfcDerivedUnit.h>
#include <ifc2x3/IfcDerivedUnitElement.h>
#include <ifc2x3/IfcNamedUnit.h>
#include <ifc2x3/IfcDimensionalExponents.h>
#include <ifc2x3/IfcMonetaryUnit.h>
#include <ifc2x3/IfcAxis2Placement2D.h>
#include <ifc2x3/IfcPlacement.h>
#include <ifc2x3/IfcGeometricRepresentationItem.h>
#include <ifc2x3/IfcRepresentationItem.h>
#include <ifc2x3/IfcPresentationLayerAssignment.h>
#include <ifc2x3/IfcRepresentation.h>
#include <ifc2x3/IfcRepresentationContext.h>
#include <ifc2x3/IfcRepresentationMap.h>
#include <ifc2x3/IfcMappedItem.h>
#include <ifc2x3/IfcCartesianTransformationOperator.h>
#include <ifc2x3/IfcDirection.h>
#include <ifc2x3/IfcCartesianPoint.h>
#include <ifc2x3/IfcPoint.h>
#include <ifc2x3/IfcProductRepresentation.h>
#include <ifc2x3/IfcStyledItem.h>
#include <ifc2x3/IfcPresentationStyleAssignment.h>
#include <ifc2x3/IfcCurveStyle.h>
#include <ifc2x3/IfcPresentationStyle.h>
#include <ifc2x3/IfcPreDefinedCurveFont.h>
#include <ifc2x3/IfcPreDefinedItem.h>
#include <ifc2x3/IfcCurveStyleFont.h>
#include <ifc2x3/IfcCurveStyleFontPattern.h>
#include <ifc2x3/IfcCurveStyleFontAndScaling.h>
#include <ifc2x3/IfcColourSpecification.h>
#include <ifc2x3/IfcPreDefinedColour.h>
#include <ifc2x3/IfcSymbolStyle.h>
#include <ifc2x3/IfcFillAreaStyle.h>
#include <ifc2x3/IfcFillAreaStyleHatching.h>
#include <ifc2x3/IfcOneDirectionRepeatFactor.h>
#include <ifc2x3/IfcVector.h>
#include <ifc2x3/IfcFillAreaStyleTiles.h>
#include <ifc2x3/IfcFillAreaStyleTileSymbolWithStyle.h>
#include <ifc2x3/IfcAnnotationSymbolOccurrence.h>
#include <ifc2x3/IfcAnnotationOccurrence.h>
#include <ifc2x3/IfcExternallyDefinedHatchStyle.h>
#include <ifc2x3/IfcExternalReference.h>
#include <ifc2x3/IfcTextStyle.h>
#include <ifc2x3/IfcTextStyleForDefinedFont.h>
#include <ifc2x3/IfcTextStyleWithBoxCharacteristics.h>
#include <ifc2x3/IfcTextStyleTextModel.h>
#include <ifc2x3/IfcPreDefinedTextFont.h>
#include <ifc2x3/IfcExternallyDefinedTextFont.h>
#include <ifc2x3/IfcSurfaceStyle.h>
#include <ifc2x3/IfcSurfaceStyleShading.h>
#include <ifc2x3/IfcColourRgb.h>
#include <ifc2x3/IfcSurfaceStyleLighting.h>
#include <ifc2x3/IfcSurfaceStyleWithTextures.h>
#include <ifc2x3/IfcSurfaceTexture.h>
#include <ifc2x3/IfcCartesianTransformationOperator2D.h>
#include <ifc2x3/IfcExternallyDefinedSurfaceStyle.h>
#include <ifc2x3/IfcSurfaceStyleRefraction.h>
#include <ifc2x3/IfcAxis2Placement3D.h>
#include <ifc2x3/IfcSolidModel.h>
#include <ifc2x3/IfcHalfSpaceSolid.h>
#include <ifc2x3/IfcSurface.h>
#include <ifc2x3/IfcBooleanResult.h>
#include <ifc2x3/IfcCsgPrimitive3D.h>
#include <ifc2x3/IfcClassificationNotation.h>
#include <ifc2x3/IfcClassificationNotationFacet.h>
#include <ifc2x3/IfcClassificationReference.h>
#include <ifc2x3/IfcClassification.h>
#include <ifc2x3/IfcCalendarDate.h>
#include <ifc2x3/IfcClassificationItem.h>
#include <ifc2x3/IfcClassificationItemRelationship.h>
#include <ifc2x3/IfcBoundedCurve.h>
#include <ifc2x3/IfcCurve.h>
#include <ifc2x3/IfcEdgeCurve.h>
#include <ifc2x3/IfcEdge.h>
#include <ifc2x3/IfcTopologicalRepresentationItem.h>
#include <ifc2x3/IfcVertex.h>
#include <ifc2x3/IfcLocalTime.h>
#include <ifc2x3/IfcCoordinatedUniversalTimeOffset.h>
#include <ifc2x3/IfcDateAndTime.h>
#include <ifc2x3/IfcPreDefinedSymbol.h>
#include <ifc2x3/IfcExternallyDefinedSymbol.h>
#include <ifc2x3/IfcDocumentReference.h>
#include <ifc2x3/IfcDocumentInformation.h>
#include <ifc2x3/IfcDocumentElectronicFormat.h>
#include <ifc2x3/IfcDocumentInformationRelationship.h>
#include <ifc2x3/IfcAnnotationCurveOccurrence.h>
#include <ifc2x3/IfcAnnotationTextOccurrence.h>
#include <ifc2x3/IfcLibraryReference.h>
#include <ifc2x3/IfcLibraryInformation.h>
#include <ifc2x3/IfcLightIntensityDistribution.h>
#include <ifc2x3/IfcLightDistributionData.h>
#include <ifc2x3/IfcMaterial.h>
#include <ifc2x3/IfcMaterialDefinitionRepresentation.h>
#include <ifc2x3/IfcMaterialClassificationRelationship.h>
#include <ifc2x3/IfcMaterialList.h>
#include <ifc2x3/IfcMaterialLayerSetUsage.h>
#include <ifc2x3/IfcMaterialLayerSet.h>
#include <ifc2x3/IfcMaterialLayer.h>
#include <ifc2x3/IfcTable.h>
#include <ifc2x3/IfcTableRow.h>
#include <ifc2x3/IfcTimeSeries.h>
#include <ifc2x3/IfcTimeSeriesReferenceRelationship.h>
#include <ifc2x3/IfcCostValue.h>
#include <ifc2x3/IfcAppliedValue.h>
#include <ifc2x3/IfcReferencesValueDocument.h>
#include <ifc2x3/IfcAppliedValueRelationship.h>
#include <ifc2x3/IfcVertexPoint.h>
#include <ifc2x3/IfcClosedShell.h>
#include <ifc2x3/IfcConnectedFaceSet.h>
#include <ifc2x3/IfcFace.h>
#include <ifc2x3/IfcFaceBound.h>
#include <ifc2x3/IfcLoop.h>
#include <ifc2x3/IfcOpenShell.h>
#include <ifc2x3/IfcStructuralItem.h>
#include <ifc2x3/IfcProduct.h>
#include <ifc2x3/IfcObject.h>
#include <ifc2x3/IfcObjectDefinition.h>
#include <ifc2x3/IfcRoot.h>
#include <ifc2x3/IfcOwnerHistory.h>
#include <ifc2x3/IfcApplication.h>
#include <ifc2x3/IfcRelAssigns.h>
#include <ifc2x3/IfcRelationship.h>
#include <ifc2x3/IfcRelDecomposes.h>
#include <ifc2x3/IfcRelAssociates.h>
#include <ifc2x3/IfcRelDefines.h>
#include <ifc2x3/IfcObjectPlacement.h>
#include <ifc2x3/IfcLocalPlacement.h>
#include <ifc2x3/IfcRelAssignsToProduct.h>
#include <ifc2x3/IfcRelConnectsStructuralActivity.h>
#include <ifc2x3/IfcRelConnects.h>
#include <ifc2x3/IfcStructuralActivity.h>
#include <ifc2x3/IfcStructuralLoad.h>
#include <ifc2x3/IfcElement.h>
#include <ifc2x3/IfcRelConnectsStructuralElement.h>
#include <ifc2x3/IfcStructuralMember.h>
#include <ifc2x3/IfcRelConnectsStructuralMember.h>
#include <ifc2x3/IfcStructuralConnection.h>
#include <ifc2x3/IfcBoundaryCondition.h>
#include <ifc2x3/IfcStructuralConnectionCondition.h>
#include <ifc2x3/IfcRelFillsElement.h>
#include <ifc2x3/IfcOpeningElement.h>
#include <ifc2x3/IfcFeatureElementSubtraction.h>
#include <ifc2x3/IfcFeatureElement.h>
#include <ifc2x3/IfcRelVoidsElement.h>
#include <ifc2x3/IfcRelConnectsElements.h>
#include <ifc2x3/IfcConnectionGeometry.h>
#include <ifc2x3/IfcRelCoversBldgElements.h>
#include <ifc2x3/IfcCovering.h>
#include <ifc2x3/IfcBuildingElement.h>
#include <ifc2x3/IfcRelCoversSpaces.h>
#include <ifc2x3/IfcSpace.h>
#include <ifc2x3/IfcSpatialStructureElement.h>
#include <ifc2x3/IfcRelReferencedInSpatialStructure.h>
#include <ifc2x3/IfcRelServicesBuildings.h>
#include <ifc2x3/IfcSystem.h>
#include <ifc2x3/IfcGroup.h>
#include <ifc2x3/IfcRelAssignsToGroup.h>
#include <ifc2x3/IfcRelContainedInSpatialStructure.h>
#include <ifc2x3/IfcRelSpaceBoundary.h>
#include <ifc2x3/IfcRelProjectsElement.h>
#include <ifc2x3/IfcFeatureElementAddition.h>
#include <ifc2x3/IfcRelConnectsPortToElement.h>
#include <ifc2x3/IfcPort.h>
#include <ifc2x3/IfcRelConnectsPorts.h>
#include <ifc2x3/IfcRelConnectsWithRealizingElements.h>
#include <ifc2x3/IfcFaceSurface.h>
#include <ifc2x3/IfcFaceBasedSurfaceModel.h>
#include <ifc2x3/Ifc2DCompositeCurve.h>
#include <ifc2x3/IfcCompositeCurve.h>
#include <ifc2x3/IfcCompositeCurveSegment.h>
#include <ifc2x3/IfcActionRequest.h>
#include <ifc2x3/IfcControl.h>
#include <ifc2x3/IfcRelAssignsToControl.h>
#include <ifc2x3/IfcActor.h>
#include <ifc2x3/IfcRelAssignsToActor.h>
#include <ifc2x3/IfcActuatorType.h>
#include <ifc2x3/IfcDistributionControlElementType.h>
#include <ifc2x3/IfcDistributionElementType.h>
#include <ifc2x3/IfcElementType.h>
#include <ifc2x3/IfcTypeProduct.h>
#include <ifc2x3/IfcTypeObject.h>
#include <ifc2x3/IfcPropertySetDefinition.h>
#include <ifc2x3/IfcPropertyDefinition.h>
#include <ifc2x3/IfcRelDefinesByProperties.h>
#include <ifc2x3/IfcRelDefinesByType.h>
#include <ifc2x3/IfcAirTerminalBoxType.h>
#include <ifc2x3/IfcFlowControllerType.h>
#include <ifc2x3/IfcDistributionFlowElementType.h>
#include <ifc2x3/IfcAirTerminalType.h>
#include <ifc2x3/IfcFlowTerminalType.h>
#include <ifc2x3/IfcAirToAirHeatRecoveryType.h>
#include <ifc2x3/IfcEnergyConversionDeviceType.h>
#include <ifc2x3/IfcAlarmType.h>
#include <ifc2x3/IfcAngularDimension.h>
#include <ifc2x3/IfcDimensionCurveDirectedCallout.h>
#include <ifc2x3/IfcDraughtingCallout.h>
#include <ifc2x3/IfcDraughtingCalloutRelationship.h>
#include <ifc2x3/IfcAnnotation.h>
#include <ifc2x3/IfcAnnotationFillArea.h>
#include <ifc2x3/IfcAnnotationFillAreaOccurrence.h>
#include <ifc2x3/IfcAnnotationSurface.h>
#include <ifc2x3/IfcTextureCoordinate.h>
#include <ifc2x3/IfcAnnotationSurfaceOccurrence.h>
#include <ifc2x3/IfcApproval.h>
#include <ifc2x3/IfcApprovalActorRelationship.h>
#include <ifc2x3/IfcApprovalRelationship.h>
#include <ifc2x3/IfcApprovalPropertyRelationship.h>
#include <ifc2x3/IfcProperty.h>
#include <ifc2x3/IfcPropertyDependencyRelationship.h>
#include <ifc2x3/IfcComplexProperty.h>
#include <ifc2x3/IfcArbitraryClosedProfileDef.h>
#include <ifc2x3/IfcProfileDef.h>
#include <ifc2x3/IfcArbitraryOpenProfileDef.h>
#include <ifc2x3/IfcArbitraryProfileDefWithVoids.h>
#include <ifc2x3/IfcAsset.h>
#include <ifc2x3/IfcAsymmetricIShapeProfileDef.h>
#include <ifc2x3/IfcIShapeProfileDef.h>
#include <ifc2x3/IfcParameterizedProfileDef.h>
#include <ifc2x3/IfcAxis1Placement.h>
#include <ifc2x3/IfcBSplineCurve.h>
#include <ifc2x3/IfcBeam.h>
#include <ifc2x3/IfcBeamType.h>
#include <ifc2x3/IfcBuildingElementType.h>
#include <ifc2x3/IfcBezierCurve.h>
#include <ifc2x3/IfcBlobTexture.h>
#include <ifc2x3/IfcBlock.h>
#include <ifc2x3/IfcBoilerType.h>
#include <ifc2x3/IfcBooleanClippingResult.h>
#include <ifc2x3/IfcBoundaryEdgeCondition.h>
#include <ifc2x3/IfcBoundaryFaceCondition.h>
#include <ifc2x3/IfcBoundaryNodeCondition.h>
#include <ifc2x3/IfcBoundaryNodeConditionWarping.h>
#include <ifc2x3/IfcBoundedSurface.h>
#include <ifc2x3/IfcBoundingBox.h>
#include <ifc2x3/IfcBoxedHalfSpace.h>
#include <ifc2x3/IfcBuilding.h>
#include <ifc2x3/IfcPostalAddress.h>
#include <ifc2x3/IfcBuildingElementComponent.h>
#include <ifc2x3/IfcBuildingElementPart.h>
#include <ifc2x3/IfcBuildingElementProxy.h>
#include <ifc2x3/IfcBuildingElementProxyType.h>
#include <ifc2x3/IfcBuildingStorey.h>
#include <ifc2x3/IfcCShapeProfileDef.h>
#include <ifc2x3/IfcCableCarrierFittingType.h>
#include <ifc2x3/IfcFlowFittingType.h>
#include <ifc2x3/IfcCableCarrierSegmentType.h>
#include <ifc2x3/IfcFlowSegmentType.h>
#include <ifc2x3/IfcCableSegmentType.h>
#include <ifc2x3/IfcCartesianTransformationOperator2DnonUniform.h>
#include <ifc2x3/IfcCartesianTransformationOperator3D.h>
#include <ifc2x3/IfcCartesianTransformationOperator3DnonUniform.h>
#include <ifc2x3/IfcCenterLineProfileDef.h>
#include <ifc2x3/IfcChamferEdgeFeature.h>
#include <ifc2x3/IfcEdgeFeature.h>
#include <ifc2x3/IfcChillerType.h>
#include <ifc2x3/IfcCircle.h>
#include <ifc2x3/IfcConic.h>
#include <ifc2x3/IfcCircleHollowProfileDef.h>
#include <ifc2x3/IfcCircleProfileDef.h>
#include <ifc2x3/IfcCoilType.h>
#include <ifc2x3/IfcColumn.h>
#include <ifc2x3/IfcColumnType.h>
#include <ifc2x3/IfcCompositeProfileDef.h>
#include <ifc2x3/IfcCompressorType.h>
#include <ifc2x3/IfcFlowMovingDeviceType.h>
#include <ifc2x3/IfcCondenserType.h>
#include <ifc2x3/IfcCondition.h>
#include <ifc2x3/IfcConditionCriterion.h>
#include <ifc2x3/IfcConnectionCurveGeometry.h>
#include <ifc2x3/IfcConnectionPointEccentricity.h>
#include <ifc2x3/IfcConnectionPointGeometry.h>
#include <ifc2x3/IfcConnectionPortGeometry.h>
#include <ifc2x3/IfcConnectionSurfaceGeometry.h>
#include <ifc2x3/IfcConstraint.h>
#include <ifc2x3/IfcConstraintClassificationRelationship.h>
#include <ifc2x3/IfcConstraintRelationship.h>
#include <ifc2x3/IfcPropertyConstraintRelationship.h>
#include <ifc2x3/IfcConstraintAggregationRelationship.h>
#include <ifc2x3/IfcConstructionEquipmentResource.h>
#include <ifc2x3/IfcConstructionResource.h>
#include <ifc2x3/IfcResource.h>
#include <ifc2x3/IfcRelAssignsToResource.h>
#include <ifc2x3/IfcConstructionMaterialResource.h>
#include <ifc2x3/IfcConstructionProductResource.h>
#include <ifc2x3/IfcContextDependentUnit.h>
#include <ifc2x3/IfcControllerType.h>
#include <ifc2x3/IfcConversionBasedUnit.h>
#include <ifc2x3/IfcCooledBeamType.h>
#include <ifc2x3/IfcCoolingTowerType.h>
#include <ifc2x3/IfcCostItem.h>
#include <ifc2x3/IfcCostSchedule.h>
#include <ifc2x3/IfcCoveringType.h>
#include <ifc2x3/IfcCraneRailAShapeProfileDef.h>
#include <ifc2x3/IfcCraneRailFShapeProfileDef.h>
#include <ifc2x3/IfcCrewResource.h>
#include <ifc2x3/IfcCsgSolid.h>
#include <ifc2x3/IfcCurrencyRelationship.h>
#include <ifc2x3/IfcCurtainWall.h>
#include <ifc2x3/IfcCurtainWallType.h>
#include <ifc2x3/IfcCurveBoundedPlane.h>
#include <ifc2x3/IfcPlane.h>
#include <ifc2x3/IfcElementarySurface.h>
#include <ifc2x3/IfcDamperType.h>
#include <ifc2x3/IfcDefinedSymbol.h>
#include <ifc2x3/IfcDerivedProfileDef.h>
#include <ifc2x3/IfcDiameterDimension.h>
#include <ifc2x3/IfcDimensionCalloutRelationship.h>
#include <ifc2x3/IfcDimensionCurve.h>
#include <ifc2x3/IfcTerminatorSymbol.h>
#include <ifc2x3/IfcDimensionCurveTerminator.h>
#include <ifc2x3/IfcDimensionPair.h>
#include <ifc2x3/IfcDiscreteAccessory.h>
#include <ifc2x3/IfcElementComponent.h>
#include <ifc2x3/IfcDiscreteAccessoryType.h>
#include <ifc2x3/IfcElementComponentType.h>
#include <ifc2x3/IfcDistributionChamberElement.h>
#include <ifc2x3/IfcDistributionFlowElement.h>
#include <ifc2x3/IfcDistributionElement.h>
#include <ifc2x3/IfcRelFlowControlElements.h>
#include <ifc2x3/IfcDistributionControlElement.h>
#include <ifc2x3/IfcDistributionChamberElementType.h>
#include <ifc2x3/IfcDistributionPort.h>
#include <ifc2x3/IfcDoor.h>
#include <ifc2x3/IfcDoorLiningProperties.h>
#include <ifc2x3/IfcShapeAspect.h>
#include <ifc2x3/IfcShapeModel.h>
#include <ifc2x3/IfcProductDefinitionShape.h>
#include <ifc2x3/IfcDoorPanelProperties.h>
#include <ifc2x3/IfcDoorStyle.h>
#include <ifc2x3/IfcDraughtingPreDefinedColour.h>
#include <ifc2x3/IfcDraughtingPreDefinedCurveFont.h>
#include <ifc2x3/IfcDraughtingPreDefinedTextFont.h>
#include <ifc2x3/IfcDuctFittingType.h>
#include <ifc2x3/IfcDuctSegmentType.h>
#include <ifc2x3/IfcDuctSilencerType.h>
#include <ifc2x3/IfcFlowTreatmentDeviceType.h>
#include <ifc2x3/IfcEdgeLoop.h>
#include <ifc2x3/IfcOrientedEdge.h>
#include <ifc2x3/IfcElectricApplianceType.h>
#include <ifc2x3/IfcElectricDistributionPoint.h>
#include <ifc2x3/IfcFlowController.h>
#include <ifc2x3/IfcElectricFlowStorageDeviceType.h>
#include <ifc2x3/IfcFlowStorageDeviceType.h>
#include <ifc2x3/IfcElectricGeneratorType.h>
#include <ifc2x3/IfcElectricHeaterType.h>
#include <ifc2x3/IfcElectricMotorType.h>
#include <ifc2x3/IfcElectricTimeControlType.h>
#include <ifc2x3/IfcElectricalBaseProperties.h>
#include <ifc2x3/IfcEnergyProperties.h>
#include <ifc2x3/IfcElectricalCircuit.h>
#include <ifc2x3/IfcElectricalElement.h>
#include <ifc2x3/IfcElementAssembly.h>
#include <ifc2x3/IfcElementQuantity.h>
#include <ifc2x3/IfcPhysicalQuantity.h>
#include <ifc2x3/IfcPhysicalComplexQuantity.h>
#include <ifc2x3/IfcEllipse.h>
#include <ifc2x3/IfcEllipseProfileDef.h>
#include <ifc2x3/IfcEnergyConversionDevice.h>
#include <ifc2x3/IfcEnvironmentalImpactValue.h>
#include <ifc2x3/IfcEquipmentElement.h>
#include <ifc2x3/IfcEquipmentStandard.h>
#include <ifc2x3/IfcEvaporativeCoolerType.h>
#include <ifc2x3/IfcEvaporatorType.h>
#include <ifc2x3/IfcExtendedMaterialProperties.h>
#include <ifc2x3/IfcMaterialProperties.h>
#include <ifc2x3/IfcExtrudedAreaSolid.h>
#include <ifc2x3/IfcSweptAreaSolid.h>
#include <ifc2x3/IfcFaceOuterBound.h>
#include <ifc2x3/IfcFacetedBrep.h>
#include <ifc2x3/IfcManifoldSolidBrep.h>
#include <ifc2x3/IfcFacetedBrepWithVoids.h>
#include <ifc2x3/IfcFailureConnectionCondition.h>
#include <ifc2x3/IfcFanType.h>
#include <ifc2x3/IfcFastener.h>
#include <ifc2x3/IfcFastenerType.h>
#include <ifc2x3/IfcFilterType.h>
#include <ifc2x3/IfcFireSuppressionTerminalType.h>
#include <ifc2x3/IfcFlowFitting.h>
#include <ifc2x3/IfcFlowInstrumentType.h>
#include <ifc2x3/IfcFlowMeterType.h>
#include <ifc2x3/IfcFlowMovingDevice.h>
#include <ifc2x3/IfcFlowSegment.h>
#include <ifc2x3/IfcFlowStorageDevice.h>
#include <ifc2x3/IfcFlowTerminal.h>
#include <ifc2x3/IfcFlowTreatmentDevice.h>
#include <ifc2x3/IfcFluidFlowProperties.h>
#include <ifc2x3/IfcFooting.h>
#include <ifc2x3/IfcFuelProperties.h>
#include <ifc2x3/IfcFurnishingElement.h>
#include <ifc2x3/IfcFurnishingElementType.h>
#include <ifc2x3/IfcFurnitureStandard.h>
#include <ifc2x3/IfcFurnitureType.h>
#include <ifc2x3/IfcGasTerminalType.h>
#include <ifc2x3/IfcGeneralMaterialProperties.h>
#include <ifc2x3/IfcGeneralProfileProperties.h>
#include <ifc2x3/IfcProfileProperties.h>
#include <ifc2x3/IfcGeometricCurveSet.h>
#include <ifc2x3/IfcGeometricSet.h>
#include <ifc2x3/IfcGeometricRepresentationContext.h>
#include <ifc2x3/IfcGeometricRepresentationSubContext.h>
#include <ifc2x3/IfcGrid.h>
#include <ifc2x3/IfcGridAxis.h>
#include <ifc2x3/IfcVirtualGridIntersection.h>
#include <ifc2x3/IfcGridPlacement.h>
#include <ifc2x3/IfcHeatExchangerType.h>
#include <ifc2x3/IfcHumidifierType.h>
#include <ifc2x3/IfcHygroscopicMaterialProperties.h>
#include <ifc2x3/IfcImageTexture.h>
#include <ifc2x3/IfcInventory.h>
#include <ifc2x3/IfcIrregularTimeSeries.h>
#include <ifc2x3/IfcIrregularTimeSeriesValue.h>
#include <ifc2x3/IfcJunctionBoxType.h>
#include <ifc2x3/IfcLShapeProfileDef.h>
#include <ifc2x3/IfcLaborResource.h>
#include <ifc2x3/IfcLampType.h>
#include <ifc2x3/IfcLightFixtureType.h>
#include <ifc2x3/IfcLightSource.h>
#include <ifc2x3/IfcLightSourceAmbient.h>
#include <ifc2x3/IfcLightSourceDirectional.h>
#include <ifc2x3/IfcLightSourceGoniometric.h>
#include <ifc2x3/IfcLightSourcePositional.h>
#include <ifc2x3/IfcLightSourceSpot.h>
#include <ifc2x3/IfcLine.h>
#include <ifc2x3/IfcLinearDimension.h>
#include <ifc2x3/IfcMechanicalConcreteMaterialProperties.h>
#include <ifc2x3/IfcMechanicalMaterialProperties.h>
#include <ifc2x3/IfcMechanicalFastener.h>
#include <ifc2x3/IfcMechanicalFastenerType.h>
#include <ifc2x3/IfcMechanicalSteelMaterialProperties.h>
#include <ifc2x3/IfcRelaxation.h>
#include <ifc2x3/IfcMember.h>
#include <ifc2x3/IfcMemberType.h>
#include <ifc2x3/IfcMetric.h>
#include <ifc2x3/IfcMotorConnectionType.h>
#include <ifc2x3/IfcMove.h>
#include <ifc2x3/IfcTask.h>
#include <ifc2x3/IfcProcess.h>
#include <ifc2x3/IfcRelAssignsToProcess.h>
#include <ifc2x3/IfcRelSequence.h>
#include <ifc2x3/IfcObjective.h>
#include <ifc2x3/IfcOccupant.h>
#include <ifc2x3/IfcOffsetCurve2D.h>
#include <ifc2x3/IfcOffsetCurve3D.h>
#include <ifc2x3/IfcOpticalMaterialProperties.h>
#include <ifc2x3/IfcOrderAction.h>
#include <ifc2x3/IfcOutletType.h>
#include <ifc2x3/IfcPath.h>
#include <ifc2x3/IfcPerformanceHistory.h>
#include <ifc2x3/IfcPermeableCoveringProperties.h>
#include <ifc2x3/IfcPermit.h>
#include <ifc2x3/IfcPhysicalSimpleQuantity.h>
#include <ifc2x3/IfcPile.h>
#include <ifc2x3/IfcPipeFittingType.h>
#include <ifc2x3/IfcPipeSegmentType.h>
#include <ifc2x3/IfcPixelTexture.h>
#include <ifc2x3/IfcPlanarBox.h>
#include <ifc2x3/IfcPlanarExtent.h>
#include <ifc2x3/IfcPlate.h>
#include <ifc2x3/IfcPlateType.h>
#include <ifc2x3/IfcPointOnCurve.h>
#include <ifc2x3/IfcPointOnSurface.h>
#include <ifc2x3/IfcPolyLoop.h>
#include <ifc2x3/IfcPolygonalBoundedHalfSpace.h>
#include <ifc2x3/IfcPolyline.h>
#include <ifc2x3/IfcPreDefinedDimensionSymbol.h>
#include <ifc2x3/IfcPreDefinedPointMarkerSymbol.h>
#include <ifc2x3/IfcPreDefinedTerminatorSymbol.h>
#include <ifc2x3/IfcPresentationLayerWithStyle.h>
#include <ifc2x3/IfcProcedure.h>
#include <ifc2x3/IfcProductsOfCombustionProperties.h>
#include <ifc2x3/IfcProject.h>
#include <ifc2x3/IfcUnitAssignment.h>
#include <ifc2x3/IfcProjectOrder.h>
#include <ifc2x3/IfcProjectOrderRecord.h>
#include <ifc2x3/IfcRelAssignsToProjectOrder.h>
#include <ifc2x3/IfcProjectionCurve.h>
#include <ifc2x3/IfcProjectionElement.h>
#include <ifc2x3/IfcPropertyBoundedValue.h>
#include <ifc2x3/IfcSimpleProperty.h>
#include <ifc2x3/IfcPropertyEnumeratedValue.h>
#include <ifc2x3/IfcPropertyEnumeration.h>
#include <ifc2x3/IfcPropertyListValue.h>
#include <ifc2x3/IfcPropertyReferenceValue.h>
#include <ifc2x3/IfcPropertySet.h>
#include <ifc2x3/IfcPropertySingleValue.h>
#include <ifc2x3/IfcPropertyTableValue.h>
#include <ifc2x3/IfcProtectiveDeviceType.h>
#include <ifc2x3/IfcProxy.h>
#include <ifc2x3/IfcPumpType.h>
#include <ifc2x3/IfcQuantityArea.h>
#include <ifc2x3/IfcQuantityCount.h>
#include <ifc2x3/IfcQuantityLength.h>
#include <ifc2x3/IfcQuantityTime.h>
#include <ifc2x3/IfcQuantityVolume.h>
#include <ifc2x3/IfcQuantityWeight.h>
#include <ifc2x3/IfcRadiusDimension.h>
#include <ifc2x3/IfcRailing.h>
#include <ifc2x3/IfcRailingType.h>
#include <ifc2x3/IfcRamp.h>
#include <ifc2x3/IfcRampFlight.h>
#include <ifc2x3/IfcRampFlightType.h>
#include <ifc2x3/IfcRationalBezierCurve.h>
#include <ifc2x3/IfcRectangleHollowProfileDef.h>
#include <ifc2x3/IfcRectangleProfileDef.h>
#include <ifc2x3/IfcRectangularPyramid.h>
#include <ifc2x3/IfcRectangularTrimmedSurface.h>
#include <ifc2x3/IfcRegularTimeSeries.h>
#include <ifc2x3/IfcTimeSeriesValue.h>
#include <ifc2x3/IfcReinforcementBarProperties.h>
#include <ifc2x3/IfcReinforcementDefinitionProperties.h>
#include <ifc2x3/IfcSectionReinforcementProperties.h>
#include <ifc2x3/IfcSectionProperties.h>
#include <ifc2x3/IfcReinforcingBar.h>
#include <ifc2x3/IfcReinforcingElement.h>
#include <ifc2x3/IfcReinforcingMesh.h>
#include <ifc2x3/IfcRelAggregates.h>
#include <ifc2x3/IfcRelAssignsTasks.h>
#include <ifc2x3/IfcScheduleTimeControl.h>
#include <ifc2x3/IfcRelAssociatesAppliedValue.h>
#include <ifc2x3/IfcRelAssociatesApproval.h>
#include <ifc2x3/IfcRelAssociatesClassification.h>
#include <ifc2x3/IfcRelAssociatesConstraint.h>
#include <ifc2x3/IfcRelAssociatesDocument.h>
#include <ifc2x3/IfcRelAssociatesLibrary.h>
#include <ifc2x3/IfcRelAssociatesMaterial.h>
#include <ifc2x3/IfcRelAssociatesProfileProperties.h>
#include <ifc2x3/IfcRelConnectsPathElements.h>
#include <ifc2x3/IfcRelConnectsWithEccentricity.h>
#include <ifc2x3/IfcRelInteractionRequirements.h>
#include <ifc2x3/IfcSpaceProgram.h>
#include <ifc2x3/IfcRelNests.h>
#include <ifc2x3/IfcRelOccupiesSpaces.h>
#include <ifc2x3/IfcRelOverridesProperties.h>
#include <ifc2x3/IfcRelSchedulesCostItems.h>
#include <ifc2x3/IfcRevolvedAreaSolid.h>
#include <ifc2x3/IfcRibPlateProfileProperties.h>
#include <ifc2x3/IfcRightCircularCone.h>
#include <ifc2x3/IfcRightCircularCylinder.h>
#include <ifc2x3/IfcRoof.h>
#include <ifc2x3/IfcRoundedEdgeFeature.h>
#include <ifc2x3/IfcRoundedRectangleProfileDef.h>
#include <ifc2x3/IfcSIUnit.h>
#include <ifc2x3/IfcSanitaryTerminalType.h>
#include <ifc2x3/IfcSectionedSpine.h>
#include <ifc2x3/IfcSensorType.h>
#include <ifc2x3/IfcServiceLife.h>
#include <ifc2x3/IfcServiceLifeFactor.h>
#include <ifc2x3/IfcShapeRepresentation.h>
#include <ifc2x3/IfcShellBasedSurfaceModel.h>
#include <ifc2x3/IfcSite.h>
#include <ifc2x3/IfcSlab.h>
#include <ifc2x3/IfcSlabType.h>
#include <ifc2x3/IfcSlippageConnectionCondition.h>
#include <ifc2x3/IfcSoundProperties.h>
#include <ifc2x3/IfcSoundValue.h>
#include <ifc2x3/IfcSpaceHeaterType.h>
#include <ifc2x3/IfcSpaceThermalLoadProperties.h>
#include <ifc2x3/IfcSpaceType.h>
#include <ifc2x3/IfcSpatialStructureElementType.h>
#include <ifc2x3/IfcSphere.h>
#include <ifc2x3/IfcStackTerminalType.h>
#include <ifc2x3/IfcStair.h>
#include <ifc2x3/IfcStairFlight.h>
#include <ifc2x3/IfcStairFlightType.h>
#include <ifc2x3/IfcStructuralAction.h>
#include <ifc2x3/IfcStructuralReaction.h>
#include <ifc2x3/IfcStructuralAnalysisModel.h>
#include <ifc2x3/IfcStructuralLoadGroup.h>
#include <ifc2x3/IfcStructuralResultGroup.h>
#include <ifc2x3/IfcStructuralCurveConnection.h>
#include <ifc2x3/IfcStructuralCurveMember.h>
#include <ifc2x3/IfcStructuralCurveMemberVarying.h>
#include <ifc2x3/IfcStructuralLinearAction.h>
#include <ifc2x3/IfcStructuralLinearActionVarying.h>
#include <ifc2x3/IfcStructuralLoadLinearForce.h>
#include <ifc2x3/IfcStructuralLoadStatic.h>
#include <ifc2x3/IfcStructuralLoadPlanarForce.h>
#include <ifc2x3/IfcStructuralLoadSingleDisplacement.h>
#include <ifc2x3/IfcStructuralLoadSingleDisplacementDistortion.h>
#include <ifc2x3/IfcStructuralLoadSingleForce.h>
#include <ifc2x3/IfcStructuralLoadSingleForceWarping.h>
#include <ifc2x3/IfcStructuralLoadTemperature.h>
#include <ifc2x3/IfcStructuralPlanarAction.h>
#include <ifc2x3/IfcStructuralPlanarActionVarying.h>
#include <ifc2x3/IfcStructuralPointAction.h>
#include <ifc2x3/IfcStructuralPointConnection.h>
#include <ifc2x3/IfcStructuralPointReaction.h>
#include <ifc2x3/IfcStructuralProfileProperties.h>
#include <ifc2x3/IfcStructuralSteelProfileProperties.h>
#include <ifc2x3/IfcStructuralSurfaceConnection.h>
#include <ifc2x3/IfcStructuralSurfaceMember.h>
#include <ifc2x3/IfcStructuralSurfaceMemberVarying.h>
#include <ifc2x3/IfcStructuredDimensionCallout.h>
#include <ifc2x3/IfcStyleModel.h>
#include <ifc2x3/IfcStyledRepresentation.h>
#include <ifc2x3/IfcSubContractResource.h>
#include <ifc2x3/IfcSubedge.h>
#include <ifc2x3/IfcSurfaceCurveSweptAreaSolid.h>
#include <ifc2x3/IfcSurfaceOfLinearExtrusion.h>
#include <ifc2x3/IfcSweptSurface.h>
#include <ifc2x3/IfcSurfaceOfRevolution.h>
#include <ifc2x3/IfcSurfaceStyleRendering.h>
#include <ifc2x3/IfcSweptDiskSolid.h>
#include <ifc2x3/IfcSwitchingDeviceType.h>
#include <ifc2x3/IfcSystemFurnitureElementType.h>
#include <ifc2x3/IfcTShapeProfileDef.h>
#include <ifc2x3/IfcTankType.h>
#include <ifc2x3/IfcTelecomAddress.h>
#include <ifc2x3/IfcTendon.h>
#include <ifc2x3/IfcTendonAnchor.h>
#include <ifc2x3/IfcTextLiteral.h>
#include <ifc2x3/IfcTextLiteralWithExtent.h>
#include <ifc2x3/IfcTextStyleFontModel.h>
#include <ifc2x3/IfcTextureCoordinateGenerator.h>
#include <ifc2x3/IfcTextureMap.h>
#include <ifc2x3/IfcVertexBasedTextureMap.h>
#include <ifc2x3/IfcTextureVertex.h>
#include <ifc2x3/IfcThermalMaterialProperties.h>
#include <ifc2x3/IfcTimeSeriesSchedule.h>
#include <ifc2x3/IfcTopologyRepresentation.h>
#include <ifc2x3/IfcTransformerType.h>
#include <ifc2x3/IfcTransportElement.h>
#include <ifc2x3/IfcTransportElementType.h>
#include <ifc2x3/IfcTrapeziumProfileDef.h>
#include <ifc2x3/IfcTrimmedCurve.h>
#include <ifc2x3/IfcTubeBundleType.h>
#include <ifc2x3/IfcTwoDirectionRepeatFactor.h>
#include <ifc2x3/IfcUShapeProfileDef.h>
#include <ifc2x3/IfcUnitaryEquipmentType.h>
#include <ifc2x3/IfcValveType.h>
#include <ifc2x3/IfcVertexLoop.h>
#include <ifc2x3/IfcVibrationIsolatorType.h>
#include <ifc2x3/IfcVirtualElement.h>
#include <ifc2x3/IfcWall.h>
#include <ifc2x3/IfcWallStandardCase.h>
#include <ifc2x3/IfcWallType.h>
#include <ifc2x3/IfcWasteTerminalType.h>
#include <ifc2x3/IfcWaterProperties.h>
#include <ifc2x3/IfcWindow.h>
#include <ifc2x3/IfcWindowLiningProperties.h>
#include <ifc2x3/IfcWindowPanelProperties.h>
#include <ifc2x3/IfcWindowStyle.h>
#include <ifc2x3/IfcWorkControl.h>
#include <ifc2x3/IfcWorkPlan.h>
#include <ifc2x3/IfcWorkSchedule.h>
#include <ifc2x3/IfcZShapeProfileDef.h>
#include <ifc2x3/IfcZone.h>

#include <Step/BaseExpressDataSet.h>
#include <Step/RefLinkedList.h>

namespace ifc2x3
{
    class CopyOp;

    /**
     * The ExpressDataSet generated for the ifc2x3 schema.
     * 
     * It contains all the methods necessary to get, remove, create or clone entities.
     * It also contains methods to get a list of all entities of a certain type (including sub-types).
     */
    class IFC2X3_EXPORT ExpressDataSet : public Step::BaseExpressDataSet
    {
    public:
        ExpressDataSet();
        virtual ~ExpressDataSet();

        /**
         * Get the Ifc2DCompositeCurve entity by it's Id.
         * 
         * @param id The Id of the Ifc2DCompositeCurve.
         * @return A pointer to the Ifc2DCompositeCurve if found, NULL otherwise.
         */
        Ifc2DCompositeCurve *getIfc2DCompositeCurve(Step::Id id);
        /**
         * Removes a Ifc2DCompositeCurve Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the Ifc2DCompositeCurve to remove.
         * @return success.
         */
        bool removeIfc2DCompositeCurve(Ifc2DCompositeCurve *arg);
        /**
         * Create an Ifc2DCompositeCurve Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated Ifc2DCompositeCurve entity.
         */
        Step::RefPtr< Ifc2DCompositeCurve > createIfc2DCompositeCurve(bool isVolatile = false);
        /**
         * Clone an Ifc2DCompositeCurve Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The Ifc2DCompositeCurve Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        Ifc2DCompositeCurve *cloneIfc2DCompositeCurve(const Ifc2DCompositeCurve &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given Ifc2DCompositeCurve Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the Ifc2DCompositeCurve entities.
         */
        Step::RefLinkedList< Ifc2DCompositeCurve > &getAllIfc2DCompositeCurve();
        /**
         * Get the IfcActionRequest entity by it's Id.
         * 
         * @param id The Id of the IfcActionRequest.
         * @return A pointer to the IfcActionRequest if found, NULL otherwise.
         */
        IfcActionRequest *getIfcActionRequest(Step::Id id);
        /**
         * Removes a IfcActionRequest Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcActionRequest to remove.
         * @return success.
         */
        bool removeIfcActionRequest(IfcActionRequest *arg);
        /**
         * Create an IfcActionRequest Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcActionRequest entity.
         */
        Step::RefPtr< IfcActionRequest > createIfcActionRequest(bool isVolatile = false);
        /**
         * Clone an IfcActionRequest Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcActionRequest Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcActionRequest *cloneIfcActionRequest(const IfcActionRequest &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcActionRequest Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcActionRequest entities.
         */
        Step::RefLinkedList< IfcActionRequest > &getAllIfcActionRequest();
        /**
         * Get the IfcActor entity by it's Id.
         * 
         * @param id The Id of the IfcActor.
         * @return A pointer to the IfcActor if found, NULL otherwise.
         */
        IfcActor *getIfcActor(Step::Id id);
        /**
         * Removes a IfcActor Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcActor to remove.
         * @return success.
         */
        bool removeIfcActor(IfcActor *arg);
        /**
         * Create an IfcActor Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcActor entity.
         */
        Step::RefPtr< IfcActor > createIfcActor(bool isVolatile = false);
        /**
         * Clone an IfcActor Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcActor Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcActor *cloneIfcActor(const IfcActor &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcActor Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcActor entities.
         */
        Step::RefLinkedList< IfcActor > &getAllIfcActor();
        /**
         * Get the IfcActorRole entity by it's Id.
         * 
         * @param id The Id of the IfcActorRole.
         * @return A pointer to the IfcActorRole if found, NULL otherwise.
         */
        IfcActorRole *getIfcActorRole(Step::Id id);
        /**
         * Removes a IfcActorRole Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcActorRole to remove.
         * @return success.
         */
        bool removeIfcActorRole(IfcActorRole *arg);
        /**
         * Create an IfcActorRole Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcActorRole entity.
         */
        Step::RefPtr< IfcActorRole > createIfcActorRole(bool isVolatile = false);
        /**
         * Clone an IfcActorRole Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcActorRole Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcActorRole *cloneIfcActorRole(const IfcActorRole &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcActorRole Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcActorRole entities.
         */
        Step::RefLinkedList< IfcActorRole > &getAllIfcActorRole();
        /**
         * Get the IfcActuatorType entity by it's Id.
         * 
         * @param id The Id of the IfcActuatorType.
         * @return A pointer to the IfcActuatorType if found, NULL otherwise.
         */
        IfcActuatorType *getIfcActuatorType(Step::Id id);
        /**
         * Removes a IfcActuatorType Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcActuatorType to remove.
         * @return success.
         */
        bool removeIfcActuatorType(IfcActuatorType *arg);
        /**
         * Create an IfcActuatorType Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcActuatorType entity.
         */
        Step::RefPtr< IfcActuatorType > createIfcActuatorType(bool isVolatile = false);
        /**
         * Clone an IfcActuatorType Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcActuatorType Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcActuatorType *cloneIfcActuatorType(const IfcActuatorType &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcActuatorType Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcActuatorType entities.
         */
        Step::RefLinkedList< IfcActuatorType > &getAllIfcActuatorType();
        /**
         * Get the IfcAddress entity by it's Id.
         * 
         * @param id The Id of the IfcAddress.
         * @return A pointer to the IfcAddress if found, NULL otherwise.
         */
        IfcAddress *getIfcAddress(Step::Id id);
        /**
         * Removes a IfcAddress Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcAddress to remove.
         * @return success.
         */
        bool removeIfcAddress(IfcAddress *arg);
        /**
         * Create an IfcAddress Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcAddress entity.
         */
        Step::RefPtr< IfcAddress > createIfcAddress(bool isVolatile = false);
        /**
         * Clone an IfcAddress Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcAddress Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcAddress *cloneIfcAddress(const IfcAddress &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcAddress Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcAddress entities.
         */
        Step::RefLinkedList< IfcAddress > &getAllIfcAddress();
        /**
         * Get the IfcAirTerminalBoxType entity by it's Id.
         * 
         * @param id The Id of the IfcAirTerminalBoxType.
         * @return A pointer to the IfcAirTerminalBoxType if found, NULL otherwise.
         */
        IfcAirTerminalBoxType *getIfcAirTerminalBoxType(Step::Id id);
        /**
         * Removes a IfcAirTerminalBoxType Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcAirTerminalBoxType to remove.
         * @return success.
         */
        bool removeIfcAirTerminalBoxType(IfcAirTerminalBoxType *arg);
        /**
         * Create an IfcAirTerminalBoxType Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcAirTerminalBoxType entity.
         */
        Step::RefPtr< IfcAirTerminalBoxType > createIfcAirTerminalBoxType(bool isVolatile = false);
        /**
         * Clone an IfcAirTerminalBoxType Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcAirTerminalBoxType Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcAirTerminalBoxType *cloneIfcAirTerminalBoxType(const IfcAirTerminalBoxType &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcAirTerminalBoxType Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcAirTerminalBoxType entities.
         */
        Step::RefLinkedList< IfcAirTerminalBoxType > &getAllIfcAirTerminalBoxType();
        /**
         * Get the IfcAirTerminalType entity by it's Id.
         * 
         * @param id The Id of the IfcAirTerminalType.
         * @return A pointer to the IfcAirTerminalType if found, NULL otherwise.
         */
        IfcAirTerminalType *getIfcAirTerminalType(Step::Id id);
        /**
         * Removes a IfcAirTerminalType Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcAirTerminalType to remove.
         * @return success.
         */
        bool removeIfcAirTerminalType(IfcAirTerminalType *arg);
        /**
         * Create an IfcAirTerminalType Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcAirTerminalType entity.
         */
        Step::RefPtr< IfcAirTerminalType > createIfcAirTerminalType(bool isVolatile = false);
        /**
         * Clone an IfcAirTerminalType Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcAirTerminalType Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcAirTerminalType *cloneIfcAirTerminalType(const IfcAirTerminalType &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcAirTerminalType Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcAirTerminalType entities.
         */
        Step::RefLinkedList< IfcAirTerminalType > &getAllIfcAirTerminalType();
        /**
         * Get the IfcAirToAirHeatRecoveryType entity by it's Id.
         * 
         * @param id The Id of the IfcAirToAirHeatRecoveryType.
         * @return A pointer to the IfcAirToAirHeatRecoveryType if found, NULL otherwise.
         */
        IfcAirToAirHeatRecoveryType *getIfcAirToAirHeatRecoveryType(Step::Id id);
        /**
         * Removes a IfcAirToAirHeatRecoveryType Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcAirToAirHeatRecoveryType to remove.
         * @return success.
         */
        bool removeIfcAirToAirHeatRecoveryType(IfcAirToAirHeatRecoveryType *arg);
        /**
         * Create an IfcAirToAirHeatRecoveryType Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcAirToAirHeatRecoveryType entity.
         */
        Step::RefPtr< IfcAirToAirHeatRecoveryType > createIfcAirToAirHeatRecoveryType(bool isVolatile = false);
        /**
         * Clone an IfcAirToAirHeatRecoveryType Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcAirToAirHeatRecoveryType Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcAirToAirHeatRecoveryType *cloneIfcAirToAirHeatRecoveryType(const IfcAirToAirHeatRecoveryType &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcAirToAirHeatRecoveryType Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcAirToAirHeatRecoveryType entities.
         */
        Step::RefLinkedList< IfcAirToAirHeatRecoveryType > &getAllIfcAirToAirHeatRecoveryType();
        /**
         * Get the IfcAlarmType entity by it's Id.
         * 
         * @param id The Id of the IfcAlarmType.
         * @return A pointer to the IfcAlarmType if found, NULL otherwise.
         */
        IfcAlarmType *getIfcAlarmType(Step::Id id);
        /**
         * Removes a IfcAlarmType Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcAlarmType to remove.
         * @return success.
         */
        bool removeIfcAlarmType(IfcAlarmType *arg);
        /**
         * Create an IfcAlarmType Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcAlarmType entity.
         */
        Step::RefPtr< IfcAlarmType > createIfcAlarmType(bool isVolatile = false);
        /**
         * Clone an IfcAlarmType Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcAlarmType Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcAlarmType *cloneIfcAlarmType(const IfcAlarmType &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcAlarmType Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcAlarmType entities.
         */
        Step::RefLinkedList< IfcAlarmType > &getAllIfcAlarmType();
        /**
         * Get the IfcAngularDimension entity by it's Id.
         * 
         * @param id The Id of the IfcAngularDimension.
         * @return A pointer to the IfcAngularDimension if found, NULL otherwise.
         */
        IfcAngularDimension *getIfcAngularDimension(Step::Id id);
        /**
         * Removes a IfcAngularDimension Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcAngularDimension to remove.
         * @return success.
         */
        bool removeIfcAngularDimension(IfcAngularDimension *arg);
        /**
         * Create an IfcAngularDimension Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcAngularDimension entity.
         */
        Step::RefPtr< IfcAngularDimension > createIfcAngularDimension(bool isVolatile = false);
        /**
         * Clone an IfcAngularDimension Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcAngularDimension Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcAngularDimension *cloneIfcAngularDimension(const IfcAngularDimension &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcAngularDimension Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcAngularDimension entities.
         */
        Step::RefLinkedList< IfcAngularDimension > &getAllIfcAngularDimension();
        /**
         * Get the IfcAnnotation entity by it's Id.
         * 
         * @param id The Id of the IfcAnnotation.
         * @return A pointer to the IfcAnnotation if found, NULL otherwise.
         */
        IfcAnnotation *getIfcAnnotation(Step::Id id);
        /**
         * Removes a IfcAnnotation Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcAnnotation to remove.
         * @return success.
         */
        bool removeIfcAnnotation(IfcAnnotation *arg);
        /**
         * Create an IfcAnnotation Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcAnnotation entity.
         */
        Step::RefPtr< IfcAnnotation > createIfcAnnotation(bool isVolatile = false);
        /**
         * Clone an IfcAnnotation Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcAnnotation Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcAnnotation *cloneIfcAnnotation(const IfcAnnotation &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcAnnotation Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcAnnotation entities.
         */
        Step::RefLinkedList< IfcAnnotation > &getAllIfcAnnotation();
        /**
         * Get the IfcAnnotationCurveOccurrence entity by it's Id.
         * 
         * @param id The Id of the IfcAnnotationCurveOccurrence.
         * @return A pointer to the IfcAnnotationCurveOccurrence if found, NULL otherwise.
         */
        IfcAnnotationCurveOccurrence *getIfcAnnotationCurveOccurrence(Step::Id id);
        /**
         * Removes a IfcAnnotationCurveOccurrence Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcAnnotationCurveOccurrence to remove.
         * @return success.
         */
        bool removeIfcAnnotationCurveOccurrence(IfcAnnotationCurveOccurrence *arg);
        /**
         * Create an IfcAnnotationCurveOccurrence Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcAnnotationCurveOccurrence entity.
         */
        Step::RefPtr< IfcAnnotationCurveOccurrence > createIfcAnnotationCurveOccurrence(bool isVolatile = false);
        /**
         * Clone an IfcAnnotationCurveOccurrence Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcAnnotationCurveOccurrence Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcAnnotationCurveOccurrence *cloneIfcAnnotationCurveOccurrence(const IfcAnnotationCurveOccurrence &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcAnnotationCurveOccurrence Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcAnnotationCurveOccurrence entities.
         */
        Step::RefLinkedList< IfcAnnotationCurveOccurrence > &getAllIfcAnnotationCurveOccurrence();
        /**
         * Get the IfcAnnotationFillArea entity by it's Id.
         * 
         * @param id The Id of the IfcAnnotationFillArea.
         * @return A pointer to the IfcAnnotationFillArea if found, NULL otherwise.
         */
        IfcAnnotationFillArea *getIfcAnnotationFillArea(Step::Id id);
        /**
         * Removes a IfcAnnotationFillArea Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcAnnotationFillArea to remove.
         * @return success.
         */
        bool removeIfcAnnotationFillArea(IfcAnnotationFillArea *arg);
        /**
         * Create an IfcAnnotationFillArea Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcAnnotationFillArea entity.
         */
        Step::RefPtr< IfcAnnotationFillArea > createIfcAnnotationFillArea(bool isVolatile = false);
        /**
         * Clone an IfcAnnotationFillArea Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcAnnotationFillArea Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcAnnotationFillArea *cloneIfcAnnotationFillArea(const IfcAnnotationFillArea &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcAnnotationFillArea Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcAnnotationFillArea entities.
         */
        Step::RefLinkedList< IfcAnnotationFillArea > &getAllIfcAnnotationFillArea();
        /**
         * Get the IfcAnnotationFillAreaOccurrence entity by it's Id.
         * 
         * @param id The Id of the IfcAnnotationFillAreaOccurrence.
         * @return A pointer to the IfcAnnotationFillAreaOccurrence if found, NULL otherwise.
         */
        IfcAnnotationFillAreaOccurrence *getIfcAnnotationFillAreaOccurrence(Step::Id id);
        /**
         * Removes a IfcAnnotationFillAreaOccurrence Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcAnnotationFillAreaOccurrence to remove.
         * @return success.
         */
        bool removeIfcAnnotationFillAreaOccurrence(IfcAnnotationFillAreaOccurrence *arg);
        /**
         * Create an IfcAnnotationFillAreaOccurrence Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcAnnotationFillAreaOccurrence entity.
         */
        Step::RefPtr< IfcAnnotationFillAreaOccurrence > createIfcAnnotationFillAreaOccurrence(bool isVolatile = false);
        /**
         * Clone an IfcAnnotationFillAreaOccurrence Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcAnnotationFillAreaOccurrence Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcAnnotationFillAreaOccurrence *cloneIfcAnnotationFillAreaOccurrence(const IfcAnnotationFillAreaOccurrence &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcAnnotationFillAreaOccurrence Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcAnnotationFillAreaOccurrence entities.
         */
        Step::RefLinkedList< IfcAnnotationFillAreaOccurrence > &getAllIfcAnnotationFillAreaOccurrence();
        /**
         * Get the IfcAnnotationOccurrence entity by it's Id.
         * 
         * @param id The Id of the IfcAnnotationOccurrence.
         * @return A pointer to the IfcAnnotationOccurrence if found, NULL otherwise.
         */
        IfcAnnotationOccurrence *getIfcAnnotationOccurrence(Step::Id id);
        /**
         * Removes a IfcAnnotationOccurrence Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcAnnotationOccurrence to remove.
         * @return success.
         */
        bool removeIfcAnnotationOccurrence(IfcAnnotationOccurrence *arg);
        /**
         * Create an IfcAnnotationOccurrence Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcAnnotationOccurrence entity.
         */
        Step::RefPtr< IfcAnnotationOccurrence > createIfcAnnotationOccurrence(bool isVolatile = false);
        /**
         * Clone an IfcAnnotationOccurrence Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcAnnotationOccurrence Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcAnnotationOccurrence *cloneIfcAnnotationOccurrence(const IfcAnnotationOccurrence &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcAnnotationOccurrence Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcAnnotationOccurrence entities.
         */
        Step::RefLinkedList< IfcAnnotationOccurrence > &getAllIfcAnnotationOccurrence();
        /**
         * Get the IfcAnnotationSurface entity by it's Id.
         * 
         * @param id The Id of the IfcAnnotationSurface.
         * @return A pointer to the IfcAnnotationSurface if found, NULL otherwise.
         */
        IfcAnnotationSurface *getIfcAnnotationSurface(Step::Id id);
        /**
         * Removes a IfcAnnotationSurface Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcAnnotationSurface to remove.
         * @return success.
         */
        bool removeIfcAnnotationSurface(IfcAnnotationSurface *arg);
        /**
         * Create an IfcAnnotationSurface Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcAnnotationSurface entity.
         */
        Step::RefPtr< IfcAnnotationSurface > createIfcAnnotationSurface(bool isVolatile = false);
        /**
         * Clone an IfcAnnotationSurface Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcAnnotationSurface Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcAnnotationSurface *cloneIfcAnnotationSurface(const IfcAnnotationSurface &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcAnnotationSurface Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcAnnotationSurface entities.
         */
        Step::RefLinkedList< IfcAnnotationSurface > &getAllIfcAnnotationSurface();
        /**
         * Get the IfcAnnotationSurfaceOccurrence entity by it's Id.
         * 
         * @param id The Id of the IfcAnnotationSurfaceOccurrence.
         * @return A pointer to the IfcAnnotationSurfaceOccurrence if found, NULL otherwise.
         */
        IfcAnnotationSurfaceOccurrence *getIfcAnnotationSurfaceOccurrence(Step::Id id);
        /**
         * Removes a IfcAnnotationSurfaceOccurrence Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcAnnotationSurfaceOccurrence to remove.
         * @return success.
         */
        bool removeIfcAnnotationSurfaceOccurrence(IfcAnnotationSurfaceOccurrence *arg);
        /**
         * Create an IfcAnnotationSurfaceOccurrence Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcAnnotationSurfaceOccurrence entity.
         */
        Step::RefPtr< IfcAnnotationSurfaceOccurrence > createIfcAnnotationSurfaceOccurrence(bool isVolatile = false);
        /**
         * Clone an IfcAnnotationSurfaceOccurrence Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcAnnotationSurfaceOccurrence Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcAnnotationSurfaceOccurrence *cloneIfcAnnotationSurfaceOccurrence(const IfcAnnotationSurfaceOccurrence &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcAnnotationSurfaceOccurrence Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcAnnotationSurfaceOccurrence entities.
         */
        Step::RefLinkedList< IfcAnnotationSurfaceOccurrence > &getAllIfcAnnotationSurfaceOccurrence();
        /**
         * Get the IfcAnnotationSymbolOccurrence entity by it's Id.
         * 
         * @param id The Id of the IfcAnnotationSymbolOccurrence.
         * @return A pointer to the IfcAnnotationSymbolOccurrence if found, NULL otherwise.
         */
        IfcAnnotationSymbolOccurrence *getIfcAnnotationSymbolOccurrence(Step::Id id);
        /**
         * Removes a IfcAnnotationSymbolOccurrence Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcAnnotationSymbolOccurrence to remove.
         * @return success.
         */
        bool removeIfcAnnotationSymbolOccurrence(IfcAnnotationSymbolOccurrence *arg);
        /**
         * Create an IfcAnnotationSymbolOccurrence Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcAnnotationSymbolOccurrence entity.
         */
        Step::RefPtr< IfcAnnotationSymbolOccurrence > createIfcAnnotationSymbolOccurrence(bool isVolatile = false);
        /**
         * Clone an IfcAnnotationSymbolOccurrence Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcAnnotationSymbolOccurrence Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcAnnotationSymbolOccurrence *cloneIfcAnnotationSymbolOccurrence(const IfcAnnotationSymbolOccurrence &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcAnnotationSymbolOccurrence Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcAnnotationSymbolOccurrence entities.
         */
        Step::RefLinkedList< IfcAnnotationSymbolOccurrence > &getAllIfcAnnotationSymbolOccurrence();
        /**
         * Get the IfcAnnotationTextOccurrence entity by it's Id.
         * 
         * @param id The Id of the IfcAnnotationTextOccurrence.
         * @return A pointer to the IfcAnnotationTextOccurrence if found, NULL otherwise.
         */
        IfcAnnotationTextOccurrence *getIfcAnnotationTextOccurrence(Step::Id id);
        /**
         * Removes a IfcAnnotationTextOccurrence Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcAnnotationTextOccurrence to remove.
         * @return success.
         */
        bool removeIfcAnnotationTextOccurrence(IfcAnnotationTextOccurrence *arg);
        /**
         * Create an IfcAnnotationTextOccurrence Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcAnnotationTextOccurrence entity.
         */
        Step::RefPtr< IfcAnnotationTextOccurrence > createIfcAnnotationTextOccurrence(bool isVolatile = false);
        /**
         * Clone an IfcAnnotationTextOccurrence Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcAnnotationTextOccurrence Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcAnnotationTextOccurrence *cloneIfcAnnotationTextOccurrence(const IfcAnnotationTextOccurrence &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcAnnotationTextOccurrence Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcAnnotationTextOccurrence entities.
         */
        Step::RefLinkedList< IfcAnnotationTextOccurrence > &getAllIfcAnnotationTextOccurrence();
        /**
         * Get the IfcApplication entity by it's Id.
         * 
         * @param id The Id of the IfcApplication.
         * @return A pointer to the IfcApplication if found, NULL otherwise.
         */
        IfcApplication *getIfcApplication(Step::Id id);
        /**
         * Removes a IfcApplication Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcApplication to remove.
         * @return success.
         */
        bool removeIfcApplication(IfcApplication *arg);
        /**
         * Create an IfcApplication Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcApplication entity.
         */
        Step::RefPtr< IfcApplication > createIfcApplication(bool isVolatile = false);
        /**
         * Clone an IfcApplication Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcApplication Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcApplication *cloneIfcApplication(const IfcApplication &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcApplication Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcApplication entities.
         */
        Step::RefLinkedList< IfcApplication > &getAllIfcApplication();
        /**
         * Get the IfcAppliedValue entity by it's Id.
         * 
         * @param id The Id of the IfcAppliedValue.
         * @return A pointer to the IfcAppliedValue if found, NULL otherwise.
         */
        IfcAppliedValue *getIfcAppliedValue(Step::Id id);
        /**
         * Removes a IfcAppliedValue Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcAppliedValue to remove.
         * @return success.
         */
        bool removeIfcAppliedValue(IfcAppliedValue *arg);
        /**
         * Create an IfcAppliedValue Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcAppliedValue entity.
         */
        Step::RefPtr< IfcAppliedValue > createIfcAppliedValue(bool isVolatile = false);
        /**
         * Clone an IfcAppliedValue Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcAppliedValue Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcAppliedValue *cloneIfcAppliedValue(const IfcAppliedValue &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcAppliedValue Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcAppliedValue entities.
         */
        Step::RefLinkedList< IfcAppliedValue > &getAllIfcAppliedValue();
        /**
         * Get the IfcAppliedValueRelationship entity by it's Id.
         * 
         * @param id The Id of the IfcAppliedValueRelationship.
         * @return A pointer to the IfcAppliedValueRelationship if found, NULL otherwise.
         */
        IfcAppliedValueRelationship *getIfcAppliedValueRelationship(Step::Id id);
        /**
         * Removes a IfcAppliedValueRelationship Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcAppliedValueRelationship to remove.
         * @return success.
         */
        bool removeIfcAppliedValueRelationship(IfcAppliedValueRelationship *arg);
        /**
         * Create an IfcAppliedValueRelationship Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcAppliedValueRelationship entity.
         */
        Step::RefPtr< IfcAppliedValueRelationship > createIfcAppliedValueRelationship(bool isVolatile = false);
        /**
         * Clone an IfcAppliedValueRelationship Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcAppliedValueRelationship Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcAppliedValueRelationship *cloneIfcAppliedValueRelationship(const IfcAppliedValueRelationship &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcAppliedValueRelationship Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcAppliedValueRelationship entities.
         */
        Step::RefLinkedList< IfcAppliedValueRelationship > &getAllIfcAppliedValueRelationship();
        /**
         * Get the IfcApproval entity by it's Id.
         * 
         * @param id The Id of the IfcApproval.
         * @return A pointer to the IfcApproval if found, NULL otherwise.
         */
        IfcApproval *getIfcApproval(Step::Id id);
        /**
         * Removes a IfcApproval Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcApproval to remove.
         * @return success.
         */
        bool removeIfcApproval(IfcApproval *arg);
        /**
         * Create an IfcApproval Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcApproval entity.
         */
        Step::RefPtr< IfcApproval > createIfcApproval(bool isVolatile = false);
        /**
         * Clone an IfcApproval Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcApproval Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcApproval *cloneIfcApproval(const IfcApproval &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcApproval Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcApproval entities.
         */
        Step::RefLinkedList< IfcApproval > &getAllIfcApproval();
        /**
         * Get the IfcApprovalActorRelationship entity by it's Id.
         * 
         * @param id The Id of the IfcApprovalActorRelationship.
         * @return A pointer to the IfcApprovalActorRelationship if found, NULL otherwise.
         */
        IfcApprovalActorRelationship *getIfcApprovalActorRelationship(Step::Id id);
        /**
         * Removes a IfcApprovalActorRelationship Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcApprovalActorRelationship to remove.
         * @return success.
         */
        bool removeIfcApprovalActorRelationship(IfcApprovalActorRelationship *arg);
        /**
         * Create an IfcApprovalActorRelationship Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcApprovalActorRelationship entity.
         */
        Step::RefPtr< IfcApprovalActorRelationship > createIfcApprovalActorRelationship(bool isVolatile = false);
        /**
         * Clone an IfcApprovalActorRelationship Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcApprovalActorRelationship Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcApprovalActorRelationship *cloneIfcApprovalActorRelationship(const IfcApprovalActorRelationship &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcApprovalActorRelationship Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcApprovalActorRelationship entities.
         */
        Step::RefLinkedList< IfcApprovalActorRelationship > &getAllIfcApprovalActorRelationship();
        /**
         * Get the IfcApprovalPropertyRelationship entity by it's Id.
         * 
         * @param id The Id of the IfcApprovalPropertyRelationship.
         * @return A pointer to the IfcApprovalPropertyRelationship if found, NULL otherwise.
         */
        IfcApprovalPropertyRelationship *getIfcApprovalPropertyRelationship(Step::Id id);
        /**
         * Removes a IfcApprovalPropertyRelationship Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcApprovalPropertyRelationship to remove.
         * @return success.
         */
        bool removeIfcApprovalPropertyRelationship(IfcApprovalPropertyRelationship *arg);
        /**
         * Create an IfcApprovalPropertyRelationship Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcApprovalPropertyRelationship entity.
         */
        Step::RefPtr< IfcApprovalPropertyRelationship > createIfcApprovalPropertyRelationship(bool isVolatile = false);
        /**
         * Clone an IfcApprovalPropertyRelationship Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcApprovalPropertyRelationship Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcApprovalPropertyRelationship *cloneIfcApprovalPropertyRelationship(const IfcApprovalPropertyRelationship &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcApprovalPropertyRelationship Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcApprovalPropertyRelationship entities.
         */
        Step::RefLinkedList< IfcApprovalPropertyRelationship > &getAllIfcApprovalPropertyRelationship();
        /**
         * Get the IfcApprovalRelationship entity by it's Id.
         * 
         * @param id The Id of the IfcApprovalRelationship.
         * @return A pointer to the IfcApprovalRelationship if found, NULL otherwise.
         */
        IfcApprovalRelationship *getIfcApprovalRelationship(Step::Id id);
        /**
         * Removes a IfcApprovalRelationship Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcApprovalRelationship to remove.
         * @return success.
         */
        bool removeIfcApprovalRelationship(IfcApprovalRelationship *arg);
        /**
         * Create an IfcApprovalRelationship Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcApprovalRelationship entity.
         */
        Step::RefPtr< IfcApprovalRelationship > createIfcApprovalRelationship(bool isVolatile = false);
        /**
         * Clone an IfcApprovalRelationship Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcApprovalRelationship Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcApprovalRelationship *cloneIfcApprovalRelationship(const IfcApprovalRelationship &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcApprovalRelationship Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcApprovalRelationship entities.
         */
        Step::RefLinkedList< IfcApprovalRelationship > &getAllIfcApprovalRelationship();
        /**
         * Get the IfcArbitraryClosedProfileDef entity by it's Id.
         * 
         * @param id The Id of the IfcArbitraryClosedProfileDef.
         * @return A pointer to the IfcArbitraryClosedProfileDef if found, NULL otherwise.
         */
        IfcArbitraryClosedProfileDef *getIfcArbitraryClosedProfileDef(Step::Id id);
        /**
         * Removes a IfcArbitraryClosedProfileDef Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcArbitraryClosedProfileDef to remove.
         * @return success.
         */
        bool removeIfcArbitraryClosedProfileDef(IfcArbitraryClosedProfileDef *arg);
        /**
         * Create an IfcArbitraryClosedProfileDef Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcArbitraryClosedProfileDef entity.
         */
        Step::RefPtr< IfcArbitraryClosedProfileDef > createIfcArbitraryClosedProfileDef(bool isVolatile = false);
        /**
         * Clone an IfcArbitraryClosedProfileDef Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcArbitraryClosedProfileDef Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcArbitraryClosedProfileDef *cloneIfcArbitraryClosedProfileDef(const IfcArbitraryClosedProfileDef &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcArbitraryClosedProfileDef Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcArbitraryClosedProfileDef entities.
         */
        Step::RefLinkedList< IfcArbitraryClosedProfileDef > &getAllIfcArbitraryClosedProfileDef();
        /**
         * Get the IfcArbitraryOpenProfileDef entity by it's Id.
         * 
         * @param id The Id of the IfcArbitraryOpenProfileDef.
         * @return A pointer to the IfcArbitraryOpenProfileDef if found, NULL otherwise.
         */
        IfcArbitraryOpenProfileDef *getIfcArbitraryOpenProfileDef(Step::Id id);
        /**
         * Removes a IfcArbitraryOpenProfileDef Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcArbitraryOpenProfileDef to remove.
         * @return success.
         */
        bool removeIfcArbitraryOpenProfileDef(IfcArbitraryOpenProfileDef *arg);
        /**
         * Create an IfcArbitraryOpenProfileDef Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcArbitraryOpenProfileDef entity.
         */
        Step::RefPtr< IfcArbitraryOpenProfileDef > createIfcArbitraryOpenProfileDef(bool isVolatile = false);
        /**
         * Clone an IfcArbitraryOpenProfileDef Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcArbitraryOpenProfileDef Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcArbitraryOpenProfileDef *cloneIfcArbitraryOpenProfileDef(const IfcArbitraryOpenProfileDef &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcArbitraryOpenProfileDef Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcArbitraryOpenProfileDef entities.
         */
        Step::RefLinkedList< IfcArbitraryOpenProfileDef > &getAllIfcArbitraryOpenProfileDef();
        /**
         * Get the IfcArbitraryProfileDefWithVoids entity by it's Id.
         * 
         * @param id The Id of the IfcArbitraryProfileDefWithVoids.
         * @return A pointer to the IfcArbitraryProfileDefWithVoids if found, NULL otherwise.
         */
        IfcArbitraryProfileDefWithVoids *getIfcArbitraryProfileDefWithVoids(Step::Id id);
        /**
         * Removes a IfcArbitraryProfileDefWithVoids Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcArbitraryProfileDefWithVoids to remove.
         * @return success.
         */
        bool removeIfcArbitraryProfileDefWithVoids(IfcArbitraryProfileDefWithVoids *arg);
        /**
         * Create an IfcArbitraryProfileDefWithVoids Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcArbitraryProfileDefWithVoids entity.
         */
        Step::RefPtr< IfcArbitraryProfileDefWithVoids > createIfcArbitraryProfileDefWithVoids(bool isVolatile = false);
        /**
         * Clone an IfcArbitraryProfileDefWithVoids Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcArbitraryProfileDefWithVoids Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcArbitraryProfileDefWithVoids *cloneIfcArbitraryProfileDefWithVoids(const IfcArbitraryProfileDefWithVoids &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcArbitraryProfileDefWithVoids Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcArbitraryProfileDefWithVoids entities.
         */
        Step::RefLinkedList< IfcArbitraryProfileDefWithVoids > &getAllIfcArbitraryProfileDefWithVoids();
        /**
         * Get the IfcAsset entity by it's Id.
         * 
         * @param id The Id of the IfcAsset.
         * @return A pointer to the IfcAsset if found, NULL otherwise.
         */
        IfcAsset *getIfcAsset(Step::Id id);
        /**
         * Removes a IfcAsset Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcAsset to remove.
         * @return success.
         */
        bool removeIfcAsset(IfcAsset *arg);
        /**
         * Create an IfcAsset Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcAsset entity.
         */
        Step::RefPtr< IfcAsset > createIfcAsset(bool isVolatile = false);
        /**
         * Clone an IfcAsset Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcAsset Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcAsset *cloneIfcAsset(const IfcAsset &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcAsset Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcAsset entities.
         */
        Step::RefLinkedList< IfcAsset > &getAllIfcAsset();
        /**
         * Get the IfcAsymmetricIShapeProfileDef entity by it's Id.
         * 
         * @param id The Id of the IfcAsymmetricIShapeProfileDef.
         * @return A pointer to the IfcAsymmetricIShapeProfileDef if found, NULL otherwise.
         */
        IfcAsymmetricIShapeProfileDef *getIfcAsymmetricIShapeProfileDef(Step::Id id);
        /**
         * Removes a IfcAsymmetricIShapeProfileDef Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcAsymmetricIShapeProfileDef to remove.
         * @return success.
         */
        bool removeIfcAsymmetricIShapeProfileDef(IfcAsymmetricIShapeProfileDef *arg);
        /**
         * Create an IfcAsymmetricIShapeProfileDef Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcAsymmetricIShapeProfileDef entity.
         */
        Step::RefPtr< IfcAsymmetricIShapeProfileDef > createIfcAsymmetricIShapeProfileDef(bool isVolatile = false);
        /**
         * Clone an IfcAsymmetricIShapeProfileDef Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcAsymmetricIShapeProfileDef Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcAsymmetricIShapeProfileDef *cloneIfcAsymmetricIShapeProfileDef(const IfcAsymmetricIShapeProfileDef &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcAsymmetricIShapeProfileDef Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcAsymmetricIShapeProfileDef entities.
         */
        Step::RefLinkedList< IfcAsymmetricIShapeProfileDef > &getAllIfcAsymmetricIShapeProfileDef();
        /**
         * Get the IfcAxis1Placement entity by it's Id.
         * 
         * @param id The Id of the IfcAxis1Placement.
         * @return A pointer to the IfcAxis1Placement if found, NULL otherwise.
         */
        IfcAxis1Placement *getIfcAxis1Placement(Step::Id id);
        /**
         * Removes a IfcAxis1Placement Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcAxis1Placement to remove.
         * @return success.
         */
        bool removeIfcAxis1Placement(IfcAxis1Placement *arg);
        /**
         * Create an IfcAxis1Placement Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcAxis1Placement entity.
         */
        Step::RefPtr< IfcAxis1Placement > createIfcAxis1Placement(bool isVolatile = false);
        /**
         * Clone an IfcAxis1Placement Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcAxis1Placement Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcAxis1Placement *cloneIfcAxis1Placement(const IfcAxis1Placement &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcAxis1Placement Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcAxis1Placement entities.
         */
        Step::RefLinkedList< IfcAxis1Placement > &getAllIfcAxis1Placement();
        /**
         * Get the IfcAxis2Placement2D entity by it's Id.
         * 
         * @param id The Id of the IfcAxis2Placement2D.
         * @return A pointer to the IfcAxis2Placement2D if found, NULL otherwise.
         */
        IfcAxis2Placement2D *getIfcAxis2Placement2D(Step::Id id);
        /**
         * Removes a IfcAxis2Placement2D Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcAxis2Placement2D to remove.
         * @return success.
         */
        bool removeIfcAxis2Placement2D(IfcAxis2Placement2D *arg);
        /**
         * Create an IfcAxis2Placement2D Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcAxis2Placement2D entity.
         */
        Step::RefPtr< IfcAxis2Placement2D > createIfcAxis2Placement2D(bool isVolatile = false);
        /**
         * Clone an IfcAxis2Placement2D Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcAxis2Placement2D Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcAxis2Placement2D *cloneIfcAxis2Placement2D(const IfcAxis2Placement2D &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcAxis2Placement2D Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcAxis2Placement2D entities.
         */
        Step::RefLinkedList< IfcAxis2Placement2D > &getAllIfcAxis2Placement2D();
        /**
         * Get the IfcAxis2Placement3D entity by it's Id.
         * 
         * @param id The Id of the IfcAxis2Placement3D.
         * @return A pointer to the IfcAxis2Placement3D if found, NULL otherwise.
         */
        IfcAxis2Placement3D *getIfcAxis2Placement3D(Step::Id id);
        /**
         * Removes a IfcAxis2Placement3D Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcAxis2Placement3D to remove.
         * @return success.
         */
        bool removeIfcAxis2Placement3D(IfcAxis2Placement3D *arg);
        /**
         * Create an IfcAxis2Placement3D Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcAxis2Placement3D entity.
         */
        Step::RefPtr< IfcAxis2Placement3D > createIfcAxis2Placement3D(bool isVolatile = false);
        /**
         * Clone an IfcAxis2Placement3D Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcAxis2Placement3D Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcAxis2Placement3D *cloneIfcAxis2Placement3D(const IfcAxis2Placement3D &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcAxis2Placement3D Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcAxis2Placement3D entities.
         */
        Step::RefLinkedList< IfcAxis2Placement3D > &getAllIfcAxis2Placement3D();
        /**
         * Get the IfcBeam entity by it's Id.
         * 
         * @param id The Id of the IfcBeam.
         * @return A pointer to the IfcBeam if found, NULL otherwise.
         */
        IfcBeam *getIfcBeam(Step::Id id);
        /**
         * Removes a IfcBeam Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcBeam to remove.
         * @return success.
         */
        bool removeIfcBeam(IfcBeam *arg);
        /**
         * Create an IfcBeam Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcBeam entity.
         */
        Step::RefPtr< IfcBeam > createIfcBeam(bool isVolatile = false);
        /**
         * Clone an IfcBeam Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcBeam Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcBeam *cloneIfcBeam(const IfcBeam &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcBeam Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcBeam entities.
         */
        Step::RefLinkedList< IfcBeam > &getAllIfcBeam();
        /**
         * Get the IfcBeamType entity by it's Id.
         * 
         * @param id The Id of the IfcBeamType.
         * @return A pointer to the IfcBeamType if found, NULL otherwise.
         */
        IfcBeamType *getIfcBeamType(Step::Id id);
        /**
         * Removes a IfcBeamType Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcBeamType to remove.
         * @return success.
         */
        bool removeIfcBeamType(IfcBeamType *arg);
        /**
         * Create an IfcBeamType Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcBeamType entity.
         */
        Step::RefPtr< IfcBeamType > createIfcBeamType(bool isVolatile = false);
        /**
         * Clone an IfcBeamType Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcBeamType Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcBeamType *cloneIfcBeamType(const IfcBeamType &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcBeamType Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcBeamType entities.
         */
        Step::RefLinkedList< IfcBeamType > &getAllIfcBeamType();
        /**
         * Get the IfcBezierCurve entity by it's Id.
         * 
         * @param id The Id of the IfcBezierCurve.
         * @return A pointer to the IfcBezierCurve if found, NULL otherwise.
         */
        IfcBezierCurve *getIfcBezierCurve(Step::Id id);
        /**
         * Removes a IfcBezierCurve Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcBezierCurve to remove.
         * @return success.
         */
        bool removeIfcBezierCurve(IfcBezierCurve *arg);
        /**
         * Create an IfcBezierCurve Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcBezierCurve entity.
         */
        Step::RefPtr< IfcBezierCurve > createIfcBezierCurve(bool isVolatile = false);
        /**
         * Clone an IfcBezierCurve Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcBezierCurve Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcBezierCurve *cloneIfcBezierCurve(const IfcBezierCurve &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcBezierCurve Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcBezierCurve entities.
         */
        Step::RefLinkedList< IfcBezierCurve > &getAllIfcBezierCurve();
        /**
         * Get the IfcBlobTexture entity by it's Id.
         * 
         * @param id The Id of the IfcBlobTexture.
         * @return A pointer to the IfcBlobTexture if found, NULL otherwise.
         */
        IfcBlobTexture *getIfcBlobTexture(Step::Id id);
        /**
         * Removes a IfcBlobTexture Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcBlobTexture to remove.
         * @return success.
         */
        bool removeIfcBlobTexture(IfcBlobTexture *arg);
        /**
         * Create an IfcBlobTexture Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcBlobTexture entity.
         */
        Step::RefPtr< IfcBlobTexture > createIfcBlobTexture(bool isVolatile = false);
        /**
         * Clone an IfcBlobTexture Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcBlobTexture Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcBlobTexture *cloneIfcBlobTexture(const IfcBlobTexture &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcBlobTexture Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcBlobTexture entities.
         */
        Step::RefLinkedList< IfcBlobTexture > &getAllIfcBlobTexture();
        /**
         * Get the IfcBlock entity by it's Id.
         * 
         * @param id The Id of the IfcBlock.
         * @return A pointer to the IfcBlock if found, NULL otherwise.
         */
        IfcBlock *getIfcBlock(Step::Id id);
        /**
         * Removes a IfcBlock Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcBlock to remove.
         * @return success.
         */
        bool removeIfcBlock(IfcBlock *arg);
        /**
         * Create an IfcBlock Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcBlock entity.
         */
        Step::RefPtr< IfcBlock > createIfcBlock(bool isVolatile = false);
        /**
         * Clone an IfcBlock Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcBlock Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcBlock *cloneIfcBlock(const IfcBlock &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcBlock Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcBlock entities.
         */
        Step::RefLinkedList< IfcBlock > &getAllIfcBlock();
        /**
         * Get the IfcBoilerType entity by it's Id.
         * 
         * @param id The Id of the IfcBoilerType.
         * @return A pointer to the IfcBoilerType if found, NULL otherwise.
         */
        IfcBoilerType *getIfcBoilerType(Step::Id id);
        /**
         * Removes a IfcBoilerType Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcBoilerType to remove.
         * @return success.
         */
        bool removeIfcBoilerType(IfcBoilerType *arg);
        /**
         * Create an IfcBoilerType Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcBoilerType entity.
         */
        Step::RefPtr< IfcBoilerType > createIfcBoilerType(bool isVolatile = false);
        /**
         * Clone an IfcBoilerType Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcBoilerType Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcBoilerType *cloneIfcBoilerType(const IfcBoilerType &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcBoilerType Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcBoilerType entities.
         */
        Step::RefLinkedList< IfcBoilerType > &getAllIfcBoilerType();
        /**
         * Get the IfcBooleanClippingResult entity by it's Id.
         * 
         * @param id The Id of the IfcBooleanClippingResult.
         * @return A pointer to the IfcBooleanClippingResult if found, NULL otherwise.
         */
        IfcBooleanClippingResult *getIfcBooleanClippingResult(Step::Id id);
        /**
         * Removes a IfcBooleanClippingResult Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcBooleanClippingResult to remove.
         * @return success.
         */
        bool removeIfcBooleanClippingResult(IfcBooleanClippingResult *arg);
        /**
         * Create an IfcBooleanClippingResult Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcBooleanClippingResult entity.
         */
        Step::RefPtr< IfcBooleanClippingResult > createIfcBooleanClippingResult(bool isVolatile = false);
        /**
         * Clone an IfcBooleanClippingResult Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcBooleanClippingResult Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcBooleanClippingResult *cloneIfcBooleanClippingResult(const IfcBooleanClippingResult &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcBooleanClippingResult Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcBooleanClippingResult entities.
         */
        Step::RefLinkedList< IfcBooleanClippingResult > &getAllIfcBooleanClippingResult();
        /**
         * Get the IfcBooleanResult entity by it's Id.
         * 
         * @param id The Id of the IfcBooleanResult.
         * @return A pointer to the IfcBooleanResult if found, NULL otherwise.
         */
        IfcBooleanResult *getIfcBooleanResult(Step::Id id);
        /**
         * Removes a IfcBooleanResult Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcBooleanResult to remove.
         * @return success.
         */
        bool removeIfcBooleanResult(IfcBooleanResult *arg);
        /**
         * Create an IfcBooleanResult Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcBooleanResult entity.
         */
        Step::RefPtr< IfcBooleanResult > createIfcBooleanResult(bool isVolatile = false);
        /**
         * Clone an IfcBooleanResult Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcBooleanResult Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcBooleanResult *cloneIfcBooleanResult(const IfcBooleanResult &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcBooleanResult Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcBooleanResult entities.
         */
        Step::RefLinkedList< IfcBooleanResult > &getAllIfcBooleanResult();
        /**
         * Get the IfcBoundaryCondition entity by it's Id.
         * 
         * @param id The Id of the IfcBoundaryCondition.
         * @return A pointer to the IfcBoundaryCondition if found, NULL otherwise.
         */
        IfcBoundaryCondition *getIfcBoundaryCondition(Step::Id id);
        /**
         * Removes a IfcBoundaryCondition Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcBoundaryCondition to remove.
         * @return success.
         */
        bool removeIfcBoundaryCondition(IfcBoundaryCondition *arg);
        /**
         * Create an IfcBoundaryCondition Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcBoundaryCondition entity.
         */
        Step::RefPtr< IfcBoundaryCondition > createIfcBoundaryCondition(bool isVolatile = false);
        /**
         * Clone an IfcBoundaryCondition Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcBoundaryCondition Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcBoundaryCondition *cloneIfcBoundaryCondition(const IfcBoundaryCondition &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcBoundaryCondition Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcBoundaryCondition entities.
         */
        Step::RefLinkedList< IfcBoundaryCondition > &getAllIfcBoundaryCondition();
        /**
         * Get the IfcBoundaryEdgeCondition entity by it's Id.
         * 
         * @param id The Id of the IfcBoundaryEdgeCondition.
         * @return A pointer to the IfcBoundaryEdgeCondition if found, NULL otherwise.
         */
        IfcBoundaryEdgeCondition *getIfcBoundaryEdgeCondition(Step::Id id);
        /**
         * Removes a IfcBoundaryEdgeCondition Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcBoundaryEdgeCondition to remove.
         * @return success.
         */
        bool removeIfcBoundaryEdgeCondition(IfcBoundaryEdgeCondition *arg);
        /**
         * Create an IfcBoundaryEdgeCondition Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcBoundaryEdgeCondition entity.
         */
        Step::RefPtr< IfcBoundaryEdgeCondition > createIfcBoundaryEdgeCondition(bool isVolatile = false);
        /**
         * Clone an IfcBoundaryEdgeCondition Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcBoundaryEdgeCondition Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcBoundaryEdgeCondition *cloneIfcBoundaryEdgeCondition(const IfcBoundaryEdgeCondition &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcBoundaryEdgeCondition Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcBoundaryEdgeCondition entities.
         */
        Step::RefLinkedList< IfcBoundaryEdgeCondition > &getAllIfcBoundaryEdgeCondition();
        /**
         * Get the IfcBoundaryFaceCondition entity by it's Id.
         * 
         * @param id The Id of the IfcBoundaryFaceCondition.
         * @return A pointer to the IfcBoundaryFaceCondition if found, NULL otherwise.
         */
        IfcBoundaryFaceCondition *getIfcBoundaryFaceCondition(Step::Id id);
        /**
         * Removes a IfcBoundaryFaceCondition Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcBoundaryFaceCondition to remove.
         * @return success.
         */
        bool removeIfcBoundaryFaceCondition(IfcBoundaryFaceCondition *arg);
        /**
         * Create an IfcBoundaryFaceCondition Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcBoundaryFaceCondition entity.
         */
        Step::RefPtr< IfcBoundaryFaceCondition > createIfcBoundaryFaceCondition(bool isVolatile = false);
        /**
         * Clone an IfcBoundaryFaceCondition Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcBoundaryFaceCondition Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcBoundaryFaceCondition *cloneIfcBoundaryFaceCondition(const IfcBoundaryFaceCondition &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcBoundaryFaceCondition Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcBoundaryFaceCondition entities.
         */
        Step::RefLinkedList< IfcBoundaryFaceCondition > &getAllIfcBoundaryFaceCondition();
        /**
         * Get the IfcBoundaryNodeCondition entity by it's Id.
         * 
         * @param id The Id of the IfcBoundaryNodeCondition.
         * @return A pointer to the IfcBoundaryNodeCondition if found, NULL otherwise.
         */
        IfcBoundaryNodeCondition *getIfcBoundaryNodeCondition(Step::Id id);
        /**
         * Removes a IfcBoundaryNodeCondition Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcBoundaryNodeCondition to remove.
         * @return success.
         */
        bool removeIfcBoundaryNodeCondition(IfcBoundaryNodeCondition *arg);
        /**
         * Create an IfcBoundaryNodeCondition Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcBoundaryNodeCondition entity.
         */
        Step::RefPtr< IfcBoundaryNodeCondition > createIfcBoundaryNodeCondition(bool isVolatile = false);
        /**
         * Clone an IfcBoundaryNodeCondition Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcBoundaryNodeCondition Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcBoundaryNodeCondition *cloneIfcBoundaryNodeCondition(const IfcBoundaryNodeCondition &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcBoundaryNodeCondition Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcBoundaryNodeCondition entities.
         */
        Step::RefLinkedList< IfcBoundaryNodeCondition > &getAllIfcBoundaryNodeCondition();
        /**
         * Get the IfcBoundaryNodeConditionWarping entity by it's Id.
         * 
         * @param id The Id of the IfcBoundaryNodeConditionWarping.
         * @return A pointer to the IfcBoundaryNodeConditionWarping if found, NULL otherwise.
         */
        IfcBoundaryNodeConditionWarping *getIfcBoundaryNodeConditionWarping(Step::Id id);
        /**
         * Removes a IfcBoundaryNodeConditionWarping Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcBoundaryNodeConditionWarping to remove.
         * @return success.
         */
        bool removeIfcBoundaryNodeConditionWarping(IfcBoundaryNodeConditionWarping *arg);
        /**
         * Create an IfcBoundaryNodeConditionWarping Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcBoundaryNodeConditionWarping entity.
         */
        Step::RefPtr< IfcBoundaryNodeConditionWarping > createIfcBoundaryNodeConditionWarping(bool isVolatile = false);
        /**
         * Clone an IfcBoundaryNodeConditionWarping Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcBoundaryNodeConditionWarping Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcBoundaryNodeConditionWarping *cloneIfcBoundaryNodeConditionWarping(const IfcBoundaryNodeConditionWarping &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcBoundaryNodeConditionWarping Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcBoundaryNodeConditionWarping entities.
         */
        Step::RefLinkedList< IfcBoundaryNodeConditionWarping > &getAllIfcBoundaryNodeConditionWarping();
        /**
         * Get the IfcBoundedCurve entity by it's Id.
         * 
         * @param id The Id of the IfcBoundedCurve.
         * @return A pointer to the IfcBoundedCurve if found, NULL otherwise.
         */
        IfcBoundedCurve *getIfcBoundedCurve(Step::Id id);
        /**
         * Removes a IfcBoundedCurve Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcBoundedCurve to remove.
         * @return success.
         */
        bool removeIfcBoundedCurve(IfcBoundedCurve *arg);
        /**
         * Create an IfcBoundedCurve Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcBoundedCurve entity.
         */
        Step::RefPtr< IfcBoundedCurve > createIfcBoundedCurve(bool isVolatile = false);
        /**
         * Clone an IfcBoundedCurve Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcBoundedCurve Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcBoundedCurve *cloneIfcBoundedCurve(const IfcBoundedCurve &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcBoundedCurve Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcBoundedCurve entities.
         */
        Step::RefLinkedList< IfcBoundedCurve > &getAllIfcBoundedCurve();
        /**
         * Get the IfcBoundedSurface entity by it's Id.
         * 
         * @param id The Id of the IfcBoundedSurface.
         * @return A pointer to the IfcBoundedSurface if found, NULL otherwise.
         */
        IfcBoundedSurface *getIfcBoundedSurface(Step::Id id);
        /**
         * Removes a IfcBoundedSurface Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcBoundedSurface to remove.
         * @return success.
         */
        bool removeIfcBoundedSurface(IfcBoundedSurface *arg);
        /**
         * Create an IfcBoundedSurface Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcBoundedSurface entity.
         */
        Step::RefPtr< IfcBoundedSurface > createIfcBoundedSurface(bool isVolatile = false);
        /**
         * Clone an IfcBoundedSurface Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcBoundedSurface Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcBoundedSurface *cloneIfcBoundedSurface(const IfcBoundedSurface &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcBoundedSurface Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcBoundedSurface entities.
         */
        Step::RefLinkedList< IfcBoundedSurface > &getAllIfcBoundedSurface();
        /**
         * Get the IfcBoundingBox entity by it's Id.
         * 
         * @param id The Id of the IfcBoundingBox.
         * @return A pointer to the IfcBoundingBox if found, NULL otherwise.
         */
        IfcBoundingBox *getIfcBoundingBox(Step::Id id);
        /**
         * Removes a IfcBoundingBox Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcBoundingBox to remove.
         * @return success.
         */
        bool removeIfcBoundingBox(IfcBoundingBox *arg);
        /**
         * Create an IfcBoundingBox Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcBoundingBox entity.
         */
        Step::RefPtr< IfcBoundingBox > createIfcBoundingBox(bool isVolatile = false);
        /**
         * Clone an IfcBoundingBox Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcBoundingBox Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcBoundingBox *cloneIfcBoundingBox(const IfcBoundingBox &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcBoundingBox Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcBoundingBox entities.
         */
        Step::RefLinkedList< IfcBoundingBox > &getAllIfcBoundingBox();
        /**
         * Get the IfcBoxedHalfSpace entity by it's Id.
         * 
         * @param id The Id of the IfcBoxedHalfSpace.
         * @return A pointer to the IfcBoxedHalfSpace if found, NULL otherwise.
         */
        IfcBoxedHalfSpace *getIfcBoxedHalfSpace(Step::Id id);
        /**
         * Removes a IfcBoxedHalfSpace Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcBoxedHalfSpace to remove.
         * @return success.
         */
        bool removeIfcBoxedHalfSpace(IfcBoxedHalfSpace *arg);
        /**
         * Create an IfcBoxedHalfSpace Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcBoxedHalfSpace entity.
         */
        Step::RefPtr< IfcBoxedHalfSpace > createIfcBoxedHalfSpace(bool isVolatile = false);
        /**
         * Clone an IfcBoxedHalfSpace Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcBoxedHalfSpace Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcBoxedHalfSpace *cloneIfcBoxedHalfSpace(const IfcBoxedHalfSpace &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcBoxedHalfSpace Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcBoxedHalfSpace entities.
         */
        Step::RefLinkedList< IfcBoxedHalfSpace > &getAllIfcBoxedHalfSpace();
        /**
         * Get the IfcBSplineCurve entity by it's Id.
         * 
         * @param id The Id of the IfcBSplineCurve.
         * @return A pointer to the IfcBSplineCurve if found, NULL otherwise.
         */
        IfcBSplineCurve *getIfcBSplineCurve(Step::Id id);
        /**
         * Removes a IfcBSplineCurve Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcBSplineCurve to remove.
         * @return success.
         */
        bool removeIfcBSplineCurve(IfcBSplineCurve *arg);
        /**
         * Create an IfcBSplineCurve Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcBSplineCurve entity.
         */
        Step::RefPtr< IfcBSplineCurve > createIfcBSplineCurve(bool isVolatile = false);
        /**
         * Clone an IfcBSplineCurve Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcBSplineCurve Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcBSplineCurve *cloneIfcBSplineCurve(const IfcBSplineCurve &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcBSplineCurve Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcBSplineCurve entities.
         */
        Step::RefLinkedList< IfcBSplineCurve > &getAllIfcBSplineCurve();
        /**
         * Get the IfcBuilding entity by it's Id.
         * 
         * @param id The Id of the IfcBuilding.
         * @return A pointer to the IfcBuilding if found, NULL otherwise.
         */
        IfcBuilding *getIfcBuilding(Step::Id id);
        /**
         * Removes a IfcBuilding Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcBuilding to remove.
         * @return success.
         */
        bool removeIfcBuilding(IfcBuilding *arg);
        /**
         * Create an IfcBuilding Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcBuilding entity.
         */
        Step::RefPtr< IfcBuilding > createIfcBuilding(bool isVolatile = false);
        /**
         * Clone an IfcBuilding Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcBuilding Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcBuilding *cloneIfcBuilding(const IfcBuilding &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcBuilding Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcBuilding entities.
         */
        Step::RefLinkedList< IfcBuilding > &getAllIfcBuilding();
        /**
         * Get the IfcBuildingElement entity by it's Id.
         * 
         * @param id The Id of the IfcBuildingElement.
         * @return A pointer to the IfcBuildingElement if found, NULL otherwise.
         */
        IfcBuildingElement *getIfcBuildingElement(Step::Id id);
        /**
         * Removes a IfcBuildingElement Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcBuildingElement to remove.
         * @return success.
         */
        bool removeIfcBuildingElement(IfcBuildingElement *arg);
        /**
         * Create an IfcBuildingElement Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcBuildingElement entity.
         */
        Step::RefPtr< IfcBuildingElement > createIfcBuildingElement(bool isVolatile = false);
        /**
         * Clone an IfcBuildingElement Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcBuildingElement Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcBuildingElement *cloneIfcBuildingElement(const IfcBuildingElement &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcBuildingElement Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcBuildingElement entities.
         */
        Step::RefLinkedList< IfcBuildingElement > &getAllIfcBuildingElement();
        /**
         * Get the IfcBuildingElementComponent entity by it's Id.
         * 
         * @param id The Id of the IfcBuildingElementComponent.
         * @return A pointer to the IfcBuildingElementComponent if found, NULL otherwise.
         */
        IfcBuildingElementComponent *getIfcBuildingElementComponent(Step::Id id);
        /**
         * Removes a IfcBuildingElementComponent Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcBuildingElementComponent to remove.
         * @return success.
         */
        bool removeIfcBuildingElementComponent(IfcBuildingElementComponent *arg);
        /**
         * Create an IfcBuildingElementComponent Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcBuildingElementComponent entity.
         */
        Step::RefPtr< IfcBuildingElementComponent > createIfcBuildingElementComponent(bool isVolatile = false);
        /**
         * Clone an IfcBuildingElementComponent Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcBuildingElementComponent Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcBuildingElementComponent *cloneIfcBuildingElementComponent(const IfcBuildingElementComponent &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcBuildingElementComponent Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcBuildingElementComponent entities.
         */
        Step::RefLinkedList< IfcBuildingElementComponent > &getAllIfcBuildingElementComponent();
        /**
         * Get the IfcBuildingElementPart entity by it's Id.
         * 
         * @param id The Id of the IfcBuildingElementPart.
         * @return A pointer to the IfcBuildingElementPart if found, NULL otherwise.
         */
        IfcBuildingElementPart *getIfcBuildingElementPart(Step::Id id);
        /**
         * Removes a IfcBuildingElementPart Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcBuildingElementPart to remove.
         * @return success.
         */
        bool removeIfcBuildingElementPart(IfcBuildingElementPart *arg);
        /**
         * Create an IfcBuildingElementPart Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcBuildingElementPart entity.
         */
        Step::RefPtr< IfcBuildingElementPart > createIfcBuildingElementPart(bool isVolatile = false);
        /**
         * Clone an IfcBuildingElementPart Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcBuildingElementPart Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcBuildingElementPart *cloneIfcBuildingElementPart(const IfcBuildingElementPart &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcBuildingElementPart Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcBuildingElementPart entities.
         */
        Step::RefLinkedList< IfcBuildingElementPart > &getAllIfcBuildingElementPart();
        /**
         * Get the IfcBuildingElementProxy entity by it's Id.
         * 
         * @param id The Id of the IfcBuildingElementProxy.
         * @return A pointer to the IfcBuildingElementProxy if found, NULL otherwise.
         */
        IfcBuildingElementProxy *getIfcBuildingElementProxy(Step::Id id);
        /**
         * Removes a IfcBuildingElementProxy Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcBuildingElementProxy to remove.
         * @return success.
         */
        bool removeIfcBuildingElementProxy(IfcBuildingElementProxy *arg);
        /**
         * Create an IfcBuildingElementProxy Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcBuildingElementProxy entity.
         */
        Step::RefPtr< IfcBuildingElementProxy > createIfcBuildingElementProxy(bool isVolatile = false);
        /**
         * Clone an IfcBuildingElementProxy Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcBuildingElementProxy Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcBuildingElementProxy *cloneIfcBuildingElementProxy(const IfcBuildingElementProxy &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcBuildingElementProxy Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcBuildingElementProxy entities.
         */
        Step::RefLinkedList< IfcBuildingElementProxy > &getAllIfcBuildingElementProxy();
        /**
         * Get the IfcBuildingElementProxyType entity by it's Id.
         * 
         * @param id The Id of the IfcBuildingElementProxyType.
         * @return A pointer to the IfcBuildingElementProxyType if found, NULL otherwise.
         */
        IfcBuildingElementProxyType *getIfcBuildingElementProxyType(Step::Id id);
        /**
         * Removes a IfcBuildingElementProxyType Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcBuildingElementProxyType to remove.
         * @return success.
         */
        bool removeIfcBuildingElementProxyType(IfcBuildingElementProxyType *arg);
        /**
         * Create an IfcBuildingElementProxyType Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcBuildingElementProxyType entity.
         */
        Step::RefPtr< IfcBuildingElementProxyType > createIfcBuildingElementProxyType(bool isVolatile = false);
        /**
         * Clone an IfcBuildingElementProxyType Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcBuildingElementProxyType Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcBuildingElementProxyType *cloneIfcBuildingElementProxyType(const IfcBuildingElementProxyType &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcBuildingElementProxyType Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcBuildingElementProxyType entities.
         */
        Step::RefLinkedList< IfcBuildingElementProxyType > &getAllIfcBuildingElementProxyType();
        /**
         * Get the IfcBuildingElementType entity by it's Id.
         * 
         * @param id The Id of the IfcBuildingElementType.
         * @return A pointer to the IfcBuildingElementType if found, NULL otherwise.
         */
        IfcBuildingElementType *getIfcBuildingElementType(Step::Id id);
        /**
         * Removes a IfcBuildingElementType Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcBuildingElementType to remove.
         * @return success.
         */
        bool removeIfcBuildingElementType(IfcBuildingElementType *arg);
        /**
         * Create an IfcBuildingElementType Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcBuildingElementType entity.
         */
        Step::RefPtr< IfcBuildingElementType > createIfcBuildingElementType(bool isVolatile = false);
        /**
         * Clone an IfcBuildingElementType Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcBuildingElementType Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcBuildingElementType *cloneIfcBuildingElementType(const IfcBuildingElementType &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcBuildingElementType Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcBuildingElementType entities.
         */
        Step::RefLinkedList< IfcBuildingElementType > &getAllIfcBuildingElementType();
        /**
         * Get the IfcBuildingStorey entity by it's Id.
         * 
         * @param id The Id of the IfcBuildingStorey.
         * @return A pointer to the IfcBuildingStorey if found, NULL otherwise.
         */
        IfcBuildingStorey *getIfcBuildingStorey(Step::Id id);
        /**
         * Removes a IfcBuildingStorey Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcBuildingStorey to remove.
         * @return success.
         */
        bool removeIfcBuildingStorey(IfcBuildingStorey *arg);
        /**
         * Create an IfcBuildingStorey Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcBuildingStorey entity.
         */
        Step::RefPtr< IfcBuildingStorey > createIfcBuildingStorey(bool isVolatile = false);
        /**
         * Clone an IfcBuildingStorey Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcBuildingStorey Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcBuildingStorey *cloneIfcBuildingStorey(const IfcBuildingStorey &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcBuildingStorey Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcBuildingStorey entities.
         */
        Step::RefLinkedList< IfcBuildingStorey > &getAllIfcBuildingStorey();
        /**
         * Get the IfcCableCarrierFittingType entity by it's Id.
         * 
         * @param id The Id of the IfcCableCarrierFittingType.
         * @return A pointer to the IfcCableCarrierFittingType if found, NULL otherwise.
         */
        IfcCableCarrierFittingType *getIfcCableCarrierFittingType(Step::Id id);
        /**
         * Removes a IfcCableCarrierFittingType Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcCableCarrierFittingType to remove.
         * @return success.
         */
        bool removeIfcCableCarrierFittingType(IfcCableCarrierFittingType *arg);
        /**
         * Create an IfcCableCarrierFittingType Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcCableCarrierFittingType entity.
         */
        Step::RefPtr< IfcCableCarrierFittingType > createIfcCableCarrierFittingType(bool isVolatile = false);
        /**
         * Clone an IfcCableCarrierFittingType Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcCableCarrierFittingType Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcCableCarrierFittingType *cloneIfcCableCarrierFittingType(const IfcCableCarrierFittingType &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcCableCarrierFittingType Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcCableCarrierFittingType entities.
         */
        Step::RefLinkedList< IfcCableCarrierFittingType > &getAllIfcCableCarrierFittingType();
        /**
         * Get the IfcCableCarrierSegmentType entity by it's Id.
         * 
         * @param id The Id of the IfcCableCarrierSegmentType.
         * @return A pointer to the IfcCableCarrierSegmentType if found, NULL otherwise.
         */
        IfcCableCarrierSegmentType *getIfcCableCarrierSegmentType(Step::Id id);
        /**
         * Removes a IfcCableCarrierSegmentType Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcCableCarrierSegmentType to remove.
         * @return success.
         */
        bool removeIfcCableCarrierSegmentType(IfcCableCarrierSegmentType *arg);
        /**
         * Create an IfcCableCarrierSegmentType Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcCableCarrierSegmentType entity.
         */
        Step::RefPtr< IfcCableCarrierSegmentType > createIfcCableCarrierSegmentType(bool isVolatile = false);
        /**
         * Clone an IfcCableCarrierSegmentType Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcCableCarrierSegmentType Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcCableCarrierSegmentType *cloneIfcCableCarrierSegmentType(const IfcCableCarrierSegmentType &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcCableCarrierSegmentType Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcCableCarrierSegmentType entities.
         */
        Step::RefLinkedList< IfcCableCarrierSegmentType > &getAllIfcCableCarrierSegmentType();
        /**
         * Get the IfcCableSegmentType entity by it's Id.
         * 
         * @param id The Id of the IfcCableSegmentType.
         * @return A pointer to the IfcCableSegmentType if found, NULL otherwise.
         */
        IfcCableSegmentType *getIfcCableSegmentType(Step::Id id);
        /**
         * Removes a IfcCableSegmentType Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcCableSegmentType to remove.
         * @return success.
         */
        bool removeIfcCableSegmentType(IfcCableSegmentType *arg);
        /**
         * Create an IfcCableSegmentType Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcCableSegmentType entity.
         */
        Step::RefPtr< IfcCableSegmentType > createIfcCableSegmentType(bool isVolatile = false);
        /**
         * Clone an IfcCableSegmentType Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcCableSegmentType Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcCableSegmentType *cloneIfcCableSegmentType(const IfcCableSegmentType &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcCableSegmentType Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcCableSegmentType entities.
         */
        Step::RefLinkedList< IfcCableSegmentType > &getAllIfcCableSegmentType();
        /**
         * Get the IfcCalendarDate entity by it's Id.
         * 
         * @param id The Id of the IfcCalendarDate.
         * @return A pointer to the IfcCalendarDate if found, NULL otherwise.
         */
        IfcCalendarDate *getIfcCalendarDate(Step::Id id);
        /**
         * Removes a IfcCalendarDate Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcCalendarDate to remove.
         * @return success.
         */
        bool removeIfcCalendarDate(IfcCalendarDate *arg);
        /**
         * Create an IfcCalendarDate Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcCalendarDate entity.
         */
        Step::RefPtr< IfcCalendarDate > createIfcCalendarDate(bool isVolatile = false);
        /**
         * Clone an IfcCalendarDate Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcCalendarDate Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcCalendarDate *cloneIfcCalendarDate(const IfcCalendarDate &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcCalendarDate Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcCalendarDate entities.
         */
        Step::RefLinkedList< IfcCalendarDate > &getAllIfcCalendarDate();
        /**
         * Get the IfcCartesianPoint entity by it's Id.
         * 
         * @param id The Id of the IfcCartesianPoint.
         * @return A pointer to the IfcCartesianPoint if found, NULL otherwise.
         */
        IfcCartesianPoint *getIfcCartesianPoint(Step::Id id);
        /**
         * Removes a IfcCartesianPoint Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcCartesianPoint to remove.
         * @return success.
         */
        bool removeIfcCartesianPoint(IfcCartesianPoint *arg);
        /**
         * Create an IfcCartesianPoint Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcCartesianPoint entity.
         */
        Step::RefPtr< IfcCartesianPoint > createIfcCartesianPoint(bool isVolatile = false);
        /**
         * Clone an IfcCartesianPoint Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcCartesianPoint Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcCartesianPoint *cloneIfcCartesianPoint(const IfcCartesianPoint &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcCartesianPoint Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcCartesianPoint entities.
         */
        Step::RefLinkedList< IfcCartesianPoint > &getAllIfcCartesianPoint();
        /**
         * Get the IfcCartesianTransformationOperator entity by it's Id.
         * 
         * @param id The Id of the IfcCartesianTransformationOperator.
         * @return A pointer to the IfcCartesianTransformationOperator if found, NULL otherwise.
         */
        IfcCartesianTransformationOperator *getIfcCartesianTransformationOperator(Step::Id id);
        /**
         * Removes a IfcCartesianTransformationOperator Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcCartesianTransformationOperator to remove.
         * @return success.
         */
        bool removeIfcCartesianTransformationOperator(IfcCartesianTransformationOperator *arg);
        /**
         * Create an IfcCartesianTransformationOperator Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcCartesianTransformationOperator entity.
         */
        Step::RefPtr< IfcCartesianTransformationOperator > createIfcCartesianTransformationOperator(bool isVolatile = false);
        /**
         * Clone an IfcCartesianTransformationOperator Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcCartesianTransformationOperator Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcCartesianTransformationOperator *cloneIfcCartesianTransformationOperator(const IfcCartesianTransformationOperator &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcCartesianTransformationOperator Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcCartesianTransformationOperator entities.
         */
        Step::RefLinkedList< IfcCartesianTransformationOperator > &getAllIfcCartesianTransformationOperator();
        /**
         * Get the IfcCartesianTransformationOperator2D entity by it's Id.
         * 
         * @param id The Id of the IfcCartesianTransformationOperator2D.
         * @return A pointer to the IfcCartesianTransformationOperator2D if found, NULL otherwise.
         */
        IfcCartesianTransformationOperator2D *getIfcCartesianTransformationOperator2D(Step::Id id);
        /**
         * Removes a IfcCartesianTransformationOperator2D Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcCartesianTransformationOperator2D to remove.
         * @return success.
         */
        bool removeIfcCartesianTransformationOperator2D(IfcCartesianTransformationOperator2D *arg);
        /**
         * Create an IfcCartesianTransformationOperator2D Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcCartesianTransformationOperator2D entity.
         */
        Step::RefPtr< IfcCartesianTransformationOperator2D > createIfcCartesianTransformationOperator2D(bool isVolatile = false);
        /**
         * Clone an IfcCartesianTransformationOperator2D Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcCartesianTransformationOperator2D Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcCartesianTransformationOperator2D *cloneIfcCartesianTransformationOperator2D(const IfcCartesianTransformationOperator2D &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcCartesianTransformationOperator2D Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcCartesianTransformationOperator2D entities.
         */
        Step::RefLinkedList< IfcCartesianTransformationOperator2D > &getAllIfcCartesianTransformationOperator2D();
        /**
         * Get the IfcCartesianTransformationOperator2DnonUniform entity by it's Id.
         * 
         * @param id The Id of the IfcCartesianTransformationOperator2DnonUniform.
         * @return A pointer to the IfcCartesianTransformationOperator2DnonUniform if found, NULL otherwise.
         */
        IfcCartesianTransformationOperator2DnonUniform *getIfcCartesianTransformationOperator2DnonUniform(Step::Id id);
        /**
         * Removes a IfcCartesianTransformationOperator2DnonUniform Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcCartesianTransformationOperator2DnonUniform to remove.
         * @return success.
         */
        bool removeIfcCartesianTransformationOperator2DnonUniform(IfcCartesianTransformationOperator2DnonUniform *arg);
        /**
         * Create an IfcCartesianTransformationOperator2DnonUniform Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcCartesianTransformationOperator2DnonUniform entity.
         */
        Step::RefPtr< IfcCartesianTransformationOperator2DnonUniform > createIfcCartesianTransformationOperator2DnonUniform(bool isVolatile = false);
        /**
         * Clone an IfcCartesianTransformationOperator2DnonUniform Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcCartesianTransformationOperator2DnonUniform Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcCartesianTransformationOperator2DnonUniform *cloneIfcCartesianTransformationOperator2DnonUniform(const IfcCartesianTransformationOperator2DnonUniform &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcCartesianTransformationOperator2DnonUniform Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcCartesianTransformationOperator2DnonUniform entities.
         */
        Step::RefLinkedList< IfcCartesianTransformationOperator2DnonUniform > &getAllIfcCartesianTransformationOperator2DnonUniform();
        /**
         * Get the IfcCartesianTransformationOperator3D entity by it's Id.
         * 
         * @param id The Id of the IfcCartesianTransformationOperator3D.
         * @return A pointer to the IfcCartesianTransformationOperator3D if found, NULL otherwise.
         */
        IfcCartesianTransformationOperator3D *getIfcCartesianTransformationOperator3D(Step::Id id);
        /**
         * Removes a IfcCartesianTransformationOperator3D Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcCartesianTransformationOperator3D to remove.
         * @return success.
         */
        bool removeIfcCartesianTransformationOperator3D(IfcCartesianTransformationOperator3D *arg);
        /**
         * Create an IfcCartesianTransformationOperator3D Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcCartesianTransformationOperator3D entity.
         */
        Step::RefPtr< IfcCartesianTransformationOperator3D > createIfcCartesianTransformationOperator3D(bool isVolatile = false);
        /**
         * Clone an IfcCartesianTransformationOperator3D Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcCartesianTransformationOperator3D Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcCartesianTransformationOperator3D *cloneIfcCartesianTransformationOperator3D(const IfcCartesianTransformationOperator3D &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcCartesianTransformationOperator3D Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcCartesianTransformationOperator3D entities.
         */
        Step::RefLinkedList< IfcCartesianTransformationOperator3D > &getAllIfcCartesianTransformationOperator3D();
        /**
         * Get the IfcCartesianTransformationOperator3DnonUniform entity by it's Id.
         * 
         * @param id The Id of the IfcCartesianTransformationOperator3DnonUniform.
         * @return A pointer to the IfcCartesianTransformationOperator3DnonUniform if found, NULL otherwise.
         */
        IfcCartesianTransformationOperator3DnonUniform *getIfcCartesianTransformationOperator3DnonUniform(Step::Id id);
        /**
         * Removes a IfcCartesianTransformationOperator3DnonUniform Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcCartesianTransformationOperator3DnonUniform to remove.
         * @return success.
         */
        bool removeIfcCartesianTransformationOperator3DnonUniform(IfcCartesianTransformationOperator3DnonUniform *arg);
        /**
         * Create an IfcCartesianTransformationOperator3DnonUniform Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcCartesianTransformationOperator3DnonUniform entity.
         */
        Step::RefPtr< IfcCartesianTransformationOperator3DnonUniform > createIfcCartesianTransformationOperator3DnonUniform(bool isVolatile = false);
        /**
         * Clone an IfcCartesianTransformationOperator3DnonUniform Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcCartesianTransformationOperator3DnonUniform Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcCartesianTransformationOperator3DnonUniform *cloneIfcCartesianTransformationOperator3DnonUniform(const IfcCartesianTransformationOperator3DnonUniform &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcCartesianTransformationOperator3DnonUniform Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcCartesianTransformationOperator3DnonUniform entities.
         */
        Step::RefLinkedList< IfcCartesianTransformationOperator3DnonUniform > &getAllIfcCartesianTransformationOperator3DnonUniform();
        /**
         * Get the IfcCenterLineProfileDef entity by it's Id.
         * 
         * @param id The Id of the IfcCenterLineProfileDef.
         * @return A pointer to the IfcCenterLineProfileDef if found, NULL otherwise.
         */
        IfcCenterLineProfileDef *getIfcCenterLineProfileDef(Step::Id id);
        /**
         * Removes a IfcCenterLineProfileDef Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcCenterLineProfileDef to remove.
         * @return success.
         */
        bool removeIfcCenterLineProfileDef(IfcCenterLineProfileDef *arg);
        /**
         * Create an IfcCenterLineProfileDef Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcCenterLineProfileDef entity.
         */
        Step::RefPtr< IfcCenterLineProfileDef > createIfcCenterLineProfileDef(bool isVolatile = false);
        /**
         * Clone an IfcCenterLineProfileDef Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcCenterLineProfileDef Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcCenterLineProfileDef *cloneIfcCenterLineProfileDef(const IfcCenterLineProfileDef &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcCenterLineProfileDef Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcCenterLineProfileDef entities.
         */
        Step::RefLinkedList< IfcCenterLineProfileDef > &getAllIfcCenterLineProfileDef();
        /**
         * Get the IfcChamferEdgeFeature entity by it's Id.
         * 
         * @param id The Id of the IfcChamferEdgeFeature.
         * @return A pointer to the IfcChamferEdgeFeature if found, NULL otherwise.
         */
        IfcChamferEdgeFeature *getIfcChamferEdgeFeature(Step::Id id);
        /**
         * Removes a IfcChamferEdgeFeature Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcChamferEdgeFeature to remove.
         * @return success.
         */
        bool removeIfcChamferEdgeFeature(IfcChamferEdgeFeature *arg);
        /**
         * Create an IfcChamferEdgeFeature Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcChamferEdgeFeature entity.
         */
        Step::RefPtr< IfcChamferEdgeFeature > createIfcChamferEdgeFeature(bool isVolatile = false);
        /**
         * Clone an IfcChamferEdgeFeature Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcChamferEdgeFeature Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcChamferEdgeFeature *cloneIfcChamferEdgeFeature(const IfcChamferEdgeFeature &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcChamferEdgeFeature Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcChamferEdgeFeature entities.
         */
        Step::RefLinkedList< IfcChamferEdgeFeature > &getAllIfcChamferEdgeFeature();
        /**
         * Get the IfcChillerType entity by it's Id.
         * 
         * @param id The Id of the IfcChillerType.
         * @return A pointer to the IfcChillerType if found, NULL otherwise.
         */
        IfcChillerType *getIfcChillerType(Step::Id id);
        /**
         * Removes a IfcChillerType Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcChillerType to remove.
         * @return success.
         */
        bool removeIfcChillerType(IfcChillerType *arg);
        /**
         * Create an IfcChillerType Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcChillerType entity.
         */
        Step::RefPtr< IfcChillerType > createIfcChillerType(bool isVolatile = false);
        /**
         * Clone an IfcChillerType Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcChillerType Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcChillerType *cloneIfcChillerType(const IfcChillerType &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcChillerType Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcChillerType entities.
         */
        Step::RefLinkedList< IfcChillerType > &getAllIfcChillerType();
        /**
         * Get the IfcCircle entity by it's Id.
         * 
         * @param id The Id of the IfcCircle.
         * @return A pointer to the IfcCircle if found, NULL otherwise.
         */
        IfcCircle *getIfcCircle(Step::Id id);
        /**
         * Removes a IfcCircle Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcCircle to remove.
         * @return success.
         */
        bool removeIfcCircle(IfcCircle *arg);
        /**
         * Create an IfcCircle Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcCircle entity.
         */
        Step::RefPtr< IfcCircle > createIfcCircle(bool isVolatile = false);
        /**
         * Clone an IfcCircle Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcCircle Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcCircle *cloneIfcCircle(const IfcCircle &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcCircle Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcCircle entities.
         */
        Step::RefLinkedList< IfcCircle > &getAllIfcCircle();
        /**
         * Get the IfcCircleHollowProfileDef entity by it's Id.
         * 
         * @param id The Id of the IfcCircleHollowProfileDef.
         * @return A pointer to the IfcCircleHollowProfileDef if found, NULL otherwise.
         */
        IfcCircleHollowProfileDef *getIfcCircleHollowProfileDef(Step::Id id);
        /**
         * Removes a IfcCircleHollowProfileDef Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcCircleHollowProfileDef to remove.
         * @return success.
         */
        bool removeIfcCircleHollowProfileDef(IfcCircleHollowProfileDef *arg);
        /**
         * Create an IfcCircleHollowProfileDef Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcCircleHollowProfileDef entity.
         */
        Step::RefPtr< IfcCircleHollowProfileDef > createIfcCircleHollowProfileDef(bool isVolatile = false);
        /**
         * Clone an IfcCircleHollowProfileDef Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcCircleHollowProfileDef Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcCircleHollowProfileDef *cloneIfcCircleHollowProfileDef(const IfcCircleHollowProfileDef &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcCircleHollowProfileDef Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcCircleHollowProfileDef entities.
         */
        Step::RefLinkedList< IfcCircleHollowProfileDef > &getAllIfcCircleHollowProfileDef();
        /**
         * Get the IfcCircleProfileDef entity by it's Id.
         * 
         * @param id The Id of the IfcCircleProfileDef.
         * @return A pointer to the IfcCircleProfileDef if found, NULL otherwise.
         */
        IfcCircleProfileDef *getIfcCircleProfileDef(Step::Id id);
        /**
         * Removes a IfcCircleProfileDef Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcCircleProfileDef to remove.
         * @return success.
         */
        bool removeIfcCircleProfileDef(IfcCircleProfileDef *arg);
        /**
         * Create an IfcCircleProfileDef Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcCircleProfileDef entity.
         */
        Step::RefPtr< IfcCircleProfileDef > createIfcCircleProfileDef(bool isVolatile = false);
        /**
         * Clone an IfcCircleProfileDef Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcCircleProfileDef Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcCircleProfileDef *cloneIfcCircleProfileDef(const IfcCircleProfileDef &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcCircleProfileDef Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcCircleProfileDef entities.
         */
        Step::RefLinkedList< IfcCircleProfileDef > &getAllIfcCircleProfileDef();
        /**
         * Get the IfcClassification entity by it's Id.
         * 
         * @param id The Id of the IfcClassification.
         * @return A pointer to the IfcClassification if found, NULL otherwise.
         */
        IfcClassification *getIfcClassification(Step::Id id);
        /**
         * Removes a IfcClassification Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcClassification to remove.
         * @return success.
         */
        bool removeIfcClassification(IfcClassification *arg);
        /**
         * Create an IfcClassification Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcClassification entity.
         */
        Step::RefPtr< IfcClassification > createIfcClassification(bool isVolatile = false);
        /**
         * Clone an IfcClassification Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcClassification Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcClassification *cloneIfcClassification(const IfcClassification &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcClassification Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcClassification entities.
         */
        Step::RefLinkedList< IfcClassification > &getAllIfcClassification();
        /**
         * Get the IfcClassificationItem entity by it's Id.
         * 
         * @param id The Id of the IfcClassificationItem.
         * @return A pointer to the IfcClassificationItem if found, NULL otherwise.
         */
        IfcClassificationItem *getIfcClassificationItem(Step::Id id);
        /**
         * Removes a IfcClassificationItem Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcClassificationItem to remove.
         * @return success.
         */
        bool removeIfcClassificationItem(IfcClassificationItem *arg);
        /**
         * Create an IfcClassificationItem Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcClassificationItem entity.
         */
        Step::RefPtr< IfcClassificationItem > createIfcClassificationItem(bool isVolatile = false);
        /**
         * Clone an IfcClassificationItem Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcClassificationItem Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcClassificationItem *cloneIfcClassificationItem(const IfcClassificationItem &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcClassificationItem Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcClassificationItem entities.
         */
        Step::RefLinkedList< IfcClassificationItem > &getAllIfcClassificationItem();
        /**
         * Get the IfcClassificationItemRelationship entity by it's Id.
         * 
         * @param id The Id of the IfcClassificationItemRelationship.
         * @return A pointer to the IfcClassificationItemRelationship if found, NULL otherwise.
         */
        IfcClassificationItemRelationship *getIfcClassificationItemRelationship(Step::Id id);
        /**
         * Removes a IfcClassificationItemRelationship Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcClassificationItemRelationship to remove.
         * @return success.
         */
        bool removeIfcClassificationItemRelationship(IfcClassificationItemRelationship *arg);
        /**
         * Create an IfcClassificationItemRelationship Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcClassificationItemRelationship entity.
         */
        Step::RefPtr< IfcClassificationItemRelationship > createIfcClassificationItemRelationship(bool isVolatile = false);
        /**
         * Clone an IfcClassificationItemRelationship Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcClassificationItemRelationship Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcClassificationItemRelationship *cloneIfcClassificationItemRelationship(const IfcClassificationItemRelationship &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcClassificationItemRelationship Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcClassificationItemRelationship entities.
         */
        Step::RefLinkedList< IfcClassificationItemRelationship > &getAllIfcClassificationItemRelationship();
        /**
         * Get the IfcClassificationNotation entity by it's Id.
         * 
         * @param id The Id of the IfcClassificationNotation.
         * @return A pointer to the IfcClassificationNotation if found, NULL otherwise.
         */
        IfcClassificationNotation *getIfcClassificationNotation(Step::Id id);
        /**
         * Removes a IfcClassificationNotation Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcClassificationNotation to remove.
         * @return success.
         */
        bool removeIfcClassificationNotation(IfcClassificationNotation *arg);
        /**
         * Create an IfcClassificationNotation Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcClassificationNotation entity.
         */
        Step::RefPtr< IfcClassificationNotation > createIfcClassificationNotation(bool isVolatile = false);
        /**
         * Clone an IfcClassificationNotation Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcClassificationNotation Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcClassificationNotation *cloneIfcClassificationNotation(const IfcClassificationNotation &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcClassificationNotation Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcClassificationNotation entities.
         */
        Step::RefLinkedList< IfcClassificationNotation > &getAllIfcClassificationNotation();
        /**
         * Get the IfcClassificationNotationFacet entity by it's Id.
         * 
         * @param id The Id of the IfcClassificationNotationFacet.
         * @return A pointer to the IfcClassificationNotationFacet if found, NULL otherwise.
         */
        IfcClassificationNotationFacet *getIfcClassificationNotationFacet(Step::Id id);
        /**
         * Removes a IfcClassificationNotationFacet Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcClassificationNotationFacet to remove.
         * @return success.
         */
        bool removeIfcClassificationNotationFacet(IfcClassificationNotationFacet *arg);
        /**
         * Create an IfcClassificationNotationFacet Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcClassificationNotationFacet entity.
         */
        Step::RefPtr< IfcClassificationNotationFacet > createIfcClassificationNotationFacet(bool isVolatile = false);
        /**
         * Clone an IfcClassificationNotationFacet Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcClassificationNotationFacet Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcClassificationNotationFacet *cloneIfcClassificationNotationFacet(const IfcClassificationNotationFacet &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcClassificationNotationFacet Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcClassificationNotationFacet entities.
         */
        Step::RefLinkedList< IfcClassificationNotationFacet > &getAllIfcClassificationNotationFacet();
        /**
         * Get the IfcClassificationReference entity by it's Id.
         * 
         * @param id The Id of the IfcClassificationReference.
         * @return A pointer to the IfcClassificationReference if found, NULL otherwise.
         */
        IfcClassificationReference *getIfcClassificationReference(Step::Id id);
        /**
         * Removes a IfcClassificationReference Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcClassificationReference to remove.
         * @return success.
         */
        bool removeIfcClassificationReference(IfcClassificationReference *arg);
        /**
         * Create an IfcClassificationReference Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcClassificationReference entity.
         */
        Step::RefPtr< IfcClassificationReference > createIfcClassificationReference(bool isVolatile = false);
        /**
         * Clone an IfcClassificationReference Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcClassificationReference Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcClassificationReference *cloneIfcClassificationReference(const IfcClassificationReference &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcClassificationReference Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcClassificationReference entities.
         */
        Step::RefLinkedList< IfcClassificationReference > &getAllIfcClassificationReference();
        /**
         * Get the IfcClosedShell entity by it's Id.
         * 
         * @param id The Id of the IfcClosedShell.
         * @return A pointer to the IfcClosedShell if found, NULL otherwise.
         */
        IfcClosedShell *getIfcClosedShell(Step::Id id);
        /**
         * Removes a IfcClosedShell Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcClosedShell to remove.
         * @return success.
         */
        bool removeIfcClosedShell(IfcClosedShell *arg);
        /**
         * Create an IfcClosedShell Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcClosedShell entity.
         */
        Step::RefPtr< IfcClosedShell > createIfcClosedShell(bool isVolatile = false);
        /**
         * Clone an IfcClosedShell Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcClosedShell Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcClosedShell *cloneIfcClosedShell(const IfcClosedShell &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcClosedShell Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcClosedShell entities.
         */
        Step::RefLinkedList< IfcClosedShell > &getAllIfcClosedShell();
        /**
         * Get the IfcCoilType entity by it's Id.
         * 
         * @param id The Id of the IfcCoilType.
         * @return A pointer to the IfcCoilType if found, NULL otherwise.
         */
        IfcCoilType *getIfcCoilType(Step::Id id);
        /**
         * Removes a IfcCoilType Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcCoilType to remove.
         * @return success.
         */
        bool removeIfcCoilType(IfcCoilType *arg);
        /**
         * Create an IfcCoilType Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcCoilType entity.
         */
        Step::RefPtr< IfcCoilType > createIfcCoilType(bool isVolatile = false);
        /**
         * Clone an IfcCoilType Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcCoilType Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcCoilType *cloneIfcCoilType(const IfcCoilType &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcCoilType Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcCoilType entities.
         */
        Step::RefLinkedList< IfcCoilType > &getAllIfcCoilType();
        /**
         * Get the IfcColourRgb entity by it's Id.
         * 
         * @param id The Id of the IfcColourRgb.
         * @return A pointer to the IfcColourRgb if found, NULL otherwise.
         */
        IfcColourRgb *getIfcColourRgb(Step::Id id);
        /**
         * Removes a IfcColourRgb Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcColourRgb to remove.
         * @return success.
         */
        bool removeIfcColourRgb(IfcColourRgb *arg);
        /**
         * Create an IfcColourRgb Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcColourRgb entity.
         */
        Step::RefPtr< IfcColourRgb > createIfcColourRgb(bool isVolatile = false);
        /**
         * Clone an IfcColourRgb Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcColourRgb Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcColourRgb *cloneIfcColourRgb(const IfcColourRgb &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcColourRgb Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcColourRgb entities.
         */
        Step::RefLinkedList< IfcColourRgb > &getAllIfcColourRgb();
        /**
         * Get the IfcColourSpecification entity by it's Id.
         * 
         * @param id The Id of the IfcColourSpecification.
         * @return A pointer to the IfcColourSpecification if found, NULL otherwise.
         */
        IfcColourSpecification *getIfcColourSpecification(Step::Id id);
        /**
         * Removes a IfcColourSpecification Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcColourSpecification to remove.
         * @return success.
         */
        bool removeIfcColourSpecification(IfcColourSpecification *arg);
        /**
         * Create an IfcColourSpecification Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcColourSpecification entity.
         */
        Step::RefPtr< IfcColourSpecification > createIfcColourSpecification(bool isVolatile = false);
        /**
         * Clone an IfcColourSpecification Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcColourSpecification Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcColourSpecification *cloneIfcColourSpecification(const IfcColourSpecification &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcColourSpecification Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcColourSpecification entities.
         */
        Step::RefLinkedList< IfcColourSpecification > &getAllIfcColourSpecification();
        /**
         * Get the IfcColumn entity by it's Id.
         * 
         * @param id The Id of the IfcColumn.
         * @return A pointer to the IfcColumn if found, NULL otherwise.
         */
        IfcColumn *getIfcColumn(Step::Id id);
        /**
         * Removes a IfcColumn Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcColumn to remove.
         * @return success.
         */
        bool removeIfcColumn(IfcColumn *arg);
        /**
         * Create an IfcColumn Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcColumn entity.
         */
        Step::RefPtr< IfcColumn > createIfcColumn(bool isVolatile = false);
        /**
         * Clone an IfcColumn Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcColumn Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcColumn *cloneIfcColumn(const IfcColumn &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcColumn Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcColumn entities.
         */
        Step::RefLinkedList< IfcColumn > &getAllIfcColumn();
        /**
         * Get the IfcColumnType entity by it's Id.
         * 
         * @param id The Id of the IfcColumnType.
         * @return A pointer to the IfcColumnType if found, NULL otherwise.
         */
        IfcColumnType *getIfcColumnType(Step::Id id);
        /**
         * Removes a IfcColumnType Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcColumnType to remove.
         * @return success.
         */
        bool removeIfcColumnType(IfcColumnType *arg);
        /**
         * Create an IfcColumnType Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcColumnType entity.
         */
        Step::RefPtr< IfcColumnType > createIfcColumnType(bool isVolatile = false);
        /**
         * Clone an IfcColumnType Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcColumnType Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcColumnType *cloneIfcColumnType(const IfcColumnType &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcColumnType Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcColumnType entities.
         */
        Step::RefLinkedList< IfcColumnType > &getAllIfcColumnType();
        /**
         * Get the IfcComplexProperty entity by it's Id.
         * 
         * @param id The Id of the IfcComplexProperty.
         * @return A pointer to the IfcComplexProperty if found, NULL otherwise.
         */
        IfcComplexProperty *getIfcComplexProperty(Step::Id id);
        /**
         * Removes a IfcComplexProperty Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcComplexProperty to remove.
         * @return success.
         */
        bool removeIfcComplexProperty(IfcComplexProperty *arg);
        /**
         * Create an IfcComplexProperty Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcComplexProperty entity.
         */
        Step::RefPtr< IfcComplexProperty > createIfcComplexProperty(bool isVolatile = false);
        /**
         * Clone an IfcComplexProperty Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcComplexProperty Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcComplexProperty *cloneIfcComplexProperty(const IfcComplexProperty &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcComplexProperty Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcComplexProperty entities.
         */
        Step::RefLinkedList< IfcComplexProperty > &getAllIfcComplexProperty();
        /**
         * Get the IfcCompositeCurve entity by it's Id.
         * 
         * @param id The Id of the IfcCompositeCurve.
         * @return A pointer to the IfcCompositeCurve if found, NULL otherwise.
         */
        IfcCompositeCurve *getIfcCompositeCurve(Step::Id id);
        /**
         * Removes a IfcCompositeCurve Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcCompositeCurve to remove.
         * @return success.
         */
        bool removeIfcCompositeCurve(IfcCompositeCurve *arg);
        /**
         * Create an IfcCompositeCurve Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcCompositeCurve entity.
         */
        Step::RefPtr< IfcCompositeCurve > createIfcCompositeCurve(bool isVolatile = false);
        /**
         * Clone an IfcCompositeCurve Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcCompositeCurve Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcCompositeCurve *cloneIfcCompositeCurve(const IfcCompositeCurve &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcCompositeCurve Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcCompositeCurve entities.
         */
        Step::RefLinkedList< IfcCompositeCurve > &getAllIfcCompositeCurve();
        /**
         * Get the IfcCompositeCurveSegment entity by it's Id.
         * 
         * @param id The Id of the IfcCompositeCurveSegment.
         * @return A pointer to the IfcCompositeCurveSegment if found, NULL otherwise.
         */
        IfcCompositeCurveSegment *getIfcCompositeCurveSegment(Step::Id id);
        /**
         * Removes a IfcCompositeCurveSegment Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcCompositeCurveSegment to remove.
         * @return success.
         */
        bool removeIfcCompositeCurveSegment(IfcCompositeCurveSegment *arg);
        /**
         * Create an IfcCompositeCurveSegment Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcCompositeCurveSegment entity.
         */
        Step::RefPtr< IfcCompositeCurveSegment > createIfcCompositeCurveSegment(bool isVolatile = false);
        /**
         * Clone an IfcCompositeCurveSegment Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcCompositeCurveSegment Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcCompositeCurveSegment *cloneIfcCompositeCurveSegment(const IfcCompositeCurveSegment &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcCompositeCurveSegment Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcCompositeCurveSegment entities.
         */
        Step::RefLinkedList< IfcCompositeCurveSegment > &getAllIfcCompositeCurveSegment();
        /**
         * Get the IfcCompositeProfileDef entity by it's Id.
         * 
         * @param id The Id of the IfcCompositeProfileDef.
         * @return A pointer to the IfcCompositeProfileDef if found, NULL otherwise.
         */
        IfcCompositeProfileDef *getIfcCompositeProfileDef(Step::Id id);
        /**
         * Removes a IfcCompositeProfileDef Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcCompositeProfileDef to remove.
         * @return success.
         */
        bool removeIfcCompositeProfileDef(IfcCompositeProfileDef *arg);
        /**
         * Create an IfcCompositeProfileDef Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcCompositeProfileDef entity.
         */
        Step::RefPtr< IfcCompositeProfileDef > createIfcCompositeProfileDef(bool isVolatile = false);
        /**
         * Clone an IfcCompositeProfileDef Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcCompositeProfileDef Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcCompositeProfileDef *cloneIfcCompositeProfileDef(const IfcCompositeProfileDef &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcCompositeProfileDef Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcCompositeProfileDef entities.
         */
        Step::RefLinkedList< IfcCompositeProfileDef > &getAllIfcCompositeProfileDef();
        /**
         * Get the IfcCompressorType entity by it's Id.
         * 
         * @param id The Id of the IfcCompressorType.
         * @return A pointer to the IfcCompressorType if found, NULL otherwise.
         */
        IfcCompressorType *getIfcCompressorType(Step::Id id);
        /**
         * Removes a IfcCompressorType Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcCompressorType to remove.
         * @return success.
         */
        bool removeIfcCompressorType(IfcCompressorType *arg);
        /**
         * Create an IfcCompressorType Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcCompressorType entity.
         */
        Step::RefPtr< IfcCompressorType > createIfcCompressorType(bool isVolatile = false);
        /**
         * Clone an IfcCompressorType Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcCompressorType Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcCompressorType *cloneIfcCompressorType(const IfcCompressorType &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcCompressorType Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcCompressorType entities.
         */
        Step::RefLinkedList< IfcCompressorType > &getAllIfcCompressorType();
        /**
         * Get the IfcCondenserType entity by it's Id.
         * 
         * @param id The Id of the IfcCondenserType.
         * @return A pointer to the IfcCondenserType if found, NULL otherwise.
         */
        IfcCondenserType *getIfcCondenserType(Step::Id id);
        /**
         * Removes a IfcCondenserType Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcCondenserType to remove.
         * @return success.
         */
        bool removeIfcCondenserType(IfcCondenserType *arg);
        /**
         * Create an IfcCondenserType Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcCondenserType entity.
         */
        Step::RefPtr< IfcCondenserType > createIfcCondenserType(bool isVolatile = false);
        /**
         * Clone an IfcCondenserType Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcCondenserType Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcCondenserType *cloneIfcCondenserType(const IfcCondenserType &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcCondenserType Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcCondenserType entities.
         */
        Step::RefLinkedList< IfcCondenserType > &getAllIfcCondenserType();
        /**
         * Get the IfcCondition entity by it's Id.
         * 
         * @param id The Id of the IfcCondition.
         * @return A pointer to the IfcCondition if found, NULL otherwise.
         */
        IfcCondition *getIfcCondition(Step::Id id);
        /**
         * Removes a IfcCondition Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcCondition to remove.
         * @return success.
         */
        bool removeIfcCondition(IfcCondition *arg);
        /**
         * Create an IfcCondition Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcCondition entity.
         */
        Step::RefPtr< IfcCondition > createIfcCondition(bool isVolatile = false);
        /**
         * Clone an IfcCondition Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcCondition Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcCondition *cloneIfcCondition(const IfcCondition &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcCondition Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcCondition entities.
         */
        Step::RefLinkedList< IfcCondition > &getAllIfcCondition();
        /**
         * Get the IfcConditionCriterion entity by it's Id.
         * 
         * @param id The Id of the IfcConditionCriterion.
         * @return A pointer to the IfcConditionCriterion if found, NULL otherwise.
         */
        IfcConditionCriterion *getIfcConditionCriterion(Step::Id id);
        /**
         * Removes a IfcConditionCriterion Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcConditionCriterion to remove.
         * @return success.
         */
        bool removeIfcConditionCriterion(IfcConditionCriterion *arg);
        /**
         * Create an IfcConditionCriterion Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcConditionCriterion entity.
         */
        Step::RefPtr< IfcConditionCriterion > createIfcConditionCriterion(bool isVolatile = false);
        /**
         * Clone an IfcConditionCriterion Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcConditionCriterion Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcConditionCriterion *cloneIfcConditionCriterion(const IfcConditionCriterion &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcConditionCriterion Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcConditionCriterion entities.
         */
        Step::RefLinkedList< IfcConditionCriterion > &getAllIfcConditionCriterion();
        /**
         * Get the IfcConic entity by it's Id.
         * 
         * @param id The Id of the IfcConic.
         * @return A pointer to the IfcConic if found, NULL otherwise.
         */
        IfcConic *getIfcConic(Step::Id id);
        /**
         * Removes a IfcConic Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcConic to remove.
         * @return success.
         */
        bool removeIfcConic(IfcConic *arg);
        /**
         * Create an IfcConic Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcConic entity.
         */
        Step::RefPtr< IfcConic > createIfcConic(bool isVolatile = false);
        /**
         * Clone an IfcConic Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcConic Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcConic *cloneIfcConic(const IfcConic &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcConic Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcConic entities.
         */
        Step::RefLinkedList< IfcConic > &getAllIfcConic();
        /**
         * Get the IfcConnectedFaceSet entity by it's Id.
         * 
         * @param id The Id of the IfcConnectedFaceSet.
         * @return A pointer to the IfcConnectedFaceSet if found, NULL otherwise.
         */
        IfcConnectedFaceSet *getIfcConnectedFaceSet(Step::Id id);
        /**
         * Removes a IfcConnectedFaceSet Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcConnectedFaceSet to remove.
         * @return success.
         */
        bool removeIfcConnectedFaceSet(IfcConnectedFaceSet *arg);
        /**
         * Create an IfcConnectedFaceSet Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcConnectedFaceSet entity.
         */
        Step::RefPtr< IfcConnectedFaceSet > createIfcConnectedFaceSet(bool isVolatile = false);
        /**
         * Clone an IfcConnectedFaceSet Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcConnectedFaceSet Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcConnectedFaceSet *cloneIfcConnectedFaceSet(const IfcConnectedFaceSet &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcConnectedFaceSet Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcConnectedFaceSet entities.
         */
        Step::RefLinkedList< IfcConnectedFaceSet > &getAllIfcConnectedFaceSet();
        /**
         * Get the IfcConnectionCurveGeometry entity by it's Id.
         * 
         * @param id The Id of the IfcConnectionCurveGeometry.
         * @return A pointer to the IfcConnectionCurveGeometry if found, NULL otherwise.
         */
        IfcConnectionCurveGeometry *getIfcConnectionCurveGeometry(Step::Id id);
        /**
         * Removes a IfcConnectionCurveGeometry Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcConnectionCurveGeometry to remove.
         * @return success.
         */
        bool removeIfcConnectionCurveGeometry(IfcConnectionCurveGeometry *arg);
        /**
         * Create an IfcConnectionCurveGeometry Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcConnectionCurveGeometry entity.
         */
        Step::RefPtr< IfcConnectionCurveGeometry > createIfcConnectionCurveGeometry(bool isVolatile = false);
        /**
         * Clone an IfcConnectionCurveGeometry Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcConnectionCurveGeometry Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcConnectionCurveGeometry *cloneIfcConnectionCurveGeometry(const IfcConnectionCurveGeometry &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcConnectionCurveGeometry Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcConnectionCurveGeometry entities.
         */
        Step::RefLinkedList< IfcConnectionCurveGeometry > &getAllIfcConnectionCurveGeometry();
        /**
         * Get the IfcConnectionGeometry entity by it's Id.
         * 
         * @param id The Id of the IfcConnectionGeometry.
         * @return A pointer to the IfcConnectionGeometry if found, NULL otherwise.
         */
        IfcConnectionGeometry *getIfcConnectionGeometry(Step::Id id);
        /**
         * Removes a IfcConnectionGeometry Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcConnectionGeometry to remove.
         * @return success.
         */
        bool removeIfcConnectionGeometry(IfcConnectionGeometry *arg);
        /**
         * Create an IfcConnectionGeometry Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcConnectionGeometry entity.
         */
        Step::RefPtr< IfcConnectionGeometry > createIfcConnectionGeometry(bool isVolatile = false);
        /**
         * Clone an IfcConnectionGeometry Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcConnectionGeometry Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcConnectionGeometry *cloneIfcConnectionGeometry(const IfcConnectionGeometry &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcConnectionGeometry Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcConnectionGeometry entities.
         */
        Step::RefLinkedList< IfcConnectionGeometry > &getAllIfcConnectionGeometry();
        /**
         * Get the IfcConnectionPointEccentricity entity by it's Id.
         * 
         * @param id The Id of the IfcConnectionPointEccentricity.
         * @return A pointer to the IfcConnectionPointEccentricity if found, NULL otherwise.
         */
        IfcConnectionPointEccentricity *getIfcConnectionPointEccentricity(Step::Id id);
        /**
         * Removes a IfcConnectionPointEccentricity Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcConnectionPointEccentricity to remove.
         * @return success.
         */
        bool removeIfcConnectionPointEccentricity(IfcConnectionPointEccentricity *arg);
        /**
         * Create an IfcConnectionPointEccentricity Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcConnectionPointEccentricity entity.
         */
        Step::RefPtr< IfcConnectionPointEccentricity > createIfcConnectionPointEccentricity(bool isVolatile = false);
        /**
         * Clone an IfcConnectionPointEccentricity Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcConnectionPointEccentricity Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcConnectionPointEccentricity *cloneIfcConnectionPointEccentricity(const IfcConnectionPointEccentricity &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcConnectionPointEccentricity Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcConnectionPointEccentricity entities.
         */
        Step::RefLinkedList< IfcConnectionPointEccentricity > &getAllIfcConnectionPointEccentricity();
        /**
         * Get the IfcConnectionPointGeometry entity by it's Id.
         * 
         * @param id The Id of the IfcConnectionPointGeometry.
         * @return A pointer to the IfcConnectionPointGeometry if found, NULL otherwise.
         */
        IfcConnectionPointGeometry *getIfcConnectionPointGeometry(Step::Id id);
        /**
         * Removes a IfcConnectionPointGeometry Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcConnectionPointGeometry to remove.
         * @return success.
         */
        bool removeIfcConnectionPointGeometry(IfcConnectionPointGeometry *arg);
        /**
         * Create an IfcConnectionPointGeometry Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcConnectionPointGeometry entity.
         */
        Step::RefPtr< IfcConnectionPointGeometry > createIfcConnectionPointGeometry(bool isVolatile = false);
        /**
         * Clone an IfcConnectionPointGeometry Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcConnectionPointGeometry Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcConnectionPointGeometry *cloneIfcConnectionPointGeometry(const IfcConnectionPointGeometry &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcConnectionPointGeometry Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcConnectionPointGeometry entities.
         */
        Step::RefLinkedList< IfcConnectionPointGeometry > &getAllIfcConnectionPointGeometry();
        /**
         * Get the IfcConnectionPortGeometry entity by it's Id.
         * 
         * @param id The Id of the IfcConnectionPortGeometry.
         * @return A pointer to the IfcConnectionPortGeometry if found, NULL otherwise.
         */
        IfcConnectionPortGeometry *getIfcConnectionPortGeometry(Step::Id id);
        /**
         * Removes a IfcConnectionPortGeometry Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcConnectionPortGeometry to remove.
         * @return success.
         */
        bool removeIfcConnectionPortGeometry(IfcConnectionPortGeometry *arg);
        /**
         * Create an IfcConnectionPortGeometry Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcConnectionPortGeometry entity.
         */
        Step::RefPtr< IfcConnectionPortGeometry > createIfcConnectionPortGeometry(bool isVolatile = false);
        /**
         * Clone an IfcConnectionPortGeometry Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcConnectionPortGeometry Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcConnectionPortGeometry *cloneIfcConnectionPortGeometry(const IfcConnectionPortGeometry &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcConnectionPortGeometry Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcConnectionPortGeometry entities.
         */
        Step::RefLinkedList< IfcConnectionPortGeometry > &getAllIfcConnectionPortGeometry();
        /**
         * Get the IfcConnectionSurfaceGeometry entity by it's Id.
         * 
         * @param id The Id of the IfcConnectionSurfaceGeometry.
         * @return A pointer to the IfcConnectionSurfaceGeometry if found, NULL otherwise.
         */
        IfcConnectionSurfaceGeometry *getIfcConnectionSurfaceGeometry(Step::Id id);
        /**
         * Removes a IfcConnectionSurfaceGeometry Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcConnectionSurfaceGeometry to remove.
         * @return success.
         */
        bool removeIfcConnectionSurfaceGeometry(IfcConnectionSurfaceGeometry *arg);
        /**
         * Create an IfcConnectionSurfaceGeometry Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcConnectionSurfaceGeometry entity.
         */
        Step::RefPtr< IfcConnectionSurfaceGeometry > createIfcConnectionSurfaceGeometry(bool isVolatile = false);
        /**
         * Clone an IfcConnectionSurfaceGeometry Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcConnectionSurfaceGeometry Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcConnectionSurfaceGeometry *cloneIfcConnectionSurfaceGeometry(const IfcConnectionSurfaceGeometry &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcConnectionSurfaceGeometry Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcConnectionSurfaceGeometry entities.
         */
        Step::RefLinkedList< IfcConnectionSurfaceGeometry > &getAllIfcConnectionSurfaceGeometry();
        /**
         * Get the IfcConstraint entity by it's Id.
         * 
         * @param id The Id of the IfcConstraint.
         * @return A pointer to the IfcConstraint if found, NULL otherwise.
         */
        IfcConstraint *getIfcConstraint(Step::Id id);
        /**
         * Removes a IfcConstraint Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcConstraint to remove.
         * @return success.
         */
        bool removeIfcConstraint(IfcConstraint *arg);
        /**
         * Create an IfcConstraint Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcConstraint entity.
         */
        Step::RefPtr< IfcConstraint > createIfcConstraint(bool isVolatile = false);
        /**
         * Clone an IfcConstraint Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcConstraint Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcConstraint *cloneIfcConstraint(const IfcConstraint &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcConstraint Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcConstraint entities.
         */
        Step::RefLinkedList< IfcConstraint > &getAllIfcConstraint();
        /**
         * Get the IfcConstraintAggregationRelationship entity by it's Id.
         * 
         * @param id The Id of the IfcConstraintAggregationRelationship.
         * @return A pointer to the IfcConstraintAggregationRelationship if found, NULL otherwise.
         */
        IfcConstraintAggregationRelationship *getIfcConstraintAggregationRelationship(Step::Id id);
        /**
         * Removes a IfcConstraintAggregationRelationship Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcConstraintAggregationRelationship to remove.
         * @return success.
         */
        bool removeIfcConstraintAggregationRelationship(IfcConstraintAggregationRelationship *arg);
        /**
         * Create an IfcConstraintAggregationRelationship Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcConstraintAggregationRelationship entity.
         */
        Step::RefPtr< IfcConstraintAggregationRelationship > createIfcConstraintAggregationRelationship(bool isVolatile = false);
        /**
         * Clone an IfcConstraintAggregationRelationship Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcConstraintAggregationRelationship Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcConstraintAggregationRelationship *cloneIfcConstraintAggregationRelationship(const IfcConstraintAggregationRelationship &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcConstraintAggregationRelationship Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcConstraintAggregationRelationship entities.
         */
        Step::RefLinkedList< IfcConstraintAggregationRelationship > &getAllIfcConstraintAggregationRelationship();
        /**
         * Get the IfcConstraintClassificationRelationship entity by it's Id.
         * 
         * @param id The Id of the IfcConstraintClassificationRelationship.
         * @return A pointer to the IfcConstraintClassificationRelationship if found, NULL otherwise.
         */
        IfcConstraintClassificationRelationship *getIfcConstraintClassificationRelationship(Step::Id id);
        /**
         * Removes a IfcConstraintClassificationRelationship Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcConstraintClassificationRelationship to remove.
         * @return success.
         */
        bool removeIfcConstraintClassificationRelationship(IfcConstraintClassificationRelationship *arg);
        /**
         * Create an IfcConstraintClassificationRelationship Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcConstraintClassificationRelationship entity.
         */
        Step::RefPtr< IfcConstraintClassificationRelationship > createIfcConstraintClassificationRelationship(bool isVolatile = false);
        /**
         * Clone an IfcConstraintClassificationRelationship Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcConstraintClassificationRelationship Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcConstraintClassificationRelationship *cloneIfcConstraintClassificationRelationship(const IfcConstraintClassificationRelationship &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcConstraintClassificationRelationship Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcConstraintClassificationRelationship entities.
         */
        Step::RefLinkedList< IfcConstraintClassificationRelationship > &getAllIfcConstraintClassificationRelationship();
        /**
         * Get the IfcConstraintRelationship entity by it's Id.
         * 
         * @param id The Id of the IfcConstraintRelationship.
         * @return A pointer to the IfcConstraintRelationship if found, NULL otherwise.
         */
        IfcConstraintRelationship *getIfcConstraintRelationship(Step::Id id);
        /**
         * Removes a IfcConstraintRelationship Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcConstraintRelationship to remove.
         * @return success.
         */
        bool removeIfcConstraintRelationship(IfcConstraintRelationship *arg);
        /**
         * Create an IfcConstraintRelationship Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcConstraintRelationship entity.
         */
        Step::RefPtr< IfcConstraintRelationship > createIfcConstraintRelationship(bool isVolatile = false);
        /**
         * Clone an IfcConstraintRelationship Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcConstraintRelationship Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcConstraintRelationship *cloneIfcConstraintRelationship(const IfcConstraintRelationship &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcConstraintRelationship Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcConstraintRelationship entities.
         */
        Step::RefLinkedList< IfcConstraintRelationship > &getAllIfcConstraintRelationship();
        /**
         * Get the IfcConstructionEquipmentResource entity by it's Id.
         * 
         * @param id The Id of the IfcConstructionEquipmentResource.
         * @return A pointer to the IfcConstructionEquipmentResource if found, NULL otherwise.
         */
        IfcConstructionEquipmentResource *getIfcConstructionEquipmentResource(Step::Id id);
        /**
         * Removes a IfcConstructionEquipmentResource Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcConstructionEquipmentResource to remove.
         * @return success.
         */
        bool removeIfcConstructionEquipmentResource(IfcConstructionEquipmentResource *arg);
        /**
         * Create an IfcConstructionEquipmentResource Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcConstructionEquipmentResource entity.
         */
        Step::RefPtr< IfcConstructionEquipmentResource > createIfcConstructionEquipmentResource(bool isVolatile = false);
        /**
         * Clone an IfcConstructionEquipmentResource Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcConstructionEquipmentResource Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcConstructionEquipmentResource *cloneIfcConstructionEquipmentResource(const IfcConstructionEquipmentResource &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcConstructionEquipmentResource Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcConstructionEquipmentResource entities.
         */
        Step::RefLinkedList< IfcConstructionEquipmentResource > &getAllIfcConstructionEquipmentResource();
        /**
         * Get the IfcConstructionMaterialResource entity by it's Id.
         * 
         * @param id The Id of the IfcConstructionMaterialResource.
         * @return A pointer to the IfcConstructionMaterialResource if found, NULL otherwise.
         */
        IfcConstructionMaterialResource *getIfcConstructionMaterialResource(Step::Id id);
        /**
         * Removes a IfcConstructionMaterialResource Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcConstructionMaterialResource to remove.
         * @return success.
         */
        bool removeIfcConstructionMaterialResource(IfcConstructionMaterialResource *arg);
        /**
         * Create an IfcConstructionMaterialResource Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcConstructionMaterialResource entity.
         */
        Step::RefPtr< IfcConstructionMaterialResource > createIfcConstructionMaterialResource(bool isVolatile = false);
        /**
         * Clone an IfcConstructionMaterialResource Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcConstructionMaterialResource Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcConstructionMaterialResource *cloneIfcConstructionMaterialResource(const IfcConstructionMaterialResource &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcConstructionMaterialResource Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcConstructionMaterialResource entities.
         */
        Step::RefLinkedList< IfcConstructionMaterialResource > &getAllIfcConstructionMaterialResource();
        /**
         * Get the IfcConstructionProductResource entity by it's Id.
         * 
         * @param id The Id of the IfcConstructionProductResource.
         * @return A pointer to the IfcConstructionProductResource if found, NULL otherwise.
         */
        IfcConstructionProductResource *getIfcConstructionProductResource(Step::Id id);
        /**
         * Removes a IfcConstructionProductResource Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcConstructionProductResource to remove.
         * @return success.
         */
        bool removeIfcConstructionProductResource(IfcConstructionProductResource *arg);
        /**
         * Create an IfcConstructionProductResource Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcConstructionProductResource entity.
         */
        Step::RefPtr< IfcConstructionProductResource > createIfcConstructionProductResource(bool isVolatile = false);
        /**
         * Clone an IfcConstructionProductResource Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcConstructionProductResource Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcConstructionProductResource *cloneIfcConstructionProductResource(const IfcConstructionProductResource &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcConstructionProductResource Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcConstructionProductResource entities.
         */
        Step::RefLinkedList< IfcConstructionProductResource > &getAllIfcConstructionProductResource();
        /**
         * Get the IfcConstructionResource entity by it's Id.
         * 
         * @param id The Id of the IfcConstructionResource.
         * @return A pointer to the IfcConstructionResource if found, NULL otherwise.
         */
        IfcConstructionResource *getIfcConstructionResource(Step::Id id);
        /**
         * Removes a IfcConstructionResource Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcConstructionResource to remove.
         * @return success.
         */
        bool removeIfcConstructionResource(IfcConstructionResource *arg);
        /**
         * Create an IfcConstructionResource Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcConstructionResource entity.
         */
        Step::RefPtr< IfcConstructionResource > createIfcConstructionResource(bool isVolatile = false);
        /**
         * Clone an IfcConstructionResource Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcConstructionResource Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcConstructionResource *cloneIfcConstructionResource(const IfcConstructionResource &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcConstructionResource Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcConstructionResource entities.
         */
        Step::RefLinkedList< IfcConstructionResource > &getAllIfcConstructionResource();
        /**
         * Get the IfcContextDependentUnit entity by it's Id.
         * 
         * @param id The Id of the IfcContextDependentUnit.
         * @return A pointer to the IfcContextDependentUnit if found, NULL otherwise.
         */
        IfcContextDependentUnit *getIfcContextDependentUnit(Step::Id id);
        /**
         * Removes a IfcContextDependentUnit Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcContextDependentUnit to remove.
         * @return success.
         */
        bool removeIfcContextDependentUnit(IfcContextDependentUnit *arg);
        /**
         * Create an IfcContextDependentUnit Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcContextDependentUnit entity.
         */
        Step::RefPtr< IfcContextDependentUnit > createIfcContextDependentUnit(bool isVolatile = false);
        /**
         * Clone an IfcContextDependentUnit Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcContextDependentUnit Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcContextDependentUnit *cloneIfcContextDependentUnit(const IfcContextDependentUnit &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcContextDependentUnit Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcContextDependentUnit entities.
         */
        Step::RefLinkedList< IfcContextDependentUnit > &getAllIfcContextDependentUnit();
        /**
         * Get the IfcControl entity by it's Id.
         * 
         * @param id The Id of the IfcControl.
         * @return A pointer to the IfcControl if found, NULL otherwise.
         */
        IfcControl *getIfcControl(Step::Id id);
        /**
         * Removes a IfcControl Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcControl to remove.
         * @return success.
         */
        bool removeIfcControl(IfcControl *arg);
        /**
         * Create an IfcControl Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcControl entity.
         */
        Step::RefPtr< IfcControl > createIfcControl(bool isVolatile = false);
        /**
         * Clone an IfcControl Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcControl Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcControl *cloneIfcControl(const IfcControl &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcControl Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcControl entities.
         */
        Step::RefLinkedList< IfcControl > &getAllIfcControl();
        /**
         * Get the IfcControllerType entity by it's Id.
         * 
         * @param id The Id of the IfcControllerType.
         * @return A pointer to the IfcControllerType if found, NULL otherwise.
         */
        IfcControllerType *getIfcControllerType(Step::Id id);
        /**
         * Removes a IfcControllerType Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcControllerType to remove.
         * @return success.
         */
        bool removeIfcControllerType(IfcControllerType *arg);
        /**
         * Create an IfcControllerType Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcControllerType entity.
         */
        Step::RefPtr< IfcControllerType > createIfcControllerType(bool isVolatile = false);
        /**
         * Clone an IfcControllerType Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcControllerType Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcControllerType *cloneIfcControllerType(const IfcControllerType &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcControllerType Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcControllerType entities.
         */
        Step::RefLinkedList< IfcControllerType > &getAllIfcControllerType();
        /**
         * Get the IfcConversionBasedUnit entity by it's Id.
         * 
         * @param id The Id of the IfcConversionBasedUnit.
         * @return A pointer to the IfcConversionBasedUnit if found, NULL otherwise.
         */
        IfcConversionBasedUnit *getIfcConversionBasedUnit(Step::Id id);
        /**
         * Removes a IfcConversionBasedUnit Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcConversionBasedUnit to remove.
         * @return success.
         */
        bool removeIfcConversionBasedUnit(IfcConversionBasedUnit *arg);
        /**
         * Create an IfcConversionBasedUnit Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcConversionBasedUnit entity.
         */
        Step::RefPtr< IfcConversionBasedUnit > createIfcConversionBasedUnit(bool isVolatile = false);
        /**
         * Clone an IfcConversionBasedUnit Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcConversionBasedUnit Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcConversionBasedUnit *cloneIfcConversionBasedUnit(const IfcConversionBasedUnit &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcConversionBasedUnit Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcConversionBasedUnit entities.
         */
        Step::RefLinkedList< IfcConversionBasedUnit > &getAllIfcConversionBasedUnit();
        /**
         * Get the IfcCooledBeamType entity by it's Id.
         * 
         * @param id The Id of the IfcCooledBeamType.
         * @return A pointer to the IfcCooledBeamType if found, NULL otherwise.
         */
        IfcCooledBeamType *getIfcCooledBeamType(Step::Id id);
        /**
         * Removes a IfcCooledBeamType Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcCooledBeamType to remove.
         * @return success.
         */
        bool removeIfcCooledBeamType(IfcCooledBeamType *arg);
        /**
         * Create an IfcCooledBeamType Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcCooledBeamType entity.
         */
        Step::RefPtr< IfcCooledBeamType > createIfcCooledBeamType(bool isVolatile = false);
        /**
         * Clone an IfcCooledBeamType Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcCooledBeamType Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcCooledBeamType *cloneIfcCooledBeamType(const IfcCooledBeamType &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcCooledBeamType Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcCooledBeamType entities.
         */
        Step::RefLinkedList< IfcCooledBeamType > &getAllIfcCooledBeamType();
        /**
         * Get the IfcCoolingTowerType entity by it's Id.
         * 
         * @param id The Id of the IfcCoolingTowerType.
         * @return A pointer to the IfcCoolingTowerType if found, NULL otherwise.
         */
        IfcCoolingTowerType *getIfcCoolingTowerType(Step::Id id);
        /**
         * Removes a IfcCoolingTowerType Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcCoolingTowerType to remove.
         * @return success.
         */
        bool removeIfcCoolingTowerType(IfcCoolingTowerType *arg);
        /**
         * Create an IfcCoolingTowerType Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcCoolingTowerType entity.
         */
        Step::RefPtr< IfcCoolingTowerType > createIfcCoolingTowerType(bool isVolatile = false);
        /**
         * Clone an IfcCoolingTowerType Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcCoolingTowerType Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcCoolingTowerType *cloneIfcCoolingTowerType(const IfcCoolingTowerType &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcCoolingTowerType Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcCoolingTowerType entities.
         */
        Step::RefLinkedList< IfcCoolingTowerType > &getAllIfcCoolingTowerType();
        /**
         * Get the IfcCoordinatedUniversalTimeOffset entity by it's Id.
         * 
         * @param id The Id of the IfcCoordinatedUniversalTimeOffset.
         * @return A pointer to the IfcCoordinatedUniversalTimeOffset if found, NULL otherwise.
         */
        IfcCoordinatedUniversalTimeOffset *getIfcCoordinatedUniversalTimeOffset(Step::Id id);
        /**
         * Removes a IfcCoordinatedUniversalTimeOffset Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcCoordinatedUniversalTimeOffset to remove.
         * @return success.
         */
        bool removeIfcCoordinatedUniversalTimeOffset(IfcCoordinatedUniversalTimeOffset *arg);
        /**
         * Create an IfcCoordinatedUniversalTimeOffset Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcCoordinatedUniversalTimeOffset entity.
         */
        Step::RefPtr< IfcCoordinatedUniversalTimeOffset > createIfcCoordinatedUniversalTimeOffset(bool isVolatile = false);
        /**
         * Clone an IfcCoordinatedUniversalTimeOffset Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcCoordinatedUniversalTimeOffset Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcCoordinatedUniversalTimeOffset *cloneIfcCoordinatedUniversalTimeOffset(const IfcCoordinatedUniversalTimeOffset &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcCoordinatedUniversalTimeOffset Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcCoordinatedUniversalTimeOffset entities.
         */
        Step::RefLinkedList< IfcCoordinatedUniversalTimeOffset > &getAllIfcCoordinatedUniversalTimeOffset();
        /**
         * Get the IfcCostItem entity by it's Id.
         * 
         * @param id The Id of the IfcCostItem.
         * @return A pointer to the IfcCostItem if found, NULL otherwise.
         */
        IfcCostItem *getIfcCostItem(Step::Id id);
        /**
         * Removes a IfcCostItem Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcCostItem to remove.
         * @return success.
         */
        bool removeIfcCostItem(IfcCostItem *arg);
        /**
         * Create an IfcCostItem Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcCostItem entity.
         */
        Step::RefPtr< IfcCostItem > createIfcCostItem(bool isVolatile = false);
        /**
         * Clone an IfcCostItem Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcCostItem Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcCostItem *cloneIfcCostItem(const IfcCostItem &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcCostItem Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcCostItem entities.
         */
        Step::RefLinkedList< IfcCostItem > &getAllIfcCostItem();
        /**
         * Get the IfcCostSchedule entity by it's Id.
         * 
         * @param id The Id of the IfcCostSchedule.
         * @return A pointer to the IfcCostSchedule if found, NULL otherwise.
         */
        IfcCostSchedule *getIfcCostSchedule(Step::Id id);
        /**
         * Removes a IfcCostSchedule Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcCostSchedule to remove.
         * @return success.
         */
        bool removeIfcCostSchedule(IfcCostSchedule *arg);
        /**
         * Create an IfcCostSchedule Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcCostSchedule entity.
         */
        Step::RefPtr< IfcCostSchedule > createIfcCostSchedule(bool isVolatile = false);
        /**
         * Clone an IfcCostSchedule Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcCostSchedule Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcCostSchedule *cloneIfcCostSchedule(const IfcCostSchedule &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcCostSchedule Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcCostSchedule entities.
         */
        Step::RefLinkedList< IfcCostSchedule > &getAllIfcCostSchedule();
        /**
         * Get the IfcCostValue entity by it's Id.
         * 
         * @param id The Id of the IfcCostValue.
         * @return A pointer to the IfcCostValue if found, NULL otherwise.
         */
        IfcCostValue *getIfcCostValue(Step::Id id);
        /**
         * Removes a IfcCostValue Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcCostValue to remove.
         * @return success.
         */
        bool removeIfcCostValue(IfcCostValue *arg);
        /**
         * Create an IfcCostValue Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcCostValue entity.
         */
        Step::RefPtr< IfcCostValue > createIfcCostValue(bool isVolatile = false);
        /**
         * Clone an IfcCostValue Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcCostValue Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcCostValue *cloneIfcCostValue(const IfcCostValue &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcCostValue Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcCostValue entities.
         */
        Step::RefLinkedList< IfcCostValue > &getAllIfcCostValue();
        /**
         * Get the IfcCovering entity by it's Id.
         * 
         * @param id The Id of the IfcCovering.
         * @return A pointer to the IfcCovering if found, NULL otherwise.
         */
        IfcCovering *getIfcCovering(Step::Id id);
        /**
         * Removes a IfcCovering Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcCovering to remove.
         * @return success.
         */
        bool removeIfcCovering(IfcCovering *arg);
        /**
         * Create an IfcCovering Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcCovering entity.
         */
        Step::RefPtr< IfcCovering > createIfcCovering(bool isVolatile = false);
        /**
         * Clone an IfcCovering Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcCovering Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcCovering *cloneIfcCovering(const IfcCovering &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcCovering Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcCovering entities.
         */
        Step::RefLinkedList< IfcCovering > &getAllIfcCovering();
        /**
         * Get the IfcCoveringType entity by it's Id.
         * 
         * @param id The Id of the IfcCoveringType.
         * @return A pointer to the IfcCoveringType if found, NULL otherwise.
         */
        IfcCoveringType *getIfcCoveringType(Step::Id id);
        /**
         * Removes a IfcCoveringType Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcCoveringType to remove.
         * @return success.
         */
        bool removeIfcCoveringType(IfcCoveringType *arg);
        /**
         * Create an IfcCoveringType Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcCoveringType entity.
         */
        Step::RefPtr< IfcCoveringType > createIfcCoveringType(bool isVolatile = false);
        /**
         * Clone an IfcCoveringType Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcCoveringType Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcCoveringType *cloneIfcCoveringType(const IfcCoveringType &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcCoveringType Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcCoveringType entities.
         */
        Step::RefLinkedList< IfcCoveringType > &getAllIfcCoveringType();
        /**
         * Get the IfcCraneRailAShapeProfileDef entity by it's Id.
         * 
         * @param id The Id of the IfcCraneRailAShapeProfileDef.
         * @return A pointer to the IfcCraneRailAShapeProfileDef if found, NULL otherwise.
         */
        IfcCraneRailAShapeProfileDef *getIfcCraneRailAShapeProfileDef(Step::Id id);
        /**
         * Removes a IfcCraneRailAShapeProfileDef Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcCraneRailAShapeProfileDef to remove.
         * @return success.
         */
        bool removeIfcCraneRailAShapeProfileDef(IfcCraneRailAShapeProfileDef *arg);
        /**
         * Create an IfcCraneRailAShapeProfileDef Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcCraneRailAShapeProfileDef entity.
         */
        Step::RefPtr< IfcCraneRailAShapeProfileDef > createIfcCraneRailAShapeProfileDef(bool isVolatile = false);
        /**
         * Clone an IfcCraneRailAShapeProfileDef Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcCraneRailAShapeProfileDef Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcCraneRailAShapeProfileDef *cloneIfcCraneRailAShapeProfileDef(const IfcCraneRailAShapeProfileDef &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcCraneRailAShapeProfileDef Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcCraneRailAShapeProfileDef entities.
         */
        Step::RefLinkedList< IfcCraneRailAShapeProfileDef > &getAllIfcCraneRailAShapeProfileDef();
        /**
         * Get the IfcCraneRailFShapeProfileDef entity by it's Id.
         * 
         * @param id The Id of the IfcCraneRailFShapeProfileDef.
         * @return A pointer to the IfcCraneRailFShapeProfileDef if found, NULL otherwise.
         */
        IfcCraneRailFShapeProfileDef *getIfcCraneRailFShapeProfileDef(Step::Id id);
        /**
         * Removes a IfcCraneRailFShapeProfileDef Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcCraneRailFShapeProfileDef to remove.
         * @return success.
         */
        bool removeIfcCraneRailFShapeProfileDef(IfcCraneRailFShapeProfileDef *arg);
        /**
         * Create an IfcCraneRailFShapeProfileDef Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcCraneRailFShapeProfileDef entity.
         */
        Step::RefPtr< IfcCraneRailFShapeProfileDef > createIfcCraneRailFShapeProfileDef(bool isVolatile = false);
        /**
         * Clone an IfcCraneRailFShapeProfileDef Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcCraneRailFShapeProfileDef Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcCraneRailFShapeProfileDef *cloneIfcCraneRailFShapeProfileDef(const IfcCraneRailFShapeProfileDef &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcCraneRailFShapeProfileDef Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcCraneRailFShapeProfileDef entities.
         */
        Step::RefLinkedList< IfcCraneRailFShapeProfileDef > &getAllIfcCraneRailFShapeProfileDef();
        /**
         * Get the IfcCrewResource entity by it's Id.
         * 
         * @param id The Id of the IfcCrewResource.
         * @return A pointer to the IfcCrewResource if found, NULL otherwise.
         */
        IfcCrewResource *getIfcCrewResource(Step::Id id);
        /**
         * Removes a IfcCrewResource Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcCrewResource to remove.
         * @return success.
         */
        bool removeIfcCrewResource(IfcCrewResource *arg);
        /**
         * Create an IfcCrewResource Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcCrewResource entity.
         */
        Step::RefPtr< IfcCrewResource > createIfcCrewResource(bool isVolatile = false);
        /**
         * Clone an IfcCrewResource Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcCrewResource Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcCrewResource *cloneIfcCrewResource(const IfcCrewResource &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcCrewResource Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcCrewResource entities.
         */
        Step::RefLinkedList< IfcCrewResource > &getAllIfcCrewResource();
        /**
         * Get the IfcCsgPrimitive3D entity by it's Id.
         * 
         * @param id The Id of the IfcCsgPrimitive3D.
         * @return A pointer to the IfcCsgPrimitive3D if found, NULL otherwise.
         */
        IfcCsgPrimitive3D *getIfcCsgPrimitive3D(Step::Id id);
        /**
         * Removes a IfcCsgPrimitive3D Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcCsgPrimitive3D to remove.
         * @return success.
         */
        bool removeIfcCsgPrimitive3D(IfcCsgPrimitive3D *arg);
        /**
         * Create an IfcCsgPrimitive3D Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcCsgPrimitive3D entity.
         */
        Step::RefPtr< IfcCsgPrimitive3D > createIfcCsgPrimitive3D(bool isVolatile = false);
        /**
         * Clone an IfcCsgPrimitive3D Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcCsgPrimitive3D Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcCsgPrimitive3D *cloneIfcCsgPrimitive3D(const IfcCsgPrimitive3D &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcCsgPrimitive3D Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcCsgPrimitive3D entities.
         */
        Step::RefLinkedList< IfcCsgPrimitive3D > &getAllIfcCsgPrimitive3D();
        /**
         * Get the IfcCsgSolid entity by it's Id.
         * 
         * @param id The Id of the IfcCsgSolid.
         * @return A pointer to the IfcCsgSolid if found, NULL otherwise.
         */
        IfcCsgSolid *getIfcCsgSolid(Step::Id id);
        /**
         * Removes a IfcCsgSolid Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcCsgSolid to remove.
         * @return success.
         */
        bool removeIfcCsgSolid(IfcCsgSolid *arg);
        /**
         * Create an IfcCsgSolid Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcCsgSolid entity.
         */
        Step::RefPtr< IfcCsgSolid > createIfcCsgSolid(bool isVolatile = false);
        /**
         * Clone an IfcCsgSolid Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcCsgSolid Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcCsgSolid *cloneIfcCsgSolid(const IfcCsgSolid &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcCsgSolid Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcCsgSolid entities.
         */
        Step::RefLinkedList< IfcCsgSolid > &getAllIfcCsgSolid();
        /**
         * Get the IfcCShapeProfileDef entity by it's Id.
         * 
         * @param id The Id of the IfcCShapeProfileDef.
         * @return A pointer to the IfcCShapeProfileDef if found, NULL otherwise.
         */
        IfcCShapeProfileDef *getIfcCShapeProfileDef(Step::Id id);
        /**
         * Removes a IfcCShapeProfileDef Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcCShapeProfileDef to remove.
         * @return success.
         */
        bool removeIfcCShapeProfileDef(IfcCShapeProfileDef *arg);
        /**
         * Create an IfcCShapeProfileDef Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcCShapeProfileDef entity.
         */
        Step::RefPtr< IfcCShapeProfileDef > createIfcCShapeProfileDef(bool isVolatile = false);
        /**
         * Clone an IfcCShapeProfileDef Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcCShapeProfileDef Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcCShapeProfileDef *cloneIfcCShapeProfileDef(const IfcCShapeProfileDef &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcCShapeProfileDef Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcCShapeProfileDef entities.
         */
        Step::RefLinkedList< IfcCShapeProfileDef > &getAllIfcCShapeProfileDef();
        /**
         * Get the IfcCurrencyRelationship entity by it's Id.
         * 
         * @param id The Id of the IfcCurrencyRelationship.
         * @return A pointer to the IfcCurrencyRelationship if found, NULL otherwise.
         */
        IfcCurrencyRelationship *getIfcCurrencyRelationship(Step::Id id);
        /**
         * Removes a IfcCurrencyRelationship Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcCurrencyRelationship to remove.
         * @return success.
         */
        bool removeIfcCurrencyRelationship(IfcCurrencyRelationship *arg);
        /**
         * Create an IfcCurrencyRelationship Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcCurrencyRelationship entity.
         */
        Step::RefPtr< IfcCurrencyRelationship > createIfcCurrencyRelationship(bool isVolatile = false);
        /**
         * Clone an IfcCurrencyRelationship Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcCurrencyRelationship Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcCurrencyRelationship *cloneIfcCurrencyRelationship(const IfcCurrencyRelationship &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcCurrencyRelationship Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcCurrencyRelationship entities.
         */
        Step::RefLinkedList< IfcCurrencyRelationship > &getAllIfcCurrencyRelationship();
        /**
         * Get the IfcCurtainWall entity by it's Id.
         * 
         * @param id The Id of the IfcCurtainWall.
         * @return A pointer to the IfcCurtainWall if found, NULL otherwise.
         */
        IfcCurtainWall *getIfcCurtainWall(Step::Id id);
        /**
         * Removes a IfcCurtainWall Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcCurtainWall to remove.
         * @return success.
         */
        bool removeIfcCurtainWall(IfcCurtainWall *arg);
        /**
         * Create an IfcCurtainWall Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcCurtainWall entity.
         */
        Step::RefPtr< IfcCurtainWall > createIfcCurtainWall(bool isVolatile = false);
        /**
         * Clone an IfcCurtainWall Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcCurtainWall Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcCurtainWall *cloneIfcCurtainWall(const IfcCurtainWall &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcCurtainWall Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcCurtainWall entities.
         */
        Step::RefLinkedList< IfcCurtainWall > &getAllIfcCurtainWall();
        /**
         * Get the IfcCurtainWallType entity by it's Id.
         * 
         * @param id The Id of the IfcCurtainWallType.
         * @return A pointer to the IfcCurtainWallType if found, NULL otherwise.
         */
        IfcCurtainWallType *getIfcCurtainWallType(Step::Id id);
        /**
         * Removes a IfcCurtainWallType Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcCurtainWallType to remove.
         * @return success.
         */
        bool removeIfcCurtainWallType(IfcCurtainWallType *arg);
        /**
         * Create an IfcCurtainWallType Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcCurtainWallType entity.
         */
        Step::RefPtr< IfcCurtainWallType > createIfcCurtainWallType(bool isVolatile = false);
        /**
         * Clone an IfcCurtainWallType Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcCurtainWallType Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcCurtainWallType *cloneIfcCurtainWallType(const IfcCurtainWallType &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcCurtainWallType Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcCurtainWallType entities.
         */
        Step::RefLinkedList< IfcCurtainWallType > &getAllIfcCurtainWallType();
        /**
         * Get the IfcCurve entity by it's Id.
         * 
         * @param id The Id of the IfcCurve.
         * @return A pointer to the IfcCurve if found, NULL otherwise.
         */
        IfcCurve *getIfcCurve(Step::Id id);
        /**
         * Removes a IfcCurve Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcCurve to remove.
         * @return success.
         */
        bool removeIfcCurve(IfcCurve *arg);
        /**
         * Create an IfcCurve Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcCurve entity.
         */
        Step::RefPtr< IfcCurve > createIfcCurve(bool isVolatile = false);
        /**
         * Clone an IfcCurve Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcCurve Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcCurve *cloneIfcCurve(const IfcCurve &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcCurve Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcCurve entities.
         */
        Step::RefLinkedList< IfcCurve > &getAllIfcCurve();
        /**
         * Get the IfcCurveBoundedPlane entity by it's Id.
         * 
         * @param id The Id of the IfcCurveBoundedPlane.
         * @return A pointer to the IfcCurveBoundedPlane if found, NULL otherwise.
         */
        IfcCurveBoundedPlane *getIfcCurveBoundedPlane(Step::Id id);
        /**
         * Removes a IfcCurveBoundedPlane Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcCurveBoundedPlane to remove.
         * @return success.
         */
        bool removeIfcCurveBoundedPlane(IfcCurveBoundedPlane *arg);
        /**
         * Create an IfcCurveBoundedPlane Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcCurveBoundedPlane entity.
         */
        Step::RefPtr< IfcCurveBoundedPlane > createIfcCurveBoundedPlane(bool isVolatile = false);
        /**
         * Clone an IfcCurveBoundedPlane Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcCurveBoundedPlane Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcCurveBoundedPlane *cloneIfcCurveBoundedPlane(const IfcCurveBoundedPlane &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcCurveBoundedPlane Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcCurveBoundedPlane entities.
         */
        Step::RefLinkedList< IfcCurveBoundedPlane > &getAllIfcCurveBoundedPlane();
        /**
         * Get the IfcCurveStyle entity by it's Id.
         * 
         * @param id The Id of the IfcCurveStyle.
         * @return A pointer to the IfcCurveStyle if found, NULL otherwise.
         */
        IfcCurveStyle *getIfcCurveStyle(Step::Id id);
        /**
         * Removes a IfcCurveStyle Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcCurveStyle to remove.
         * @return success.
         */
        bool removeIfcCurveStyle(IfcCurveStyle *arg);
        /**
         * Create an IfcCurveStyle Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcCurveStyle entity.
         */
        Step::RefPtr< IfcCurveStyle > createIfcCurveStyle(bool isVolatile = false);
        /**
         * Clone an IfcCurveStyle Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcCurveStyle Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcCurveStyle *cloneIfcCurveStyle(const IfcCurveStyle &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcCurveStyle Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcCurveStyle entities.
         */
        Step::RefLinkedList< IfcCurveStyle > &getAllIfcCurveStyle();
        /**
         * Get the IfcCurveStyleFont entity by it's Id.
         * 
         * @param id The Id of the IfcCurveStyleFont.
         * @return A pointer to the IfcCurveStyleFont if found, NULL otherwise.
         */
        IfcCurveStyleFont *getIfcCurveStyleFont(Step::Id id);
        /**
         * Removes a IfcCurveStyleFont Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcCurveStyleFont to remove.
         * @return success.
         */
        bool removeIfcCurveStyleFont(IfcCurveStyleFont *arg);
        /**
         * Create an IfcCurveStyleFont Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcCurveStyleFont entity.
         */
        Step::RefPtr< IfcCurveStyleFont > createIfcCurveStyleFont(bool isVolatile = false);
        /**
         * Clone an IfcCurveStyleFont Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcCurveStyleFont Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcCurveStyleFont *cloneIfcCurveStyleFont(const IfcCurveStyleFont &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcCurveStyleFont Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcCurveStyleFont entities.
         */
        Step::RefLinkedList< IfcCurveStyleFont > &getAllIfcCurveStyleFont();
        /**
         * Get the IfcCurveStyleFontAndScaling entity by it's Id.
         * 
         * @param id The Id of the IfcCurveStyleFontAndScaling.
         * @return A pointer to the IfcCurveStyleFontAndScaling if found, NULL otherwise.
         */
        IfcCurveStyleFontAndScaling *getIfcCurveStyleFontAndScaling(Step::Id id);
        /**
         * Removes a IfcCurveStyleFontAndScaling Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcCurveStyleFontAndScaling to remove.
         * @return success.
         */
        bool removeIfcCurveStyleFontAndScaling(IfcCurveStyleFontAndScaling *arg);
        /**
         * Create an IfcCurveStyleFontAndScaling Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcCurveStyleFontAndScaling entity.
         */
        Step::RefPtr< IfcCurveStyleFontAndScaling > createIfcCurveStyleFontAndScaling(bool isVolatile = false);
        /**
         * Clone an IfcCurveStyleFontAndScaling Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcCurveStyleFontAndScaling Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcCurveStyleFontAndScaling *cloneIfcCurveStyleFontAndScaling(const IfcCurveStyleFontAndScaling &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcCurveStyleFontAndScaling Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcCurveStyleFontAndScaling entities.
         */
        Step::RefLinkedList< IfcCurveStyleFontAndScaling > &getAllIfcCurveStyleFontAndScaling();
        /**
         * Get the IfcCurveStyleFontPattern entity by it's Id.
         * 
         * @param id The Id of the IfcCurveStyleFontPattern.
         * @return A pointer to the IfcCurveStyleFontPattern if found, NULL otherwise.
         */
        IfcCurveStyleFontPattern *getIfcCurveStyleFontPattern(Step::Id id);
        /**
         * Removes a IfcCurveStyleFontPattern Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcCurveStyleFontPattern to remove.
         * @return success.
         */
        bool removeIfcCurveStyleFontPattern(IfcCurveStyleFontPattern *arg);
        /**
         * Create an IfcCurveStyleFontPattern Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcCurveStyleFontPattern entity.
         */
        Step::RefPtr< IfcCurveStyleFontPattern > createIfcCurveStyleFontPattern(bool isVolatile = false);
        /**
         * Clone an IfcCurveStyleFontPattern Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcCurveStyleFontPattern Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcCurveStyleFontPattern *cloneIfcCurveStyleFontPattern(const IfcCurveStyleFontPattern &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcCurveStyleFontPattern Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcCurveStyleFontPattern entities.
         */
        Step::RefLinkedList< IfcCurveStyleFontPattern > &getAllIfcCurveStyleFontPattern();
        /**
         * Get the IfcDamperType entity by it's Id.
         * 
         * @param id The Id of the IfcDamperType.
         * @return A pointer to the IfcDamperType if found, NULL otherwise.
         */
        IfcDamperType *getIfcDamperType(Step::Id id);
        /**
         * Removes a IfcDamperType Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcDamperType to remove.
         * @return success.
         */
        bool removeIfcDamperType(IfcDamperType *arg);
        /**
         * Create an IfcDamperType Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcDamperType entity.
         */
        Step::RefPtr< IfcDamperType > createIfcDamperType(bool isVolatile = false);
        /**
         * Clone an IfcDamperType Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcDamperType Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcDamperType *cloneIfcDamperType(const IfcDamperType &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcDamperType Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcDamperType entities.
         */
        Step::RefLinkedList< IfcDamperType > &getAllIfcDamperType();
        /**
         * Get the IfcDateAndTime entity by it's Id.
         * 
         * @param id The Id of the IfcDateAndTime.
         * @return A pointer to the IfcDateAndTime if found, NULL otherwise.
         */
        IfcDateAndTime *getIfcDateAndTime(Step::Id id);
        /**
         * Removes a IfcDateAndTime Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcDateAndTime to remove.
         * @return success.
         */
        bool removeIfcDateAndTime(IfcDateAndTime *arg);
        /**
         * Create an IfcDateAndTime Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcDateAndTime entity.
         */
        Step::RefPtr< IfcDateAndTime > createIfcDateAndTime(bool isVolatile = false);
        /**
         * Clone an IfcDateAndTime Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcDateAndTime Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcDateAndTime *cloneIfcDateAndTime(const IfcDateAndTime &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcDateAndTime Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcDateAndTime entities.
         */
        Step::RefLinkedList< IfcDateAndTime > &getAllIfcDateAndTime();
        /**
         * Get the IfcDefinedSymbol entity by it's Id.
         * 
         * @param id The Id of the IfcDefinedSymbol.
         * @return A pointer to the IfcDefinedSymbol if found, NULL otherwise.
         */
        IfcDefinedSymbol *getIfcDefinedSymbol(Step::Id id);
        /**
         * Removes a IfcDefinedSymbol Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcDefinedSymbol to remove.
         * @return success.
         */
        bool removeIfcDefinedSymbol(IfcDefinedSymbol *arg);
        /**
         * Create an IfcDefinedSymbol Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcDefinedSymbol entity.
         */
        Step::RefPtr< IfcDefinedSymbol > createIfcDefinedSymbol(bool isVolatile = false);
        /**
         * Clone an IfcDefinedSymbol Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcDefinedSymbol Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcDefinedSymbol *cloneIfcDefinedSymbol(const IfcDefinedSymbol &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcDefinedSymbol Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcDefinedSymbol entities.
         */
        Step::RefLinkedList< IfcDefinedSymbol > &getAllIfcDefinedSymbol();
        /**
         * Get the IfcDerivedProfileDef entity by it's Id.
         * 
         * @param id The Id of the IfcDerivedProfileDef.
         * @return A pointer to the IfcDerivedProfileDef if found, NULL otherwise.
         */
        IfcDerivedProfileDef *getIfcDerivedProfileDef(Step::Id id);
        /**
         * Removes a IfcDerivedProfileDef Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcDerivedProfileDef to remove.
         * @return success.
         */
        bool removeIfcDerivedProfileDef(IfcDerivedProfileDef *arg);
        /**
         * Create an IfcDerivedProfileDef Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcDerivedProfileDef entity.
         */
        Step::RefPtr< IfcDerivedProfileDef > createIfcDerivedProfileDef(bool isVolatile = false);
        /**
         * Clone an IfcDerivedProfileDef Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcDerivedProfileDef Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcDerivedProfileDef *cloneIfcDerivedProfileDef(const IfcDerivedProfileDef &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcDerivedProfileDef Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcDerivedProfileDef entities.
         */
        Step::RefLinkedList< IfcDerivedProfileDef > &getAllIfcDerivedProfileDef();
        /**
         * Get the IfcDerivedUnit entity by it's Id.
         * 
         * @param id The Id of the IfcDerivedUnit.
         * @return A pointer to the IfcDerivedUnit if found, NULL otherwise.
         */
        IfcDerivedUnit *getIfcDerivedUnit(Step::Id id);
        /**
         * Removes a IfcDerivedUnit Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcDerivedUnit to remove.
         * @return success.
         */
        bool removeIfcDerivedUnit(IfcDerivedUnit *arg);
        /**
         * Create an IfcDerivedUnit Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcDerivedUnit entity.
         */
        Step::RefPtr< IfcDerivedUnit > createIfcDerivedUnit(bool isVolatile = false);
        /**
         * Clone an IfcDerivedUnit Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcDerivedUnit Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcDerivedUnit *cloneIfcDerivedUnit(const IfcDerivedUnit &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcDerivedUnit Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcDerivedUnit entities.
         */
        Step::RefLinkedList< IfcDerivedUnit > &getAllIfcDerivedUnit();
        /**
         * Get the IfcDerivedUnitElement entity by it's Id.
         * 
         * @param id The Id of the IfcDerivedUnitElement.
         * @return A pointer to the IfcDerivedUnitElement if found, NULL otherwise.
         */
        IfcDerivedUnitElement *getIfcDerivedUnitElement(Step::Id id);
        /**
         * Removes a IfcDerivedUnitElement Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcDerivedUnitElement to remove.
         * @return success.
         */
        bool removeIfcDerivedUnitElement(IfcDerivedUnitElement *arg);
        /**
         * Create an IfcDerivedUnitElement Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcDerivedUnitElement entity.
         */
        Step::RefPtr< IfcDerivedUnitElement > createIfcDerivedUnitElement(bool isVolatile = false);
        /**
         * Clone an IfcDerivedUnitElement Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcDerivedUnitElement Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcDerivedUnitElement *cloneIfcDerivedUnitElement(const IfcDerivedUnitElement &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcDerivedUnitElement Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcDerivedUnitElement entities.
         */
        Step::RefLinkedList< IfcDerivedUnitElement > &getAllIfcDerivedUnitElement();
        /**
         * Get the IfcDiameterDimension entity by it's Id.
         * 
         * @param id The Id of the IfcDiameterDimension.
         * @return A pointer to the IfcDiameterDimension if found, NULL otherwise.
         */
        IfcDiameterDimension *getIfcDiameterDimension(Step::Id id);
        /**
         * Removes a IfcDiameterDimension Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcDiameterDimension to remove.
         * @return success.
         */
        bool removeIfcDiameterDimension(IfcDiameterDimension *arg);
        /**
         * Create an IfcDiameterDimension Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcDiameterDimension entity.
         */
        Step::RefPtr< IfcDiameterDimension > createIfcDiameterDimension(bool isVolatile = false);
        /**
         * Clone an IfcDiameterDimension Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcDiameterDimension Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcDiameterDimension *cloneIfcDiameterDimension(const IfcDiameterDimension &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcDiameterDimension Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcDiameterDimension entities.
         */
        Step::RefLinkedList< IfcDiameterDimension > &getAllIfcDiameterDimension();
        /**
         * Get the IfcDimensionalExponents entity by it's Id.
         * 
         * @param id The Id of the IfcDimensionalExponents.
         * @return A pointer to the IfcDimensionalExponents if found, NULL otherwise.
         */
        IfcDimensionalExponents *getIfcDimensionalExponents(Step::Id id);
        /**
         * Removes a IfcDimensionalExponents Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcDimensionalExponents to remove.
         * @return success.
         */
        bool removeIfcDimensionalExponents(IfcDimensionalExponents *arg);
        /**
         * Create an IfcDimensionalExponents Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcDimensionalExponents entity.
         */
        Step::RefPtr< IfcDimensionalExponents > createIfcDimensionalExponents(bool isVolatile = false);
        /**
         * Clone an IfcDimensionalExponents Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcDimensionalExponents Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcDimensionalExponents *cloneIfcDimensionalExponents(const IfcDimensionalExponents &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcDimensionalExponents Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcDimensionalExponents entities.
         */
        Step::RefLinkedList< IfcDimensionalExponents > &getAllIfcDimensionalExponents();
        /**
         * Get the IfcDimensionCalloutRelationship entity by it's Id.
         * 
         * @param id The Id of the IfcDimensionCalloutRelationship.
         * @return A pointer to the IfcDimensionCalloutRelationship if found, NULL otherwise.
         */
        IfcDimensionCalloutRelationship *getIfcDimensionCalloutRelationship(Step::Id id);
        /**
         * Removes a IfcDimensionCalloutRelationship Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcDimensionCalloutRelationship to remove.
         * @return success.
         */
        bool removeIfcDimensionCalloutRelationship(IfcDimensionCalloutRelationship *arg);
        /**
         * Create an IfcDimensionCalloutRelationship Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcDimensionCalloutRelationship entity.
         */
        Step::RefPtr< IfcDimensionCalloutRelationship > createIfcDimensionCalloutRelationship(bool isVolatile = false);
        /**
         * Clone an IfcDimensionCalloutRelationship Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcDimensionCalloutRelationship Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcDimensionCalloutRelationship *cloneIfcDimensionCalloutRelationship(const IfcDimensionCalloutRelationship &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcDimensionCalloutRelationship Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcDimensionCalloutRelationship entities.
         */
        Step::RefLinkedList< IfcDimensionCalloutRelationship > &getAllIfcDimensionCalloutRelationship();
        /**
         * Get the IfcDimensionCurve entity by it's Id.
         * 
         * @param id The Id of the IfcDimensionCurve.
         * @return A pointer to the IfcDimensionCurve if found, NULL otherwise.
         */
        IfcDimensionCurve *getIfcDimensionCurve(Step::Id id);
        /**
         * Removes a IfcDimensionCurve Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcDimensionCurve to remove.
         * @return success.
         */
        bool removeIfcDimensionCurve(IfcDimensionCurve *arg);
        /**
         * Create an IfcDimensionCurve Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcDimensionCurve entity.
         */
        Step::RefPtr< IfcDimensionCurve > createIfcDimensionCurve(bool isVolatile = false);
        /**
         * Clone an IfcDimensionCurve Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcDimensionCurve Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcDimensionCurve *cloneIfcDimensionCurve(const IfcDimensionCurve &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcDimensionCurve Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcDimensionCurve entities.
         */
        Step::RefLinkedList< IfcDimensionCurve > &getAllIfcDimensionCurve();
        /**
         * Get the IfcDimensionCurveDirectedCallout entity by it's Id.
         * 
         * @param id The Id of the IfcDimensionCurveDirectedCallout.
         * @return A pointer to the IfcDimensionCurveDirectedCallout if found, NULL otherwise.
         */
        IfcDimensionCurveDirectedCallout *getIfcDimensionCurveDirectedCallout(Step::Id id);
        /**
         * Removes a IfcDimensionCurveDirectedCallout Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcDimensionCurveDirectedCallout to remove.
         * @return success.
         */
        bool removeIfcDimensionCurveDirectedCallout(IfcDimensionCurveDirectedCallout *arg);
        /**
         * Create an IfcDimensionCurveDirectedCallout Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcDimensionCurveDirectedCallout entity.
         */
        Step::RefPtr< IfcDimensionCurveDirectedCallout > createIfcDimensionCurveDirectedCallout(bool isVolatile = false);
        /**
         * Clone an IfcDimensionCurveDirectedCallout Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcDimensionCurveDirectedCallout Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcDimensionCurveDirectedCallout *cloneIfcDimensionCurveDirectedCallout(const IfcDimensionCurveDirectedCallout &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcDimensionCurveDirectedCallout Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcDimensionCurveDirectedCallout entities.
         */
        Step::RefLinkedList< IfcDimensionCurveDirectedCallout > &getAllIfcDimensionCurveDirectedCallout();
        /**
         * Get the IfcDimensionCurveTerminator entity by it's Id.
         * 
         * @param id The Id of the IfcDimensionCurveTerminator.
         * @return A pointer to the IfcDimensionCurveTerminator if found, NULL otherwise.
         */
        IfcDimensionCurveTerminator *getIfcDimensionCurveTerminator(Step::Id id);
        /**
         * Removes a IfcDimensionCurveTerminator Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcDimensionCurveTerminator to remove.
         * @return success.
         */
        bool removeIfcDimensionCurveTerminator(IfcDimensionCurveTerminator *arg);
        /**
         * Create an IfcDimensionCurveTerminator Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcDimensionCurveTerminator entity.
         */
        Step::RefPtr< IfcDimensionCurveTerminator > createIfcDimensionCurveTerminator(bool isVolatile = false);
        /**
         * Clone an IfcDimensionCurveTerminator Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcDimensionCurveTerminator Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcDimensionCurveTerminator *cloneIfcDimensionCurveTerminator(const IfcDimensionCurveTerminator &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcDimensionCurveTerminator Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcDimensionCurveTerminator entities.
         */
        Step::RefLinkedList< IfcDimensionCurveTerminator > &getAllIfcDimensionCurveTerminator();
        /**
         * Get the IfcDimensionPair entity by it's Id.
         * 
         * @param id The Id of the IfcDimensionPair.
         * @return A pointer to the IfcDimensionPair if found, NULL otherwise.
         */
        IfcDimensionPair *getIfcDimensionPair(Step::Id id);
        /**
         * Removes a IfcDimensionPair Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcDimensionPair to remove.
         * @return success.
         */
        bool removeIfcDimensionPair(IfcDimensionPair *arg);
        /**
         * Create an IfcDimensionPair Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcDimensionPair entity.
         */
        Step::RefPtr< IfcDimensionPair > createIfcDimensionPair(bool isVolatile = false);
        /**
         * Clone an IfcDimensionPair Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcDimensionPair Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcDimensionPair *cloneIfcDimensionPair(const IfcDimensionPair &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcDimensionPair Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcDimensionPair entities.
         */
        Step::RefLinkedList< IfcDimensionPair > &getAllIfcDimensionPair();
        /**
         * Get the IfcDirection entity by it's Id.
         * 
         * @param id The Id of the IfcDirection.
         * @return A pointer to the IfcDirection if found, NULL otherwise.
         */
        IfcDirection *getIfcDirection(Step::Id id);
        /**
         * Removes a IfcDirection Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcDirection to remove.
         * @return success.
         */
        bool removeIfcDirection(IfcDirection *arg);
        /**
         * Create an IfcDirection Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcDirection entity.
         */
        Step::RefPtr< IfcDirection > createIfcDirection(bool isVolatile = false);
        /**
         * Clone an IfcDirection Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcDirection Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcDirection *cloneIfcDirection(const IfcDirection &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcDirection Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcDirection entities.
         */
        Step::RefLinkedList< IfcDirection > &getAllIfcDirection();
        /**
         * Get the IfcDiscreteAccessory entity by it's Id.
         * 
         * @param id The Id of the IfcDiscreteAccessory.
         * @return A pointer to the IfcDiscreteAccessory if found, NULL otherwise.
         */
        IfcDiscreteAccessory *getIfcDiscreteAccessory(Step::Id id);
        /**
         * Removes a IfcDiscreteAccessory Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcDiscreteAccessory to remove.
         * @return success.
         */
        bool removeIfcDiscreteAccessory(IfcDiscreteAccessory *arg);
        /**
         * Create an IfcDiscreteAccessory Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcDiscreteAccessory entity.
         */
        Step::RefPtr< IfcDiscreteAccessory > createIfcDiscreteAccessory(bool isVolatile = false);
        /**
         * Clone an IfcDiscreteAccessory Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcDiscreteAccessory Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcDiscreteAccessory *cloneIfcDiscreteAccessory(const IfcDiscreteAccessory &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcDiscreteAccessory Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcDiscreteAccessory entities.
         */
        Step::RefLinkedList< IfcDiscreteAccessory > &getAllIfcDiscreteAccessory();
        /**
         * Get the IfcDiscreteAccessoryType entity by it's Id.
         * 
         * @param id The Id of the IfcDiscreteAccessoryType.
         * @return A pointer to the IfcDiscreteAccessoryType if found, NULL otherwise.
         */
        IfcDiscreteAccessoryType *getIfcDiscreteAccessoryType(Step::Id id);
        /**
         * Removes a IfcDiscreteAccessoryType Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcDiscreteAccessoryType to remove.
         * @return success.
         */
        bool removeIfcDiscreteAccessoryType(IfcDiscreteAccessoryType *arg);
        /**
         * Create an IfcDiscreteAccessoryType Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcDiscreteAccessoryType entity.
         */
        Step::RefPtr< IfcDiscreteAccessoryType > createIfcDiscreteAccessoryType(bool isVolatile = false);
        /**
         * Clone an IfcDiscreteAccessoryType Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcDiscreteAccessoryType Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcDiscreteAccessoryType *cloneIfcDiscreteAccessoryType(const IfcDiscreteAccessoryType &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcDiscreteAccessoryType Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcDiscreteAccessoryType entities.
         */
        Step::RefLinkedList< IfcDiscreteAccessoryType > &getAllIfcDiscreteAccessoryType();
        /**
         * Get the IfcDistributionChamberElement entity by it's Id.
         * 
         * @param id The Id of the IfcDistributionChamberElement.
         * @return A pointer to the IfcDistributionChamberElement if found, NULL otherwise.
         */
        IfcDistributionChamberElement *getIfcDistributionChamberElement(Step::Id id);
        /**
         * Removes a IfcDistributionChamberElement Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcDistributionChamberElement to remove.
         * @return success.
         */
        bool removeIfcDistributionChamberElement(IfcDistributionChamberElement *arg);
        /**
         * Create an IfcDistributionChamberElement Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcDistributionChamberElement entity.
         */
        Step::RefPtr< IfcDistributionChamberElement > createIfcDistributionChamberElement(bool isVolatile = false);
        /**
         * Clone an IfcDistributionChamberElement Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcDistributionChamberElement Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcDistributionChamberElement *cloneIfcDistributionChamberElement(const IfcDistributionChamberElement &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcDistributionChamberElement Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcDistributionChamberElement entities.
         */
        Step::RefLinkedList< IfcDistributionChamberElement > &getAllIfcDistributionChamberElement();
        /**
         * Get the IfcDistributionChamberElementType entity by it's Id.
         * 
         * @param id The Id of the IfcDistributionChamberElementType.
         * @return A pointer to the IfcDistributionChamberElementType if found, NULL otherwise.
         */
        IfcDistributionChamberElementType *getIfcDistributionChamberElementType(Step::Id id);
        /**
         * Removes a IfcDistributionChamberElementType Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcDistributionChamberElementType to remove.
         * @return success.
         */
        bool removeIfcDistributionChamberElementType(IfcDistributionChamberElementType *arg);
        /**
         * Create an IfcDistributionChamberElementType Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcDistributionChamberElementType entity.
         */
        Step::RefPtr< IfcDistributionChamberElementType > createIfcDistributionChamberElementType(bool isVolatile = false);
        /**
         * Clone an IfcDistributionChamberElementType Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcDistributionChamberElementType Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcDistributionChamberElementType *cloneIfcDistributionChamberElementType(const IfcDistributionChamberElementType &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcDistributionChamberElementType Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcDistributionChamberElementType entities.
         */
        Step::RefLinkedList< IfcDistributionChamberElementType > &getAllIfcDistributionChamberElementType();
        /**
         * Get the IfcDistributionControlElement entity by it's Id.
         * 
         * @param id The Id of the IfcDistributionControlElement.
         * @return A pointer to the IfcDistributionControlElement if found, NULL otherwise.
         */
        IfcDistributionControlElement *getIfcDistributionControlElement(Step::Id id);
        /**
         * Removes a IfcDistributionControlElement Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcDistributionControlElement to remove.
         * @return success.
         */
        bool removeIfcDistributionControlElement(IfcDistributionControlElement *arg);
        /**
         * Create an IfcDistributionControlElement Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcDistributionControlElement entity.
         */
        Step::RefPtr< IfcDistributionControlElement > createIfcDistributionControlElement(bool isVolatile = false);
        /**
         * Clone an IfcDistributionControlElement Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcDistributionControlElement Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcDistributionControlElement *cloneIfcDistributionControlElement(const IfcDistributionControlElement &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcDistributionControlElement Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcDistributionControlElement entities.
         */
        Step::RefLinkedList< IfcDistributionControlElement > &getAllIfcDistributionControlElement();
        /**
         * Get the IfcDistributionControlElementType entity by it's Id.
         * 
         * @param id The Id of the IfcDistributionControlElementType.
         * @return A pointer to the IfcDistributionControlElementType if found, NULL otherwise.
         */
        IfcDistributionControlElementType *getIfcDistributionControlElementType(Step::Id id);
        /**
         * Removes a IfcDistributionControlElementType Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcDistributionControlElementType to remove.
         * @return success.
         */
        bool removeIfcDistributionControlElementType(IfcDistributionControlElementType *arg);
        /**
         * Create an IfcDistributionControlElementType Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcDistributionControlElementType entity.
         */
        Step::RefPtr< IfcDistributionControlElementType > createIfcDistributionControlElementType(bool isVolatile = false);
        /**
         * Clone an IfcDistributionControlElementType Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcDistributionControlElementType Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcDistributionControlElementType *cloneIfcDistributionControlElementType(const IfcDistributionControlElementType &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcDistributionControlElementType Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcDistributionControlElementType entities.
         */
        Step::RefLinkedList< IfcDistributionControlElementType > &getAllIfcDistributionControlElementType();
        /**
         * Get the IfcDistributionElement entity by it's Id.
         * 
         * @param id The Id of the IfcDistributionElement.
         * @return A pointer to the IfcDistributionElement if found, NULL otherwise.
         */
        IfcDistributionElement *getIfcDistributionElement(Step::Id id);
        /**
         * Removes a IfcDistributionElement Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcDistributionElement to remove.
         * @return success.
         */
        bool removeIfcDistributionElement(IfcDistributionElement *arg);
        /**
         * Create an IfcDistributionElement Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcDistributionElement entity.
         */
        Step::RefPtr< IfcDistributionElement > createIfcDistributionElement(bool isVolatile = false);
        /**
         * Clone an IfcDistributionElement Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcDistributionElement Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcDistributionElement *cloneIfcDistributionElement(const IfcDistributionElement &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcDistributionElement Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcDistributionElement entities.
         */
        Step::RefLinkedList< IfcDistributionElement > &getAllIfcDistributionElement();
        /**
         * Get the IfcDistributionElementType entity by it's Id.
         * 
         * @param id The Id of the IfcDistributionElementType.
         * @return A pointer to the IfcDistributionElementType if found, NULL otherwise.
         */
        IfcDistributionElementType *getIfcDistributionElementType(Step::Id id);
        /**
         * Removes a IfcDistributionElementType Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcDistributionElementType to remove.
         * @return success.
         */
        bool removeIfcDistributionElementType(IfcDistributionElementType *arg);
        /**
         * Create an IfcDistributionElementType Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcDistributionElementType entity.
         */
        Step::RefPtr< IfcDistributionElementType > createIfcDistributionElementType(bool isVolatile = false);
        /**
         * Clone an IfcDistributionElementType Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcDistributionElementType Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcDistributionElementType *cloneIfcDistributionElementType(const IfcDistributionElementType &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcDistributionElementType Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcDistributionElementType entities.
         */
        Step::RefLinkedList< IfcDistributionElementType > &getAllIfcDistributionElementType();
        /**
         * Get the IfcDistributionFlowElement entity by it's Id.
         * 
         * @param id The Id of the IfcDistributionFlowElement.
         * @return A pointer to the IfcDistributionFlowElement if found, NULL otherwise.
         */
        IfcDistributionFlowElement *getIfcDistributionFlowElement(Step::Id id);
        /**
         * Removes a IfcDistributionFlowElement Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcDistributionFlowElement to remove.
         * @return success.
         */
        bool removeIfcDistributionFlowElement(IfcDistributionFlowElement *arg);
        /**
         * Create an IfcDistributionFlowElement Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcDistributionFlowElement entity.
         */
        Step::RefPtr< IfcDistributionFlowElement > createIfcDistributionFlowElement(bool isVolatile = false);
        /**
         * Clone an IfcDistributionFlowElement Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcDistributionFlowElement Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcDistributionFlowElement *cloneIfcDistributionFlowElement(const IfcDistributionFlowElement &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcDistributionFlowElement Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcDistributionFlowElement entities.
         */
        Step::RefLinkedList< IfcDistributionFlowElement > &getAllIfcDistributionFlowElement();
        /**
         * Get the IfcDistributionFlowElementType entity by it's Id.
         * 
         * @param id The Id of the IfcDistributionFlowElementType.
         * @return A pointer to the IfcDistributionFlowElementType if found, NULL otherwise.
         */
        IfcDistributionFlowElementType *getIfcDistributionFlowElementType(Step::Id id);
        /**
         * Removes a IfcDistributionFlowElementType Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcDistributionFlowElementType to remove.
         * @return success.
         */
        bool removeIfcDistributionFlowElementType(IfcDistributionFlowElementType *arg);
        /**
         * Create an IfcDistributionFlowElementType Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcDistributionFlowElementType entity.
         */
        Step::RefPtr< IfcDistributionFlowElementType > createIfcDistributionFlowElementType(bool isVolatile = false);
        /**
         * Clone an IfcDistributionFlowElementType Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcDistributionFlowElementType Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcDistributionFlowElementType *cloneIfcDistributionFlowElementType(const IfcDistributionFlowElementType &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcDistributionFlowElementType Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcDistributionFlowElementType entities.
         */
        Step::RefLinkedList< IfcDistributionFlowElementType > &getAllIfcDistributionFlowElementType();
        /**
         * Get the IfcDistributionPort entity by it's Id.
         * 
         * @param id The Id of the IfcDistributionPort.
         * @return A pointer to the IfcDistributionPort if found, NULL otherwise.
         */
        IfcDistributionPort *getIfcDistributionPort(Step::Id id);
        /**
         * Removes a IfcDistributionPort Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcDistributionPort to remove.
         * @return success.
         */
        bool removeIfcDistributionPort(IfcDistributionPort *arg);
        /**
         * Create an IfcDistributionPort Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcDistributionPort entity.
         */
        Step::RefPtr< IfcDistributionPort > createIfcDistributionPort(bool isVolatile = false);
        /**
         * Clone an IfcDistributionPort Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcDistributionPort Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcDistributionPort *cloneIfcDistributionPort(const IfcDistributionPort &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcDistributionPort Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcDistributionPort entities.
         */
        Step::RefLinkedList< IfcDistributionPort > &getAllIfcDistributionPort();
        /**
         * Get the IfcDocumentElectronicFormat entity by it's Id.
         * 
         * @param id The Id of the IfcDocumentElectronicFormat.
         * @return A pointer to the IfcDocumentElectronicFormat if found, NULL otherwise.
         */
        IfcDocumentElectronicFormat *getIfcDocumentElectronicFormat(Step::Id id);
        /**
         * Removes a IfcDocumentElectronicFormat Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcDocumentElectronicFormat to remove.
         * @return success.
         */
        bool removeIfcDocumentElectronicFormat(IfcDocumentElectronicFormat *arg);
        /**
         * Create an IfcDocumentElectronicFormat Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcDocumentElectronicFormat entity.
         */
        Step::RefPtr< IfcDocumentElectronicFormat > createIfcDocumentElectronicFormat(bool isVolatile = false);
        /**
         * Clone an IfcDocumentElectronicFormat Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcDocumentElectronicFormat Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcDocumentElectronicFormat *cloneIfcDocumentElectronicFormat(const IfcDocumentElectronicFormat &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcDocumentElectronicFormat Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcDocumentElectronicFormat entities.
         */
        Step::RefLinkedList< IfcDocumentElectronicFormat > &getAllIfcDocumentElectronicFormat();
        /**
         * Get the IfcDocumentInformation entity by it's Id.
         * 
         * @param id The Id of the IfcDocumentInformation.
         * @return A pointer to the IfcDocumentInformation if found, NULL otherwise.
         */
        IfcDocumentInformation *getIfcDocumentInformation(Step::Id id);
        /**
         * Removes a IfcDocumentInformation Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcDocumentInformation to remove.
         * @return success.
         */
        bool removeIfcDocumentInformation(IfcDocumentInformation *arg);
        /**
         * Create an IfcDocumentInformation Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcDocumentInformation entity.
         */
        Step::RefPtr< IfcDocumentInformation > createIfcDocumentInformation(bool isVolatile = false);
        /**
         * Clone an IfcDocumentInformation Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcDocumentInformation Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcDocumentInformation *cloneIfcDocumentInformation(const IfcDocumentInformation &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcDocumentInformation Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcDocumentInformation entities.
         */
        Step::RefLinkedList< IfcDocumentInformation > &getAllIfcDocumentInformation();
        /**
         * Get the IfcDocumentInformationRelationship entity by it's Id.
         * 
         * @param id The Id of the IfcDocumentInformationRelationship.
         * @return A pointer to the IfcDocumentInformationRelationship if found, NULL otherwise.
         */
        IfcDocumentInformationRelationship *getIfcDocumentInformationRelationship(Step::Id id);
        /**
         * Removes a IfcDocumentInformationRelationship Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcDocumentInformationRelationship to remove.
         * @return success.
         */
        bool removeIfcDocumentInformationRelationship(IfcDocumentInformationRelationship *arg);
        /**
         * Create an IfcDocumentInformationRelationship Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcDocumentInformationRelationship entity.
         */
        Step::RefPtr< IfcDocumentInformationRelationship > createIfcDocumentInformationRelationship(bool isVolatile = false);
        /**
         * Clone an IfcDocumentInformationRelationship Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcDocumentInformationRelationship Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcDocumentInformationRelationship *cloneIfcDocumentInformationRelationship(const IfcDocumentInformationRelationship &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcDocumentInformationRelationship Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcDocumentInformationRelationship entities.
         */
        Step::RefLinkedList< IfcDocumentInformationRelationship > &getAllIfcDocumentInformationRelationship();
        /**
         * Get the IfcDocumentReference entity by it's Id.
         * 
         * @param id The Id of the IfcDocumentReference.
         * @return A pointer to the IfcDocumentReference if found, NULL otherwise.
         */
        IfcDocumentReference *getIfcDocumentReference(Step::Id id);
        /**
         * Removes a IfcDocumentReference Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcDocumentReference to remove.
         * @return success.
         */
        bool removeIfcDocumentReference(IfcDocumentReference *arg);
        /**
         * Create an IfcDocumentReference Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcDocumentReference entity.
         */
        Step::RefPtr< IfcDocumentReference > createIfcDocumentReference(bool isVolatile = false);
        /**
         * Clone an IfcDocumentReference Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcDocumentReference Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcDocumentReference *cloneIfcDocumentReference(const IfcDocumentReference &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcDocumentReference Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcDocumentReference entities.
         */
        Step::RefLinkedList< IfcDocumentReference > &getAllIfcDocumentReference();
        /**
         * Get the IfcDoor entity by it's Id.
         * 
         * @param id The Id of the IfcDoor.
         * @return A pointer to the IfcDoor if found, NULL otherwise.
         */
        IfcDoor *getIfcDoor(Step::Id id);
        /**
         * Removes a IfcDoor Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcDoor to remove.
         * @return success.
         */
        bool removeIfcDoor(IfcDoor *arg);
        /**
         * Create an IfcDoor Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcDoor entity.
         */
        Step::RefPtr< IfcDoor > createIfcDoor(bool isVolatile = false);
        /**
         * Clone an IfcDoor Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcDoor Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcDoor *cloneIfcDoor(const IfcDoor &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcDoor Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcDoor entities.
         */
        Step::RefLinkedList< IfcDoor > &getAllIfcDoor();
        /**
         * Get the IfcDoorLiningProperties entity by it's Id.
         * 
         * @param id The Id of the IfcDoorLiningProperties.
         * @return A pointer to the IfcDoorLiningProperties if found, NULL otherwise.
         */
        IfcDoorLiningProperties *getIfcDoorLiningProperties(Step::Id id);
        /**
         * Removes a IfcDoorLiningProperties Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcDoorLiningProperties to remove.
         * @return success.
         */
        bool removeIfcDoorLiningProperties(IfcDoorLiningProperties *arg);
        /**
         * Create an IfcDoorLiningProperties Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcDoorLiningProperties entity.
         */
        Step::RefPtr< IfcDoorLiningProperties > createIfcDoorLiningProperties(bool isVolatile = false);
        /**
         * Clone an IfcDoorLiningProperties Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcDoorLiningProperties Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcDoorLiningProperties *cloneIfcDoorLiningProperties(const IfcDoorLiningProperties &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcDoorLiningProperties Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcDoorLiningProperties entities.
         */
        Step::RefLinkedList< IfcDoorLiningProperties > &getAllIfcDoorLiningProperties();
        /**
         * Get the IfcDoorPanelProperties entity by it's Id.
         * 
         * @param id The Id of the IfcDoorPanelProperties.
         * @return A pointer to the IfcDoorPanelProperties if found, NULL otherwise.
         */
        IfcDoorPanelProperties *getIfcDoorPanelProperties(Step::Id id);
        /**
         * Removes a IfcDoorPanelProperties Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcDoorPanelProperties to remove.
         * @return success.
         */
        bool removeIfcDoorPanelProperties(IfcDoorPanelProperties *arg);
        /**
         * Create an IfcDoorPanelProperties Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcDoorPanelProperties entity.
         */
        Step::RefPtr< IfcDoorPanelProperties > createIfcDoorPanelProperties(bool isVolatile = false);
        /**
         * Clone an IfcDoorPanelProperties Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcDoorPanelProperties Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcDoorPanelProperties *cloneIfcDoorPanelProperties(const IfcDoorPanelProperties &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcDoorPanelProperties Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcDoorPanelProperties entities.
         */
        Step::RefLinkedList< IfcDoorPanelProperties > &getAllIfcDoorPanelProperties();
        /**
         * Get the IfcDoorStyle entity by it's Id.
         * 
         * @param id The Id of the IfcDoorStyle.
         * @return A pointer to the IfcDoorStyle if found, NULL otherwise.
         */
        IfcDoorStyle *getIfcDoorStyle(Step::Id id);
        /**
         * Removes a IfcDoorStyle Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcDoorStyle to remove.
         * @return success.
         */
        bool removeIfcDoorStyle(IfcDoorStyle *arg);
        /**
         * Create an IfcDoorStyle Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcDoorStyle entity.
         */
        Step::RefPtr< IfcDoorStyle > createIfcDoorStyle(bool isVolatile = false);
        /**
         * Clone an IfcDoorStyle Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcDoorStyle Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcDoorStyle *cloneIfcDoorStyle(const IfcDoorStyle &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcDoorStyle Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcDoorStyle entities.
         */
        Step::RefLinkedList< IfcDoorStyle > &getAllIfcDoorStyle();
        /**
         * Get the IfcDraughtingCallout entity by it's Id.
         * 
         * @param id The Id of the IfcDraughtingCallout.
         * @return A pointer to the IfcDraughtingCallout if found, NULL otherwise.
         */
        IfcDraughtingCallout *getIfcDraughtingCallout(Step::Id id);
        /**
         * Removes a IfcDraughtingCallout Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcDraughtingCallout to remove.
         * @return success.
         */
        bool removeIfcDraughtingCallout(IfcDraughtingCallout *arg);
        /**
         * Create an IfcDraughtingCallout Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcDraughtingCallout entity.
         */
        Step::RefPtr< IfcDraughtingCallout > createIfcDraughtingCallout(bool isVolatile = false);
        /**
         * Clone an IfcDraughtingCallout Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcDraughtingCallout Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcDraughtingCallout *cloneIfcDraughtingCallout(const IfcDraughtingCallout &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcDraughtingCallout Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcDraughtingCallout entities.
         */
        Step::RefLinkedList< IfcDraughtingCallout > &getAllIfcDraughtingCallout();
        /**
         * Get the IfcDraughtingCalloutRelationship entity by it's Id.
         * 
         * @param id The Id of the IfcDraughtingCalloutRelationship.
         * @return A pointer to the IfcDraughtingCalloutRelationship if found, NULL otherwise.
         */
        IfcDraughtingCalloutRelationship *getIfcDraughtingCalloutRelationship(Step::Id id);
        /**
         * Removes a IfcDraughtingCalloutRelationship Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcDraughtingCalloutRelationship to remove.
         * @return success.
         */
        bool removeIfcDraughtingCalloutRelationship(IfcDraughtingCalloutRelationship *arg);
        /**
         * Create an IfcDraughtingCalloutRelationship Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcDraughtingCalloutRelationship entity.
         */
        Step::RefPtr< IfcDraughtingCalloutRelationship > createIfcDraughtingCalloutRelationship(bool isVolatile = false);
        /**
         * Clone an IfcDraughtingCalloutRelationship Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcDraughtingCalloutRelationship Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcDraughtingCalloutRelationship *cloneIfcDraughtingCalloutRelationship(const IfcDraughtingCalloutRelationship &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcDraughtingCalloutRelationship Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcDraughtingCalloutRelationship entities.
         */
        Step::RefLinkedList< IfcDraughtingCalloutRelationship > &getAllIfcDraughtingCalloutRelationship();
        /**
         * Get the IfcDraughtingPreDefinedColour entity by it's Id.
         * 
         * @param id The Id of the IfcDraughtingPreDefinedColour.
         * @return A pointer to the IfcDraughtingPreDefinedColour if found, NULL otherwise.
         */
        IfcDraughtingPreDefinedColour *getIfcDraughtingPreDefinedColour(Step::Id id);
        /**
         * Removes a IfcDraughtingPreDefinedColour Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcDraughtingPreDefinedColour to remove.
         * @return success.
         */
        bool removeIfcDraughtingPreDefinedColour(IfcDraughtingPreDefinedColour *arg);
        /**
         * Create an IfcDraughtingPreDefinedColour Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcDraughtingPreDefinedColour entity.
         */
        Step::RefPtr< IfcDraughtingPreDefinedColour > createIfcDraughtingPreDefinedColour(bool isVolatile = false);
        /**
         * Clone an IfcDraughtingPreDefinedColour Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcDraughtingPreDefinedColour Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcDraughtingPreDefinedColour *cloneIfcDraughtingPreDefinedColour(const IfcDraughtingPreDefinedColour &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcDraughtingPreDefinedColour Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcDraughtingPreDefinedColour entities.
         */
        Step::RefLinkedList< IfcDraughtingPreDefinedColour > &getAllIfcDraughtingPreDefinedColour();
        /**
         * Get the IfcDraughtingPreDefinedCurveFont entity by it's Id.
         * 
         * @param id The Id of the IfcDraughtingPreDefinedCurveFont.
         * @return A pointer to the IfcDraughtingPreDefinedCurveFont if found, NULL otherwise.
         */
        IfcDraughtingPreDefinedCurveFont *getIfcDraughtingPreDefinedCurveFont(Step::Id id);
        /**
         * Removes a IfcDraughtingPreDefinedCurveFont Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcDraughtingPreDefinedCurveFont to remove.
         * @return success.
         */
        bool removeIfcDraughtingPreDefinedCurveFont(IfcDraughtingPreDefinedCurveFont *arg);
        /**
         * Create an IfcDraughtingPreDefinedCurveFont Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcDraughtingPreDefinedCurveFont entity.
         */
        Step::RefPtr< IfcDraughtingPreDefinedCurveFont > createIfcDraughtingPreDefinedCurveFont(bool isVolatile = false);
        /**
         * Clone an IfcDraughtingPreDefinedCurveFont Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcDraughtingPreDefinedCurveFont Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcDraughtingPreDefinedCurveFont *cloneIfcDraughtingPreDefinedCurveFont(const IfcDraughtingPreDefinedCurveFont &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcDraughtingPreDefinedCurveFont Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcDraughtingPreDefinedCurveFont entities.
         */
        Step::RefLinkedList< IfcDraughtingPreDefinedCurveFont > &getAllIfcDraughtingPreDefinedCurveFont();
        /**
         * Get the IfcDraughtingPreDefinedTextFont entity by it's Id.
         * 
         * @param id The Id of the IfcDraughtingPreDefinedTextFont.
         * @return A pointer to the IfcDraughtingPreDefinedTextFont if found, NULL otherwise.
         */
        IfcDraughtingPreDefinedTextFont *getIfcDraughtingPreDefinedTextFont(Step::Id id);
        /**
         * Removes a IfcDraughtingPreDefinedTextFont Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcDraughtingPreDefinedTextFont to remove.
         * @return success.
         */
        bool removeIfcDraughtingPreDefinedTextFont(IfcDraughtingPreDefinedTextFont *arg);
        /**
         * Create an IfcDraughtingPreDefinedTextFont Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcDraughtingPreDefinedTextFont entity.
         */
        Step::RefPtr< IfcDraughtingPreDefinedTextFont > createIfcDraughtingPreDefinedTextFont(bool isVolatile = false);
        /**
         * Clone an IfcDraughtingPreDefinedTextFont Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcDraughtingPreDefinedTextFont Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcDraughtingPreDefinedTextFont *cloneIfcDraughtingPreDefinedTextFont(const IfcDraughtingPreDefinedTextFont &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcDraughtingPreDefinedTextFont Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcDraughtingPreDefinedTextFont entities.
         */
        Step::RefLinkedList< IfcDraughtingPreDefinedTextFont > &getAllIfcDraughtingPreDefinedTextFont();
        /**
         * Get the IfcDuctFittingType entity by it's Id.
         * 
         * @param id The Id of the IfcDuctFittingType.
         * @return A pointer to the IfcDuctFittingType if found, NULL otherwise.
         */
        IfcDuctFittingType *getIfcDuctFittingType(Step::Id id);
        /**
         * Removes a IfcDuctFittingType Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcDuctFittingType to remove.
         * @return success.
         */
        bool removeIfcDuctFittingType(IfcDuctFittingType *arg);
        /**
         * Create an IfcDuctFittingType Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcDuctFittingType entity.
         */
        Step::RefPtr< IfcDuctFittingType > createIfcDuctFittingType(bool isVolatile = false);
        /**
         * Clone an IfcDuctFittingType Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcDuctFittingType Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcDuctFittingType *cloneIfcDuctFittingType(const IfcDuctFittingType &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcDuctFittingType Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcDuctFittingType entities.
         */
        Step::RefLinkedList< IfcDuctFittingType > &getAllIfcDuctFittingType();
        /**
         * Get the IfcDuctSegmentType entity by it's Id.
         * 
         * @param id The Id of the IfcDuctSegmentType.
         * @return A pointer to the IfcDuctSegmentType if found, NULL otherwise.
         */
        IfcDuctSegmentType *getIfcDuctSegmentType(Step::Id id);
        /**
         * Removes a IfcDuctSegmentType Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcDuctSegmentType to remove.
         * @return success.
         */
        bool removeIfcDuctSegmentType(IfcDuctSegmentType *arg);
        /**
         * Create an IfcDuctSegmentType Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcDuctSegmentType entity.
         */
        Step::RefPtr< IfcDuctSegmentType > createIfcDuctSegmentType(bool isVolatile = false);
        /**
         * Clone an IfcDuctSegmentType Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcDuctSegmentType Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcDuctSegmentType *cloneIfcDuctSegmentType(const IfcDuctSegmentType &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcDuctSegmentType Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcDuctSegmentType entities.
         */
        Step::RefLinkedList< IfcDuctSegmentType > &getAllIfcDuctSegmentType();
        /**
         * Get the IfcDuctSilencerType entity by it's Id.
         * 
         * @param id The Id of the IfcDuctSilencerType.
         * @return A pointer to the IfcDuctSilencerType if found, NULL otherwise.
         */
        IfcDuctSilencerType *getIfcDuctSilencerType(Step::Id id);
        /**
         * Removes a IfcDuctSilencerType Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcDuctSilencerType to remove.
         * @return success.
         */
        bool removeIfcDuctSilencerType(IfcDuctSilencerType *arg);
        /**
         * Create an IfcDuctSilencerType Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcDuctSilencerType entity.
         */
        Step::RefPtr< IfcDuctSilencerType > createIfcDuctSilencerType(bool isVolatile = false);
        /**
         * Clone an IfcDuctSilencerType Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcDuctSilencerType Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcDuctSilencerType *cloneIfcDuctSilencerType(const IfcDuctSilencerType &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcDuctSilencerType Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcDuctSilencerType entities.
         */
        Step::RefLinkedList< IfcDuctSilencerType > &getAllIfcDuctSilencerType();
        /**
         * Get the IfcEdge entity by it's Id.
         * 
         * @param id The Id of the IfcEdge.
         * @return A pointer to the IfcEdge if found, NULL otherwise.
         */
        IfcEdge *getIfcEdge(Step::Id id);
        /**
         * Removes a IfcEdge Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcEdge to remove.
         * @return success.
         */
        bool removeIfcEdge(IfcEdge *arg);
        /**
         * Create an IfcEdge Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcEdge entity.
         */
        Step::RefPtr< IfcEdge > createIfcEdge(bool isVolatile = false);
        /**
         * Clone an IfcEdge Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcEdge Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcEdge *cloneIfcEdge(const IfcEdge &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcEdge Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcEdge entities.
         */
        Step::RefLinkedList< IfcEdge > &getAllIfcEdge();
        /**
         * Get the IfcEdgeCurve entity by it's Id.
         * 
         * @param id The Id of the IfcEdgeCurve.
         * @return A pointer to the IfcEdgeCurve if found, NULL otherwise.
         */
        IfcEdgeCurve *getIfcEdgeCurve(Step::Id id);
        /**
         * Removes a IfcEdgeCurve Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcEdgeCurve to remove.
         * @return success.
         */
        bool removeIfcEdgeCurve(IfcEdgeCurve *arg);
        /**
         * Create an IfcEdgeCurve Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcEdgeCurve entity.
         */
        Step::RefPtr< IfcEdgeCurve > createIfcEdgeCurve(bool isVolatile = false);
        /**
         * Clone an IfcEdgeCurve Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcEdgeCurve Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcEdgeCurve *cloneIfcEdgeCurve(const IfcEdgeCurve &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcEdgeCurve Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcEdgeCurve entities.
         */
        Step::RefLinkedList< IfcEdgeCurve > &getAllIfcEdgeCurve();
        /**
         * Get the IfcEdgeFeature entity by it's Id.
         * 
         * @param id The Id of the IfcEdgeFeature.
         * @return A pointer to the IfcEdgeFeature if found, NULL otherwise.
         */
        IfcEdgeFeature *getIfcEdgeFeature(Step::Id id);
        /**
         * Removes a IfcEdgeFeature Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcEdgeFeature to remove.
         * @return success.
         */
        bool removeIfcEdgeFeature(IfcEdgeFeature *arg);
        /**
         * Create an IfcEdgeFeature Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcEdgeFeature entity.
         */
        Step::RefPtr< IfcEdgeFeature > createIfcEdgeFeature(bool isVolatile = false);
        /**
         * Clone an IfcEdgeFeature Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcEdgeFeature Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcEdgeFeature *cloneIfcEdgeFeature(const IfcEdgeFeature &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcEdgeFeature Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcEdgeFeature entities.
         */
        Step::RefLinkedList< IfcEdgeFeature > &getAllIfcEdgeFeature();
        /**
         * Get the IfcEdgeLoop entity by it's Id.
         * 
         * @param id The Id of the IfcEdgeLoop.
         * @return A pointer to the IfcEdgeLoop if found, NULL otherwise.
         */
        IfcEdgeLoop *getIfcEdgeLoop(Step::Id id);
        /**
         * Removes a IfcEdgeLoop Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcEdgeLoop to remove.
         * @return success.
         */
        bool removeIfcEdgeLoop(IfcEdgeLoop *arg);
        /**
         * Create an IfcEdgeLoop Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcEdgeLoop entity.
         */
        Step::RefPtr< IfcEdgeLoop > createIfcEdgeLoop(bool isVolatile = false);
        /**
         * Clone an IfcEdgeLoop Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcEdgeLoop Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcEdgeLoop *cloneIfcEdgeLoop(const IfcEdgeLoop &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcEdgeLoop Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcEdgeLoop entities.
         */
        Step::RefLinkedList< IfcEdgeLoop > &getAllIfcEdgeLoop();
        /**
         * Get the IfcElectricalBaseProperties entity by it's Id.
         * 
         * @param id The Id of the IfcElectricalBaseProperties.
         * @return A pointer to the IfcElectricalBaseProperties if found, NULL otherwise.
         */
        IfcElectricalBaseProperties *getIfcElectricalBaseProperties(Step::Id id);
        /**
         * Removes a IfcElectricalBaseProperties Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcElectricalBaseProperties to remove.
         * @return success.
         */
        bool removeIfcElectricalBaseProperties(IfcElectricalBaseProperties *arg);
        /**
         * Create an IfcElectricalBaseProperties Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcElectricalBaseProperties entity.
         */
        Step::RefPtr< IfcElectricalBaseProperties > createIfcElectricalBaseProperties(bool isVolatile = false);
        /**
         * Clone an IfcElectricalBaseProperties Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcElectricalBaseProperties Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcElectricalBaseProperties *cloneIfcElectricalBaseProperties(const IfcElectricalBaseProperties &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcElectricalBaseProperties Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcElectricalBaseProperties entities.
         */
        Step::RefLinkedList< IfcElectricalBaseProperties > &getAllIfcElectricalBaseProperties();
        /**
         * Get the IfcElectricalCircuit entity by it's Id.
         * 
         * @param id The Id of the IfcElectricalCircuit.
         * @return A pointer to the IfcElectricalCircuit if found, NULL otherwise.
         */
        IfcElectricalCircuit *getIfcElectricalCircuit(Step::Id id);
        /**
         * Removes a IfcElectricalCircuit Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcElectricalCircuit to remove.
         * @return success.
         */
        bool removeIfcElectricalCircuit(IfcElectricalCircuit *arg);
        /**
         * Create an IfcElectricalCircuit Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcElectricalCircuit entity.
         */
        Step::RefPtr< IfcElectricalCircuit > createIfcElectricalCircuit(bool isVolatile = false);
        /**
         * Clone an IfcElectricalCircuit Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcElectricalCircuit Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcElectricalCircuit *cloneIfcElectricalCircuit(const IfcElectricalCircuit &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcElectricalCircuit Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcElectricalCircuit entities.
         */
        Step::RefLinkedList< IfcElectricalCircuit > &getAllIfcElectricalCircuit();
        /**
         * Get the IfcElectricalElement entity by it's Id.
         * 
         * @param id The Id of the IfcElectricalElement.
         * @return A pointer to the IfcElectricalElement if found, NULL otherwise.
         */
        IfcElectricalElement *getIfcElectricalElement(Step::Id id);
        /**
         * Removes a IfcElectricalElement Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcElectricalElement to remove.
         * @return success.
         */
        bool removeIfcElectricalElement(IfcElectricalElement *arg);
        /**
         * Create an IfcElectricalElement Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcElectricalElement entity.
         */
        Step::RefPtr< IfcElectricalElement > createIfcElectricalElement(bool isVolatile = false);
        /**
         * Clone an IfcElectricalElement Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcElectricalElement Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcElectricalElement *cloneIfcElectricalElement(const IfcElectricalElement &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcElectricalElement Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcElectricalElement entities.
         */
        Step::RefLinkedList< IfcElectricalElement > &getAllIfcElectricalElement();
        /**
         * Get the IfcElectricApplianceType entity by it's Id.
         * 
         * @param id The Id of the IfcElectricApplianceType.
         * @return A pointer to the IfcElectricApplianceType if found, NULL otherwise.
         */
        IfcElectricApplianceType *getIfcElectricApplianceType(Step::Id id);
        /**
         * Removes a IfcElectricApplianceType Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcElectricApplianceType to remove.
         * @return success.
         */
        bool removeIfcElectricApplianceType(IfcElectricApplianceType *arg);
        /**
         * Create an IfcElectricApplianceType Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcElectricApplianceType entity.
         */
        Step::RefPtr< IfcElectricApplianceType > createIfcElectricApplianceType(bool isVolatile = false);
        /**
         * Clone an IfcElectricApplianceType Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcElectricApplianceType Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcElectricApplianceType *cloneIfcElectricApplianceType(const IfcElectricApplianceType &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcElectricApplianceType Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcElectricApplianceType entities.
         */
        Step::RefLinkedList< IfcElectricApplianceType > &getAllIfcElectricApplianceType();
        /**
         * Get the IfcElectricDistributionPoint entity by it's Id.
         * 
         * @param id The Id of the IfcElectricDistributionPoint.
         * @return A pointer to the IfcElectricDistributionPoint if found, NULL otherwise.
         */
        IfcElectricDistributionPoint *getIfcElectricDistributionPoint(Step::Id id);
        /**
         * Removes a IfcElectricDistributionPoint Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcElectricDistributionPoint to remove.
         * @return success.
         */
        bool removeIfcElectricDistributionPoint(IfcElectricDistributionPoint *arg);
        /**
         * Create an IfcElectricDistributionPoint Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcElectricDistributionPoint entity.
         */
        Step::RefPtr< IfcElectricDistributionPoint > createIfcElectricDistributionPoint(bool isVolatile = false);
        /**
         * Clone an IfcElectricDistributionPoint Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcElectricDistributionPoint Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcElectricDistributionPoint *cloneIfcElectricDistributionPoint(const IfcElectricDistributionPoint &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcElectricDistributionPoint Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcElectricDistributionPoint entities.
         */
        Step::RefLinkedList< IfcElectricDistributionPoint > &getAllIfcElectricDistributionPoint();
        /**
         * Get the IfcElectricFlowStorageDeviceType entity by it's Id.
         * 
         * @param id The Id of the IfcElectricFlowStorageDeviceType.
         * @return A pointer to the IfcElectricFlowStorageDeviceType if found, NULL otherwise.
         */
        IfcElectricFlowStorageDeviceType *getIfcElectricFlowStorageDeviceType(Step::Id id);
        /**
         * Removes a IfcElectricFlowStorageDeviceType Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcElectricFlowStorageDeviceType to remove.
         * @return success.
         */
        bool removeIfcElectricFlowStorageDeviceType(IfcElectricFlowStorageDeviceType *arg);
        /**
         * Create an IfcElectricFlowStorageDeviceType Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcElectricFlowStorageDeviceType entity.
         */
        Step::RefPtr< IfcElectricFlowStorageDeviceType > createIfcElectricFlowStorageDeviceType(bool isVolatile = false);
        /**
         * Clone an IfcElectricFlowStorageDeviceType Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcElectricFlowStorageDeviceType Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcElectricFlowStorageDeviceType *cloneIfcElectricFlowStorageDeviceType(const IfcElectricFlowStorageDeviceType &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcElectricFlowStorageDeviceType Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcElectricFlowStorageDeviceType entities.
         */
        Step::RefLinkedList< IfcElectricFlowStorageDeviceType > &getAllIfcElectricFlowStorageDeviceType();
        /**
         * Get the IfcElectricGeneratorType entity by it's Id.
         * 
         * @param id The Id of the IfcElectricGeneratorType.
         * @return A pointer to the IfcElectricGeneratorType if found, NULL otherwise.
         */
        IfcElectricGeneratorType *getIfcElectricGeneratorType(Step::Id id);
        /**
         * Removes a IfcElectricGeneratorType Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcElectricGeneratorType to remove.
         * @return success.
         */
        bool removeIfcElectricGeneratorType(IfcElectricGeneratorType *arg);
        /**
         * Create an IfcElectricGeneratorType Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcElectricGeneratorType entity.
         */
        Step::RefPtr< IfcElectricGeneratorType > createIfcElectricGeneratorType(bool isVolatile = false);
        /**
         * Clone an IfcElectricGeneratorType Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcElectricGeneratorType Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcElectricGeneratorType *cloneIfcElectricGeneratorType(const IfcElectricGeneratorType &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcElectricGeneratorType Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcElectricGeneratorType entities.
         */
        Step::RefLinkedList< IfcElectricGeneratorType > &getAllIfcElectricGeneratorType();
        /**
         * Get the IfcElectricHeaterType entity by it's Id.
         * 
         * @param id The Id of the IfcElectricHeaterType.
         * @return A pointer to the IfcElectricHeaterType if found, NULL otherwise.
         */
        IfcElectricHeaterType *getIfcElectricHeaterType(Step::Id id);
        /**
         * Removes a IfcElectricHeaterType Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcElectricHeaterType to remove.
         * @return success.
         */
        bool removeIfcElectricHeaterType(IfcElectricHeaterType *arg);
        /**
         * Create an IfcElectricHeaterType Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcElectricHeaterType entity.
         */
        Step::RefPtr< IfcElectricHeaterType > createIfcElectricHeaterType(bool isVolatile = false);
        /**
         * Clone an IfcElectricHeaterType Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcElectricHeaterType Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcElectricHeaterType *cloneIfcElectricHeaterType(const IfcElectricHeaterType &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcElectricHeaterType Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcElectricHeaterType entities.
         */
        Step::RefLinkedList< IfcElectricHeaterType > &getAllIfcElectricHeaterType();
        /**
         * Get the IfcElectricMotorType entity by it's Id.
         * 
         * @param id The Id of the IfcElectricMotorType.
         * @return A pointer to the IfcElectricMotorType if found, NULL otherwise.
         */
        IfcElectricMotorType *getIfcElectricMotorType(Step::Id id);
        /**
         * Removes a IfcElectricMotorType Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcElectricMotorType to remove.
         * @return success.
         */
        bool removeIfcElectricMotorType(IfcElectricMotorType *arg);
        /**
         * Create an IfcElectricMotorType Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcElectricMotorType entity.
         */
        Step::RefPtr< IfcElectricMotorType > createIfcElectricMotorType(bool isVolatile = false);
        /**
         * Clone an IfcElectricMotorType Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcElectricMotorType Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcElectricMotorType *cloneIfcElectricMotorType(const IfcElectricMotorType &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcElectricMotorType Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcElectricMotorType entities.
         */
        Step::RefLinkedList< IfcElectricMotorType > &getAllIfcElectricMotorType();
        /**
         * Get the IfcElectricTimeControlType entity by it's Id.
         * 
         * @param id The Id of the IfcElectricTimeControlType.
         * @return A pointer to the IfcElectricTimeControlType if found, NULL otherwise.
         */
        IfcElectricTimeControlType *getIfcElectricTimeControlType(Step::Id id);
        /**
         * Removes a IfcElectricTimeControlType Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcElectricTimeControlType to remove.
         * @return success.
         */
        bool removeIfcElectricTimeControlType(IfcElectricTimeControlType *arg);
        /**
         * Create an IfcElectricTimeControlType Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcElectricTimeControlType entity.
         */
        Step::RefPtr< IfcElectricTimeControlType > createIfcElectricTimeControlType(bool isVolatile = false);
        /**
         * Clone an IfcElectricTimeControlType Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcElectricTimeControlType Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcElectricTimeControlType *cloneIfcElectricTimeControlType(const IfcElectricTimeControlType &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcElectricTimeControlType Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcElectricTimeControlType entities.
         */
        Step::RefLinkedList< IfcElectricTimeControlType > &getAllIfcElectricTimeControlType();
        /**
         * Get the IfcElement entity by it's Id.
         * 
         * @param id The Id of the IfcElement.
         * @return A pointer to the IfcElement if found, NULL otherwise.
         */
        IfcElement *getIfcElement(Step::Id id);
        /**
         * Removes a IfcElement Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcElement to remove.
         * @return success.
         */
        bool removeIfcElement(IfcElement *arg);
        /**
         * Create an IfcElement Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcElement entity.
         */
        Step::RefPtr< IfcElement > createIfcElement(bool isVolatile = false);
        /**
         * Clone an IfcElement Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcElement Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcElement *cloneIfcElement(const IfcElement &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcElement Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcElement entities.
         */
        Step::RefLinkedList< IfcElement > &getAllIfcElement();
        /**
         * Get the IfcElementarySurface entity by it's Id.
         * 
         * @param id The Id of the IfcElementarySurface.
         * @return A pointer to the IfcElementarySurface if found, NULL otherwise.
         */
        IfcElementarySurface *getIfcElementarySurface(Step::Id id);
        /**
         * Removes a IfcElementarySurface Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcElementarySurface to remove.
         * @return success.
         */
        bool removeIfcElementarySurface(IfcElementarySurface *arg);
        /**
         * Create an IfcElementarySurface Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcElementarySurface entity.
         */
        Step::RefPtr< IfcElementarySurface > createIfcElementarySurface(bool isVolatile = false);
        /**
         * Clone an IfcElementarySurface Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcElementarySurface Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcElementarySurface *cloneIfcElementarySurface(const IfcElementarySurface &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcElementarySurface Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcElementarySurface entities.
         */
        Step::RefLinkedList< IfcElementarySurface > &getAllIfcElementarySurface();
        /**
         * Get the IfcElementAssembly entity by it's Id.
         * 
         * @param id The Id of the IfcElementAssembly.
         * @return A pointer to the IfcElementAssembly if found, NULL otherwise.
         */
        IfcElementAssembly *getIfcElementAssembly(Step::Id id);
        /**
         * Removes a IfcElementAssembly Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcElementAssembly to remove.
         * @return success.
         */
        bool removeIfcElementAssembly(IfcElementAssembly *arg);
        /**
         * Create an IfcElementAssembly Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcElementAssembly entity.
         */
        Step::RefPtr< IfcElementAssembly > createIfcElementAssembly(bool isVolatile = false);
        /**
         * Clone an IfcElementAssembly Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcElementAssembly Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcElementAssembly *cloneIfcElementAssembly(const IfcElementAssembly &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcElementAssembly Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcElementAssembly entities.
         */
        Step::RefLinkedList< IfcElementAssembly > &getAllIfcElementAssembly();
        /**
         * Get the IfcElementComponent entity by it's Id.
         * 
         * @param id The Id of the IfcElementComponent.
         * @return A pointer to the IfcElementComponent if found, NULL otherwise.
         */
        IfcElementComponent *getIfcElementComponent(Step::Id id);
        /**
         * Removes a IfcElementComponent Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcElementComponent to remove.
         * @return success.
         */
        bool removeIfcElementComponent(IfcElementComponent *arg);
        /**
         * Create an IfcElementComponent Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcElementComponent entity.
         */
        Step::RefPtr< IfcElementComponent > createIfcElementComponent(bool isVolatile = false);
        /**
         * Clone an IfcElementComponent Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcElementComponent Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcElementComponent *cloneIfcElementComponent(const IfcElementComponent &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcElementComponent Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcElementComponent entities.
         */
        Step::RefLinkedList< IfcElementComponent > &getAllIfcElementComponent();
        /**
         * Get the IfcElementComponentType entity by it's Id.
         * 
         * @param id The Id of the IfcElementComponentType.
         * @return A pointer to the IfcElementComponentType if found, NULL otherwise.
         */
        IfcElementComponentType *getIfcElementComponentType(Step::Id id);
        /**
         * Removes a IfcElementComponentType Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcElementComponentType to remove.
         * @return success.
         */
        bool removeIfcElementComponentType(IfcElementComponentType *arg);
        /**
         * Create an IfcElementComponentType Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcElementComponentType entity.
         */
        Step::RefPtr< IfcElementComponentType > createIfcElementComponentType(bool isVolatile = false);
        /**
         * Clone an IfcElementComponentType Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcElementComponentType Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcElementComponentType *cloneIfcElementComponentType(const IfcElementComponentType &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcElementComponentType Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcElementComponentType entities.
         */
        Step::RefLinkedList< IfcElementComponentType > &getAllIfcElementComponentType();
        /**
         * Get the IfcElementQuantity entity by it's Id.
         * 
         * @param id The Id of the IfcElementQuantity.
         * @return A pointer to the IfcElementQuantity if found, NULL otherwise.
         */
        IfcElementQuantity *getIfcElementQuantity(Step::Id id);
        /**
         * Removes a IfcElementQuantity Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcElementQuantity to remove.
         * @return success.
         */
        bool removeIfcElementQuantity(IfcElementQuantity *arg);
        /**
         * Create an IfcElementQuantity Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcElementQuantity entity.
         */
        Step::RefPtr< IfcElementQuantity > createIfcElementQuantity(bool isVolatile = false);
        /**
         * Clone an IfcElementQuantity Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcElementQuantity Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcElementQuantity *cloneIfcElementQuantity(const IfcElementQuantity &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcElementQuantity Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcElementQuantity entities.
         */
        Step::RefLinkedList< IfcElementQuantity > &getAllIfcElementQuantity();
        /**
         * Get the IfcElementType entity by it's Id.
         * 
         * @param id The Id of the IfcElementType.
         * @return A pointer to the IfcElementType if found, NULL otherwise.
         */
        IfcElementType *getIfcElementType(Step::Id id);
        /**
         * Removes a IfcElementType Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcElementType to remove.
         * @return success.
         */
        bool removeIfcElementType(IfcElementType *arg);
        /**
         * Create an IfcElementType Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcElementType entity.
         */
        Step::RefPtr< IfcElementType > createIfcElementType(bool isVolatile = false);
        /**
         * Clone an IfcElementType Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcElementType Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcElementType *cloneIfcElementType(const IfcElementType &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcElementType Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcElementType entities.
         */
        Step::RefLinkedList< IfcElementType > &getAllIfcElementType();
        /**
         * Get the IfcEllipse entity by it's Id.
         * 
         * @param id The Id of the IfcEllipse.
         * @return A pointer to the IfcEllipse if found, NULL otherwise.
         */
        IfcEllipse *getIfcEllipse(Step::Id id);
        /**
         * Removes a IfcEllipse Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcEllipse to remove.
         * @return success.
         */
        bool removeIfcEllipse(IfcEllipse *arg);
        /**
         * Create an IfcEllipse Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcEllipse entity.
         */
        Step::RefPtr< IfcEllipse > createIfcEllipse(bool isVolatile = false);
        /**
         * Clone an IfcEllipse Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcEllipse Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcEllipse *cloneIfcEllipse(const IfcEllipse &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcEllipse Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcEllipse entities.
         */
        Step::RefLinkedList< IfcEllipse > &getAllIfcEllipse();
        /**
         * Get the IfcEllipseProfileDef entity by it's Id.
         * 
         * @param id The Id of the IfcEllipseProfileDef.
         * @return A pointer to the IfcEllipseProfileDef if found, NULL otherwise.
         */
        IfcEllipseProfileDef *getIfcEllipseProfileDef(Step::Id id);
        /**
         * Removes a IfcEllipseProfileDef Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcEllipseProfileDef to remove.
         * @return success.
         */
        bool removeIfcEllipseProfileDef(IfcEllipseProfileDef *arg);
        /**
         * Create an IfcEllipseProfileDef Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcEllipseProfileDef entity.
         */
        Step::RefPtr< IfcEllipseProfileDef > createIfcEllipseProfileDef(bool isVolatile = false);
        /**
         * Clone an IfcEllipseProfileDef Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcEllipseProfileDef Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcEllipseProfileDef *cloneIfcEllipseProfileDef(const IfcEllipseProfileDef &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcEllipseProfileDef Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcEllipseProfileDef entities.
         */
        Step::RefLinkedList< IfcEllipseProfileDef > &getAllIfcEllipseProfileDef();
        /**
         * Get the IfcEnergyConversionDevice entity by it's Id.
         * 
         * @param id The Id of the IfcEnergyConversionDevice.
         * @return A pointer to the IfcEnergyConversionDevice if found, NULL otherwise.
         */
        IfcEnergyConversionDevice *getIfcEnergyConversionDevice(Step::Id id);
        /**
         * Removes a IfcEnergyConversionDevice Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcEnergyConversionDevice to remove.
         * @return success.
         */
        bool removeIfcEnergyConversionDevice(IfcEnergyConversionDevice *arg);
        /**
         * Create an IfcEnergyConversionDevice Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcEnergyConversionDevice entity.
         */
        Step::RefPtr< IfcEnergyConversionDevice > createIfcEnergyConversionDevice(bool isVolatile = false);
        /**
         * Clone an IfcEnergyConversionDevice Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcEnergyConversionDevice Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcEnergyConversionDevice *cloneIfcEnergyConversionDevice(const IfcEnergyConversionDevice &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcEnergyConversionDevice Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcEnergyConversionDevice entities.
         */
        Step::RefLinkedList< IfcEnergyConversionDevice > &getAllIfcEnergyConversionDevice();
        /**
         * Get the IfcEnergyConversionDeviceType entity by it's Id.
         * 
         * @param id The Id of the IfcEnergyConversionDeviceType.
         * @return A pointer to the IfcEnergyConversionDeviceType if found, NULL otherwise.
         */
        IfcEnergyConversionDeviceType *getIfcEnergyConversionDeviceType(Step::Id id);
        /**
         * Removes a IfcEnergyConversionDeviceType Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcEnergyConversionDeviceType to remove.
         * @return success.
         */
        bool removeIfcEnergyConversionDeviceType(IfcEnergyConversionDeviceType *arg);
        /**
         * Create an IfcEnergyConversionDeviceType Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcEnergyConversionDeviceType entity.
         */
        Step::RefPtr< IfcEnergyConversionDeviceType > createIfcEnergyConversionDeviceType(bool isVolatile = false);
        /**
         * Clone an IfcEnergyConversionDeviceType Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcEnergyConversionDeviceType Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcEnergyConversionDeviceType *cloneIfcEnergyConversionDeviceType(const IfcEnergyConversionDeviceType &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcEnergyConversionDeviceType Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcEnergyConversionDeviceType entities.
         */
        Step::RefLinkedList< IfcEnergyConversionDeviceType > &getAllIfcEnergyConversionDeviceType();
        /**
         * Get the IfcEnergyProperties entity by it's Id.
         * 
         * @param id The Id of the IfcEnergyProperties.
         * @return A pointer to the IfcEnergyProperties if found, NULL otherwise.
         */
        IfcEnergyProperties *getIfcEnergyProperties(Step::Id id);
        /**
         * Removes a IfcEnergyProperties Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcEnergyProperties to remove.
         * @return success.
         */
        bool removeIfcEnergyProperties(IfcEnergyProperties *arg);
        /**
         * Create an IfcEnergyProperties Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcEnergyProperties entity.
         */
        Step::RefPtr< IfcEnergyProperties > createIfcEnergyProperties(bool isVolatile = false);
        /**
         * Clone an IfcEnergyProperties Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcEnergyProperties Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcEnergyProperties *cloneIfcEnergyProperties(const IfcEnergyProperties &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcEnergyProperties Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcEnergyProperties entities.
         */
        Step::RefLinkedList< IfcEnergyProperties > &getAllIfcEnergyProperties();
        /**
         * Get the IfcEnvironmentalImpactValue entity by it's Id.
         * 
         * @param id The Id of the IfcEnvironmentalImpactValue.
         * @return A pointer to the IfcEnvironmentalImpactValue if found, NULL otherwise.
         */
        IfcEnvironmentalImpactValue *getIfcEnvironmentalImpactValue(Step::Id id);
        /**
         * Removes a IfcEnvironmentalImpactValue Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcEnvironmentalImpactValue to remove.
         * @return success.
         */
        bool removeIfcEnvironmentalImpactValue(IfcEnvironmentalImpactValue *arg);
        /**
         * Create an IfcEnvironmentalImpactValue Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcEnvironmentalImpactValue entity.
         */
        Step::RefPtr< IfcEnvironmentalImpactValue > createIfcEnvironmentalImpactValue(bool isVolatile = false);
        /**
         * Clone an IfcEnvironmentalImpactValue Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcEnvironmentalImpactValue Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcEnvironmentalImpactValue *cloneIfcEnvironmentalImpactValue(const IfcEnvironmentalImpactValue &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcEnvironmentalImpactValue Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcEnvironmentalImpactValue entities.
         */
        Step::RefLinkedList< IfcEnvironmentalImpactValue > &getAllIfcEnvironmentalImpactValue();
        /**
         * Get the IfcEquipmentElement entity by it's Id.
         * 
         * @param id The Id of the IfcEquipmentElement.
         * @return A pointer to the IfcEquipmentElement if found, NULL otherwise.
         */
        IfcEquipmentElement *getIfcEquipmentElement(Step::Id id);
        /**
         * Removes a IfcEquipmentElement Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcEquipmentElement to remove.
         * @return success.
         */
        bool removeIfcEquipmentElement(IfcEquipmentElement *arg);
        /**
         * Create an IfcEquipmentElement Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcEquipmentElement entity.
         */
        Step::RefPtr< IfcEquipmentElement > createIfcEquipmentElement(bool isVolatile = false);
        /**
         * Clone an IfcEquipmentElement Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcEquipmentElement Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcEquipmentElement *cloneIfcEquipmentElement(const IfcEquipmentElement &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcEquipmentElement Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcEquipmentElement entities.
         */
        Step::RefLinkedList< IfcEquipmentElement > &getAllIfcEquipmentElement();
        /**
         * Get the IfcEquipmentStandard entity by it's Id.
         * 
         * @param id The Id of the IfcEquipmentStandard.
         * @return A pointer to the IfcEquipmentStandard if found, NULL otherwise.
         */
        IfcEquipmentStandard *getIfcEquipmentStandard(Step::Id id);
        /**
         * Removes a IfcEquipmentStandard Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcEquipmentStandard to remove.
         * @return success.
         */
        bool removeIfcEquipmentStandard(IfcEquipmentStandard *arg);
        /**
         * Create an IfcEquipmentStandard Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcEquipmentStandard entity.
         */
        Step::RefPtr< IfcEquipmentStandard > createIfcEquipmentStandard(bool isVolatile = false);
        /**
         * Clone an IfcEquipmentStandard Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcEquipmentStandard Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcEquipmentStandard *cloneIfcEquipmentStandard(const IfcEquipmentStandard &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcEquipmentStandard Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcEquipmentStandard entities.
         */
        Step::RefLinkedList< IfcEquipmentStandard > &getAllIfcEquipmentStandard();
        /**
         * Get the IfcEvaporativeCoolerType entity by it's Id.
         * 
         * @param id The Id of the IfcEvaporativeCoolerType.
         * @return A pointer to the IfcEvaporativeCoolerType if found, NULL otherwise.
         */
        IfcEvaporativeCoolerType *getIfcEvaporativeCoolerType(Step::Id id);
        /**
         * Removes a IfcEvaporativeCoolerType Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcEvaporativeCoolerType to remove.
         * @return success.
         */
        bool removeIfcEvaporativeCoolerType(IfcEvaporativeCoolerType *arg);
        /**
         * Create an IfcEvaporativeCoolerType Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcEvaporativeCoolerType entity.
         */
        Step::RefPtr< IfcEvaporativeCoolerType > createIfcEvaporativeCoolerType(bool isVolatile = false);
        /**
         * Clone an IfcEvaporativeCoolerType Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcEvaporativeCoolerType Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcEvaporativeCoolerType *cloneIfcEvaporativeCoolerType(const IfcEvaporativeCoolerType &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcEvaporativeCoolerType Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcEvaporativeCoolerType entities.
         */
        Step::RefLinkedList< IfcEvaporativeCoolerType > &getAllIfcEvaporativeCoolerType();
        /**
         * Get the IfcEvaporatorType entity by it's Id.
         * 
         * @param id The Id of the IfcEvaporatorType.
         * @return A pointer to the IfcEvaporatorType if found, NULL otherwise.
         */
        IfcEvaporatorType *getIfcEvaporatorType(Step::Id id);
        /**
         * Removes a IfcEvaporatorType Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcEvaporatorType to remove.
         * @return success.
         */
        bool removeIfcEvaporatorType(IfcEvaporatorType *arg);
        /**
         * Create an IfcEvaporatorType Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcEvaporatorType entity.
         */
        Step::RefPtr< IfcEvaporatorType > createIfcEvaporatorType(bool isVolatile = false);
        /**
         * Clone an IfcEvaporatorType Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcEvaporatorType Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcEvaporatorType *cloneIfcEvaporatorType(const IfcEvaporatorType &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcEvaporatorType Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcEvaporatorType entities.
         */
        Step::RefLinkedList< IfcEvaporatorType > &getAllIfcEvaporatorType();
        /**
         * Get the IfcExtendedMaterialProperties entity by it's Id.
         * 
         * @param id The Id of the IfcExtendedMaterialProperties.
         * @return A pointer to the IfcExtendedMaterialProperties if found, NULL otherwise.
         */
        IfcExtendedMaterialProperties *getIfcExtendedMaterialProperties(Step::Id id);
        /**
         * Removes a IfcExtendedMaterialProperties Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcExtendedMaterialProperties to remove.
         * @return success.
         */
        bool removeIfcExtendedMaterialProperties(IfcExtendedMaterialProperties *arg);
        /**
         * Create an IfcExtendedMaterialProperties Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcExtendedMaterialProperties entity.
         */
        Step::RefPtr< IfcExtendedMaterialProperties > createIfcExtendedMaterialProperties(bool isVolatile = false);
        /**
         * Clone an IfcExtendedMaterialProperties Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcExtendedMaterialProperties Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcExtendedMaterialProperties *cloneIfcExtendedMaterialProperties(const IfcExtendedMaterialProperties &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcExtendedMaterialProperties Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcExtendedMaterialProperties entities.
         */
        Step::RefLinkedList< IfcExtendedMaterialProperties > &getAllIfcExtendedMaterialProperties();
        /**
         * Get the IfcExternallyDefinedHatchStyle entity by it's Id.
         * 
         * @param id The Id of the IfcExternallyDefinedHatchStyle.
         * @return A pointer to the IfcExternallyDefinedHatchStyle if found, NULL otherwise.
         */
        IfcExternallyDefinedHatchStyle *getIfcExternallyDefinedHatchStyle(Step::Id id);
        /**
         * Removes a IfcExternallyDefinedHatchStyle Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcExternallyDefinedHatchStyle to remove.
         * @return success.
         */
        bool removeIfcExternallyDefinedHatchStyle(IfcExternallyDefinedHatchStyle *arg);
        /**
         * Create an IfcExternallyDefinedHatchStyle Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcExternallyDefinedHatchStyle entity.
         */
        Step::RefPtr< IfcExternallyDefinedHatchStyle > createIfcExternallyDefinedHatchStyle(bool isVolatile = false);
        /**
         * Clone an IfcExternallyDefinedHatchStyle Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcExternallyDefinedHatchStyle Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcExternallyDefinedHatchStyle *cloneIfcExternallyDefinedHatchStyle(const IfcExternallyDefinedHatchStyle &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcExternallyDefinedHatchStyle Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcExternallyDefinedHatchStyle entities.
         */
        Step::RefLinkedList< IfcExternallyDefinedHatchStyle > &getAllIfcExternallyDefinedHatchStyle();
        /**
         * Get the IfcExternallyDefinedSurfaceStyle entity by it's Id.
         * 
         * @param id The Id of the IfcExternallyDefinedSurfaceStyle.
         * @return A pointer to the IfcExternallyDefinedSurfaceStyle if found, NULL otherwise.
         */
        IfcExternallyDefinedSurfaceStyle *getIfcExternallyDefinedSurfaceStyle(Step::Id id);
        /**
         * Removes a IfcExternallyDefinedSurfaceStyle Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcExternallyDefinedSurfaceStyle to remove.
         * @return success.
         */
        bool removeIfcExternallyDefinedSurfaceStyle(IfcExternallyDefinedSurfaceStyle *arg);
        /**
         * Create an IfcExternallyDefinedSurfaceStyle Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcExternallyDefinedSurfaceStyle entity.
         */
        Step::RefPtr< IfcExternallyDefinedSurfaceStyle > createIfcExternallyDefinedSurfaceStyle(bool isVolatile = false);
        /**
         * Clone an IfcExternallyDefinedSurfaceStyle Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcExternallyDefinedSurfaceStyle Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcExternallyDefinedSurfaceStyle *cloneIfcExternallyDefinedSurfaceStyle(const IfcExternallyDefinedSurfaceStyle &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcExternallyDefinedSurfaceStyle Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcExternallyDefinedSurfaceStyle entities.
         */
        Step::RefLinkedList< IfcExternallyDefinedSurfaceStyle > &getAllIfcExternallyDefinedSurfaceStyle();
        /**
         * Get the IfcExternallyDefinedSymbol entity by it's Id.
         * 
         * @param id The Id of the IfcExternallyDefinedSymbol.
         * @return A pointer to the IfcExternallyDefinedSymbol if found, NULL otherwise.
         */
        IfcExternallyDefinedSymbol *getIfcExternallyDefinedSymbol(Step::Id id);
        /**
         * Removes a IfcExternallyDefinedSymbol Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcExternallyDefinedSymbol to remove.
         * @return success.
         */
        bool removeIfcExternallyDefinedSymbol(IfcExternallyDefinedSymbol *arg);
        /**
         * Create an IfcExternallyDefinedSymbol Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcExternallyDefinedSymbol entity.
         */
        Step::RefPtr< IfcExternallyDefinedSymbol > createIfcExternallyDefinedSymbol(bool isVolatile = false);
        /**
         * Clone an IfcExternallyDefinedSymbol Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcExternallyDefinedSymbol Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcExternallyDefinedSymbol *cloneIfcExternallyDefinedSymbol(const IfcExternallyDefinedSymbol &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcExternallyDefinedSymbol Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcExternallyDefinedSymbol entities.
         */
        Step::RefLinkedList< IfcExternallyDefinedSymbol > &getAllIfcExternallyDefinedSymbol();
        /**
         * Get the IfcExternallyDefinedTextFont entity by it's Id.
         * 
         * @param id The Id of the IfcExternallyDefinedTextFont.
         * @return A pointer to the IfcExternallyDefinedTextFont if found, NULL otherwise.
         */
        IfcExternallyDefinedTextFont *getIfcExternallyDefinedTextFont(Step::Id id);
        /**
         * Removes a IfcExternallyDefinedTextFont Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcExternallyDefinedTextFont to remove.
         * @return success.
         */
        bool removeIfcExternallyDefinedTextFont(IfcExternallyDefinedTextFont *arg);
        /**
         * Create an IfcExternallyDefinedTextFont Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcExternallyDefinedTextFont entity.
         */
        Step::RefPtr< IfcExternallyDefinedTextFont > createIfcExternallyDefinedTextFont(bool isVolatile = false);
        /**
         * Clone an IfcExternallyDefinedTextFont Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcExternallyDefinedTextFont Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcExternallyDefinedTextFont *cloneIfcExternallyDefinedTextFont(const IfcExternallyDefinedTextFont &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcExternallyDefinedTextFont Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcExternallyDefinedTextFont entities.
         */
        Step::RefLinkedList< IfcExternallyDefinedTextFont > &getAllIfcExternallyDefinedTextFont();
        /**
         * Get the IfcExternalReference entity by it's Id.
         * 
         * @param id The Id of the IfcExternalReference.
         * @return A pointer to the IfcExternalReference if found, NULL otherwise.
         */
        IfcExternalReference *getIfcExternalReference(Step::Id id);
        /**
         * Removes a IfcExternalReference Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcExternalReference to remove.
         * @return success.
         */
        bool removeIfcExternalReference(IfcExternalReference *arg);
        /**
         * Create an IfcExternalReference Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcExternalReference entity.
         */
        Step::RefPtr< IfcExternalReference > createIfcExternalReference(bool isVolatile = false);
        /**
         * Clone an IfcExternalReference Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcExternalReference Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcExternalReference *cloneIfcExternalReference(const IfcExternalReference &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcExternalReference Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcExternalReference entities.
         */
        Step::RefLinkedList< IfcExternalReference > &getAllIfcExternalReference();
        /**
         * Get the IfcExtrudedAreaSolid entity by it's Id.
         * 
         * @param id The Id of the IfcExtrudedAreaSolid.
         * @return A pointer to the IfcExtrudedAreaSolid if found, NULL otherwise.
         */
        IfcExtrudedAreaSolid *getIfcExtrudedAreaSolid(Step::Id id);
        /**
         * Removes a IfcExtrudedAreaSolid Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcExtrudedAreaSolid to remove.
         * @return success.
         */
        bool removeIfcExtrudedAreaSolid(IfcExtrudedAreaSolid *arg);
        /**
         * Create an IfcExtrudedAreaSolid Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcExtrudedAreaSolid entity.
         */
        Step::RefPtr< IfcExtrudedAreaSolid > createIfcExtrudedAreaSolid(bool isVolatile = false);
        /**
         * Clone an IfcExtrudedAreaSolid Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcExtrudedAreaSolid Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcExtrudedAreaSolid *cloneIfcExtrudedAreaSolid(const IfcExtrudedAreaSolid &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcExtrudedAreaSolid Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcExtrudedAreaSolid entities.
         */
        Step::RefLinkedList< IfcExtrudedAreaSolid > &getAllIfcExtrudedAreaSolid();
        /**
         * Get the IfcFace entity by it's Id.
         * 
         * @param id The Id of the IfcFace.
         * @return A pointer to the IfcFace if found, NULL otherwise.
         */
        IfcFace *getIfcFace(Step::Id id);
        /**
         * Removes a IfcFace Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcFace to remove.
         * @return success.
         */
        bool removeIfcFace(IfcFace *arg);
        /**
         * Create an IfcFace Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcFace entity.
         */
        Step::RefPtr< IfcFace > createIfcFace(bool isVolatile = false);
        /**
         * Clone an IfcFace Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcFace Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcFace *cloneIfcFace(const IfcFace &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcFace Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcFace entities.
         */
        Step::RefLinkedList< IfcFace > &getAllIfcFace();
        /**
         * Get the IfcFaceBasedSurfaceModel entity by it's Id.
         * 
         * @param id The Id of the IfcFaceBasedSurfaceModel.
         * @return A pointer to the IfcFaceBasedSurfaceModel if found, NULL otherwise.
         */
        IfcFaceBasedSurfaceModel *getIfcFaceBasedSurfaceModel(Step::Id id);
        /**
         * Removes a IfcFaceBasedSurfaceModel Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcFaceBasedSurfaceModel to remove.
         * @return success.
         */
        bool removeIfcFaceBasedSurfaceModel(IfcFaceBasedSurfaceModel *arg);
        /**
         * Create an IfcFaceBasedSurfaceModel Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcFaceBasedSurfaceModel entity.
         */
        Step::RefPtr< IfcFaceBasedSurfaceModel > createIfcFaceBasedSurfaceModel(bool isVolatile = false);
        /**
         * Clone an IfcFaceBasedSurfaceModel Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcFaceBasedSurfaceModel Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcFaceBasedSurfaceModel *cloneIfcFaceBasedSurfaceModel(const IfcFaceBasedSurfaceModel &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcFaceBasedSurfaceModel Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcFaceBasedSurfaceModel entities.
         */
        Step::RefLinkedList< IfcFaceBasedSurfaceModel > &getAllIfcFaceBasedSurfaceModel();
        /**
         * Get the IfcFaceBound entity by it's Id.
         * 
         * @param id The Id of the IfcFaceBound.
         * @return A pointer to the IfcFaceBound if found, NULL otherwise.
         */
        IfcFaceBound *getIfcFaceBound(Step::Id id);
        /**
         * Removes a IfcFaceBound Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcFaceBound to remove.
         * @return success.
         */
        bool removeIfcFaceBound(IfcFaceBound *arg);
        /**
         * Create an IfcFaceBound Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcFaceBound entity.
         */
        Step::RefPtr< IfcFaceBound > createIfcFaceBound(bool isVolatile = false);
        /**
         * Clone an IfcFaceBound Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcFaceBound Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcFaceBound *cloneIfcFaceBound(const IfcFaceBound &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcFaceBound Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcFaceBound entities.
         */
        Step::RefLinkedList< IfcFaceBound > &getAllIfcFaceBound();
        /**
         * Get the IfcFaceOuterBound entity by it's Id.
         * 
         * @param id The Id of the IfcFaceOuterBound.
         * @return A pointer to the IfcFaceOuterBound if found, NULL otherwise.
         */
        IfcFaceOuterBound *getIfcFaceOuterBound(Step::Id id);
        /**
         * Removes a IfcFaceOuterBound Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcFaceOuterBound to remove.
         * @return success.
         */
        bool removeIfcFaceOuterBound(IfcFaceOuterBound *arg);
        /**
         * Create an IfcFaceOuterBound Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcFaceOuterBound entity.
         */
        Step::RefPtr< IfcFaceOuterBound > createIfcFaceOuterBound(bool isVolatile = false);
        /**
         * Clone an IfcFaceOuterBound Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcFaceOuterBound Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcFaceOuterBound *cloneIfcFaceOuterBound(const IfcFaceOuterBound &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcFaceOuterBound Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcFaceOuterBound entities.
         */
        Step::RefLinkedList< IfcFaceOuterBound > &getAllIfcFaceOuterBound();
        /**
         * Get the IfcFaceSurface entity by it's Id.
         * 
         * @param id The Id of the IfcFaceSurface.
         * @return A pointer to the IfcFaceSurface if found, NULL otherwise.
         */
        IfcFaceSurface *getIfcFaceSurface(Step::Id id);
        /**
         * Removes a IfcFaceSurface Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcFaceSurface to remove.
         * @return success.
         */
        bool removeIfcFaceSurface(IfcFaceSurface *arg);
        /**
         * Create an IfcFaceSurface Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcFaceSurface entity.
         */
        Step::RefPtr< IfcFaceSurface > createIfcFaceSurface(bool isVolatile = false);
        /**
         * Clone an IfcFaceSurface Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcFaceSurface Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcFaceSurface *cloneIfcFaceSurface(const IfcFaceSurface &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcFaceSurface Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcFaceSurface entities.
         */
        Step::RefLinkedList< IfcFaceSurface > &getAllIfcFaceSurface();
        /**
         * Get the IfcFacetedBrep entity by it's Id.
         * 
         * @param id The Id of the IfcFacetedBrep.
         * @return A pointer to the IfcFacetedBrep if found, NULL otherwise.
         */
        IfcFacetedBrep *getIfcFacetedBrep(Step::Id id);
        /**
         * Removes a IfcFacetedBrep Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcFacetedBrep to remove.
         * @return success.
         */
        bool removeIfcFacetedBrep(IfcFacetedBrep *arg);
        /**
         * Create an IfcFacetedBrep Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcFacetedBrep entity.
         */
        Step::RefPtr< IfcFacetedBrep > createIfcFacetedBrep(bool isVolatile = false);
        /**
         * Clone an IfcFacetedBrep Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcFacetedBrep Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcFacetedBrep *cloneIfcFacetedBrep(const IfcFacetedBrep &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcFacetedBrep Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcFacetedBrep entities.
         */
        Step::RefLinkedList< IfcFacetedBrep > &getAllIfcFacetedBrep();
        /**
         * Get the IfcFacetedBrepWithVoids entity by it's Id.
         * 
         * @param id The Id of the IfcFacetedBrepWithVoids.
         * @return A pointer to the IfcFacetedBrepWithVoids if found, NULL otherwise.
         */
        IfcFacetedBrepWithVoids *getIfcFacetedBrepWithVoids(Step::Id id);
        /**
         * Removes a IfcFacetedBrepWithVoids Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcFacetedBrepWithVoids to remove.
         * @return success.
         */
        bool removeIfcFacetedBrepWithVoids(IfcFacetedBrepWithVoids *arg);
        /**
         * Create an IfcFacetedBrepWithVoids Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcFacetedBrepWithVoids entity.
         */
        Step::RefPtr< IfcFacetedBrepWithVoids > createIfcFacetedBrepWithVoids(bool isVolatile = false);
        /**
         * Clone an IfcFacetedBrepWithVoids Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcFacetedBrepWithVoids Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcFacetedBrepWithVoids *cloneIfcFacetedBrepWithVoids(const IfcFacetedBrepWithVoids &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcFacetedBrepWithVoids Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcFacetedBrepWithVoids entities.
         */
        Step::RefLinkedList< IfcFacetedBrepWithVoids > &getAllIfcFacetedBrepWithVoids();
        /**
         * Get the IfcFailureConnectionCondition entity by it's Id.
         * 
         * @param id The Id of the IfcFailureConnectionCondition.
         * @return A pointer to the IfcFailureConnectionCondition if found, NULL otherwise.
         */
        IfcFailureConnectionCondition *getIfcFailureConnectionCondition(Step::Id id);
        /**
         * Removes a IfcFailureConnectionCondition Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcFailureConnectionCondition to remove.
         * @return success.
         */
        bool removeIfcFailureConnectionCondition(IfcFailureConnectionCondition *arg);
        /**
         * Create an IfcFailureConnectionCondition Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcFailureConnectionCondition entity.
         */
        Step::RefPtr< IfcFailureConnectionCondition > createIfcFailureConnectionCondition(bool isVolatile = false);
        /**
         * Clone an IfcFailureConnectionCondition Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcFailureConnectionCondition Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcFailureConnectionCondition *cloneIfcFailureConnectionCondition(const IfcFailureConnectionCondition &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcFailureConnectionCondition Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcFailureConnectionCondition entities.
         */
        Step::RefLinkedList< IfcFailureConnectionCondition > &getAllIfcFailureConnectionCondition();
        /**
         * Get the IfcFanType entity by it's Id.
         * 
         * @param id The Id of the IfcFanType.
         * @return A pointer to the IfcFanType if found, NULL otherwise.
         */
        IfcFanType *getIfcFanType(Step::Id id);
        /**
         * Removes a IfcFanType Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcFanType to remove.
         * @return success.
         */
        bool removeIfcFanType(IfcFanType *arg);
        /**
         * Create an IfcFanType Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcFanType entity.
         */
        Step::RefPtr< IfcFanType > createIfcFanType(bool isVolatile = false);
        /**
         * Clone an IfcFanType Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcFanType Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcFanType *cloneIfcFanType(const IfcFanType &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcFanType Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcFanType entities.
         */
        Step::RefLinkedList< IfcFanType > &getAllIfcFanType();
        /**
         * Get the IfcFastener entity by it's Id.
         * 
         * @param id The Id of the IfcFastener.
         * @return A pointer to the IfcFastener if found, NULL otherwise.
         */
        IfcFastener *getIfcFastener(Step::Id id);
        /**
         * Removes a IfcFastener Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcFastener to remove.
         * @return success.
         */
        bool removeIfcFastener(IfcFastener *arg);
        /**
         * Create an IfcFastener Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcFastener entity.
         */
        Step::RefPtr< IfcFastener > createIfcFastener(bool isVolatile = false);
        /**
         * Clone an IfcFastener Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcFastener Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcFastener *cloneIfcFastener(const IfcFastener &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcFastener Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcFastener entities.
         */
        Step::RefLinkedList< IfcFastener > &getAllIfcFastener();
        /**
         * Get the IfcFastenerType entity by it's Id.
         * 
         * @param id The Id of the IfcFastenerType.
         * @return A pointer to the IfcFastenerType if found, NULL otherwise.
         */
        IfcFastenerType *getIfcFastenerType(Step::Id id);
        /**
         * Removes a IfcFastenerType Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcFastenerType to remove.
         * @return success.
         */
        bool removeIfcFastenerType(IfcFastenerType *arg);
        /**
         * Create an IfcFastenerType Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcFastenerType entity.
         */
        Step::RefPtr< IfcFastenerType > createIfcFastenerType(bool isVolatile = false);
        /**
         * Clone an IfcFastenerType Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcFastenerType Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcFastenerType *cloneIfcFastenerType(const IfcFastenerType &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcFastenerType Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcFastenerType entities.
         */
        Step::RefLinkedList< IfcFastenerType > &getAllIfcFastenerType();
        /**
         * Get the IfcFeatureElement entity by it's Id.
         * 
         * @param id The Id of the IfcFeatureElement.
         * @return A pointer to the IfcFeatureElement if found, NULL otherwise.
         */
        IfcFeatureElement *getIfcFeatureElement(Step::Id id);
        /**
         * Removes a IfcFeatureElement Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcFeatureElement to remove.
         * @return success.
         */
        bool removeIfcFeatureElement(IfcFeatureElement *arg);
        /**
         * Create an IfcFeatureElement Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcFeatureElement entity.
         */
        Step::RefPtr< IfcFeatureElement > createIfcFeatureElement(bool isVolatile = false);
        /**
         * Clone an IfcFeatureElement Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcFeatureElement Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcFeatureElement *cloneIfcFeatureElement(const IfcFeatureElement &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcFeatureElement Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcFeatureElement entities.
         */
        Step::RefLinkedList< IfcFeatureElement > &getAllIfcFeatureElement();
        /**
         * Get the IfcFeatureElementAddition entity by it's Id.
         * 
         * @param id The Id of the IfcFeatureElementAddition.
         * @return A pointer to the IfcFeatureElementAddition if found, NULL otherwise.
         */
        IfcFeatureElementAddition *getIfcFeatureElementAddition(Step::Id id);
        /**
         * Removes a IfcFeatureElementAddition Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcFeatureElementAddition to remove.
         * @return success.
         */
        bool removeIfcFeatureElementAddition(IfcFeatureElementAddition *arg);
        /**
         * Create an IfcFeatureElementAddition Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcFeatureElementAddition entity.
         */
        Step::RefPtr< IfcFeatureElementAddition > createIfcFeatureElementAddition(bool isVolatile = false);
        /**
         * Clone an IfcFeatureElementAddition Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcFeatureElementAddition Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcFeatureElementAddition *cloneIfcFeatureElementAddition(const IfcFeatureElementAddition &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcFeatureElementAddition Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcFeatureElementAddition entities.
         */
        Step::RefLinkedList< IfcFeatureElementAddition > &getAllIfcFeatureElementAddition();
        /**
         * Get the IfcFeatureElementSubtraction entity by it's Id.
         * 
         * @param id The Id of the IfcFeatureElementSubtraction.
         * @return A pointer to the IfcFeatureElementSubtraction if found, NULL otherwise.
         */
        IfcFeatureElementSubtraction *getIfcFeatureElementSubtraction(Step::Id id);
        /**
         * Removes a IfcFeatureElementSubtraction Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcFeatureElementSubtraction to remove.
         * @return success.
         */
        bool removeIfcFeatureElementSubtraction(IfcFeatureElementSubtraction *arg);
        /**
         * Create an IfcFeatureElementSubtraction Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcFeatureElementSubtraction entity.
         */
        Step::RefPtr< IfcFeatureElementSubtraction > createIfcFeatureElementSubtraction(bool isVolatile = false);
        /**
         * Clone an IfcFeatureElementSubtraction Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcFeatureElementSubtraction Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcFeatureElementSubtraction *cloneIfcFeatureElementSubtraction(const IfcFeatureElementSubtraction &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcFeatureElementSubtraction Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcFeatureElementSubtraction entities.
         */
        Step::RefLinkedList< IfcFeatureElementSubtraction > &getAllIfcFeatureElementSubtraction();
        /**
         * Get the IfcFillAreaStyle entity by it's Id.
         * 
         * @param id The Id of the IfcFillAreaStyle.
         * @return A pointer to the IfcFillAreaStyle if found, NULL otherwise.
         */
        IfcFillAreaStyle *getIfcFillAreaStyle(Step::Id id);
        /**
         * Removes a IfcFillAreaStyle Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcFillAreaStyle to remove.
         * @return success.
         */
        bool removeIfcFillAreaStyle(IfcFillAreaStyle *arg);
        /**
         * Create an IfcFillAreaStyle Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcFillAreaStyle entity.
         */
        Step::RefPtr< IfcFillAreaStyle > createIfcFillAreaStyle(bool isVolatile = false);
        /**
         * Clone an IfcFillAreaStyle Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcFillAreaStyle Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcFillAreaStyle *cloneIfcFillAreaStyle(const IfcFillAreaStyle &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcFillAreaStyle Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcFillAreaStyle entities.
         */
        Step::RefLinkedList< IfcFillAreaStyle > &getAllIfcFillAreaStyle();
        /**
         * Get the IfcFillAreaStyleHatching entity by it's Id.
         * 
         * @param id The Id of the IfcFillAreaStyleHatching.
         * @return A pointer to the IfcFillAreaStyleHatching if found, NULL otherwise.
         */
        IfcFillAreaStyleHatching *getIfcFillAreaStyleHatching(Step::Id id);
        /**
         * Removes a IfcFillAreaStyleHatching Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcFillAreaStyleHatching to remove.
         * @return success.
         */
        bool removeIfcFillAreaStyleHatching(IfcFillAreaStyleHatching *arg);
        /**
         * Create an IfcFillAreaStyleHatching Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcFillAreaStyleHatching entity.
         */
        Step::RefPtr< IfcFillAreaStyleHatching > createIfcFillAreaStyleHatching(bool isVolatile = false);
        /**
         * Clone an IfcFillAreaStyleHatching Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcFillAreaStyleHatching Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcFillAreaStyleHatching *cloneIfcFillAreaStyleHatching(const IfcFillAreaStyleHatching &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcFillAreaStyleHatching Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcFillAreaStyleHatching entities.
         */
        Step::RefLinkedList< IfcFillAreaStyleHatching > &getAllIfcFillAreaStyleHatching();
        /**
         * Get the IfcFillAreaStyleTiles entity by it's Id.
         * 
         * @param id The Id of the IfcFillAreaStyleTiles.
         * @return A pointer to the IfcFillAreaStyleTiles if found, NULL otherwise.
         */
        IfcFillAreaStyleTiles *getIfcFillAreaStyleTiles(Step::Id id);
        /**
         * Removes a IfcFillAreaStyleTiles Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcFillAreaStyleTiles to remove.
         * @return success.
         */
        bool removeIfcFillAreaStyleTiles(IfcFillAreaStyleTiles *arg);
        /**
         * Create an IfcFillAreaStyleTiles Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcFillAreaStyleTiles entity.
         */
        Step::RefPtr< IfcFillAreaStyleTiles > createIfcFillAreaStyleTiles(bool isVolatile = false);
        /**
         * Clone an IfcFillAreaStyleTiles Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcFillAreaStyleTiles Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcFillAreaStyleTiles *cloneIfcFillAreaStyleTiles(const IfcFillAreaStyleTiles &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcFillAreaStyleTiles Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcFillAreaStyleTiles entities.
         */
        Step::RefLinkedList< IfcFillAreaStyleTiles > &getAllIfcFillAreaStyleTiles();
        /**
         * Get the IfcFillAreaStyleTileSymbolWithStyle entity by it's Id.
         * 
         * @param id The Id of the IfcFillAreaStyleTileSymbolWithStyle.
         * @return A pointer to the IfcFillAreaStyleTileSymbolWithStyle if found, NULL otherwise.
         */
        IfcFillAreaStyleTileSymbolWithStyle *getIfcFillAreaStyleTileSymbolWithStyle(Step::Id id);
        /**
         * Removes a IfcFillAreaStyleTileSymbolWithStyle Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcFillAreaStyleTileSymbolWithStyle to remove.
         * @return success.
         */
        bool removeIfcFillAreaStyleTileSymbolWithStyle(IfcFillAreaStyleTileSymbolWithStyle *arg);
        /**
         * Create an IfcFillAreaStyleTileSymbolWithStyle Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcFillAreaStyleTileSymbolWithStyle entity.
         */
        Step::RefPtr< IfcFillAreaStyleTileSymbolWithStyle > createIfcFillAreaStyleTileSymbolWithStyle(bool isVolatile = false);
        /**
         * Clone an IfcFillAreaStyleTileSymbolWithStyle Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcFillAreaStyleTileSymbolWithStyle Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcFillAreaStyleTileSymbolWithStyle *cloneIfcFillAreaStyleTileSymbolWithStyle(const IfcFillAreaStyleTileSymbolWithStyle &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcFillAreaStyleTileSymbolWithStyle Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcFillAreaStyleTileSymbolWithStyle entities.
         */
        Step::RefLinkedList< IfcFillAreaStyleTileSymbolWithStyle > &getAllIfcFillAreaStyleTileSymbolWithStyle();
        /**
         * Get the IfcFilterType entity by it's Id.
         * 
         * @param id The Id of the IfcFilterType.
         * @return A pointer to the IfcFilterType if found, NULL otherwise.
         */
        IfcFilterType *getIfcFilterType(Step::Id id);
        /**
         * Removes a IfcFilterType Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcFilterType to remove.
         * @return success.
         */
        bool removeIfcFilterType(IfcFilterType *arg);
        /**
         * Create an IfcFilterType Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcFilterType entity.
         */
        Step::RefPtr< IfcFilterType > createIfcFilterType(bool isVolatile = false);
        /**
         * Clone an IfcFilterType Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcFilterType Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcFilterType *cloneIfcFilterType(const IfcFilterType &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcFilterType Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcFilterType entities.
         */
        Step::RefLinkedList< IfcFilterType > &getAllIfcFilterType();
        /**
         * Get the IfcFireSuppressionTerminalType entity by it's Id.
         * 
         * @param id The Id of the IfcFireSuppressionTerminalType.
         * @return A pointer to the IfcFireSuppressionTerminalType if found, NULL otherwise.
         */
        IfcFireSuppressionTerminalType *getIfcFireSuppressionTerminalType(Step::Id id);
        /**
         * Removes a IfcFireSuppressionTerminalType Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcFireSuppressionTerminalType to remove.
         * @return success.
         */
        bool removeIfcFireSuppressionTerminalType(IfcFireSuppressionTerminalType *arg);
        /**
         * Create an IfcFireSuppressionTerminalType Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcFireSuppressionTerminalType entity.
         */
        Step::RefPtr< IfcFireSuppressionTerminalType > createIfcFireSuppressionTerminalType(bool isVolatile = false);
        /**
         * Clone an IfcFireSuppressionTerminalType Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcFireSuppressionTerminalType Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcFireSuppressionTerminalType *cloneIfcFireSuppressionTerminalType(const IfcFireSuppressionTerminalType &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcFireSuppressionTerminalType Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcFireSuppressionTerminalType entities.
         */
        Step::RefLinkedList< IfcFireSuppressionTerminalType > &getAllIfcFireSuppressionTerminalType();
        /**
         * Get the IfcFlowController entity by it's Id.
         * 
         * @param id The Id of the IfcFlowController.
         * @return A pointer to the IfcFlowController if found, NULL otherwise.
         */
        IfcFlowController *getIfcFlowController(Step::Id id);
        /**
         * Removes a IfcFlowController Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcFlowController to remove.
         * @return success.
         */
        bool removeIfcFlowController(IfcFlowController *arg);
        /**
         * Create an IfcFlowController Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcFlowController entity.
         */
        Step::RefPtr< IfcFlowController > createIfcFlowController(bool isVolatile = false);
        /**
         * Clone an IfcFlowController Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcFlowController Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcFlowController *cloneIfcFlowController(const IfcFlowController &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcFlowController Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcFlowController entities.
         */
        Step::RefLinkedList< IfcFlowController > &getAllIfcFlowController();
        /**
         * Get the IfcFlowControllerType entity by it's Id.
         * 
         * @param id The Id of the IfcFlowControllerType.
         * @return A pointer to the IfcFlowControllerType if found, NULL otherwise.
         */
        IfcFlowControllerType *getIfcFlowControllerType(Step::Id id);
        /**
         * Removes a IfcFlowControllerType Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcFlowControllerType to remove.
         * @return success.
         */
        bool removeIfcFlowControllerType(IfcFlowControllerType *arg);
        /**
         * Create an IfcFlowControllerType Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcFlowControllerType entity.
         */
        Step::RefPtr< IfcFlowControllerType > createIfcFlowControllerType(bool isVolatile = false);
        /**
         * Clone an IfcFlowControllerType Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcFlowControllerType Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcFlowControllerType *cloneIfcFlowControllerType(const IfcFlowControllerType &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcFlowControllerType Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcFlowControllerType entities.
         */
        Step::RefLinkedList< IfcFlowControllerType > &getAllIfcFlowControllerType();
        /**
         * Get the IfcFlowFitting entity by it's Id.
         * 
         * @param id The Id of the IfcFlowFitting.
         * @return A pointer to the IfcFlowFitting if found, NULL otherwise.
         */
        IfcFlowFitting *getIfcFlowFitting(Step::Id id);
        /**
         * Removes a IfcFlowFitting Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcFlowFitting to remove.
         * @return success.
         */
        bool removeIfcFlowFitting(IfcFlowFitting *arg);
        /**
         * Create an IfcFlowFitting Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcFlowFitting entity.
         */
        Step::RefPtr< IfcFlowFitting > createIfcFlowFitting(bool isVolatile = false);
        /**
         * Clone an IfcFlowFitting Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcFlowFitting Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcFlowFitting *cloneIfcFlowFitting(const IfcFlowFitting &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcFlowFitting Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcFlowFitting entities.
         */
        Step::RefLinkedList< IfcFlowFitting > &getAllIfcFlowFitting();
        /**
         * Get the IfcFlowFittingType entity by it's Id.
         * 
         * @param id The Id of the IfcFlowFittingType.
         * @return A pointer to the IfcFlowFittingType if found, NULL otherwise.
         */
        IfcFlowFittingType *getIfcFlowFittingType(Step::Id id);
        /**
         * Removes a IfcFlowFittingType Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcFlowFittingType to remove.
         * @return success.
         */
        bool removeIfcFlowFittingType(IfcFlowFittingType *arg);
        /**
         * Create an IfcFlowFittingType Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcFlowFittingType entity.
         */
        Step::RefPtr< IfcFlowFittingType > createIfcFlowFittingType(bool isVolatile = false);
        /**
         * Clone an IfcFlowFittingType Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcFlowFittingType Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcFlowFittingType *cloneIfcFlowFittingType(const IfcFlowFittingType &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcFlowFittingType Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcFlowFittingType entities.
         */
        Step::RefLinkedList< IfcFlowFittingType > &getAllIfcFlowFittingType();
        /**
         * Get the IfcFlowInstrumentType entity by it's Id.
         * 
         * @param id The Id of the IfcFlowInstrumentType.
         * @return A pointer to the IfcFlowInstrumentType if found, NULL otherwise.
         */
        IfcFlowInstrumentType *getIfcFlowInstrumentType(Step::Id id);
        /**
         * Removes a IfcFlowInstrumentType Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcFlowInstrumentType to remove.
         * @return success.
         */
        bool removeIfcFlowInstrumentType(IfcFlowInstrumentType *arg);
        /**
         * Create an IfcFlowInstrumentType Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcFlowInstrumentType entity.
         */
        Step::RefPtr< IfcFlowInstrumentType > createIfcFlowInstrumentType(bool isVolatile = false);
        /**
         * Clone an IfcFlowInstrumentType Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcFlowInstrumentType Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcFlowInstrumentType *cloneIfcFlowInstrumentType(const IfcFlowInstrumentType &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcFlowInstrumentType Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcFlowInstrumentType entities.
         */
        Step::RefLinkedList< IfcFlowInstrumentType > &getAllIfcFlowInstrumentType();
        /**
         * Get the IfcFlowMeterType entity by it's Id.
         * 
         * @param id The Id of the IfcFlowMeterType.
         * @return A pointer to the IfcFlowMeterType if found, NULL otherwise.
         */
        IfcFlowMeterType *getIfcFlowMeterType(Step::Id id);
        /**
         * Removes a IfcFlowMeterType Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcFlowMeterType to remove.
         * @return success.
         */
        bool removeIfcFlowMeterType(IfcFlowMeterType *arg);
        /**
         * Create an IfcFlowMeterType Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcFlowMeterType entity.
         */
        Step::RefPtr< IfcFlowMeterType > createIfcFlowMeterType(bool isVolatile = false);
        /**
         * Clone an IfcFlowMeterType Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcFlowMeterType Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcFlowMeterType *cloneIfcFlowMeterType(const IfcFlowMeterType &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcFlowMeterType Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcFlowMeterType entities.
         */
        Step::RefLinkedList< IfcFlowMeterType > &getAllIfcFlowMeterType();
        /**
         * Get the IfcFlowMovingDevice entity by it's Id.
         * 
         * @param id The Id of the IfcFlowMovingDevice.
         * @return A pointer to the IfcFlowMovingDevice if found, NULL otherwise.
         */
        IfcFlowMovingDevice *getIfcFlowMovingDevice(Step::Id id);
        /**
         * Removes a IfcFlowMovingDevice Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcFlowMovingDevice to remove.
         * @return success.
         */
        bool removeIfcFlowMovingDevice(IfcFlowMovingDevice *arg);
        /**
         * Create an IfcFlowMovingDevice Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcFlowMovingDevice entity.
         */
        Step::RefPtr< IfcFlowMovingDevice > createIfcFlowMovingDevice(bool isVolatile = false);
        /**
         * Clone an IfcFlowMovingDevice Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcFlowMovingDevice Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcFlowMovingDevice *cloneIfcFlowMovingDevice(const IfcFlowMovingDevice &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcFlowMovingDevice Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcFlowMovingDevice entities.
         */
        Step::RefLinkedList< IfcFlowMovingDevice > &getAllIfcFlowMovingDevice();
        /**
         * Get the IfcFlowMovingDeviceType entity by it's Id.
         * 
         * @param id The Id of the IfcFlowMovingDeviceType.
         * @return A pointer to the IfcFlowMovingDeviceType if found, NULL otherwise.
         */
        IfcFlowMovingDeviceType *getIfcFlowMovingDeviceType(Step::Id id);
        /**
         * Removes a IfcFlowMovingDeviceType Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcFlowMovingDeviceType to remove.
         * @return success.
         */
        bool removeIfcFlowMovingDeviceType(IfcFlowMovingDeviceType *arg);
        /**
         * Create an IfcFlowMovingDeviceType Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcFlowMovingDeviceType entity.
         */
        Step::RefPtr< IfcFlowMovingDeviceType > createIfcFlowMovingDeviceType(bool isVolatile = false);
        /**
         * Clone an IfcFlowMovingDeviceType Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcFlowMovingDeviceType Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcFlowMovingDeviceType *cloneIfcFlowMovingDeviceType(const IfcFlowMovingDeviceType &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcFlowMovingDeviceType Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcFlowMovingDeviceType entities.
         */
        Step::RefLinkedList< IfcFlowMovingDeviceType > &getAllIfcFlowMovingDeviceType();
        /**
         * Get the IfcFlowSegment entity by it's Id.
         * 
         * @param id The Id of the IfcFlowSegment.
         * @return A pointer to the IfcFlowSegment if found, NULL otherwise.
         */
        IfcFlowSegment *getIfcFlowSegment(Step::Id id);
        /**
         * Removes a IfcFlowSegment Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcFlowSegment to remove.
         * @return success.
         */
        bool removeIfcFlowSegment(IfcFlowSegment *arg);
        /**
         * Create an IfcFlowSegment Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcFlowSegment entity.
         */
        Step::RefPtr< IfcFlowSegment > createIfcFlowSegment(bool isVolatile = false);
        /**
         * Clone an IfcFlowSegment Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcFlowSegment Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcFlowSegment *cloneIfcFlowSegment(const IfcFlowSegment &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcFlowSegment Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcFlowSegment entities.
         */
        Step::RefLinkedList< IfcFlowSegment > &getAllIfcFlowSegment();
        /**
         * Get the IfcFlowSegmentType entity by it's Id.
         * 
         * @param id The Id of the IfcFlowSegmentType.
         * @return A pointer to the IfcFlowSegmentType if found, NULL otherwise.
         */
        IfcFlowSegmentType *getIfcFlowSegmentType(Step::Id id);
        /**
         * Removes a IfcFlowSegmentType Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcFlowSegmentType to remove.
         * @return success.
         */
        bool removeIfcFlowSegmentType(IfcFlowSegmentType *arg);
        /**
         * Create an IfcFlowSegmentType Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcFlowSegmentType entity.
         */
        Step::RefPtr< IfcFlowSegmentType > createIfcFlowSegmentType(bool isVolatile = false);
        /**
         * Clone an IfcFlowSegmentType Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcFlowSegmentType Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcFlowSegmentType *cloneIfcFlowSegmentType(const IfcFlowSegmentType &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcFlowSegmentType Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcFlowSegmentType entities.
         */
        Step::RefLinkedList< IfcFlowSegmentType > &getAllIfcFlowSegmentType();
        /**
         * Get the IfcFlowStorageDevice entity by it's Id.
         * 
         * @param id The Id of the IfcFlowStorageDevice.
         * @return A pointer to the IfcFlowStorageDevice if found, NULL otherwise.
         */
        IfcFlowStorageDevice *getIfcFlowStorageDevice(Step::Id id);
        /**
         * Removes a IfcFlowStorageDevice Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcFlowStorageDevice to remove.
         * @return success.
         */
        bool removeIfcFlowStorageDevice(IfcFlowStorageDevice *arg);
        /**
         * Create an IfcFlowStorageDevice Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcFlowStorageDevice entity.
         */
        Step::RefPtr< IfcFlowStorageDevice > createIfcFlowStorageDevice(bool isVolatile = false);
        /**
         * Clone an IfcFlowStorageDevice Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcFlowStorageDevice Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcFlowStorageDevice *cloneIfcFlowStorageDevice(const IfcFlowStorageDevice &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcFlowStorageDevice Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcFlowStorageDevice entities.
         */
        Step::RefLinkedList< IfcFlowStorageDevice > &getAllIfcFlowStorageDevice();
        /**
         * Get the IfcFlowStorageDeviceType entity by it's Id.
         * 
         * @param id The Id of the IfcFlowStorageDeviceType.
         * @return A pointer to the IfcFlowStorageDeviceType if found, NULL otherwise.
         */
        IfcFlowStorageDeviceType *getIfcFlowStorageDeviceType(Step::Id id);
        /**
         * Removes a IfcFlowStorageDeviceType Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcFlowStorageDeviceType to remove.
         * @return success.
         */
        bool removeIfcFlowStorageDeviceType(IfcFlowStorageDeviceType *arg);
        /**
         * Create an IfcFlowStorageDeviceType Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcFlowStorageDeviceType entity.
         */
        Step::RefPtr< IfcFlowStorageDeviceType > createIfcFlowStorageDeviceType(bool isVolatile = false);
        /**
         * Clone an IfcFlowStorageDeviceType Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcFlowStorageDeviceType Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcFlowStorageDeviceType *cloneIfcFlowStorageDeviceType(const IfcFlowStorageDeviceType &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcFlowStorageDeviceType Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcFlowStorageDeviceType entities.
         */
        Step::RefLinkedList< IfcFlowStorageDeviceType > &getAllIfcFlowStorageDeviceType();
        /**
         * Get the IfcFlowTerminal entity by it's Id.
         * 
         * @param id The Id of the IfcFlowTerminal.
         * @return A pointer to the IfcFlowTerminal if found, NULL otherwise.
         */
        IfcFlowTerminal *getIfcFlowTerminal(Step::Id id);
        /**
         * Removes a IfcFlowTerminal Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcFlowTerminal to remove.
         * @return success.
         */
        bool removeIfcFlowTerminal(IfcFlowTerminal *arg);
        /**
         * Create an IfcFlowTerminal Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcFlowTerminal entity.
         */
        Step::RefPtr< IfcFlowTerminal > createIfcFlowTerminal(bool isVolatile = false);
        /**
         * Clone an IfcFlowTerminal Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcFlowTerminal Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcFlowTerminal *cloneIfcFlowTerminal(const IfcFlowTerminal &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcFlowTerminal Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcFlowTerminal entities.
         */
        Step::RefLinkedList< IfcFlowTerminal > &getAllIfcFlowTerminal();
        /**
         * Get the IfcFlowTerminalType entity by it's Id.
         * 
         * @param id The Id of the IfcFlowTerminalType.
         * @return A pointer to the IfcFlowTerminalType if found, NULL otherwise.
         */
        IfcFlowTerminalType *getIfcFlowTerminalType(Step::Id id);
        /**
         * Removes a IfcFlowTerminalType Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcFlowTerminalType to remove.
         * @return success.
         */
        bool removeIfcFlowTerminalType(IfcFlowTerminalType *arg);
        /**
         * Create an IfcFlowTerminalType Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcFlowTerminalType entity.
         */
        Step::RefPtr< IfcFlowTerminalType > createIfcFlowTerminalType(bool isVolatile = false);
        /**
         * Clone an IfcFlowTerminalType Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcFlowTerminalType Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcFlowTerminalType *cloneIfcFlowTerminalType(const IfcFlowTerminalType &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcFlowTerminalType Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcFlowTerminalType entities.
         */
        Step::RefLinkedList< IfcFlowTerminalType > &getAllIfcFlowTerminalType();
        /**
         * Get the IfcFlowTreatmentDevice entity by it's Id.
         * 
         * @param id The Id of the IfcFlowTreatmentDevice.
         * @return A pointer to the IfcFlowTreatmentDevice if found, NULL otherwise.
         */
        IfcFlowTreatmentDevice *getIfcFlowTreatmentDevice(Step::Id id);
        /**
         * Removes a IfcFlowTreatmentDevice Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcFlowTreatmentDevice to remove.
         * @return success.
         */
        bool removeIfcFlowTreatmentDevice(IfcFlowTreatmentDevice *arg);
        /**
         * Create an IfcFlowTreatmentDevice Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcFlowTreatmentDevice entity.
         */
        Step::RefPtr< IfcFlowTreatmentDevice > createIfcFlowTreatmentDevice(bool isVolatile = false);
        /**
         * Clone an IfcFlowTreatmentDevice Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcFlowTreatmentDevice Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcFlowTreatmentDevice *cloneIfcFlowTreatmentDevice(const IfcFlowTreatmentDevice &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcFlowTreatmentDevice Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcFlowTreatmentDevice entities.
         */
        Step::RefLinkedList< IfcFlowTreatmentDevice > &getAllIfcFlowTreatmentDevice();
        /**
         * Get the IfcFlowTreatmentDeviceType entity by it's Id.
         * 
         * @param id The Id of the IfcFlowTreatmentDeviceType.
         * @return A pointer to the IfcFlowTreatmentDeviceType if found, NULL otherwise.
         */
        IfcFlowTreatmentDeviceType *getIfcFlowTreatmentDeviceType(Step::Id id);
        /**
         * Removes a IfcFlowTreatmentDeviceType Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcFlowTreatmentDeviceType to remove.
         * @return success.
         */
        bool removeIfcFlowTreatmentDeviceType(IfcFlowTreatmentDeviceType *arg);
        /**
         * Create an IfcFlowTreatmentDeviceType Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcFlowTreatmentDeviceType entity.
         */
        Step::RefPtr< IfcFlowTreatmentDeviceType > createIfcFlowTreatmentDeviceType(bool isVolatile = false);
        /**
         * Clone an IfcFlowTreatmentDeviceType Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcFlowTreatmentDeviceType Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcFlowTreatmentDeviceType *cloneIfcFlowTreatmentDeviceType(const IfcFlowTreatmentDeviceType &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcFlowTreatmentDeviceType Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcFlowTreatmentDeviceType entities.
         */
        Step::RefLinkedList< IfcFlowTreatmentDeviceType > &getAllIfcFlowTreatmentDeviceType();
        /**
         * Get the IfcFluidFlowProperties entity by it's Id.
         * 
         * @param id The Id of the IfcFluidFlowProperties.
         * @return A pointer to the IfcFluidFlowProperties if found, NULL otherwise.
         */
        IfcFluidFlowProperties *getIfcFluidFlowProperties(Step::Id id);
        /**
         * Removes a IfcFluidFlowProperties Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcFluidFlowProperties to remove.
         * @return success.
         */
        bool removeIfcFluidFlowProperties(IfcFluidFlowProperties *arg);
        /**
         * Create an IfcFluidFlowProperties Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcFluidFlowProperties entity.
         */
        Step::RefPtr< IfcFluidFlowProperties > createIfcFluidFlowProperties(bool isVolatile = false);
        /**
         * Clone an IfcFluidFlowProperties Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcFluidFlowProperties Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcFluidFlowProperties *cloneIfcFluidFlowProperties(const IfcFluidFlowProperties &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcFluidFlowProperties Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcFluidFlowProperties entities.
         */
        Step::RefLinkedList< IfcFluidFlowProperties > &getAllIfcFluidFlowProperties();
        /**
         * Get the IfcFooting entity by it's Id.
         * 
         * @param id The Id of the IfcFooting.
         * @return A pointer to the IfcFooting if found, NULL otherwise.
         */
        IfcFooting *getIfcFooting(Step::Id id);
        /**
         * Removes a IfcFooting Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcFooting to remove.
         * @return success.
         */
        bool removeIfcFooting(IfcFooting *arg);
        /**
         * Create an IfcFooting Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcFooting entity.
         */
        Step::RefPtr< IfcFooting > createIfcFooting(bool isVolatile = false);
        /**
         * Clone an IfcFooting Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcFooting Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcFooting *cloneIfcFooting(const IfcFooting &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcFooting Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcFooting entities.
         */
        Step::RefLinkedList< IfcFooting > &getAllIfcFooting();
        /**
         * Get the IfcFuelProperties entity by it's Id.
         * 
         * @param id The Id of the IfcFuelProperties.
         * @return A pointer to the IfcFuelProperties if found, NULL otherwise.
         */
        IfcFuelProperties *getIfcFuelProperties(Step::Id id);
        /**
         * Removes a IfcFuelProperties Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcFuelProperties to remove.
         * @return success.
         */
        bool removeIfcFuelProperties(IfcFuelProperties *arg);
        /**
         * Create an IfcFuelProperties Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcFuelProperties entity.
         */
        Step::RefPtr< IfcFuelProperties > createIfcFuelProperties(bool isVolatile = false);
        /**
         * Clone an IfcFuelProperties Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcFuelProperties Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcFuelProperties *cloneIfcFuelProperties(const IfcFuelProperties &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcFuelProperties Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcFuelProperties entities.
         */
        Step::RefLinkedList< IfcFuelProperties > &getAllIfcFuelProperties();
        /**
         * Get the IfcFurnishingElement entity by it's Id.
         * 
         * @param id The Id of the IfcFurnishingElement.
         * @return A pointer to the IfcFurnishingElement if found, NULL otherwise.
         */
        IfcFurnishingElement *getIfcFurnishingElement(Step::Id id);
        /**
         * Removes a IfcFurnishingElement Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcFurnishingElement to remove.
         * @return success.
         */
        bool removeIfcFurnishingElement(IfcFurnishingElement *arg);
        /**
         * Create an IfcFurnishingElement Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcFurnishingElement entity.
         */
        Step::RefPtr< IfcFurnishingElement > createIfcFurnishingElement(bool isVolatile = false);
        /**
         * Clone an IfcFurnishingElement Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcFurnishingElement Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcFurnishingElement *cloneIfcFurnishingElement(const IfcFurnishingElement &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcFurnishingElement Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcFurnishingElement entities.
         */
        Step::RefLinkedList< IfcFurnishingElement > &getAllIfcFurnishingElement();
        /**
         * Get the IfcFurnishingElementType entity by it's Id.
         * 
         * @param id The Id of the IfcFurnishingElementType.
         * @return A pointer to the IfcFurnishingElementType if found, NULL otherwise.
         */
        IfcFurnishingElementType *getIfcFurnishingElementType(Step::Id id);
        /**
         * Removes a IfcFurnishingElementType Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcFurnishingElementType to remove.
         * @return success.
         */
        bool removeIfcFurnishingElementType(IfcFurnishingElementType *arg);
        /**
         * Create an IfcFurnishingElementType Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcFurnishingElementType entity.
         */
        Step::RefPtr< IfcFurnishingElementType > createIfcFurnishingElementType(bool isVolatile = false);
        /**
         * Clone an IfcFurnishingElementType Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcFurnishingElementType Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcFurnishingElementType *cloneIfcFurnishingElementType(const IfcFurnishingElementType &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcFurnishingElementType Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcFurnishingElementType entities.
         */
        Step::RefLinkedList< IfcFurnishingElementType > &getAllIfcFurnishingElementType();
        /**
         * Get the IfcFurnitureStandard entity by it's Id.
         * 
         * @param id The Id of the IfcFurnitureStandard.
         * @return A pointer to the IfcFurnitureStandard if found, NULL otherwise.
         */
        IfcFurnitureStandard *getIfcFurnitureStandard(Step::Id id);
        /**
         * Removes a IfcFurnitureStandard Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcFurnitureStandard to remove.
         * @return success.
         */
        bool removeIfcFurnitureStandard(IfcFurnitureStandard *arg);
        /**
         * Create an IfcFurnitureStandard Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcFurnitureStandard entity.
         */
        Step::RefPtr< IfcFurnitureStandard > createIfcFurnitureStandard(bool isVolatile = false);
        /**
         * Clone an IfcFurnitureStandard Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcFurnitureStandard Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcFurnitureStandard *cloneIfcFurnitureStandard(const IfcFurnitureStandard &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcFurnitureStandard Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcFurnitureStandard entities.
         */
        Step::RefLinkedList< IfcFurnitureStandard > &getAllIfcFurnitureStandard();
        /**
         * Get the IfcFurnitureType entity by it's Id.
         * 
         * @param id The Id of the IfcFurnitureType.
         * @return A pointer to the IfcFurnitureType if found, NULL otherwise.
         */
        IfcFurnitureType *getIfcFurnitureType(Step::Id id);
        /**
         * Removes a IfcFurnitureType Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcFurnitureType to remove.
         * @return success.
         */
        bool removeIfcFurnitureType(IfcFurnitureType *arg);
        /**
         * Create an IfcFurnitureType Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcFurnitureType entity.
         */
        Step::RefPtr< IfcFurnitureType > createIfcFurnitureType(bool isVolatile = false);
        /**
         * Clone an IfcFurnitureType Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcFurnitureType Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcFurnitureType *cloneIfcFurnitureType(const IfcFurnitureType &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcFurnitureType Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcFurnitureType entities.
         */
        Step::RefLinkedList< IfcFurnitureType > &getAllIfcFurnitureType();
        /**
         * Get the IfcGasTerminalType entity by it's Id.
         * 
         * @param id The Id of the IfcGasTerminalType.
         * @return A pointer to the IfcGasTerminalType if found, NULL otherwise.
         */
        IfcGasTerminalType *getIfcGasTerminalType(Step::Id id);
        /**
         * Removes a IfcGasTerminalType Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcGasTerminalType to remove.
         * @return success.
         */
        bool removeIfcGasTerminalType(IfcGasTerminalType *arg);
        /**
         * Create an IfcGasTerminalType Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcGasTerminalType entity.
         */
        Step::RefPtr< IfcGasTerminalType > createIfcGasTerminalType(bool isVolatile = false);
        /**
         * Clone an IfcGasTerminalType Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcGasTerminalType Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcGasTerminalType *cloneIfcGasTerminalType(const IfcGasTerminalType &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcGasTerminalType Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcGasTerminalType entities.
         */
        Step::RefLinkedList< IfcGasTerminalType > &getAllIfcGasTerminalType();
        /**
         * Get the IfcGeneralMaterialProperties entity by it's Id.
         * 
         * @param id The Id of the IfcGeneralMaterialProperties.
         * @return A pointer to the IfcGeneralMaterialProperties if found, NULL otherwise.
         */
        IfcGeneralMaterialProperties *getIfcGeneralMaterialProperties(Step::Id id);
        /**
         * Removes a IfcGeneralMaterialProperties Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcGeneralMaterialProperties to remove.
         * @return success.
         */
        bool removeIfcGeneralMaterialProperties(IfcGeneralMaterialProperties *arg);
        /**
         * Create an IfcGeneralMaterialProperties Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcGeneralMaterialProperties entity.
         */
        Step::RefPtr< IfcGeneralMaterialProperties > createIfcGeneralMaterialProperties(bool isVolatile = false);
        /**
         * Clone an IfcGeneralMaterialProperties Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcGeneralMaterialProperties Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcGeneralMaterialProperties *cloneIfcGeneralMaterialProperties(const IfcGeneralMaterialProperties &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcGeneralMaterialProperties Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcGeneralMaterialProperties entities.
         */
        Step::RefLinkedList< IfcGeneralMaterialProperties > &getAllIfcGeneralMaterialProperties();
        /**
         * Get the IfcGeneralProfileProperties entity by it's Id.
         * 
         * @param id The Id of the IfcGeneralProfileProperties.
         * @return A pointer to the IfcGeneralProfileProperties if found, NULL otherwise.
         */
        IfcGeneralProfileProperties *getIfcGeneralProfileProperties(Step::Id id);
        /**
         * Removes a IfcGeneralProfileProperties Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcGeneralProfileProperties to remove.
         * @return success.
         */
        bool removeIfcGeneralProfileProperties(IfcGeneralProfileProperties *arg);
        /**
         * Create an IfcGeneralProfileProperties Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcGeneralProfileProperties entity.
         */
        Step::RefPtr< IfcGeneralProfileProperties > createIfcGeneralProfileProperties(bool isVolatile = false);
        /**
         * Clone an IfcGeneralProfileProperties Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcGeneralProfileProperties Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcGeneralProfileProperties *cloneIfcGeneralProfileProperties(const IfcGeneralProfileProperties &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcGeneralProfileProperties Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcGeneralProfileProperties entities.
         */
        Step::RefLinkedList< IfcGeneralProfileProperties > &getAllIfcGeneralProfileProperties();
        /**
         * Get the IfcGeometricCurveSet entity by it's Id.
         * 
         * @param id The Id of the IfcGeometricCurveSet.
         * @return A pointer to the IfcGeometricCurveSet if found, NULL otherwise.
         */
        IfcGeometricCurveSet *getIfcGeometricCurveSet(Step::Id id);
        /**
         * Removes a IfcGeometricCurveSet Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcGeometricCurveSet to remove.
         * @return success.
         */
        bool removeIfcGeometricCurveSet(IfcGeometricCurveSet *arg);
        /**
         * Create an IfcGeometricCurveSet Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcGeometricCurveSet entity.
         */
        Step::RefPtr< IfcGeometricCurveSet > createIfcGeometricCurveSet(bool isVolatile = false);
        /**
         * Clone an IfcGeometricCurveSet Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcGeometricCurveSet Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcGeometricCurveSet *cloneIfcGeometricCurveSet(const IfcGeometricCurveSet &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcGeometricCurveSet Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcGeometricCurveSet entities.
         */
        Step::RefLinkedList< IfcGeometricCurveSet > &getAllIfcGeometricCurveSet();
        /**
         * Get the IfcGeometricRepresentationContext entity by it's Id.
         * 
         * @param id The Id of the IfcGeometricRepresentationContext.
         * @return A pointer to the IfcGeometricRepresentationContext if found, NULL otherwise.
         */
        IfcGeometricRepresentationContext *getIfcGeometricRepresentationContext(Step::Id id);
        /**
         * Removes a IfcGeometricRepresentationContext Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcGeometricRepresentationContext to remove.
         * @return success.
         */
        bool removeIfcGeometricRepresentationContext(IfcGeometricRepresentationContext *arg);
        /**
         * Create an IfcGeometricRepresentationContext Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcGeometricRepresentationContext entity.
         */
        Step::RefPtr< IfcGeometricRepresentationContext > createIfcGeometricRepresentationContext(bool isVolatile = false);
        /**
         * Clone an IfcGeometricRepresentationContext Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcGeometricRepresentationContext Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcGeometricRepresentationContext *cloneIfcGeometricRepresentationContext(const IfcGeometricRepresentationContext &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcGeometricRepresentationContext Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcGeometricRepresentationContext entities.
         */
        Step::RefLinkedList< IfcGeometricRepresentationContext > &getAllIfcGeometricRepresentationContext();
        /**
         * Get the IfcGeometricRepresentationItem entity by it's Id.
         * 
         * @param id The Id of the IfcGeometricRepresentationItem.
         * @return A pointer to the IfcGeometricRepresentationItem if found, NULL otherwise.
         */
        IfcGeometricRepresentationItem *getIfcGeometricRepresentationItem(Step::Id id);
        /**
         * Removes a IfcGeometricRepresentationItem Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcGeometricRepresentationItem to remove.
         * @return success.
         */
        bool removeIfcGeometricRepresentationItem(IfcGeometricRepresentationItem *arg);
        /**
         * Create an IfcGeometricRepresentationItem Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcGeometricRepresentationItem entity.
         */
        Step::RefPtr< IfcGeometricRepresentationItem > createIfcGeometricRepresentationItem(bool isVolatile = false);
        /**
         * Clone an IfcGeometricRepresentationItem Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcGeometricRepresentationItem Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcGeometricRepresentationItem *cloneIfcGeometricRepresentationItem(const IfcGeometricRepresentationItem &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcGeometricRepresentationItem Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcGeometricRepresentationItem entities.
         */
        Step::RefLinkedList< IfcGeometricRepresentationItem > &getAllIfcGeometricRepresentationItem();
        /**
         * Get the IfcGeometricRepresentationSubContext entity by it's Id.
         * 
         * @param id The Id of the IfcGeometricRepresentationSubContext.
         * @return A pointer to the IfcGeometricRepresentationSubContext if found, NULL otherwise.
         */
        IfcGeometricRepresentationSubContext *getIfcGeometricRepresentationSubContext(Step::Id id);
        /**
         * Removes a IfcGeometricRepresentationSubContext Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcGeometricRepresentationSubContext to remove.
         * @return success.
         */
        bool removeIfcGeometricRepresentationSubContext(IfcGeometricRepresentationSubContext *arg);
        /**
         * Create an IfcGeometricRepresentationSubContext Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcGeometricRepresentationSubContext entity.
         */
        Step::RefPtr< IfcGeometricRepresentationSubContext > createIfcGeometricRepresentationSubContext(bool isVolatile = false);
        /**
         * Clone an IfcGeometricRepresentationSubContext Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcGeometricRepresentationSubContext Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcGeometricRepresentationSubContext *cloneIfcGeometricRepresentationSubContext(const IfcGeometricRepresentationSubContext &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcGeometricRepresentationSubContext Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcGeometricRepresentationSubContext entities.
         */
        Step::RefLinkedList< IfcGeometricRepresentationSubContext > &getAllIfcGeometricRepresentationSubContext();
        /**
         * Get the IfcGeometricSet entity by it's Id.
         * 
         * @param id The Id of the IfcGeometricSet.
         * @return A pointer to the IfcGeometricSet if found, NULL otherwise.
         */
        IfcGeometricSet *getIfcGeometricSet(Step::Id id);
        /**
         * Removes a IfcGeometricSet Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcGeometricSet to remove.
         * @return success.
         */
        bool removeIfcGeometricSet(IfcGeometricSet *arg);
        /**
         * Create an IfcGeometricSet Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcGeometricSet entity.
         */
        Step::RefPtr< IfcGeometricSet > createIfcGeometricSet(bool isVolatile = false);
        /**
         * Clone an IfcGeometricSet Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcGeometricSet Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcGeometricSet *cloneIfcGeometricSet(const IfcGeometricSet &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcGeometricSet Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcGeometricSet entities.
         */
        Step::RefLinkedList< IfcGeometricSet > &getAllIfcGeometricSet();
        /**
         * Get the IfcGrid entity by it's Id.
         * 
         * @param id The Id of the IfcGrid.
         * @return A pointer to the IfcGrid if found, NULL otherwise.
         */
        IfcGrid *getIfcGrid(Step::Id id);
        /**
         * Removes a IfcGrid Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcGrid to remove.
         * @return success.
         */
        bool removeIfcGrid(IfcGrid *arg);
        /**
         * Create an IfcGrid Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcGrid entity.
         */
        Step::RefPtr< IfcGrid > createIfcGrid(bool isVolatile = false);
        /**
         * Clone an IfcGrid Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcGrid Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcGrid *cloneIfcGrid(const IfcGrid &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcGrid Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcGrid entities.
         */
        Step::RefLinkedList< IfcGrid > &getAllIfcGrid();
        /**
         * Get the IfcGridAxis entity by it's Id.
         * 
         * @param id The Id of the IfcGridAxis.
         * @return A pointer to the IfcGridAxis if found, NULL otherwise.
         */
        IfcGridAxis *getIfcGridAxis(Step::Id id);
        /**
         * Removes a IfcGridAxis Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcGridAxis to remove.
         * @return success.
         */
        bool removeIfcGridAxis(IfcGridAxis *arg);
        /**
         * Create an IfcGridAxis Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcGridAxis entity.
         */
        Step::RefPtr< IfcGridAxis > createIfcGridAxis(bool isVolatile = false);
        /**
         * Clone an IfcGridAxis Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcGridAxis Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcGridAxis *cloneIfcGridAxis(const IfcGridAxis &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcGridAxis Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcGridAxis entities.
         */
        Step::RefLinkedList< IfcGridAxis > &getAllIfcGridAxis();
        /**
         * Get the IfcGridPlacement entity by it's Id.
         * 
         * @param id The Id of the IfcGridPlacement.
         * @return A pointer to the IfcGridPlacement if found, NULL otherwise.
         */
        IfcGridPlacement *getIfcGridPlacement(Step::Id id);
        /**
         * Removes a IfcGridPlacement Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcGridPlacement to remove.
         * @return success.
         */
        bool removeIfcGridPlacement(IfcGridPlacement *arg);
        /**
         * Create an IfcGridPlacement Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcGridPlacement entity.
         */
        Step::RefPtr< IfcGridPlacement > createIfcGridPlacement(bool isVolatile = false);
        /**
         * Clone an IfcGridPlacement Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcGridPlacement Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcGridPlacement *cloneIfcGridPlacement(const IfcGridPlacement &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcGridPlacement Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcGridPlacement entities.
         */
        Step::RefLinkedList< IfcGridPlacement > &getAllIfcGridPlacement();
        /**
         * Get the IfcGroup entity by it's Id.
         * 
         * @param id The Id of the IfcGroup.
         * @return A pointer to the IfcGroup if found, NULL otherwise.
         */
        IfcGroup *getIfcGroup(Step::Id id);
        /**
         * Removes a IfcGroup Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcGroup to remove.
         * @return success.
         */
        bool removeIfcGroup(IfcGroup *arg);
        /**
         * Create an IfcGroup Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcGroup entity.
         */
        Step::RefPtr< IfcGroup > createIfcGroup(bool isVolatile = false);
        /**
         * Clone an IfcGroup Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcGroup Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcGroup *cloneIfcGroup(const IfcGroup &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcGroup Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcGroup entities.
         */
        Step::RefLinkedList< IfcGroup > &getAllIfcGroup();
        /**
         * Get the IfcHalfSpaceSolid entity by it's Id.
         * 
         * @param id The Id of the IfcHalfSpaceSolid.
         * @return A pointer to the IfcHalfSpaceSolid if found, NULL otherwise.
         */
        IfcHalfSpaceSolid *getIfcHalfSpaceSolid(Step::Id id);
        /**
         * Removes a IfcHalfSpaceSolid Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcHalfSpaceSolid to remove.
         * @return success.
         */
        bool removeIfcHalfSpaceSolid(IfcHalfSpaceSolid *arg);
        /**
         * Create an IfcHalfSpaceSolid Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcHalfSpaceSolid entity.
         */
        Step::RefPtr< IfcHalfSpaceSolid > createIfcHalfSpaceSolid(bool isVolatile = false);
        /**
         * Clone an IfcHalfSpaceSolid Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcHalfSpaceSolid Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcHalfSpaceSolid *cloneIfcHalfSpaceSolid(const IfcHalfSpaceSolid &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcHalfSpaceSolid Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcHalfSpaceSolid entities.
         */
        Step::RefLinkedList< IfcHalfSpaceSolid > &getAllIfcHalfSpaceSolid();
        /**
         * Get the IfcHeatExchangerType entity by it's Id.
         * 
         * @param id The Id of the IfcHeatExchangerType.
         * @return A pointer to the IfcHeatExchangerType if found, NULL otherwise.
         */
        IfcHeatExchangerType *getIfcHeatExchangerType(Step::Id id);
        /**
         * Removes a IfcHeatExchangerType Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcHeatExchangerType to remove.
         * @return success.
         */
        bool removeIfcHeatExchangerType(IfcHeatExchangerType *arg);
        /**
         * Create an IfcHeatExchangerType Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcHeatExchangerType entity.
         */
        Step::RefPtr< IfcHeatExchangerType > createIfcHeatExchangerType(bool isVolatile = false);
        /**
         * Clone an IfcHeatExchangerType Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcHeatExchangerType Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcHeatExchangerType *cloneIfcHeatExchangerType(const IfcHeatExchangerType &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcHeatExchangerType Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcHeatExchangerType entities.
         */
        Step::RefLinkedList< IfcHeatExchangerType > &getAllIfcHeatExchangerType();
        /**
         * Get the IfcHumidifierType entity by it's Id.
         * 
         * @param id The Id of the IfcHumidifierType.
         * @return A pointer to the IfcHumidifierType if found, NULL otherwise.
         */
        IfcHumidifierType *getIfcHumidifierType(Step::Id id);
        /**
         * Removes a IfcHumidifierType Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcHumidifierType to remove.
         * @return success.
         */
        bool removeIfcHumidifierType(IfcHumidifierType *arg);
        /**
         * Create an IfcHumidifierType Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcHumidifierType entity.
         */
        Step::RefPtr< IfcHumidifierType > createIfcHumidifierType(bool isVolatile = false);
        /**
         * Clone an IfcHumidifierType Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcHumidifierType Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcHumidifierType *cloneIfcHumidifierType(const IfcHumidifierType &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcHumidifierType Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcHumidifierType entities.
         */
        Step::RefLinkedList< IfcHumidifierType > &getAllIfcHumidifierType();
        /**
         * Get the IfcHygroscopicMaterialProperties entity by it's Id.
         * 
         * @param id The Id of the IfcHygroscopicMaterialProperties.
         * @return A pointer to the IfcHygroscopicMaterialProperties if found, NULL otherwise.
         */
        IfcHygroscopicMaterialProperties *getIfcHygroscopicMaterialProperties(Step::Id id);
        /**
         * Removes a IfcHygroscopicMaterialProperties Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcHygroscopicMaterialProperties to remove.
         * @return success.
         */
        bool removeIfcHygroscopicMaterialProperties(IfcHygroscopicMaterialProperties *arg);
        /**
         * Create an IfcHygroscopicMaterialProperties Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcHygroscopicMaterialProperties entity.
         */
        Step::RefPtr< IfcHygroscopicMaterialProperties > createIfcHygroscopicMaterialProperties(bool isVolatile = false);
        /**
         * Clone an IfcHygroscopicMaterialProperties Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcHygroscopicMaterialProperties Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcHygroscopicMaterialProperties *cloneIfcHygroscopicMaterialProperties(const IfcHygroscopicMaterialProperties &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcHygroscopicMaterialProperties Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcHygroscopicMaterialProperties entities.
         */
        Step::RefLinkedList< IfcHygroscopicMaterialProperties > &getAllIfcHygroscopicMaterialProperties();
        /**
         * Get the IfcImageTexture entity by it's Id.
         * 
         * @param id The Id of the IfcImageTexture.
         * @return A pointer to the IfcImageTexture if found, NULL otherwise.
         */
        IfcImageTexture *getIfcImageTexture(Step::Id id);
        /**
         * Removes a IfcImageTexture Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcImageTexture to remove.
         * @return success.
         */
        bool removeIfcImageTexture(IfcImageTexture *arg);
        /**
         * Create an IfcImageTexture Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcImageTexture entity.
         */
        Step::RefPtr< IfcImageTexture > createIfcImageTexture(bool isVolatile = false);
        /**
         * Clone an IfcImageTexture Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcImageTexture Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcImageTexture *cloneIfcImageTexture(const IfcImageTexture &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcImageTexture Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcImageTexture entities.
         */
        Step::RefLinkedList< IfcImageTexture > &getAllIfcImageTexture();
        /**
         * Get the IfcInventory entity by it's Id.
         * 
         * @param id The Id of the IfcInventory.
         * @return A pointer to the IfcInventory if found, NULL otherwise.
         */
        IfcInventory *getIfcInventory(Step::Id id);
        /**
         * Removes a IfcInventory Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcInventory to remove.
         * @return success.
         */
        bool removeIfcInventory(IfcInventory *arg);
        /**
         * Create an IfcInventory Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcInventory entity.
         */
        Step::RefPtr< IfcInventory > createIfcInventory(bool isVolatile = false);
        /**
         * Clone an IfcInventory Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcInventory Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcInventory *cloneIfcInventory(const IfcInventory &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcInventory Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcInventory entities.
         */
        Step::RefLinkedList< IfcInventory > &getAllIfcInventory();
        /**
         * Get the IfcIrregularTimeSeries entity by it's Id.
         * 
         * @param id The Id of the IfcIrregularTimeSeries.
         * @return A pointer to the IfcIrregularTimeSeries if found, NULL otherwise.
         */
        IfcIrregularTimeSeries *getIfcIrregularTimeSeries(Step::Id id);
        /**
         * Removes a IfcIrregularTimeSeries Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcIrregularTimeSeries to remove.
         * @return success.
         */
        bool removeIfcIrregularTimeSeries(IfcIrregularTimeSeries *arg);
        /**
         * Create an IfcIrregularTimeSeries Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcIrregularTimeSeries entity.
         */
        Step::RefPtr< IfcIrregularTimeSeries > createIfcIrregularTimeSeries(bool isVolatile = false);
        /**
         * Clone an IfcIrregularTimeSeries Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcIrregularTimeSeries Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcIrregularTimeSeries *cloneIfcIrregularTimeSeries(const IfcIrregularTimeSeries &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcIrregularTimeSeries Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcIrregularTimeSeries entities.
         */
        Step::RefLinkedList< IfcIrregularTimeSeries > &getAllIfcIrregularTimeSeries();
        /**
         * Get the IfcIrregularTimeSeriesValue entity by it's Id.
         * 
         * @param id The Id of the IfcIrregularTimeSeriesValue.
         * @return A pointer to the IfcIrregularTimeSeriesValue if found, NULL otherwise.
         */
        IfcIrregularTimeSeriesValue *getIfcIrregularTimeSeriesValue(Step::Id id);
        /**
         * Removes a IfcIrregularTimeSeriesValue Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcIrregularTimeSeriesValue to remove.
         * @return success.
         */
        bool removeIfcIrregularTimeSeriesValue(IfcIrregularTimeSeriesValue *arg);
        /**
         * Create an IfcIrregularTimeSeriesValue Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcIrregularTimeSeriesValue entity.
         */
        Step::RefPtr< IfcIrregularTimeSeriesValue > createIfcIrregularTimeSeriesValue(bool isVolatile = false);
        /**
         * Clone an IfcIrregularTimeSeriesValue Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcIrregularTimeSeriesValue Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcIrregularTimeSeriesValue *cloneIfcIrregularTimeSeriesValue(const IfcIrregularTimeSeriesValue &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcIrregularTimeSeriesValue Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcIrregularTimeSeriesValue entities.
         */
        Step::RefLinkedList< IfcIrregularTimeSeriesValue > &getAllIfcIrregularTimeSeriesValue();
        /**
         * Get the IfcIShapeProfileDef entity by it's Id.
         * 
         * @param id The Id of the IfcIShapeProfileDef.
         * @return A pointer to the IfcIShapeProfileDef if found, NULL otherwise.
         */
        IfcIShapeProfileDef *getIfcIShapeProfileDef(Step::Id id);
        /**
         * Removes a IfcIShapeProfileDef Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcIShapeProfileDef to remove.
         * @return success.
         */
        bool removeIfcIShapeProfileDef(IfcIShapeProfileDef *arg);
        /**
         * Create an IfcIShapeProfileDef Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcIShapeProfileDef entity.
         */
        Step::RefPtr< IfcIShapeProfileDef > createIfcIShapeProfileDef(bool isVolatile = false);
        /**
         * Clone an IfcIShapeProfileDef Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcIShapeProfileDef Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcIShapeProfileDef *cloneIfcIShapeProfileDef(const IfcIShapeProfileDef &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcIShapeProfileDef Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcIShapeProfileDef entities.
         */
        Step::RefLinkedList< IfcIShapeProfileDef > &getAllIfcIShapeProfileDef();
        /**
         * Get the IfcJunctionBoxType entity by it's Id.
         * 
         * @param id The Id of the IfcJunctionBoxType.
         * @return A pointer to the IfcJunctionBoxType if found, NULL otherwise.
         */
        IfcJunctionBoxType *getIfcJunctionBoxType(Step::Id id);
        /**
         * Removes a IfcJunctionBoxType Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcJunctionBoxType to remove.
         * @return success.
         */
        bool removeIfcJunctionBoxType(IfcJunctionBoxType *arg);
        /**
         * Create an IfcJunctionBoxType Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcJunctionBoxType entity.
         */
        Step::RefPtr< IfcJunctionBoxType > createIfcJunctionBoxType(bool isVolatile = false);
        /**
         * Clone an IfcJunctionBoxType Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcJunctionBoxType Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcJunctionBoxType *cloneIfcJunctionBoxType(const IfcJunctionBoxType &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcJunctionBoxType Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcJunctionBoxType entities.
         */
        Step::RefLinkedList< IfcJunctionBoxType > &getAllIfcJunctionBoxType();
        /**
         * Get the IfcLaborResource entity by it's Id.
         * 
         * @param id The Id of the IfcLaborResource.
         * @return A pointer to the IfcLaborResource if found, NULL otherwise.
         */
        IfcLaborResource *getIfcLaborResource(Step::Id id);
        /**
         * Removes a IfcLaborResource Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcLaborResource to remove.
         * @return success.
         */
        bool removeIfcLaborResource(IfcLaborResource *arg);
        /**
         * Create an IfcLaborResource Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcLaborResource entity.
         */
        Step::RefPtr< IfcLaborResource > createIfcLaborResource(bool isVolatile = false);
        /**
         * Clone an IfcLaborResource Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcLaborResource Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcLaborResource *cloneIfcLaborResource(const IfcLaborResource &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcLaborResource Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcLaborResource entities.
         */
        Step::RefLinkedList< IfcLaborResource > &getAllIfcLaborResource();
        /**
         * Get the IfcLampType entity by it's Id.
         * 
         * @param id The Id of the IfcLampType.
         * @return A pointer to the IfcLampType if found, NULL otherwise.
         */
        IfcLampType *getIfcLampType(Step::Id id);
        /**
         * Removes a IfcLampType Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcLampType to remove.
         * @return success.
         */
        bool removeIfcLampType(IfcLampType *arg);
        /**
         * Create an IfcLampType Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcLampType entity.
         */
        Step::RefPtr< IfcLampType > createIfcLampType(bool isVolatile = false);
        /**
         * Clone an IfcLampType Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcLampType Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcLampType *cloneIfcLampType(const IfcLampType &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcLampType Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcLampType entities.
         */
        Step::RefLinkedList< IfcLampType > &getAllIfcLampType();
        /**
         * Get the IfcLibraryInformation entity by it's Id.
         * 
         * @param id The Id of the IfcLibraryInformation.
         * @return A pointer to the IfcLibraryInformation if found, NULL otherwise.
         */
        IfcLibraryInformation *getIfcLibraryInformation(Step::Id id);
        /**
         * Removes a IfcLibraryInformation Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcLibraryInformation to remove.
         * @return success.
         */
        bool removeIfcLibraryInformation(IfcLibraryInformation *arg);
        /**
         * Create an IfcLibraryInformation Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcLibraryInformation entity.
         */
        Step::RefPtr< IfcLibraryInformation > createIfcLibraryInformation(bool isVolatile = false);
        /**
         * Clone an IfcLibraryInformation Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcLibraryInformation Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcLibraryInformation *cloneIfcLibraryInformation(const IfcLibraryInformation &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcLibraryInformation Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcLibraryInformation entities.
         */
        Step::RefLinkedList< IfcLibraryInformation > &getAllIfcLibraryInformation();
        /**
         * Get the IfcLibraryReference entity by it's Id.
         * 
         * @param id The Id of the IfcLibraryReference.
         * @return A pointer to the IfcLibraryReference if found, NULL otherwise.
         */
        IfcLibraryReference *getIfcLibraryReference(Step::Id id);
        /**
         * Removes a IfcLibraryReference Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcLibraryReference to remove.
         * @return success.
         */
        bool removeIfcLibraryReference(IfcLibraryReference *arg);
        /**
         * Create an IfcLibraryReference Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcLibraryReference entity.
         */
        Step::RefPtr< IfcLibraryReference > createIfcLibraryReference(bool isVolatile = false);
        /**
         * Clone an IfcLibraryReference Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcLibraryReference Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcLibraryReference *cloneIfcLibraryReference(const IfcLibraryReference &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcLibraryReference Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcLibraryReference entities.
         */
        Step::RefLinkedList< IfcLibraryReference > &getAllIfcLibraryReference();
        /**
         * Get the IfcLightDistributionData entity by it's Id.
         * 
         * @param id The Id of the IfcLightDistributionData.
         * @return A pointer to the IfcLightDistributionData if found, NULL otherwise.
         */
        IfcLightDistributionData *getIfcLightDistributionData(Step::Id id);
        /**
         * Removes a IfcLightDistributionData Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcLightDistributionData to remove.
         * @return success.
         */
        bool removeIfcLightDistributionData(IfcLightDistributionData *arg);
        /**
         * Create an IfcLightDistributionData Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcLightDistributionData entity.
         */
        Step::RefPtr< IfcLightDistributionData > createIfcLightDistributionData(bool isVolatile = false);
        /**
         * Clone an IfcLightDistributionData Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcLightDistributionData Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcLightDistributionData *cloneIfcLightDistributionData(const IfcLightDistributionData &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcLightDistributionData Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcLightDistributionData entities.
         */
        Step::RefLinkedList< IfcLightDistributionData > &getAllIfcLightDistributionData();
        /**
         * Get the IfcLightFixtureType entity by it's Id.
         * 
         * @param id The Id of the IfcLightFixtureType.
         * @return A pointer to the IfcLightFixtureType if found, NULL otherwise.
         */
        IfcLightFixtureType *getIfcLightFixtureType(Step::Id id);
        /**
         * Removes a IfcLightFixtureType Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcLightFixtureType to remove.
         * @return success.
         */
        bool removeIfcLightFixtureType(IfcLightFixtureType *arg);
        /**
         * Create an IfcLightFixtureType Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcLightFixtureType entity.
         */
        Step::RefPtr< IfcLightFixtureType > createIfcLightFixtureType(bool isVolatile = false);
        /**
         * Clone an IfcLightFixtureType Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcLightFixtureType Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcLightFixtureType *cloneIfcLightFixtureType(const IfcLightFixtureType &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcLightFixtureType Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcLightFixtureType entities.
         */
        Step::RefLinkedList< IfcLightFixtureType > &getAllIfcLightFixtureType();
        /**
         * Get the IfcLightIntensityDistribution entity by it's Id.
         * 
         * @param id The Id of the IfcLightIntensityDistribution.
         * @return A pointer to the IfcLightIntensityDistribution if found, NULL otherwise.
         */
        IfcLightIntensityDistribution *getIfcLightIntensityDistribution(Step::Id id);
        /**
         * Removes a IfcLightIntensityDistribution Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcLightIntensityDistribution to remove.
         * @return success.
         */
        bool removeIfcLightIntensityDistribution(IfcLightIntensityDistribution *arg);
        /**
         * Create an IfcLightIntensityDistribution Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcLightIntensityDistribution entity.
         */
        Step::RefPtr< IfcLightIntensityDistribution > createIfcLightIntensityDistribution(bool isVolatile = false);
        /**
         * Clone an IfcLightIntensityDistribution Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcLightIntensityDistribution Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcLightIntensityDistribution *cloneIfcLightIntensityDistribution(const IfcLightIntensityDistribution &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcLightIntensityDistribution Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcLightIntensityDistribution entities.
         */
        Step::RefLinkedList< IfcLightIntensityDistribution > &getAllIfcLightIntensityDistribution();
        /**
         * Get the IfcLightSource entity by it's Id.
         * 
         * @param id The Id of the IfcLightSource.
         * @return A pointer to the IfcLightSource if found, NULL otherwise.
         */
        IfcLightSource *getIfcLightSource(Step::Id id);
        /**
         * Removes a IfcLightSource Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcLightSource to remove.
         * @return success.
         */
        bool removeIfcLightSource(IfcLightSource *arg);
        /**
         * Create an IfcLightSource Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcLightSource entity.
         */
        Step::RefPtr< IfcLightSource > createIfcLightSource(bool isVolatile = false);
        /**
         * Clone an IfcLightSource Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcLightSource Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcLightSource *cloneIfcLightSource(const IfcLightSource &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcLightSource Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcLightSource entities.
         */
        Step::RefLinkedList< IfcLightSource > &getAllIfcLightSource();
        /**
         * Get the IfcLightSourceAmbient entity by it's Id.
         * 
         * @param id The Id of the IfcLightSourceAmbient.
         * @return A pointer to the IfcLightSourceAmbient if found, NULL otherwise.
         */
        IfcLightSourceAmbient *getIfcLightSourceAmbient(Step::Id id);
        /**
         * Removes a IfcLightSourceAmbient Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcLightSourceAmbient to remove.
         * @return success.
         */
        bool removeIfcLightSourceAmbient(IfcLightSourceAmbient *arg);
        /**
         * Create an IfcLightSourceAmbient Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcLightSourceAmbient entity.
         */
        Step::RefPtr< IfcLightSourceAmbient > createIfcLightSourceAmbient(bool isVolatile = false);
        /**
         * Clone an IfcLightSourceAmbient Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcLightSourceAmbient Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcLightSourceAmbient *cloneIfcLightSourceAmbient(const IfcLightSourceAmbient &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcLightSourceAmbient Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcLightSourceAmbient entities.
         */
        Step::RefLinkedList< IfcLightSourceAmbient > &getAllIfcLightSourceAmbient();
        /**
         * Get the IfcLightSourceDirectional entity by it's Id.
         * 
         * @param id The Id of the IfcLightSourceDirectional.
         * @return A pointer to the IfcLightSourceDirectional if found, NULL otherwise.
         */
        IfcLightSourceDirectional *getIfcLightSourceDirectional(Step::Id id);
        /**
         * Removes a IfcLightSourceDirectional Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcLightSourceDirectional to remove.
         * @return success.
         */
        bool removeIfcLightSourceDirectional(IfcLightSourceDirectional *arg);
        /**
         * Create an IfcLightSourceDirectional Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcLightSourceDirectional entity.
         */
        Step::RefPtr< IfcLightSourceDirectional > createIfcLightSourceDirectional(bool isVolatile = false);
        /**
         * Clone an IfcLightSourceDirectional Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcLightSourceDirectional Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcLightSourceDirectional *cloneIfcLightSourceDirectional(const IfcLightSourceDirectional &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcLightSourceDirectional Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcLightSourceDirectional entities.
         */
        Step::RefLinkedList< IfcLightSourceDirectional > &getAllIfcLightSourceDirectional();
        /**
         * Get the IfcLightSourceGoniometric entity by it's Id.
         * 
         * @param id The Id of the IfcLightSourceGoniometric.
         * @return A pointer to the IfcLightSourceGoniometric if found, NULL otherwise.
         */
        IfcLightSourceGoniometric *getIfcLightSourceGoniometric(Step::Id id);
        /**
         * Removes a IfcLightSourceGoniometric Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcLightSourceGoniometric to remove.
         * @return success.
         */
        bool removeIfcLightSourceGoniometric(IfcLightSourceGoniometric *arg);
        /**
         * Create an IfcLightSourceGoniometric Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcLightSourceGoniometric entity.
         */
        Step::RefPtr< IfcLightSourceGoniometric > createIfcLightSourceGoniometric(bool isVolatile = false);
        /**
         * Clone an IfcLightSourceGoniometric Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcLightSourceGoniometric Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcLightSourceGoniometric *cloneIfcLightSourceGoniometric(const IfcLightSourceGoniometric &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcLightSourceGoniometric Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcLightSourceGoniometric entities.
         */
        Step::RefLinkedList< IfcLightSourceGoniometric > &getAllIfcLightSourceGoniometric();
        /**
         * Get the IfcLightSourcePositional entity by it's Id.
         * 
         * @param id The Id of the IfcLightSourcePositional.
         * @return A pointer to the IfcLightSourcePositional if found, NULL otherwise.
         */
        IfcLightSourcePositional *getIfcLightSourcePositional(Step::Id id);
        /**
         * Removes a IfcLightSourcePositional Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcLightSourcePositional to remove.
         * @return success.
         */
        bool removeIfcLightSourcePositional(IfcLightSourcePositional *arg);
        /**
         * Create an IfcLightSourcePositional Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcLightSourcePositional entity.
         */
        Step::RefPtr< IfcLightSourcePositional > createIfcLightSourcePositional(bool isVolatile = false);
        /**
         * Clone an IfcLightSourcePositional Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcLightSourcePositional Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcLightSourcePositional *cloneIfcLightSourcePositional(const IfcLightSourcePositional &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcLightSourcePositional Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcLightSourcePositional entities.
         */
        Step::RefLinkedList< IfcLightSourcePositional > &getAllIfcLightSourcePositional();
        /**
         * Get the IfcLightSourceSpot entity by it's Id.
         * 
         * @param id The Id of the IfcLightSourceSpot.
         * @return A pointer to the IfcLightSourceSpot if found, NULL otherwise.
         */
        IfcLightSourceSpot *getIfcLightSourceSpot(Step::Id id);
        /**
         * Removes a IfcLightSourceSpot Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcLightSourceSpot to remove.
         * @return success.
         */
        bool removeIfcLightSourceSpot(IfcLightSourceSpot *arg);
        /**
         * Create an IfcLightSourceSpot Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcLightSourceSpot entity.
         */
        Step::RefPtr< IfcLightSourceSpot > createIfcLightSourceSpot(bool isVolatile = false);
        /**
         * Clone an IfcLightSourceSpot Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcLightSourceSpot Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcLightSourceSpot *cloneIfcLightSourceSpot(const IfcLightSourceSpot &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcLightSourceSpot Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcLightSourceSpot entities.
         */
        Step::RefLinkedList< IfcLightSourceSpot > &getAllIfcLightSourceSpot();
        /**
         * Get the IfcLine entity by it's Id.
         * 
         * @param id The Id of the IfcLine.
         * @return A pointer to the IfcLine if found, NULL otherwise.
         */
        IfcLine *getIfcLine(Step::Id id);
        /**
         * Removes a IfcLine Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcLine to remove.
         * @return success.
         */
        bool removeIfcLine(IfcLine *arg);
        /**
         * Create an IfcLine Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcLine entity.
         */
        Step::RefPtr< IfcLine > createIfcLine(bool isVolatile = false);
        /**
         * Clone an IfcLine Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcLine Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcLine *cloneIfcLine(const IfcLine &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcLine Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcLine entities.
         */
        Step::RefLinkedList< IfcLine > &getAllIfcLine();
        /**
         * Get the IfcLinearDimension entity by it's Id.
         * 
         * @param id The Id of the IfcLinearDimension.
         * @return A pointer to the IfcLinearDimension if found, NULL otherwise.
         */
        IfcLinearDimension *getIfcLinearDimension(Step::Id id);
        /**
         * Removes a IfcLinearDimension Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcLinearDimension to remove.
         * @return success.
         */
        bool removeIfcLinearDimension(IfcLinearDimension *arg);
        /**
         * Create an IfcLinearDimension Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcLinearDimension entity.
         */
        Step::RefPtr< IfcLinearDimension > createIfcLinearDimension(bool isVolatile = false);
        /**
         * Clone an IfcLinearDimension Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcLinearDimension Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcLinearDimension *cloneIfcLinearDimension(const IfcLinearDimension &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcLinearDimension Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcLinearDimension entities.
         */
        Step::RefLinkedList< IfcLinearDimension > &getAllIfcLinearDimension();
        /**
         * Get the IfcLocalPlacement entity by it's Id.
         * 
         * @param id The Id of the IfcLocalPlacement.
         * @return A pointer to the IfcLocalPlacement if found, NULL otherwise.
         */
        IfcLocalPlacement *getIfcLocalPlacement(Step::Id id);
        /**
         * Removes a IfcLocalPlacement Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcLocalPlacement to remove.
         * @return success.
         */
        bool removeIfcLocalPlacement(IfcLocalPlacement *arg);
        /**
         * Create an IfcLocalPlacement Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcLocalPlacement entity.
         */
        Step::RefPtr< IfcLocalPlacement > createIfcLocalPlacement(bool isVolatile = false);
        /**
         * Clone an IfcLocalPlacement Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcLocalPlacement Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcLocalPlacement *cloneIfcLocalPlacement(const IfcLocalPlacement &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcLocalPlacement Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcLocalPlacement entities.
         */
        Step::RefLinkedList< IfcLocalPlacement > &getAllIfcLocalPlacement();
        /**
         * Get the IfcLocalTime entity by it's Id.
         * 
         * @param id The Id of the IfcLocalTime.
         * @return A pointer to the IfcLocalTime if found, NULL otherwise.
         */
        IfcLocalTime *getIfcLocalTime(Step::Id id);
        /**
         * Removes a IfcLocalTime Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcLocalTime to remove.
         * @return success.
         */
        bool removeIfcLocalTime(IfcLocalTime *arg);
        /**
         * Create an IfcLocalTime Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcLocalTime entity.
         */
        Step::RefPtr< IfcLocalTime > createIfcLocalTime(bool isVolatile = false);
        /**
         * Clone an IfcLocalTime Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcLocalTime Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcLocalTime *cloneIfcLocalTime(const IfcLocalTime &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcLocalTime Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcLocalTime entities.
         */
        Step::RefLinkedList< IfcLocalTime > &getAllIfcLocalTime();
        /**
         * Get the IfcLoop entity by it's Id.
         * 
         * @param id The Id of the IfcLoop.
         * @return A pointer to the IfcLoop if found, NULL otherwise.
         */
        IfcLoop *getIfcLoop(Step::Id id);
        /**
         * Removes a IfcLoop Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcLoop to remove.
         * @return success.
         */
        bool removeIfcLoop(IfcLoop *arg);
        /**
         * Create an IfcLoop Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcLoop entity.
         */
        Step::RefPtr< IfcLoop > createIfcLoop(bool isVolatile = false);
        /**
         * Clone an IfcLoop Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcLoop Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcLoop *cloneIfcLoop(const IfcLoop &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcLoop Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcLoop entities.
         */
        Step::RefLinkedList< IfcLoop > &getAllIfcLoop();
        /**
         * Get the IfcLShapeProfileDef entity by it's Id.
         * 
         * @param id The Id of the IfcLShapeProfileDef.
         * @return A pointer to the IfcLShapeProfileDef if found, NULL otherwise.
         */
        IfcLShapeProfileDef *getIfcLShapeProfileDef(Step::Id id);
        /**
         * Removes a IfcLShapeProfileDef Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcLShapeProfileDef to remove.
         * @return success.
         */
        bool removeIfcLShapeProfileDef(IfcLShapeProfileDef *arg);
        /**
         * Create an IfcLShapeProfileDef Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcLShapeProfileDef entity.
         */
        Step::RefPtr< IfcLShapeProfileDef > createIfcLShapeProfileDef(bool isVolatile = false);
        /**
         * Clone an IfcLShapeProfileDef Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcLShapeProfileDef Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcLShapeProfileDef *cloneIfcLShapeProfileDef(const IfcLShapeProfileDef &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcLShapeProfileDef Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcLShapeProfileDef entities.
         */
        Step::RefLinkedList< IfcLShapeProfileDef > &getAllIfcLShapeProfileDef();
        /**
         * Get the IfcManifoldSolidBrep entity by it's Id.
         * 
         * @param id The Id of the IfcManifoldSolidBrep.
         * @return A pointer to the IfcManifoldSolidBrep if found, NULL otherwise.
         */
        IfcManifoldSolidBrep *getIfcManifoldSolidBrep(Step::Id id);
        /**
         * Removes a IfcManifoldSolidBrep Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcManifoldSolidBrep to remove.
         * @return success.
         */
        bool removeIfcManifoldSolidBrep(IfcManifoldSolidBrep *arg);
        /**
         * Create an IfcManifoldSolidBrep Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcManifoldSolidBrep entity.
         */
        Step::RefPtr< IfcManifoldSolidBrep > createIfcManifoldSolidBrep(bool isVolatile = false);
        /**
         * Clone an IfcManifoldSolidBrep Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcManifoldSolidBrep Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcManifoldSolidBrep *cloneIfcManifoldSolidBrep(const IfcManifoldSolidBrep &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcManifoldSolidBrep Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcManifoldSolidBrep entities.
         */
        Step::RefLinkedList< IfcManifoldSolidBrep > &getAllIfcManifoldSolidBrep();
        /**
         * Get the IfcMappedItem entity by it's Id.
         * 
         * @param id The Id of the IfcMappedItem.
         * @return A pointer to the IfcMappedItem if found, NULL otherwise.
         */
        IfcMappedItem *getIfcMappedItem(Step::Id id);
        /**
         * Removes a IfcMappedItem Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcMappedItem to remove.
         * @return success.
         */
        bool removeIfcMappedItem(IfcMappedItem *arg);
        /**
         * Create an IfcMappedItem Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcMappedItem entity.
         */
        Step::RefPtr< IfcMappedItem > createIfcMappedItem(bool isVolatile = false);
        /**
         * Clone an IfcMappedItem Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcMappedItem Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcMappedItem *cloneIfcMappedItem(const IfcMappedItem &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcMappedItem Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcMappedItem entities.
         */
        Step::RefLinkedList< IfcMappedItem > &getAllIfcMappedItem();
        /**
         * Get the IfcMaterial entity by it's Id.
         * 
         * @param id The Id of the IfcMaterial.
         * @return A pointer to the IfcMaterial if found, NULL otherwise.
         */
        IfcMaterial *getIfcMaterial(Step::Id id);
        /**
         * Removes a IfcMaterial Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcMaterial to remove.
         * @return success.
         */
        bool removeIfcMaterial(IfcMaterial *arg);
        /**
         * Create an IfcMaterial Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcMaterial entity.
         */
        Step::RefPtr< IfcMaterial > createIfcMaterial(bool isVolatile = false);
        /**
         * Clone an IfcMaterial Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcMaterial Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcMaterial *cloneIfcMaterial(const IfcMaterial &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcMaterial Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcMaterial entities.
         */
        Step::RefLinkedList< IfcMaterial > &getAllIfcMaterial();
        /**
         * Get the IfcMaterialClassificationRelationship entity by it's Id.
         * 
         * @param id The Id of the IfcMaterialClassificationRelationship.
         * @return A pointer to the IfcMaterialClassificationRelationship if found, NULL otherwise.
         */
        IfcMaterialClassificationRelationship *getIfcMaterialClassificationRelationship(Step::Id id);
        /**
         * Removes a IfcMaterialClassificationRelationship Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcMaterialClassificationRelationship to remove.
         * @return success.
         */
        bool removeIfcMaterialClassificationRelationship(IfcMaterialClassificationRelationship *arg);
        /**
         * Create an IfcMaterialClassificationRelationship Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcMaterialClassificationRelationship entity.
         */
        Step::RefPtr< IfcMaterialClassificationRelationship > createIfcMaterialClassificationRelationship(bool isVolatile = false);
        /**
         * Clone an IfcMaterialClassificationRelationship Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcMaterialClassificationRelationship Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcMaterialClassificationRelationship *cloneIfcMaterialClassificationRelationship(const IfcMaterialClassificationRelationship &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcMaterialClassificationRelationship Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcMaterialClassificationRelationship entities.
         */
        Step::RefLinkedList< IfcMaterialClassificationRelationship > &getAllIfcMaterialClassificationRelationship();
        /**
         * Get the IfcMaterialDefinitionRepresentation entity by it's Id.
         * 
         * @param id The Id of the IfcMaterialDefinitionRepresentation.
         * @return A pointer to the IfcMaterialDefinitionRepresentation if found, NULL otherwise.
         */
        IfcMaterialDefinitionRepresentation *getIfcMaterialDefinitionRepresentation(Step::Id id);
        /**
         * Removes a IfcMaterialDefinitionRepresentation Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcMaterialDefinitionRepresentation to remove.
         * @return success.
         */
        bool removeIfcMaterialDefinitionRepresentation(IfcMaterialDefinitionRepresentation *arg);
        /**
         * Create an IfcMaterialDefinitionRepresentation Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcMaterialDefinitionRepresentation entity.
         */
        Step::RefPtr< IfcMaterialDefinitionRepresentation > createIfcMaterialDefinitionRepresentation(bool isVolatile = false);
        /**
         * Clone an IfcMaterialDefinitionRepresentation Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcMaterialDefinitionRepresentation Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcMaterialDefinitionRepresentation *cloneIfcMaterialDefinitionRepresentation(const IfcMaterialDefinitionRepresentation &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcMaterialDefinitionRepresentation Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcMaterialDefinitionRepresentation entities.
         */
        Step::RefLinkedList< IfcMaterialDefinitionRepresentation > &getAllIfcMaterialDefinitionRepresentation();
        /**
         * Get the IfcMaterialLayer entity by it's Id.
         * 
         * @param id The Id of the IfcMaterialLayer.
         * @return A pointer to the IfcMaterialLayer if found, NULL otherwise.
         */
        IfcMaterialLayer *getIfcMaterialLayer(Step::Id id);
        /**
         * Removes a IfcMaterialLayer Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcMaterialLayer to remove.
         * @return success.
         */
        bool removeIfcMaterialLayer(IfcMaterialLayer *arg);
        /**
         * Create an IfcMaterialLayer Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcMaterialLayer entity.
         */
        Step::RefPtr< IfcMaterialLayer > createIfcMaterialLayer(bool isVolatile = false);
        /**
         * Clone an IfcMaterialLayer Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcMaterialLayer Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcMaterialLayer *cloneIfcMaterialLayer(const IfcMaterialLayer &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcMaterialLayer Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcMaterialLayer entities.
         */
        Step::RefLinkedList< IfcMaterialLayer > &getAllIfcMaterialLayer();
        /**
         * Get the IfcMaterialLayerSet entity by it's Id.
         * 
         * @param id The Id of the IfcMaterialLayerSet.
         * @return A pointer to the IfcMaterialLayerSet if found, NULL otherwise.
         */
        IfcMaterialLayerSet *getIfcMaterialLayerSet(Step::Id id);
        /**
         * Removes a IfcMaterialLayerSet Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcMaterialLayerSet to remove.
         * @return success.
         */
        bool removeIfcMaterialLayerSet(IfcMaterialLayerSet *arg);
        /**
         * Create an IfcMaterialLayerSet Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcMaterialLayerSet entity.
         */
        Step::RefPtr< IfcMaterialLayerSet > createIfcMaterialLayerSet(bool isVolatile = false);
        /**
         * Clone an IfcMaterialLayerSet Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcMaterialLayerSet Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcMaterialLayerSet *cloneIfcMaterialLayerSet(const IfcMaterialLayerSet &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcMaterialLayerSet Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcMaterialLayerSet entities.
         */
        Step::RefLinkedList< IfcMaterialLayerSet > &getAllIfcMaterialLayerSet();
        /**
         * Get the IfcMaterialLayerSetUsage entity by it's Id.
         * 
         * @param id The Id of the IfcMaterialLayerSetUsage.
         * @return A pointer to the IfcMaterialLayerSetUsage if found, NULL otherwise.
         */
        IfcMaterialLayerSetUsage *getIfcMaterialLayerSetUsage(Step::Id id);
        /**
         * Removes a IfcMaterialLayerSetUsage Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcMaterialLayerSetUsage to remove.
         * @return success.
         */
        bool removeIfcMaterialLayerSetUsage(IfcMaterialLayerSetUsage *arg);
        /**
         * Create an IfcMaterialLayerSetUsage Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcMaterialLayerSetUsage entity.
         */
        Step::RefPtr< IfcMaterialLayerSetUsage > createIfcMaterialLayerSetUsage(bool isVolatile = false);
        /**
         * Clone an IfcMaterialLayerSetUsage Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcMaterialLayerSetUsage Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcMaterialLayerSetUsage *cloneIfcMaterialLayerSetUsage(const IfcMaterialLayerSetUsage &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcMaterialLayerSetUsage Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcMaterialLayerSetUsage entities.
         */
        Step::RefLinkedList< IfcMaterialLayerSetUsage > &getAllIfcMaterialLayerSetUsage();
        /**
         * Get the IfcMaterialList entity by it's Id.
         * 
         * @param id The Id of the IfcMaterialList.
         * @return A pointer to the IfcMaterialList if found, NULL otherwise.
         */
        IfcMaterialList *getIfcMaterialList(Step::Id id);
        /**
         * Removes a IfcMaterialList Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcMaterialList to remove.
         * @return success.
         */
        bool removeIfcMaterialList(IfcMaterialList *arg);
        /**
         * Create an IfcMaterialList Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcMaterialList entity.
         */
        Step::RefPtr< IfcMaterialList > createIfcMaterialList(bool isVolatile = false);
        /**
         * Clone an IfcMaterialList Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcMaterialList Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcMaterialList *cloneIfcMaterialList(const IfcMaterialList &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcMaterialList Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcMaterialList entities.
         */
        Step::RefLinkedList< IfcMaterialList > &getAllIfcMaterialList();
        /**
         * Get the IfcMaterialProperties entity by it's Id.
         * 
         * @param id The Id of the IfcMaterialProperties.
         * @return A pointer to the IfcMaterialProperties if found, NULL otherwise.
         */
        IfcMaterialProperties *getIfcMaterialProperties(Step::Id id);
        /**
         * Removes a IfcMaterialProperties Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcMaterialProperties to remove.
         * @return success.
         */
        bool removeIfcMaterialProperties(IfcMaterialProperties *arg);
        /**
         * Create an IfcMaterialProperties Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcMaterialProperties entity.
         */
        Step::RefPtr< IfcMaterialProperties > createIfcMaterialProperties(bool isVolatile = false);
        /**
         * Clone an IfcMaterialProperties Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcMaterialProperties Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcMaterialProperties *cloneIfcMaterialProperties(const IfcMaterialProperties &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcMaterialProperties Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcMaterialProperties entities.
         */
        Step::RefLinkedList< IfcMaterialProperties > &getAllIfcMaterialProperties();
        /**
         * Get the IfcMeasureWithUnit entity by it's Id.
         * 
         * @param id The Id of the IfcMeasureWithUnit.
         * @return A pointer to the IfcMeasureWithUnit if found, NULL otherwise.
         */
        IfcMeasureWithUnit *getIfcMeasureWithUnit(Step::Id id);
        /**
         * Removes a IfcMeasureWithUnit Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcMeasureWithUnit to remove.
         * @return success.
         */
        bool removeIfcMeasureWithUnit(IfcMeasureWithUnit *arg);
        /**
         * Create an IfcMeasureWithUnit Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcMeasureWithUnit entity.
         */
        Step::RefPtr< IfcMeasureWithUnit > createIfcMeasureWithUnit(bool isVolatile = false);
        /**
         * Clone an IfcMeasureWithUnit Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcMeasureWithUnit Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcMeasureWithUnit *cloneIfcMeasureWithUnit(const IfcMeasureWithUnit &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcMeasureWithUnit Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcMeasureWithUnit entities.
         */
        Step::RefLinkedList< IfcMeasureWithUnit > &getAllIfcMeasureWithUnit();
        /**
         * Get the IfcMechanicalConcreteMaterialProperties entity by it's Id.
         * 
         * @param id The Id of the IfcMechanicalConcreteMaterialProperties.
         * @return A pointer to the IfcMechanicalConcreteMaterialProperties if found, NULL otherwise.
         */
        IfcMechanicalConcreteMaterialProperties *getIfcMechanicalConcreteMaterialProperties(Step::Id id);
        /**
         * Removes a IfcMechanicalConcreteMaterialProperties Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcMechanicalConcreteMaterialProperties to remove.
         * @return success.
         */
        bool removeIfcMechanicalConcreteMaterialProperties(IfcMechanicalConcreteMaterialProperties *arg);
        /**
         * Create an IfcMechanicalConcreteMaterialProperties Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcMechanicalConcreteMaterialProperties entity.
         */
        Step::RefPtr< IfcMechanicalConcreteMaterialProperties > createIfcMechanicalConcreteMaterialProperties(bool isVolatile = false);
        /**
         * Clone an IfcMechanicalConcreteMaterialProperties Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcMechanicalConcreteMaterialProperties Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcMechanicalConcreteMaterialProperties *cloneIfcMechanicalConcreteMaterialProperties(const IfcMechanicalConcreteMaterialProperties &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcMechanicalConcreteMaterialProperties Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcMechanicalConcreteMaterialProperties entities.
         */
        Step::RefLinkedList< IfcMechanicalConcreteMaterialProperties > &getAllIfcMechanicalConcreteMaterialProperties();
        /**
         * Get the IfcMechanicalFastener entity by it's Id.
         * 
         * @param id The Id of the IfcMechanicalFastener.
         * @return A pointer to the IfcMechanicalFastener if found, NULL otherwise.
         */
        IfcMechanicalFastener *getIfcMechanicalFastener(Step::Id id);
        /**
         * Removes a IfcMechanicalFastener Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcMechanicalFastener to remove.
         * @return success.
         */
        bool removeIfcMechanicalFastener(IfcMechanicalFastener *arg);
        /**
         * Create an IfcMechanicalFastener Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcMechanicalFastener entity.
         */
        Step::RefPtr< IfcMechanicalFastener > createIfcMechanicalFastener(bool isVolatile = false);
        /**
         * Clone an IfcMechanicalFastener Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcMechanicalFastener Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcMechanicalFastener *cloneIfcMechanicalFastener(const IfcMechanicalFastener &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcMechanicalFastener Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcMechanicalFastener entities.
         */
        Step::RefLinkedList< IfcMechanicalFastener > &getAllIfcMechanicalFastener();
        /**
         * Get the IfcMechanicalFastenerType entity by it's Id.
         * 
         * @param id The Id of the IfcMechanicalFastenerType.
         * @return A pointer to the IfcMechanicalFastenerType if found, NULL otherwise.
         */
        IfcMechanicalFastenerType *getIfcMechanicalFastenerType(Step::Id id);
        /**
         * Removes a IfcMechanicalFastenerType Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcMechanicalFastenerType to remove.
         * @return success.
         */
        bool removeIfcMechanicalFastenerType(IfcMechanicalFastenerType *arg);
        /**
         * Create an IfcMechanicalFastenerType Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcMechanicalFastenerType entity.
         */
        Step::RefPtr< IfcMechanicalFastenerType > createIfcMechanicalFastenerType(bool isVolatile = false);
        /**
         * Clone an IfcMechanicalFastenerType Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcMechanicalFastenerType Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcMechanicalFastenerType *cloneIfcMechanicalFastenerType(const IfcMechanicalFastenerType &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcMechanicalFastenerType Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcMechanicalFastenerType entities.
         */
        Step::RefLinkedList< IfcMechanicalFastenerType > &getAllIfcMechanicalFastenerType();
        /**
         * Get the IfcMechanicalMaterialProperties entity by it's Id.
         * 
         * @param id The Id of the IfcMechanicalMaterialProperties.
         * @return A pointer to the IfcMechanicalMaterialProperties if found, NULL otherwise.
         */
        IfcMechanicalMaterialProperties *getIfcMechanicalMaterialProperties(Step::Id id);
        /**
         * Removes a IfcMechanicalMaterialProperties Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcMechanicalMaterialProperties to remove.
         * @return success.
         */
        bool removeIfcMechanicalMaterialProperties(IfcMechanicalMaterialProperties *arg);
        /**
         * Create an IfcMechanicalMaterialProperties Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcMechanicalMaterialProperties entity.
         */
        Step::RefPtr< IfcMechanicalMaterialProperties > createIfcMechanicalMaterialProperties(bool isVolatile = false);
        /**
         * Clone an IfcMechanicalMaterialProperties Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcMechanicalMaterialProperties Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcMechanicalMaterialProperties *cloneIfcMechanicalMaterialProperties(const IfcMechanicalMaterialProperties &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcMechanicalMaterialProperties Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcMechanicalMaterialProperties entities.
         */
        Step::RefLinkedList< IfcMechanicalMaterialProperties > &getAllIfcMechanicalMaterialProperties();
        /**
         * Get the IfcMechanicalSteelMaterialProperties entity by it's Id.
         * 
         * @param id The Id of the IfcMechanicalSteelMaterialProperties.
         * @return A pointer to the IfcMechanicalSteelMaterialProperties if found, NULL otherwise.
         */
        IfcMechanicalSteelMaterialProperties *getIfcMechanicalSteelMaterialProperties(Step::Id id);
        /**
         * Removes a IfcMechanicalSteelMaterialProperties Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcMechanicalSteelMaterialProperties to remove.
         * @return success.
         */
        bool removeIfcMechanicalSteelMaterialProperties(IfcMechanicalSteelMaterialProperties *arg);
        /**
         * Create an IfcMechanicalSteelMaterialProperties Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcMechanicalSteelMaterialProperties entity.
         */
        Step::RefPtr< IfcMechanicalSteelMaterialProperties > createIfcMechanicalSteelMaterialProperties(bool isVolatile = false);
        /**
         * Clone an IfcMechanicalSteelMaterialProperties Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcMechanicalSteelMaterialProperties Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcMechanicalSteelMaterialProperties *cloneIfcMechanicalSteelMaterialProperties(const IfcMechanicalSteelMaterialProperties &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcMechanicalSteelMaterialProperties Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcMechanicalSteelMaterialProperties entities.
         */
        Step::RefLinkedList< IfcMechanicalSteelMaterialProperties > &getAllIfcMechanicalSteelMaterialProperties();
        /**
         * Get the IfcMember entity by it's Id.
         * 
         * @param id The Id of the IfcMember.
         * @return A pointer to the IfcMember if found, NULL otherwise.
         */
        IfcMember *getIfcMember(Step::Id id);
        /**
         * Removes a IfcMember Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcMember to remove.
         * @return success.
         */
        bool removeIfcMember(IfcMember *arg);
        /**
         * Create an IfcMember Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcMember entity.
         */
        Step::RefPtr< IfcMember > createIfcMember(bool isVolatile = false);
        /**
         * Clone an IfcMember Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcMember Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcMember *cloneIfcMember(const IfcMember &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcMember Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcMember entities.
         */
        Step::RefLinkedList< IfcMember > &getAllIfcMember();
        /**
         * Get the IfcMemberType entity by it's Id.
         * 
         * @param id The Id of the IfcMemberType.
         * @return A pointer to the IfcMemberType if found, NULL otherwise.
         */
        IfcMemberType *getIfcMemberType(Step::Id id);
        /**
         * Removes a IfcMemberType Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcMemberType to remove.
         * @return success.
         */
        bool removeIfcMemberType(IfcMemberType *arg);
        /**
         * Create an IfcMemberType Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcMemberType entity.
         */
        Step::RefPtr< IfcMemberType > createIfcMemberType(bool isVolatile = false);
        /**
         * Clone an IfcMemberType Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcMemberType Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcMemberType *cloneIfcMemberType(const IfcMemberType &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcMemberType Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcMemberType entities.
         */
        Step::RefLinkedList< IfcMemberType > &getAllIfcMemberType();
        /**
         * Get the IfcMetric entity by it's Id.
         * 
         * @param id The Id of the IfcMetric.
         * @return A pointer to the IfcMetric if found, NULL otherwise.
         */
        IfcMetric *getIfcMetric(Step::Id id);
        /**
         * Removes a IfcMetric Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcMetric to remove.
         * @return success.
         */
        bool removeIfcMetric(IfcMetric *arg);
        /**
         * Create an IfcMetric Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcMetric entity.
         */
        Step::RefPtr< IfcMetric > createIfcMetric(bool isVolatile = false);
        /**
         * Clone an IfcMetric Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcMetric Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcMetric *cloneIfcMetric(const IfcMetric &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcMetric Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcMetric entities.
         */
        Step::RefLinkedList< IfcMetric > &getAllIfcMetric();
        /**
         * Get the IfcMonetaryUnit entity by it's Id.
         * 
         * @param id The Id of the IfcMonetaryUnit.
         * @return A pointer to the IfcMonetaryUnit if found, NULL otherwise.
         */
        IfcMonetaryUnit *getIfcMonetaryUnit(Step::Id id);
        /**
         * Removes a IfcMonetaryUnit Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcMonetaryUnit to remove.
         * @return success.
         */
        bool removeIfcMonetaryUnit(IfcMonetaryUnit *arg);
        /**
         * Create an IfcMonetaryUnit Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcMonetaryUnit entity.
         */
        Step::RefPtr< IfcMonetaryUnit > createIfcMonetaryUnit(bool isVolatile = false);
        /**
         * Clone an IfcMonetaryUnit Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcMonetaryUnit Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcMonetaryUnit *cloneIfcMonetaryUnit(const IfcMonetaryUnit &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcMonetaryUnit Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcMonetaryUnit entities.
         */
        Step::RefLinkedList< IfcMonetaryUnit > &getAllIfcMonetaryUnit();
        /**
         * Get the IfcMotorConnectionType entity by it's Id.
         * 
         * @param id The Id of the IfcMotorConnectionType.
         * @return A pointer to the IfcMotorConnectionType if found, NULL otherwise.
         */
        IfcMotorConnectionType *getIfcMotorConnectionType(Step::Id id);
        /**
         * Removes a IfcMotorConnectionType Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcMotorConnectionType to remove.
         * @return success.
         */
        bool removeIfcMotorConnectionType(IfcMotorConnectionType *arg);
        /**
         * Create an IfcMotorConnectionType Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcMotorConnectionType entity.
         */
        Step::RefPtr< IfcMotorConnectionType > createIfcMotorConnectionType(bool isVolatile = false);
        /**
         * Clone an IfcMotorConnectionType Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcMotorConnectionType Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcMotorConnectionType *cloneIfcMotorConnectionType(const IfcMotorConnectionType &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcMotorConnectionType Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcMotorConnectionType entities.
         */
        Step::RefLinkedList< IfcMotorConnectionType > &getAllIfcMotorConnectionType();
        /**
         * Get the IfcMove entity by it's Id.
         * 
         * @param id The Id of the IfcMove.
         * @return A pointer to the IfcMove if found, NULL otherwise.
         */
        IfcMove *getIfcMove(Step::Id id);
        /**
         * Removes a IfcMove Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcMove to remove.
         * @return success.
         */
        bool removeIfcMove(IfcMove *arg);
        /**
         * Create an IfcMove Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcMove entity.
         */
        Step::RefPtr< IfcMove > createIfcMove(bool isVolatile = false);
        /**
         * Clone an IfcMove Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcMove Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcMove *cloneIfcMove(const IfcMove &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcMove Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcMove entities.
         */
        Step::RefLinkedList< IfcMove > &getAllIfcMove();
        /**
         * Get the IfcNamedUnit entity by it's Id.
         * 
         * @param id The Id of the IfcNamedUnit.
         * @return A pointer to the IfcNamedUnit if found, NULL otherwise.
         */
        IfcNamedUnit *getIfcNamedUnit(Step::Id id);
        /**
         * Removes a IfcNamedUnit Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcNamedUnit to remove.
         * @return success.
         */
        bool removeIfcNamedUnit(IfcNamedUnit *arg);
        /**
         * Create an IfcNamedUnit Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcNamedUnit entity.
         */
        Step::RefPtr< IfcNamedUnit > createIfcNamedUnit(bool isVolatile = false);
        /**
         * Clone an IfcNamedUnit Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcNamedUnit Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcNamedUnit *cloneIfcNamedUnit(const IfcNamedUnit &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcNamedUnit Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcNamedUnit entities.
         */
        Step::RefLinkedList< IfcNamedUnit > &getAllIfcNamedUnit();
        /**
         * Get the IfcObject entity by it's Id.
         * 
         * @param id The Id of the IfcObject.
         * @return A pointer to the IfcObject if found, NULL otherwise.
         */
        IfcObject *getIfcObject(Step::Id id);
        /**
         * Removes a IfcObject Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcObject to remove.
         * @return success.
         */
        bool removeIfcObject(IfcObject *arg);
        /**
         * Create an IfcObject Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcObject entity.
         */
        Step::RefPtr< IfcObject > createIfcObject(bool isVolatile = false);
        /**
         * Clone an IfcObject Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcObject Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcObject *cloneIfcObject(const IfcObject &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcObject Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcObject entities.
         */
        Step::RefLinkedList< IfcObject > &getAllIfcObject();
        /**
         * Get the IfcObjectDefinition entity by it's Id.
         * 
         * @param id The Id of the IfcObjectDefinition.
         * @return A pointer to the IfcObjectDefinition if found, NULL otherwise.
         */
        IfcObjectDefinition *getIfcObjectDefinition(Step::Id id);
        /**
         * Removes a IfcObjectDefinition Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcObjectDefinition to remove.
         * @return success.
         */
        bool removeIfcObjectDefinition(IfcObjectDefinition *arg);
        /**
         * Create an IfcObjectDefinition Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcObjectDefinition entity.
         */
        Step::RefPtr< IfcObjectDefinition > createIfcObjectDefinition(bool isVolatile = false);
        /**
         * Clone an IfcObjectDefinition Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcObjectDefinition Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcObjectDefinition *cloneIfcObjectDefinition(const IfcObjectDefinition &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcObjectDefinition Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcObjectDefinition entities.
         */
        Step::RefLinkedList< IfcObjectDefinition > &getAllIfcObjectDefinition();
        /**
         * Get the IfcObjective entity by it's Id.
         * 
         * @param id The Id of the IfcObjective.
         * @return A pointer to the IfcObjective if found, NULL otherwise.
         */
        IfcObjective *getIfcObjective(Step::Id id);
        /**
         * Removes a IfcObjective Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcObjective to remove.
         * @return success.
         */
        bool removeIfcObjective(IfcObjective *arg);
        /**
         * Create an IfcObjective Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcObjective entity.
         */
        Step::RefPtr< IfcObjective > createIfcObjective(bool isVolatile = false);
        /**
         * Clone an IfcObjective Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcObjective Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcObjective *cloneIfcObjective(const IfcObjective &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcObjective Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcObjective entities.
         */
        Step::RefLinkedList< IfcObjective > &getAllIfcObjective();
        /**
         * Get the IfcObjectPlacement entity by it's Id.
         * 
         * @param id The Id of the IfcObjectPlacement.
         * @return A pointer to the IfcObjectPlacement if found, NULL otherwise.
         */
        IfcObjectPlacement *getIfcObjectPlacement(Step::Id id);
        /**
         * Removes a IfcObjectPlacement Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcObjectPlacement to remove.
         * @return success.
         */
        bool removeIfcObjectPlacement(IfcObjectPlacement *arg);
        /**
         * Create an IfcObjectPlacement Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcObjectPlacement entity.
         */
        Step::RefPtr< IfcObjectPlacement > createIfcObjectPlacement(bool isVolatile = false);
        /**
         * Clone an IfcObjectPlacement Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcObjectPlacement Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcObjectPlacement *cloneIfcObjectPlacement(const IfcObjectPlacement &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcObjectPlacement Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcObjectPlacement entities.
         */
        Step::RefLinkedList< IfcObjectPlacement > &getAllIfcObjectPlacement();
        /**
         * Get the IfcOccupant entity by it's Id.
         * 
         * @param id The Id of the IfcOccupant.
         * @return A pointer to the IfcOccupant if found, NULL otherwise.
         */
        IfcOccupant *getIfcOccupant(Step::Id id);
        /**
         * Removes a IfcOccupant Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcOccupant to remove.
         * @return success.
         */
        bool removeIfcOccupant(IfcOccupant *arg);
        /**
         * Create an IfcOccupant Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcOccupant entity.
         */
        Step::RefPtr< IfcOccupant > createIfcOccupant(bool isVolatile = false);
        /**
         * Clone an IfcOccupant Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcOccupant Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcOccupant *cloneIfcOccupant(const IfcOccupant &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcOccupant Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcOccupant entities.
         */
        Step::RefLinkedList< IfcOccupant > &getAllIfcOccupant();
        /**
         * Get the IfcOffsetCurve2D entity by it's Id.
         * 
         * @param id The Id of the IfcOffsetCurve2D.
         * @return A pointer to the IfcOffsetCurve2D if found, NULL otherwise.
         */
        IfcOffsetCurve2D *getIfcOffsetCurve2D(Step::Id id);
        /**
         * Removes a IfcOffsetCurve2D Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcOffsetCurve2D to remove.
         * @return success.
         */
        bool removeIfcOffsetCurve2D(IfcOffsetCurve2D *arg);
        /**
         * Create an IfcOffsetCurve2D Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcOffsetCurve2D entity.
         */
        Step::RefPtr< IfcOffsetCurve2D > createIfcOffsetCurve2D(bool isVolatile = false);
        /**
         * Clone an IfcOffsetCurve2D Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcOffsetCurve2D Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcOffsetCurve2D *cloneIfcOffsetCurve2D(const IfcOffsetCurve2D &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcOffsetCurve2D Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcOffsetCurve2D entities.
         */
        Step::RefLinkedList< IfcOffsetCurve2D > &getAllIfcOffsetCurve2D();
        /**
         * Get the IfcOffsetCurve3D entity by it's Id.
         * 
         * @param id The Id of the IfcOffsetCurve3D.
         * @return A pointer to the IfcOffsetCurve3D if found, NULL otherwise.
         */
        IfcOffsetCurve3D *getIfcOffsetCurve3D(Step::Id id);
        /**
         * Removes a IfcOffsetCurve3D Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcOffsetCurve3D to remove.
         * @return success.
         */
        bool removeIfcOffsetCurve3D(IfcOffsetCurve3D *arg);
        /**
         * Create an IfcOffsetCurve3D Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcOffsetCurve3D entity.
         */
        Step::RefPtr< IfcOffsetCurve3D > createIfcOffsetCurve3D(bool isVolatile = false);
        /**
         * Clone an IfcOffsetCurve3D Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcOffsetCurve3D Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcOffsetCurve3D *cloneIfcOffsetCurve3D(const IfcOffsetCurve3D &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcOffsetCurve3D Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcOffsetCurve3D entities.
         */
        Step::RefLinkedList< IfcOffsetCurve3D > &getAllIfcOffsetCurve3D();
        /**
         * Get the IfcOneDirectionRepeatFactor entity by it's Id.
         * 
         * @param id The Id of the IfcOneDirectionRepeatFactor.
         * @return A pointer to the IfcOneDirectionRepeatFactor if found, NULL otherwise.
         */
        IfcOneDirectionRepeatFactor *getIfcOneDirectionRepeatFactor(Step::Id id);
        /**
         * Removes a IfcOneDirectionRepeatFactor Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcOneDirectionRepeatFactor to remove.
         * @return success.
         */
        bool removeIfcOneDirectionRepeatFactor(IfcOneDirectionRepeatFactor *arg);
        /**
         * Create an IfcOneDirectionRepeatFactor Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcOneDirectionRepeatFactor entity.
         */
        Step::RefPtr< IfcOneDirectionRepeatFactor > createIfcOneDirectionRepeatFactor(bool isVolatile = false);
        /**
         * Clone an IfcOneDirectionRepeatFactor Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcOneDirectionRepeatFactor Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcOneDirectionRepeatFactor *cloneIfcOneDirectionRepeatFactor(const IfcOneDirectionRepeatFactor &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcOneDirectionRepeatFactor Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcOneDirectionRepeatFactor entities.
         */
        Step::RefLinkedList< IfcOneDirectionRepeatFactor > &getAllIfcOneDirectionRepeatFactor();
        /**
         * Get the IfcOpeningElement entity by it's Id.
         * 
         * @param id The Id of the IfcOpeningElement.
         * @return A pointer to the IfcOpeningElement if found, NULL otherwise.
         */
        IfcOpeningElement *getIfcOpeningElement(Step::Id id);
        /**
         * Removes a IfcOpeningElement Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcOpeningElement to remove.
         * @return success.
         */
        bool removeIfcOpeningElement(IfcOpeningElement *arg);
        /**
         * Create an IfcOpeningElement Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcOpeningElement entity.
         */
        Step::RefPtr< IfcOpeningElement > createIfcOpeningElement(bool isVolatile = false);
        /**
         * Clone an IfcOpeningElement Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcOpeningElement Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcOpeningElement *cloneIfcOpeningElement(const IfcOpeningElement &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcOpeningElement Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcOpeningElement entities.
         */
        Step::RefLinkedList< IfcOpeningElement > &getAllIfcOpeningElement();
        /**
         * Get the IfcOpenShell entity by it's Id.
         * 
         * @param id The Id of the IfcOpenShell.
         * @return A pointer to the IfcOpenShell if found, NULL otherwise.
         */
        IfcOpenShell *getIfcOpenShell(Step::Id id);
        /**
         * Removes a IfcOpenShell Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcOpenShell to remove.
         * @return success.
         */
        bool removeIfcOpenShell(IfcOpenShell *arg);
        /**
         * Create an IfcOpenShell Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcOpenShell entity.
         */
        Step::RefPtr< IfcOpenShell > createIfcOpenShell(bool isVolatile = false);
        /**
         * Clone an IfcOpenShell Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcOpenShell Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcOpenShell *cloneIfcOpenShell(const IfcOpenShell &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcOpenShell Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcOpenShell entities.
         */
        Step::RefLinkedList< IfcOpenShell > &getAllIfcOpenShell();
        /**
         * Get the IfcOpticalMaterialProperties entity by it's Id.
         * 
         * @param id The Id of the IfcOpticalMaterialProperties.
         * @return A pointer to the IfcOpticalMaterialProperties if found, NULL otherwise.
         */
        IfcOpticalMaterialProperties *getIfcOpticalMaterialProperties(Step::Id id);
        /**
         * Removes a IfcOpticalMaterialProperties Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcOpticalMaterialProperties to remove.
         * @return success.
         */
        bool removeIfcOpticalMaterialProperties(IfcOpticalMaterialProperties *arg);
        /**
         * Create an IfcOpticalMaterialProperties Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcOpticalMaterialProperties entity.
         */
        Step::RefPtr< IfcOpticalMaterialProperties > createIfcOpticalMaterialProperties(bool isVolatile = false);
        /**
         * Clone an IfcOpticalMaterialProperties Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcOpticalMaterialProperties Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcOpticalMaterialProperties *cloneIfcOpticalMaterialProperties(const IfcOpticalMaterialProperties &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcOpticalMaterialProperties Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcOpticalMaterialProperties entities.
         */
        Step::RefLinkedList< IfcOpticalMaterialProperties > &getAllIfcOpticalMaterialProperties();
        /**
         * Get the IfcOrderAction entity by it's Id.
         * 
         * @param id The Id of the IfcOrderAction.
         * @return A pointer to the IfcOrderAction if found, NULL otherwise.
         */
        IfcOrderAction *getIfcOrderAction(Step::Id id);
        /**
         * Removes a IfcOrderAction Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcOrderAction to remove.
         * @return success.
         */
        bool removeIfcOrderAction(IfcOrderAction *arg);
        /**
         * Create an IfcOrderAction Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcOrderAction entity.
         */
        Step::RefPtr< IfcOrderAction > createIfcOrderAction(bool isVolatile = false);
        /**
         * Clone an IfcOrderAction Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcOrderAction Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcOrderAction *cloneIfcOrderAction(const IfcOrderAction &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcOrderAction Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcOrderAction entities.
         */
        Step::RefLinkedList< IfcOrderAction > &getAllIfcOrderAction();
        /**
         * Get the IfcOrganization entity by it's Id.
         * 
         * @param id The Id of the IfcOrganization.
         * @return A pointer to the IfcOrganization if found, NULL otherwise.
         */
        IfcOrganization *getIfcOrganization(Step::Id id);
        /**
         * Removes a IfcOrganization Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcOrganization to remove.
         * @return success.
         */
        bool removeIfcOrganization(IfcOrganization *arg);
        /**
         * Create an IfcOrganization Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcOrganization entity.
         */
        Step::RefPtr< IfcOrganization > createIfcOrganization(bool isVolatile = false);
        /**
         * Clone an IfcOrganization Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcOrganization Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcOrganization *cloneIfcOrganization(const IfcOrganization &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcOrganization Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcOrganization entities.
         */
        Step::RefLinkedList< IfcOrganization > &getAllIfcOrganization();
        /**
         * Get the IfcOrganizationRelationship entity by it's Id.
         * 
         * @param id The Id of the IfcOrganizationRelationship.
         * @return A pointer to the IfcOrganizationRelationship if found, NULL otherwise.
         */
        IfcOrganizationRelationship *getIfcOrganizationRelationship(Step::Id id);
        /**
         * Removes a IfcOrganizationRelationship Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcOrganizationRelationship to remove.
         * @return success.
         */
        bool removeIfcOrganizationRelationship(IfcOrganizationRelationship *arg);
        /**
         * Create an IfcOrganizationRelationship Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcOrganizationRelationship entity.
         */
        Step::RefPtr< IfcOrganizationRelationship > createIfcOrganizationRelationship(bool isVolatile = false);
        /**
         * Clone an IfcOrganizationRelationship Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcOrganizationRelationship Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcOrganizationRelationship *cloneIfcOrganizationRelationship(const IfcOrganizationRelationship &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcOrganizationRelationship Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcOrganizationRelationship entities.
         */
        Step::RefLinkedList< IfcOrganizationRelationship > &getAllIfcOrganizationRelationship();
        /**
         * Get the IfcOrientedEdge entity by it's Id.
         * 
         * @param id The Id of the IfcOrientedEdge.
         * @return A pointer to the IfcOrientedEdge if found, NULL otherwise.
         */
        IfcOrientedEdge *getIfcOrientedEdge(Step::Id id);
        /**
         * Removes a IfcOrientedEdge Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcOrientedEdge to remove.
         * @return success.
         */
        bool removeIfcOrientedEdge(IfcOrientedEdge *arg);
        /**
         * Create an IfcOrientedEdge Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcOrientedEdge entity.
         */
        Step::RefPtr< IfcOrientedEdge > createIfcOrientedEdge(bool isVolatile = false);
        /**
         * Clone an IfcOrientedEdge Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcOrientedEdge Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcOrientedEdge *cloneIfcOrientedEdge(const IfcOrientedEdge &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcOrientedEdge Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcOrientedEdge entities.
         */
        Step::RefLinkedList< IfcOrientedEdge > &getAllIfcOrientedEdge();
        /**
         * Get the IfcOutletType entity by it's Id.
         * 
         * @param id The Id of the IfcOutletType.
         * @return A pointer to the IfcOutletType if found, NULL otherwise.
         */
        IfcOutletType *getIfcOutletType(Step::Id id);
        /**
         * Removes a IfcOutletType Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcOutletType to remove.
         * @return success.
         */
        bool removeIfcOutletType(IfcOutletType *arg);
        /**
         * Create an IfcOutletType Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcOutletType entity.
         */
        Step::RefPtr< IfcOutletType > createIfcOutletType(bool isVolatile = false);
        /**
         * Clone an IfcOutletType Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcOutletType Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcOutletType *cloneIfcOutletType(const IfcOutletType &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcOutletType Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcOutletType entities.
         */
        Step::RefLinkedList< IfcOutletType > &getAllIfcOutletType();
        /**
         * Get the IfcOwnerHistory entity by it's Id.
         * 
         * @param id The Id of the IfcOwnerHistory.
         * @return A pointer to the IfcOwnerHistory if found, NULL otherwise.
         */
        IfcOwnerHistory *getIfcOwnerHistory(Step::Id id);
        /**
         * Removes a IfcOwnerHistory Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcOwnerHistory to remove.
         * @return success.
         */
        bool removeIfcOwnerHistory(IfcOwnerHistory *arg);
        /**
         * Create an IfcOwnerHistory Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcOwnerHistory entity.
         */
        Step::RefPtr< IfcOwnerHistory > createIfcOwnerHistory(bool isVolatile = false);
        /**
         * Clone an IfcOwnerHistory Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcOwnerHistory Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcOwnerHistory *cloneIfcOwnerHistory(const IfcOwnerHistory &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcOwnerHistory Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcOwnerHistory entities.
         */
        Step::RefLinkedList< IfcOwnerHistory > &getAllIfcOwnerHistory();
        /**
         * Get the IfcParameterizedProfileDef entity by it's Id.
         * 
         * @param id The Id of the IfcParameterizedProfileDef.
         * @return A pointer to the IfcParameterizedProfileDef if found, NULL otherwise.
         */
        IfcParameterizedProfileDef *getIfcParameterizedProfileDef(Step::Id id);
        /**
         * Removes a IfcParameterizedProfileDef Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcParameterizedProfileDef to remove.
         * @return success.
         */
        bool removeIfcParameterizedProfileDef(IfcParameterizedProfileDef *arg);
        /**
         * Create an IfcParameterizedProfileDef Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcParameterizedProfileDef entity.
         */
        Step::RefPtr< IfcParameterizedProfileDef > createIfcParameterizedProfileDef(bool isVolatile = false);
        /**
         * Clone an IfcParameterizedProfileDef Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcParameterizedProfileDef Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcParameterizedProfileDef *cloneIfcParameterizedProfileDef(const IfcParameterizedProfileDef &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcParameterizedProfileDef Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcParameterizedProfileDef entities.
         */
        Step::RefLinkedList< IfcParameterizedProfileDef > &getAllIfcParameterizedProfileDef();
        /**
         * Get the IfcPath entity by it's Id.
         * 
         * @param id The Id of the IfcPath.
         * @return A pointer to the IfcPath if found, NULL otherwise.
         */
        IfcPath *getIfcPath(Step::Id id);
        /**
         * Removes a IfcPath Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcPath to remove.
         * @return success.
         */
        bool removeIfcPath(IfcPath *arg);
        /**
         * Create an IfcPath Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcPath entity.
         */
        Step::RefPtr< IfcPath > createIfcPath(bool isVolatile = false);
        /**
         * Clone an IfcPath Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcPath Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcPath *cloneIfcPath(const IfcPath &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcPath Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcPath entities.
         */
        Step::RefLinkedList< IfcPath > &getAllIfcPath();
        /**
         * Get the IfcPerformanceHistory entity by it's Id.
         * 
         * @param id The Id of the IfcPerformanceHistory.
         * @return A pointer to the IfcPerformanceHistory if found, NULL otherwise.
         */
        IfcPerformanceHistory *getIfcPerformanceHistory(Step::Id id);
        /**
         * Removes a IfcPerformanceHistory Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcPerformanceHistory to remove.
         * @return success.
         */
        bool removeIfcPerformanceHistory(IfcPerformanceHistory *arg);
        /**
         * Create an IfcPerformanceHistory Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcPerformanceHistory entity.
         */
        Step::RefPtr< IfcPerformanceHistory > createIfcPerformanceHistory(bool isVolatile = false);
        /**
         * Clone an IfcPerformanceHistory Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcPerformanceHistory Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcPerformanceHistory *cloneIfcPerformanceHistory(const IfcPerformanceHistory &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcPerformanceHistory Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcPerformanceHistory entities.
         */
        Step::RefLinkedList< IfcPerformanceHistory > &getAllIfcPerformanceHistory();
        /**
         * Get the IfcPermeableCoveringProperties entity by it's Id.
         * 
         * @param id The Id of the IfcPermeableCoveringProperties.
         * @return A pointer to the IfcPermeableCoveringProperties if found, NULL otherwise.
         */
        IfcPermeableCoveringProperties *getIfcPermeableCoveringProperties(Step::Id id);
        /**
         * Removes a IfcPermeableCoveringProperties Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcPermeableCoveringProperties to remove.
         * @return success.
         */
        bool removeIfcPermeableCoveringProperties(IfcPermeableCoveringProperties *arg);
        /**
         * Create an IfcPermeableCoveringProperties Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcPermeableCoveringProperties entity.
         */
        Step::RefPtr< IfcPermeableCoveringProperties > createIfcPermeableCoveringProperties(bool isVolatile = false);
        /**
         * Clone an IfcPermeableCoveringProperties Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcPermeableCoveringProperties Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcPermeableCoveringProperties *cloneIfcPermeableCoveringProperties(const IfcPermeableCoveringProperties &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcPermeableCoveringProperties Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcPermeableCoveringProperties entities.
         */
        Step::RefLinkedList< IfcPermeableCoveringProperties > &getAllIfcPermeableCoveringProperties();
        /**
         * Get the IfcPermit entity by it's Id.
         * 
         * @param id The Id of the IfcPermit.
         * @return A pointer to the IfcPermit if found, NULL otherwise.
         */
        IfcPermit *getIfcPermit(Step::Id id);
        /**
         * Removes a IfcPermit Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcPermit to remove.
         * @return success.
         */
        bool removeIfcPermit(IfcPermit *arg);
        /**
         * Create an IfcPermit Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcPermit entity.
         */
        Step::RefPtr< IfcPermit > createIfcPermit(bool isVolatile = false);
        /**
         * Clone an IfcPermit Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcPermit Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcPermit *cloneIfcPermit(const IfcPermit &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcPermit Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcPermit entities.
         */
        Step::RefLinkedList< IfcPermit > &getAllIfcPermit();
        /**
         * Get the IfcPerson entity by it's Id.
         * 
         * @param id The Id of the IfcPerson.
         * @return A pointer to the IfcPerson if found, NULL otherwise.
         */
        IfcPerson *getIfcPerson(Step::Id id);
        /**
         * Removes a IfcPerson Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcPerson to remove.
         * @return success.
         */
        bool removeIfcPerson(IfcPerson *arg);
        /**
         * Create an IfcPerson Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcPerson entity.
         */
        Step::RefPtr< IfcPerson > createIfcPerson(bool isVolatile = false);
        /**
         * Clone an IfcPerson Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcPerson Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcPerson *cloneIfcPerson(const IfcPerson &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcPerson Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcPerson entities.
         */
        Step::RefLinkedList< IfcPerson > &getAllIfcPerson();
        /**
         * Get the IfcPersonAndOrganization entity by it's Id.
         * 
         * @param id The Id of the IfcPersonAndOrganization.
         * @return A pointer to the IfcPersonAndOrganization if found, NULL otherwise.
         */
        IfcPersonAndOrganization *getIfcPersonAndOrganization(Step::Id id);
        /**
         * Removes a IfcPersonAndOrganization Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcPersonAndOrganization to remove.
         * @return success.
         */
        bool removeIfcPersonAndOrganization(IfcPersonAndOrganization *arg);
        /**
         * Create an IfcPersonAndOrganization Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcPersonAndOrganization entity.
         */
        Step::RefPtr< IfcPersonAndOrganization > createIfcPersonAndOrganization(bool isVolatile = false);
        /**
         * Clone an IfcPersonAndOrganization Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcPersonAndOrganization Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcPersonAndOrganization *cloneIfcPersonAndOrganization(const IfcPersonAndOrganization &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcPersonAndOrganization Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcPersonAndOrganization entities.
         */
        Step::RefLinkedList< IfcPersonAndOrganization > &getAllIfcPersonAndOrganization();
        /**
         * Get the IfcPhysicalComplexQuantity entity by it's Id.
         * 
         * @param id The Id of the IfcPhysicalComplexQuantity.
         * @return A pointer to the IfcPhysicalComplexQuantity if found, NULL otherwise.
         */
        IfcPhysicalComplexQuantity *getIfcPhysicalComplexQuantity(Step::Id id);
        /**
         * Removes a IfcPhysicalComplexQuantity Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcPhysicalComplexQuantity to remove.
         * @return success.
         */
        bool removeIfcPhysicalComplexQuantity(IfcPhysicalComplexQuantity *arg);
        /**
         * Create an IfcPhysicalComplexQuantity Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcPhysicalComplexQuantity entity.
         */
        Step::RefPtr< IfcPhysicalComplexQuantity > createIfcPhysicalComplexQuantity(bool isVolatile = false);
        /**
         * Clone an IfcPhysicalComplexQuantity Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcPhysicalComplexQuantity Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcPhysicalComplexQuantity *cloneIfcPhysicalComplexQuantity(const IfcPhysicalComplexQuantity &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcPhysicalComplexQuantity Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcPhysicalComplexQuantity entities.
         */
        Step::RefLinkedList< IfcPhysicalComplexQuantity > &getAllIfcPhysicalComplexQuantity();
        /**
         * Get the IfcPhysicalQuantity entity by it's Id.
         * 
         * @param id The Id of the IfcPhysicalQuantity.
         * @return A pointer to the IfcPhysicalQuantity if found, NULL otherwise.
         */
        IfcPhysicalQuantity *getIfcPhysicalQuantity(Step::Id id);
        /**
         * Removes a IfcPhysicalQuantity Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcPhysicalQuantity to remove.
         * @return success.
         */
        bool removeIfcPhysicalQuantity(IfcPhysicalQuantity *arg);
        /**
         * Create an IfcPhysicalQuantity Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcPhysicalQuantity entity.
         */
        Step::RefPtr< IfcPhysicalQuantity > createIfcPhysicalQuantity(bool isVolatile = false);
        /**
         * Clone an IfcPhysicalQuantity Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcPhysicalQuantity Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcPhysicalQuantity *cloneIfcPhysicalQuantity(const IfcPhysicalQuantity &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcPhysicalQuantity Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcPhysicalQuantity entities.
         */
        Step::RefLinkedList< IfcPhysicalQuantity > &getAllIfcPhysicalQuantity();
        /**
         * Get the IfcPhysicalSimpleQuantity entity by it's Id.
         * 
         * @param id The Id of the IfcPhysicalSimpleQuantity.
         * @return A pointer to the IfcPhysicalSimpleQuantity if found, NULL otherwise.
         */
        IfcPhysicalSimpleQuantity *getIfcPhysicalSimpleQuantity(Step::Id id);
        /**
         * Removes a IfcPhysicalSimpleQuantity Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcPhysicalSimpleQuantity to remove.
         * @return success.
         */
        bool removeIfcPhysicalSimpleQuantity(IfcPhysicalSimpleQuantity *arg);
        /**
         * Create an IfcPhysicalSimpleQuantity Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcPhysicalSimpleQuantity entity.
         */
        Step::RefPtr< IfcPhysicalSimpleQuantity > createIfcPhysicalSimpleQuantity(bool isVolatile = false);
        /**
         * Clone an IfcPhysicalSimpleQuantity Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcPhysicalSimpleQuantity Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcPhysicalSimpleQuantity *cloneIfcPhysicalSimpleQuantity(const IfcPhysicalSimpleQuantity &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcPhysicalSimpleQuantity Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcPhysicalSimpleQuantity entities.
         */
        Step::RefLinkedList< IfcPhysicalSimpleQuantity > &getAllIfcPhysicalSimpleQuantity();
        /**
         * Get the IfcPile entity by it's Id.
         * 
         * @param id The Id of the IfcPile.
         * @return A pointer to the IfcPile if found, NULL otherwise.
         */
        IfcPile *getIfcPile(Step::Id id);
        /**
         * Removes a IfcPile Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcPile to remove.
         * @return success.
         */
        bool removeIfcPile(IfcPile *arg);
        /**
         * Create an IfcPile Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcPile entity.
         */
        Step::RefPtr< IfcPile > createIfcPile(bool isVolatile = false);
        /**
         * Clone an IfcPile Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcPile Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcPile *cloneIfcPile(const IfcPile &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcPile Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcPile entities.
         */
        Step::RefLinkedList< IfcPile > &getAllIfcPile();
        /**
         * Get the IfcPipeFittingType entity by it's Id.
         * 
         * @param id The Id of the IfcPipeFittingType.
         * @return A pointer to the IfcPipeFittingType if found, NULL otherwise.
         */
        IfcPipeFittingType *getIfcPipeFittingType(Step::Id id);
        /**
         * Removes a IfcPipeFittingType Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcPipeFittingType to remove.
         * @return success.
         */
        bool removeIfcPipeFittingType(IfcPipeFittingType *arg);
        /**
         * Create an IfcPipeFittingType Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcPipeFittingType entity.
         */
        Step::RefPtr< IfcPipeFittingType > createIfcPipeFittingType(bool isVolatile = false);
        /**
         * Clone an IfcPipeFittingType Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcPipeFittingType Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcPipeFittingType *cloneIfcPipeFittingType(const IfcPipeFittingType &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcPipeFittingType Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcPipeFittingType entities.
         */
        Step::RefLinkedList< IfcPipeFittingType > &getAllIfcPipeFittingType();
        /**
         * Get the IfcPipeSegmentType entity by it's Id.
         * 
         * @param id The Id of the IfcPipeSegmentType.
         * @return A pointer to the IfcPipeSegmentType if found, NULL otherwise.
         */
        IfcPipeSegmentType *getIfcPipeSegmentType(Step::Id id);
        /**
         * Removes a IfcPipeSegmentType Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcPipeSegmentType to remove.
         * @return success.
         */
        bool removeIfcPipeSegmentType(IfcPipeSegmentType *arg);
        /**
         * Create an IfcPipeSegmentType Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcPipeSegmentType entity.
         */
        Step::RefPtr< IfcPipeSegmentType > createIfcPipeSegmentType(bool isVolatile = false);
        /**
         * Clone an IfcPipeSegmentType Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcPipeSegmentType Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcPipeSegmentType *cloneIfcPipeSegmentType(const IfcPipeSegmentType &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcPipeSegmentType Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcPipeSegmentType entities.
         */
        Step::RefLinkedList< IfcPipeSegmentType > &getAllIfcPipeSegmentType();
        /**
         * Get the IfcPixelTexture entity by it's Id.
         * 
         * @param id The Id of the IfcPixelTexture.
         * @return A pointer to the IfcPixelTexture if found, NULL otherwise.
         */
        IfcPixelTexture *getIfcPixelTexture(Step::Id id);
        /**
         * Removes a IfcPixelTexture Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcPixelTexture to remove.
         * @return success.
         */
        bool removeIfcPixelTexture(IfcPixelTexture *arg);
        /**
         * Create an IfcPixelTexture Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcPixelTexture entity.
         */
        Step::RefPtr< IfcPixelTexture > createIfcPixelTexture(bool isVolatile = false);
        /**
         * Clone an IfcPixelTexture Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcPixelTexture Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcPixelTexture *cloneIfcPixelTexture(const IfcPixelTexture &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcPixelTexture Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcPixelTexture entities.
         */
        Step::RefLinkedList< IfcPixelTexture > &getAllIfcPixelTexture();
        /**
         * Get the IfcPlacement entity by it's Id.
         * 
         * @param id The Id of the IfcPlacement.
         * @return A pointer to the IfcPlacement if found, NULL otherwise.
         */
        IfcPlacement *getIfcPlacement(Step::Id id);
        /**
         * Removes a IfcPlacement Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcPlacement to remove.
         * @return success.
         */
        bool removeIfcPlacement(IfcPlacement *arg);
        /**
         * Create an IfcPlacement Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcPlacement entity.
         */
        Step::RefPtr< IfcPlacement > createIfcPlacement(bool isVolatile = false);
        /**
         * Clone an IfcPlacement Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcPlacement Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcPlacement *cloneIfcPlacement(const IfcPlacement &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcPlacement Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcPlacement entities.
         */
        Step::RefLinkedList< IfcPlacement > &getAllIfcPlacement();
        /**
         * Get the IfcPlanarBox entity by it's Id.
         * 
         * @param id The Id of the IfcPlanarBox.
         * @return A pointer to the IfcPlanarBox if found, NULL otherwise.
         */
        IfcPlanarBox *getIfcPlanarBox(Step::Id id);
        /**
         * Removes a IfcPlanarBox Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcPlanarBox to remove.
         * @return success.
         */
        bool removeIfcPlanarBox(IfcPlanarBox *arg);
        /**
         * Create an IfcPlanarBox Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcPlanarBox entity.
         */
        Step::RefPtr< IfcPlanarBox > createIfcPlanarBox(bool isVolatile = false);
        /**
         * Clone an IfcPlanarBox Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcPlanarBox Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcPlanarBox *cloneIfcPlanarBox(const IfcPlanarBox &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcPlanarBox Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcPlanarBox entities.
         */
        Step::RefLinkedList< IfcPlanarBox > &getAllIfcPlanarBox();
        /**
         * Get the IfcPlanarExtent entity by it's Id.
         * 
         * @param id The Id of the IfcPlanarExtent.
         * @return A pointer to the IfcPlanarExtent if found, NULL otherwise.
         */
        IfcPlanarExtent *getIfcPlanarExtent(Step::Id id);
        /**
         * Removes a IfcPlanarExtent Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcPlanarExtent to remove.
         * @return success.
         */
        bool removeIfcPlanarExtent(IfcPlanarExtent *arg);
        /**
         * Create an IfcPlanarExtent Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcPlanarExtent entity.
         */
        Step::RefPtr< IfcPlanarExtent > createIfcPlanarExtent(bool isVolatile = false);
        /**
         * Clone an IfcPlanarExtent Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcPlanarExtent Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcPlanarExtent *cloneIfcPlanarExtent(const IfcPlanarExtent &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcPlanarExtent Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcPlanarExtent entities.
         */
        Step::RefLinkedList< IfcPlanarExtent > &getAllIfcPlanarExtent();
        /**
         * Get the IfcPlane entity by it's Id.
         * 
         * @param id The Id of the IfcPlane.
         * @return A pointer to the IfcPlane if found, NULL otherwise.
         */
        IfcPlane *getIfcPlane(Step::Id id);
        /**
         * Removes a IfcPlane Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcPlane to remove.
         * @return success.
         */
        bool removeIfcPlane(IfcPlane *arg);
        /**
         * Create an IfcPlane Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcPlane entity.
         */
        Step::RefPtr< IfcPlane > createIfcPlane(bool isVolatile = false);
        /**
         * Clone an IfcPlane Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcPlane Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcPlane *cloneIfcPlane(const IfcPlane &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcPlane Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcPlane entities.
         */
        Step::RefLinkedList< IfcPlane > &getAllIfcPlane();
        /**
         * Get the IfcPlate entity by it's Id.
         * 
         * @param id The Id of the IfcPlate.
         * @return A pointer to the IfcPlate if found, NULL otherwise.
         */
        IfcPlate *getIfcPlate(Step::Id id);
        /**
         * Removes a IfcPlate Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcPlate to remove.
         * @return success.
         */
        bool removeIfcPlate(IfcPlate *arg);
        /**
         * Create an IfcPlate Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcPlate entity.
         */
        Step::RefPtr< IfcPlate > createIfcPlate(bool isVolatile = false);
        /**
         * Clone an IfcPlate Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcPlate Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcPlate *cloneIfcPlate(const IfcPlate &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcPlate Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcPlate entities.
         */
        Step::RefLinkedList< IfcPlate > &getAllIfcPlate();
        /**
         * Get the IfcPlateType entity by it's Id.
         * 
         * @param id The Id of the IfcPlateType.
         * @return A pointer to the IfcPlateType if found, NULL otherwise.
         */
        IfcPlateType *getIfcPlateType(Step::Id id);
        /**
         * Removes a IfcPlateType Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcPlateType to remove.
         * @return success.
         */
        bool removeIfcPlateType(IfcPlateType *arg);
        /**
         * Create an IfcPlateType Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcPlateType entity.
         */
        Step::RefPtr< IfcPlateType > createIfcPlateType(bool isVolatile = false);
        /**
         * Clone an IfcPlateType Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcPlateType Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcPlateType *cloneIfcPlateType(const IfcPlateType &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcPlateType Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcPlateType entities.
         */
        Step::RefLinkedList< IfcPlateType > &getAllIfcPlateType();
        /**
         * Get the IfcPoint entity by it's Id.
         * 
         * @param id The Id of the IfcPoint.
         * @return A pointer to the IfcPoint if found, NULL otherwise.
         */
        IfcPoint *getIfcPoint(Step::Id id);
        /**
         * Removes a IfcPoint Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcPoint to remove.
         * @return success.
         */
        bool removeIfcPoint(IfcPoint *arg);
        /**
         * Create an IfcPoint Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcPoint entity.
         */
        Step::RefPtr< IfcPoint > createIfcPoint(bool isVolatile = false);
        /**
         * Clone an IfcPoint Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcPoint Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcPoint *cloneIfcPoint(const IfcPoint &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcPoint Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcPoint entities.
         */
        Step::RefLinkedList< IfcPoint > &getAllIfcPoint();
        /**
         * Get the IfcPointOnCurve entity by it's Id.
         * 
         * @param id The Id of the IfcPointOnCurve.
         * @return A pointer to the IfcPointOnCurve if found, NULL otherwise.
         */
        IfcPointOnCurve *getIfcPointOnCurve(Step::Id id);
        /**
         * Removes a IfcPointOnCurve Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcPointOnCurve to remove.
         * @return success.
         */
        bool removeIfcPointOnCurve(IfcPointOnCurve *arg);
        /**
         * Create an IfcPointOnCurve Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcPointOnCurve entity.
         */
        Step::RefPtr< IfcPointOnCurve > createIfcPointOnCurve(bool isVolatile = false);
        /**
         * Clone an IfcPointOnCurve Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcPointOnCurve Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcPointOnCurve *cloneIfcPointOnCurve(const IfcPointOnCurve &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcPointOnCurve Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcPointOnCurve entities.
         */
        Step::RefLinkedList< IfcPointOnCurve > &getAllIfcPointOnCurve();
        /**
         * Get the IfcPointOnSurface entity by it's Id.
         * 
         * @param id The Id of the IfcPointOnSurface.
         * @return A pointer to the IfcPointOnSurface if found, NULL otherwise.
         */
        IfcPointOnSurface *getIfcPointOnSurface(Step::Id id);
        /**
         * Removes a IfcPointOnSurface Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcPointOnSurface to remove.
         * @return success.
         */
        bool removeIfcPointOnSurface(IfcPointOnSurface *arg);
        /**
         * Create an IfcPointOnSurface Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcPointOnSurface entity.
         */
        Step::RefPtr< IfcPointOnSurface > createIfcPointOnSurface(bool isVolatile = false);
        /**
         * Clone an IfcPointOnSurface Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcPointOnSurface Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcPointOnSurface *cloneIfcPointOnSurface(const IfcPointOnSurface &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcPointOnSurface Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcPointOnSurface entities.
         */
        Step::RefLinkedList< IfcPointOnSurface > &getAllIfcPointOnSurface();
        /**
         * Get the IfcPolygonalBoundedHalfSpace entity by it's Id.
         * 
         * @param id The Id of the IfcPolygonalBoundedHalfSpace.
         * @return A pointer to the IfcPolygonalBoundedHalfSpace if found, NULL otherwise.
         */
        IfcPolygonalBoundedHalfSpace *getIfcPolygonalBoundedHalfSpace(Step::Id id);
        /**
         * Removes a IfcPolygonalBoundedHalfSpace Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcPolygonalBoundedHalfSpace to remove.
         * @return success.
         */
        bool removeIfcPolygonalBoundedHalfSpace(IfcPolygonalBoundedHalfSpace *arg);
        /**
         * Create an IfcPolygonalBoundedHalfSpace Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcPolygonalBoundedHalfSpace entity.
         */
        Step::RefPtr< IfcPolygonalBoundedHalfSpace > createIfcPolygonalBoundedHalfSpace(bool isVolatile = false);
        /**
         * Clone an IfcPolygonalBoundedHalfSpace Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcPolygonalBoundedHalfSpace Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcPolygonalBoundedHalfSpace *cloneIfcPolygonalBoundedHalfSpace(const IfcPolygonalBoundedHalfSpace &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcPolygonalBoundedHalfSpace Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcPolygonalBoundedHalfSpace entities.
         */
        Step::RefLinkedList< IfcPolygonalBoundedHalfSpace > &getAllIfcPolygonalBoundedHalfSpace();
        /**
         * Get the IfcPolyline entity by it's Id.
         * 
         * @param id The Id of the IfcPolyline.
         * @return A pointer to the IfcPolyline if found, NULL otherwise.
         */
        IfcPolyline *getIfcPolyline(Step::Id id);
        /**
         * Removes a IfcPolyline Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcPolyline to remove.
         * @return success.
         */
        bool removeIfcPolyline(IfcPolyline *arg);
        /**
         * Create an IfcPolyline Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcPolyline entity.
         */
        Step::RefPtr< IfcPolyline > createIfcPolyline(bool isVolatile = false);
        /**
         * Clone an IfcPolyline Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcPolyline Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcPolyline *cloneIfcPolyline(const IfcPolyline &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcPolyline Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcPolyline entities.
         */
        Step::RefLinkedList< IfcPolyline > &getAllIfcPolyline();
        /**
         * Get the IfcPolyLoop entity by it's Id.
         * 
         * @param id The Id of the IfcPolyLoop.
         * @return A pointer to the IfcPolyLoop if found, NULL otherwise.
         */
        IfcPolyLoop *getIfcPolyLoop(Step::Id id);
        /**
         * Removes a IfcPolyLoop Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcPolyLoop to remove.
         * @return success.
         */
        bool removeIfcPolyLoop(IfcPolyLoop *arg);
        /**
         * Create an IfcPolyLoop Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcPolyLoop entity.
         */
        Step::RefPtr< IfcPolyLoop > createIfcPolyLoop(bool isVolatile = false);
        /**
         * Clone an IfcPolyLoop Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcPolyLoop Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcPolyLoop *cloneIfcPolyLoop(const IfcPolyLoop &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcPolyLoop Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcPolyLoop entities.
         */
        Step::RefLinkedList< IfcPolyLoop > &getAllIfcPolyLoop();
        /**
         * Get the IfcPort entity by it's Id.
         * 
         * @param id The Id of the IfcPort.
         * @return A pointer to the IfcPort if found, NULL otherwise.
         */
        IfcPort *getIfcPort(Step::Id id);
        /**
         * Removes a IfcPort Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcPort to remove.
         * @return success.
         */
        bool removeIfcPort(IfcPort *arg);
        /**
         * Create an IfcPort Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcPort entity.
         */
        Step::RefPtr< IfcPort > createIfcPort(bool isVolatile = false);
        /**
         * Clone an IfcPort Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcPort Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcPort *cloneIfcPort(const IfcPort &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcPort Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcPort entities.
         */
        Step::RefLinkedList< IfcPort > &getAllIfcPort();
        /**
         * Get the IfcPostalAddress entity by it's Id.
         * 
         * @param id The Id of the IfcPostalAddress.
         * @return A pointer to the IfcPostalAddress if found, NULL otherwise.
         */
        IfcPostalAddress *getIfcPostalAddress(Step::Id id);
        /**
         * Removes a IfcPostalAddress Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcPostalAddress to remove.
         * @return success.
         */
        bool removeIfcPostalAddress(IfcPostalAddress *arg);
        /**
         * Create an IfcPostalAddress Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcPostalAddress entity.
         */
        Step::RefPtr< IfcPostalAddress > createIfcPostalAddress(bool isVolatile = false);
        /**
         * Clone an IfcPostalAddress Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcPostalAddress Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcPostalAddress *cloneIfcPostalAddress(const IfcPostalAddress &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcPostalAddress Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcPostalAddress entities.
         */
        Step::RefLinkedList< IfcPostalAddress > &getAllIfcPostalAddress();
        /**
         * Get the IfcPreDefinedColour entity by it's Id.
         * 
         * @param id The Id of the IfcPreDefinedColour.
         * @return A pointer to the IfcPreDefinedColour if found, NULL otherwise.
         */
        IfcPreDefinedColour *getIfcPreDefinedColour(Step::Id id);
        /**
         * Removes a IfcPreDefinedColour Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcPreDefinedColour to remove.
         * @return success.
         */
        bool removeIfcPreDefinedColour(IfcPreDefinedColour *arg);
        /**
         * Create an IfcPreDefinedColour Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcPreDefinedColour entity.
         */
        Step::RefPtr< IfcPreDefinedColour > createIfcPreDefinedColour(bool isVolatile = false);
        /**
         * Clone an IfcPreDefinedColour Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcPreDefinedColour Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcPreDefinedColour *cloneIfcPreDefinedColour(const IfcPreDefinedColour &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcPreDefinedColour Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcPreDefinedColour entities.
         */
        Step::RefLinkedList< IfcPreDefinedColour > &getAllIfcPreDefinedColour();
        /**
         * Get the IfcPreDefinedCurveFont entity by it's Id.
         * 
         * @param id The Id of the IfcPreDefinedCurveFont.
         * @return A pointer to the IfcPreDefinedCurveFont if found, NULL otherwise.
         */
        IfcPreDefinedCurveFont *getIfcPreDefinedCurveFont(Step::Id id);
        /**
         * Removes a IfcPreDefinedCurveFont Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcPreDefinedCurveFont to remove.
         * @return success.
         */
        bool removeIfcPreDefinedCurveFont(IfcPreDefinedCurveFont *arg);
        /**
         * Create an IfcPreDefinedCurveFont Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcPreDefinedCurveFont entity.
         */
        Step::RefPtr< IfcPreDefinedCurveFont > createIfcPreDefinedCurveFont(bool isVolatile = false);
        /**
         * Clone an IfcPreDefinedCurveFont Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcPreDefinedCurveFont Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcPreDefinedCurveFont *cloneIfcPreDefinedCurveFont(const IfcPreDefinedCurveFont &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcPreDefinedCurveFont Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcPreDefinedCurveFont entities.
         */
        Step::RefLinkedList< IfcPreDefinedCurveFont > &getAllIfcPreDefinedCurveFont();
        /**
         * Get the IfcPreDefinedDimensionSymbol entity by it's Id.
         * 
         * @param id The Id of the IfcPreDefinedDimensionSymbol.
         * @return A pointer to the IfcPreDefinedDimensionSymbol if found, NULL otherwise.
         */
        IfcPreDefinedDimensionSymbol *getIfcPreDefinedDimensionSymbol(Step::Id id);
        /**
         * Removes a IfcPreDefinedDimensionSymbol Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcPreDefinedDimensionSymbol to remove.
         * @return success.
         */
        bool removeIfcPreDefinedDimensionSymbol(IfcPreDefinedDimensionSymbol *arg);
        /**
         * Create an IfcPreDefinedDimensionSymbol Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcPreDefinedDimensionSymbol entity.
         */
        Step::RefPtr< IfcPreDefinedDimensionSymbol > createIfcPreDefinedDimensionSymbol(bool isVolatile = false);
        /**
         * Clone an IfcPreDefinedDimensionSymbol Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcPreDefinedDimensionSymbol Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcPreDefinedDimensionSymbol *cloneIfcPreDefinedDimensionSymbol(const IfcPreDefinedDimensionSymbol &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcPreDefinedDimensionSymbol Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcPreDefinedDimensionSymbol entities.
         */
        Step::RefLinkedList< IfcPreDefinedDimensionSymbol > &getAllIfcPreDefinedDimensionSymbol();
        /**
         * Get the IfcPreDefinedItem entity by it's Id.
         * 
         * @param id The Id of the IfcPreDefinedItem.
         * @return A pointer to the IfcPreDefinedItem if found, NULL otherwise.
         */
        IfcPreDefinedItem *getIfcPreDefinedItem(Step::Id id);
        /**
         * Removes a IfcPreDefinedItem Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcPreDefinedItem to remove.
         * @return success.
         */
        bool removeIfcPreDefinedItem(IfcPreDefinedItem *arg);
        /**
         * Create an IfcPreDefinedItem Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcPreDefinedItem entity.
         */
        Step::RefPtr< IfcPreDefinedItem > createIfcPreDefinedItem(bool isVolatile = false);
        /**
         * Clone an IfcPreDefinedItem Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcPreDefinedItem Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcPreDefinedItem *cloneIfcPreDefinedItem(const IfcPreDefinedItem &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcPreDefinedItem Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcPreDefinedItem entities.
         */
        Step::RefLinkedList< IfcPreDefinedItem > &getAllIfcPreDefinedItem();
        /**
         * Get the IfcPreDefinedPointMarkerSymbol entity by it's Id.
         * 
         * @param id The Id of the IfcPreDefinedPointMarkerSymbol.
         * @return A pointer to the IfcPreDefinedPointMarkerSymbol if found, NULL otherwise.
         */
        IfcPreDefinedPointMarkerSymbol *getIfcPreDefinedPointMarkerSymbol(Step::Id id);
        /**
         * Removes a IfcPreDefinedPointMarkerSymbol Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcPreDefinedPointMarkerSymbol to remove.
         * @return success.
         */
        bool removeIfcPreDefinedPointMarkerSymbol(IfcPreDefinedPointMarkerSymbol *arg);
        /**
         * Create an IfcPreDefinedPointMarkerSymbol Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcPreDefinedPointMarkerSymbol entity.
         */
        Step::RefPtr< IfcPreDefinedPointMarkerSymbol > createIfcPreDefinedPointMarkerSymbol(bool isVolatile = false);
        /**
         * Clone an IfcPreDefinedPointMarkerSymbol Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcPreDefinedPointMarkerSymbol Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcPreDefinedPointMarkerSymbol *cloneIfcPreDefinedPointMarkerSymbol(const IfcPreDefinedPointMarkerSymbol &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcPreDefinedPointMarkerSymbol Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcPreDefinedPointMarkerSymbol entities.
         */
        Step::RefLinkedList< IfcPreDefinedPointMarkerSymbol > &getAllIfcPreDefinedPointMarkerSymbol();
        /**
         * Get the IfcPreDefinedSymbol entity by it's Id.
         * 
         * @param id The Id of the IfcPreDefinedSymbol.
         * @return A pointer to the IfcPreDefinedSymbol if found, NULL otherwise.
         */
        IfcPreDefinedSymbol *getIfcPreDefinedSymbol(Step::Id id);
        /**
         * Removes a IfcPreDefinedSymbol Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcPreDefinedSymbol to remove.
         * @return success.
         */
        bool removeIfcPreDefinedSymbol(IfcPreDefinedSymbol *arg);
        /**
         * Create an IfcPreDefinedSymbol Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcPreDefinedSymbol entity.
         */
        Step::RefPtr< IfcPreDefinedSymbol > createIfcPreDefinedSymbol(bool isVolatile = false);
        /**
         * Clone an IfcPreDefinedSymbol Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcPreDefinedSymbol Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcPreDefinedSymbol *cloneIfcPreDefinedSymbol(const IfcPreDefinedSymbol &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcPreDefinedSymbol Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcPreDefinedSymbol entities.
         */
        Step::RefLinkedList< IfcPreDefinedSymbol > &getAllIfcPreDefinedSymbol();
        /**
         * Get the IfcPreDefinedTerminatorSymbol entity by it's Id.
         * 
         * @param id The Id of the IfcPreDefinedTerminatorSymbol.
         * @return A pointer to the IfcPreDefinedTerminatorSymbol if found, NULL otherwise.
         */
        IfcPreDefinedTerminatorSymbol *getIfcPreDefinedTerminatorSymbol(Step::Id id);
        /**
         * Removes a IfcPreDefinedTerminatorSymbol Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcPreDefinedTerminatorSymbol to remove.
         * @return success.
         */
        bool removeIfcPreDefinedTerminatorSymbol(IfcPreDefinedTerminatorSymbol *arg);
        /**
         * Create an IfcPreDefinedTerminatorSymbol Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcPreDefinedTerminatorSymbol entity.
         */
        Step::RefPtr< IfcPreDefinedTerminatorSymbol > createIfcPreDefinedTerminatorSymbol(bool isVolatile = false);
        /**
         * Clone an IfcPreDefinedTerminatorSymbol Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcPreDefinedTerminatorSymbol Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcPreDefinedTerminatorSymbol *cloneIfcPreDefinedTerminatorSymbol(const IfcPreDefinedTerminatorSymbol &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcPreDefinedTerminatorSymbol Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcPreDefinedTerminatorSymbol entities.
         */
        Step::RefLinkedList< IfcPreDefinedTerminatorSymbol > &getAllIfcPreDefinedTerminatorSymbol();
        /**
         * Get the IfcPreDefinedTextFont entity by it's Id.
         * 
         * @param id The Id of the IfcPreDefinedTextFont.
         * @return A pointer to the IfcPreDefinedTextFont if found, NULL otherwise.
         */
        IfcPreDefinedTextFont *getIfcPreDefinedTextFont(Step::Id id);
        /**
         * Removes a IfcPreDefinedTextFont Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcPreDefinedTextFont to remove.
         * @return success.
         */
        bool removeIfcPreDefinedTextFont(IfcPreDefinedTextFont *arg);
        /**
         * Create an IfcPreDefinedTextFont Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcPreDefinedTextFont entity.
         */
        Step::RefPtr< IfcPreDefinedTextFont > createIfcPreDefinedTextFont(bool isVolatile = false);
        /**
         * Clone an IfcPreDefinedTextFont Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcPreDefinedTextFont Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcPreDefinedTextFont *cloneIfcPreDefinedTextFont(const IfcPreDefinedTextFont &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcPreDefinedTextFont Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcPreDefinedTextFont entities.
         */
        Step::RefLinkedList< IfcPreDefinedTextFont > &getAllIfcPreDefinedTextFont();
        /**
         * Get the IfcPresentationLayerAssignment entity by it's Id.
         * 
         * @param id The Id of the IfcPresentationLayerAssignment.
         * @return A pointer to the IfcPresentationLayerAssignment if found, NULL otherwise.
         */
        IfcPresentationLayerAssignment *getIfcPresentationLayerAssignment(Step::Id id);
        /**
         * Removes a IfcPresentationLayerAssignment Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcPresentationLayerAssignment to remove.
         * @return success.
         */
        bool removeIfcPresentationLayerAssignment(IfcPresentationLayerAssignment *arg);
        /**
         * Create an IfcPresentationLayerAssignment Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcPresentationLayerAssignment entity.
         */
        Step::RefPtr< IfcPresentationLayerAssignment > createIfcPresentationLayerAssignment(bool isVolatile = false);
        /**
         * Clone an IfcPresentationLayerAssignment Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcPresentationLayerAssignment Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcPresentationLayerAssignment *cloneIfcPresentationLayerAssignment(const IfcPresentationLayerAssignment &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcPresentationLayerAssignment Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcPresentationLayerAssignment entities.
         */
        Step::RefLinkedList< IfcPresentationLayerAssignment > &getAllIfcPresentationLayerAssignment();
        /**
         * Get the IfcPresentationLayerWithStyle entity by it's Id.
         * 
         * @param id The Id of the IfcPresentationLayerWithStyle.
         * @return A pointer to the IfcPresentationLayerWithStyle if found, NULL otherwise.
         */
        IfcPresentationLayerWithStyle *getIfcPresentationLayerWithStyle(Step::Id id);
        /**
         * Removes a IfcPresentationLayerWithStyle Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcPresentationLayerWithStyle to remove.
         * @return success.
         */
        bool removeIfcPresentationLayerWithStyle(IfcPresentationLayerWithStyle *arg);
        /**
         * Create an IfcPresentationLayerWithStyle Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcPresentationLayerWithStyle entity.
         */
        Step::RefPtr< IfcPresentationLayerWithStyle > createIfcPresentationLayerWithStyle(bool isVolatile = false);
        /**
         * Clone an IfcPresentationLayerWithStyle Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcPresentationLayerWithStyle Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcPresentationLayerWithStyle *cloneIfcPresentationLayerWithStyle(const IfcPresentationLayerWithStyle &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcPresentationLayerWithStyle Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcPresentationLayerWithStyle entities.
         */
        Step::RefLinkedList< IfcPresentationLayerWithStyle > &getAllIfcPresentationLayerWithStyle();
        /**
         * Get the IfcPresentationStyle entity by it's Id.
         * 
         * @param id The Id of the IfcPresentationStyle.
         * @return A pointer to the IfcPresentationStyle if found, NULL otherwise.
         */
        IfcPresentationStyle *getIfcPresentationStyle(Step::Id id);
        /**
         * Removes a IfcPresentationStyle Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcPresentationStyle to remove.
         * @return success.
         */
        bool removeIfcPresentationStyle(IfcPresentationStyle *arg);
        /**
         * Create an IfcPresentationStyle Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcPresentationStyle entity.
         */
        Step::RefPtr< IfcPresentationStyle > createIfcPresentationStyle(bool isVolatile = false);
        /**
         * Clone an IfcPresentationStyle Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcPresentationStyle Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcPresentationStyle *cloneIfcPresentationStyle(const IfcPresentationStyle &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcPresentationStyle Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcPresentationStyle entities.
         */
        Step::RefLinkedList< IfcPresentationStyle > &getAllIfcPresentationStyle();
        /**
         * Get the IfcPresentationStyleAssignment entity by it's Id.
         * 
         * @param id The Id of the IfcPresentationStyleAssignment.
         * @return A pointer to the IfcPresentationStyleAssignment if found, NULL otherwise.
         */
        IfcPresentationStyleAssignment *getIfcPresentationStyleAssignment(Step::Id id);
        /**
         * Removes a IfcPresentationStyleAssignment Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcPresentationStyleAssignment to remove.
         * @return success.
         */
        bool removeIfcPresentationStyleAssignment(IfcPresentationStyleAssignment *arg);
        /**
         * Create an IfcPresentationStyleAssignment Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcPresentationStyleAssignment entity.
         */
        Step::RefPtr< IfcPresentationStyleAssignment > createIfcPresentationStyleAssignment(bool isVolatile = false);
        /**
         * Clone an IfcPresentationStyleAssignment Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcPresentationStyleAssignment Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcPresentationStyleAssignment *cloneIfcPresentationStyleAssignment(const IfcPresentationStyleAssignment &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcPresentationStyleAssignment Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcPresentationStyleAssignment entities.
         */
        Step::RefLinkedList< IfcPresentationStyleAssignment > &getAllIfcPresentationStyleAssignment();
        /**
         * Get the IfcProcedure entity by it's Id.
         * 
         * @param id The Id of the IfcProcedure.
         * @return A pointer to the IfcProcedure if found, NULL otherwise.
         */
        IfcProcedure *getIfcProcedure(Step::Id id);
        /**
         * Removes a IfcProcedure Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcProcedure to remove.
         * @return success.
         */
        bool removeIfcProcedure(IfcProcedure *arg);
        /**
         * Create an IfcProcedure Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcProcedure entity.
         */
        Step::RefPtr< IfcProcedure > createIfcProcedure(bool isVolatile = false);
        /**
         * Clone an IfcProcedure Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcProcedure Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcProcedure *cloneIfcProcedure(const IfcProcedure &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcProcedure Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcProcedure entities.
         */
        Step::RefLinkedList< IfcProcedure > &getAllIfcProcedure();
        /**
         * Get the IfcProcess entity by it's Id.
         * 
         * @param id The Id of the IfcProcess.
         * @return A pointer to the IfcProcess if found, NULL otherwise.
         */
        IfcProcess *getIfcProcess(Step::Id id);
        /**
         * Removes a IfcProcess Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcProcess to remove.
         * @return success.
         */
        bool removeIfcProcess(IfcProcess *arg);
        /**
         * Create an IfcProcess Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcProcess entity.
         */
        Step::RefPtr< IfcProcess > createIfcProcess(bool isVolatile = false);
        /**
         * Clone an IfcProcess Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcProcess Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcProcess *cloneIfcProcess(const IfcProcess &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcProcess Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcProcess entities.
         */
        Step::RefLinkedList< IfcProcess > &getAllIfcProcess();
        /**
         * Get the IfcProduct entity by it's Id.
         * 
         * @param id The Id of the IfcProduct.
         * @return A pointer to the IfcProduct if found, NULL otherwise.
         */
        IfcProduct *getIfcProduct(Step::Id id);
        /**
         * Removes a IfcProduct Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcProduct to remove.
         * @return success.
         */
        bool removeIfcProduct(IfcProduct *arg);
        /**
         * Create an IfcProduct Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcProduct entity.
         */
        Step::RefPtr< IfcProduct > createIfcProduct(bool isVolatile = false);
        /**
         * Clone an IfcProduct Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcProduct Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcProduct *cloneIfcProduct(const IfcProduct &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcProduct Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcProduct entities.
         */
        Step::RefLinkedList< IfcProduct > &getAllIfcProduct();
        /**
         * Get the IfcProductDefinitionShape entity by it's Id.
         * 
         * @param id The Id of the IfcProductDefinitionShape.
         * @return A pointer to the IfcProductDefinitionShape if found, NULL otherwise.
         */
        IfcProductDefinitionShape *getIfcProductDefinitionShape(Step::Id id);
        /**
         * Removes a IfcProductDefinitionShape Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcProductDefinitionShape to remove.
         * @return success.
         */
        bool removeIfcProductDefinitionShape(IfcProductDefinitionShape *arg);
        /**
         * Create an IfcProductDefinitionShape Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcProductDefinitionShape entity.
         */
        Step::RefPtr< IfcProductDefinitionShape > createIfcProductDefinitionShape(bool isVolatile = false);
        /**
         * Clone an IfcProductDefinitionShape Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcProductDefinitionShape Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcProductDefinitionShape *cloneIfcProductDefinitionShape(const IfcProductDefinitionShape &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcProductDefinitionShape Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcProductDefinitionShape entities.
         */
        Step::RefLinkedList< IfcProductDefinitionShape > &getAllIfcProductDefinitionShape();
        /**
         * Get the IfcProductRepresentation entity by it's Id.
         * 
         * @param id The Id of the IfcProductRepresentation.
         * @return A pointer to the IfcProductRepresentation if found, NULL otherwise.
         */
        IfcProductRepresentation *getIfcProductRepresentation(Step::Id id);
        /**
         * Removes a IfcProductRepresentation Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcProductRepresentation to remove.
         * @return success.
         */
        bool removeIfcProductRepresentation(IfcProductRepresentation *arg);
        /**
         * Create an IfcProductRepresentation Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcProductRepresentation entity.
         */
        Step::RefPtr< IfcProductRepresentation > createIfcProductRepresentation(bool isVolatile = false);
        /**
         * Clone an IfcProductRepresentation Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcProductRepresentation Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcProductRepresentation *cloneIfcProductRepresentation(const IfcProductRepresentation &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcProductRepresentation Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcProductRepresentation entities.
         */
        Step::RefLinkedList< IfcProductRepresentation > &getAllIfcProductRepresentation();
        /**
         * Get the IfcProductsOfCombustionProperties entity by it's Id.
         * 
         * @param id The Id of the IfcProductsOfCombustionProperties.
         * @return A pointer to the IfcProductsOfCombustionProperties if found, NULL otherwise.
         */
        IfcProductsOfCombustionProperties *getIfcProductsOfCombustionProperties(Step::Id id);
        /**
         * Removes a IfcProductsOfCombustionProperties Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcProductsOfCombustionProperties to remove.
         * @return success.
         */
        bool removeIfcProductsOfCombustionProperties(IfcProductsOfCombustionProperties *arg);
        /**
         * Create an IfcProductsOfCombustionProperties Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcProductsOfCombustionProperties entity.
         */
        Step::RefPtr< IfcProductsOfCombustionProperties > createIfcProductsOfCombustionProperties(bool isVolatile = false);
        /**
         * Clone an IfcProductsOfCombustionProperties Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcProductsOfCombustionProperties Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcProductsOfCombustionProperties *cloneIfcProductsOfCombustionProperties(const IfcProductsOfCombustionProperties &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcProductsOfCombustionProperties Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcProductsOfCombustionProperties entities.
         */
        Step::RefLinkedList< IfcProductsOfCombustionProperties > &getAllIfcProductsOfCombustionProperties();
        /**
         * Get the IfcProfileDef entity by it's Id.
         * 
         * @param id The Id of the IfcProfileDef.
         * @return A pointer to the IfcProfileDef if found, NULL otherwise.
         */
        IfcProfileDef *getIfcProfileDef(Step::Id id);
        /**
         * Removes a IfcProfileDef Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcProfileDef to remove.
         * @return success.
         */
        bool removeIfcProfileDef(IfcProfileDef *arg);
        /**
         * Create an IfcProfileDef Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcProfileDef entity.
         */
        Step::RefPtr< IfcProfileDef > createIfcProfileDef(bool isVolatile = false);
        /**
         * Clone an IfcProfileDef Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcProfileDef Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcProfileDef *cloneIfcProfileDef(const IfcProfileDef &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcProfileDef Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcProfileDef entities.
         */
        Step::RefLinkedList< IfcProfileDef > &getAllIfcProfileDef();
        /**
         * Get the IfcProfileProperties entity by it's Id.
         * 
         * @param id The Id of the IfcProfileProperties.
         * @return A pointer to the IfcProfileProperties if found, NULL otherwise.
         */
        IfcProfileProperties *getIfcProfileProperties(Step::Id id);
        /**
         * Removes a IfcProfileProperties Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcProfileProperties to remove.
         * @return success.
         */
        bool removeIfcProfileProperties(IfcProfileProperties *arg);
        /**
         * Create an IfcProfileProperties Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcProfileProperties entity.
         */
        Step::RefPtr< IfcProfileProperties > createIfcProfileProperties(bool isVolatile = false);
        /**
         * Clone an IfcProfileProperties Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcProfileProperties Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcProfileProperties *cloneIfcProfileProperties(const IfcProfileProperties &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcProfileProperties Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcProfileProperties entities.
         */
        Step::RefLinkedList< IfcProfileProperties > &getAllIfcProfileProperties();
        /**
         * Get the IfcProject entity by it's Id.
         * 
         * @param id The Id of the IfcProject.
         * @return A pointer to the IfcProject if found, NULL otherwise.
         */
        IfcProject *getIfcProject(Step::Id id);
        /**
         * Removes a IfcProject Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcProject to remove.
         * @return success.
         */
        bool removeIfcProject(IfcProject *arg);
        /**
         * Create an IfcProject Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcProject entity.
         */
        Step::RefPtr< IfcProject > createIfcProject(bool isVolatile = false);
        /**
         * Clone an IfcProject Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcProject Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcProject *cloneIfcProject(const IfcProject &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcProject Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcProject entities.
         */
        Step::RefLinkedList< IfcProject > &getAllIfcProject();
        /**
         * Get the IfcProjectionCurve entity by it's Id.
         * 
         * @param id The Id of the IfcProjectionCurve.
         * @return A pointer to the IfcProjectionCurve if found, NULL otherwise.
         */
        IfcProjectionCurve *getIfcProjectionCurve(Step::Id id);
        /**
         * Removes a IfcProjectionCurve Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcProjectionCurve to remove.
         * @return success.
         */
        bool removeIfcProjectionCurve(IfcProjectionCurve *arg);
        /**
         * Create an IfcProjectionCurve Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcProjectionCurve entity.
         */
        Step::RefPtr< IfcProjectionCurve > createIfcProjectionCurve(bool isVolatile = false);
        /**
         * Clone an IfcProjectionCurve Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcProjectionCurve Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcProjectionCurve *cloneIfcProjectionCurve(const IfcProjectionCurve &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcProjectionCurve Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcProjectionCurve entities.
         */
        Step::RefLinkedList< IfcProjectionCurve > &getAllIfcProjectionCurve();
        /**
         * Get the IfcProjectionElement entity by it's Id.
         * 
         * @param id The Id of the IfcProjectionElement.
         * @return A pointer to the IfcProjectionElement if found, NULL otherwise.
         */
        IfcProjectionElement *getIfcProjectionElement(Step::Id id);
        /**
         * Removes a IfcProjectionElement Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcProjectionElement to remove.
         * @return success.
         */
        bool removeIfcProjectionElement(IfcProjectionElement *arg);
        /**
         * Create an IfcProjectionElement Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcProjectionElement entity.
         */
        Step::RefPtr< IfcProjectionElement > createIfcProjectionElement(bool isVolatile = false);
        /**
         * Clone an IfcProjectionElement Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcProjectionElement Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcProjectionElement *cloneIfcProjectionElement(const IfcProjectionElement &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcProjectionElement Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcProjectionElement entities.
         */
        Step::RefLinkedList< IfcProjectionElement > &getAllIfcProjectionElement();
        /**
         * Get the IfcProjectOrder entity by it's Id.
         * 
         * @param id The Id of the IfcProjectOrder.
         * @return A pointer to the IfcProjectOrder if found, NULL otherwise.
         */
        IfcProjectOrder *getIfcProjectOrder(Step::Id id);
        /**
         * Removes a IfcProjectOrder Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcProjectOrder to remove.
         * @return success.
         */
        bool removeIfcProjectOrder(IfcProjectOrder *arg);
        /**
         * Create an IfcProjectOrder Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcProjectOrder entity.
         */
        Step::RefPtr< IfcProjectOrder > createIfcProjectOrder(bool isVolatile = false);
        /**
         * Clone an IfcProjectOrder Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcProjectOrder Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcProjectOrder *cloneIfcProjectOrder(const IfcProjectOrder &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcProjectOrder Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcProjectOrder entities.
         */
        Step::RefLinkedList< IfcProjectOrder > &getAllIfcProjectOrder();
        /**
         * Get the IfcProjectOrderRecord entity by it's Id.
         * 
         * @param id The Id of the IfcProjectOrderRecord.
         * @return A pointer to the IfcProjectOrderRecord if found, NULL otherwise.
         */
        IfcProjectOrderRecord *getIfcProjectOrderRecord(Step::Id id);
        /**
         * Removes a IfcProjectOrderRecord Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcProjectOrderRecord to remove.
         * @return success.
         */
        bool removeIfcProjectOrderRecord(IfcProjectOrderRecord *arg);
        /**
         * Create an IfcProjectOrderRecord Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcProjectOrderRecord entity.
         */
        Step::RefPtr< IfcProjectOrderRecord > createIfcProjectOrderRecord(bool isVolatile = false);
        /**
         * Clone an IfcProjectOrderRecord Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcProjectOrderRecord Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcProjectOrderRecord *cloneIfcProjectOrderRecord(const IfcProjectOrderRecord &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcProjectOrderRecord Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcProjectOrderRecord entities.
         */
        Step::RefLinkedList< IfcProjectOrderRecord > &getAllIfcProjectOrderRecord();
        /**
         * Get the IfcProperty entity by it's Id.
         * 
         * @param id The Id of the IfcProperty.
         * @return A pointer to the IfcProperty if found, NULL otherwise.
         */
        IfcProperty *getIfcProperty(Step::Id id);
        /**
         * Removes a IfcProperty Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcProperty to remove.
         * @return success.
         */
        bool removeIfcProperty(IfcProperty *arg);
        /**
         * Create an IfcProperty Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcProperty entity.
         */
        Step::RefPtr< IfcProperty > createIfcProperty(bool isVolatile = false);
        /**
         * Clone an IfcProperty Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcProperty Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcProperty *cloneIfcProperty(const IfcProperty &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcProperty Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcProperty entities.
         */
        Step::RefLinkedList< IfcProperty > &getAllIfcProperty();
        /**
         * Get the IfcPropertyBoundedValue entity by it's Id.
         * 
         * @param id The Id of the IfcPropertyBoundedValue.
         * @return A pointer to the IfcPropertyBoundedValue if found, NULL otherwise.
         */
        IfcPropertyBoundedValue *getIfcPropertyBoundedValue(Step::Id id);
        /**
         * Removes a IfcPropertyBoundedValue Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcPropertyBoundedValue to remove.
         * @return success.
         */
        bool removeIfcPropertyBoundedValue(IfcPropertyBoundedValue *arg);
        /**
         * Create an IfcPropertyBoundedValue Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcPropertyBoundedValue entity.
         */
        Step::RefPtr< IfcPropertyBoundedValue > createIfcPropertyBoundedValue(bool isVolatile = false);
        /**
         * Clone an IfcPropertyBoundedValue Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcPropertyBoundedValue Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcPropertyBoundedValue *cloneIfcPropertyBoundedValue(const IfcPropertyBoundedValue &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcPropertyBoundedValue Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcPropertyBoundedValue entities.
         */
        Step::RefLinkedList< IfcPropertyBoundedValue > &getAllIfcPropertyBoundedValue();
        /**
         * Get the IfcPropertyConstraintRelationship entity by it's Id.
         * 
         * @param id The Id of the IfcPropertyConstraintRelationship.
         * @return A pointer to the IfcPropertyConstraintRelationship if found, NULL otherwise.
         */
        IfcPropertyConstraintRelationship *getIfcPropertyConstraintRelationship(Step::Id id);
        /**
         * Removes a IfcPropertyConstraintRelationship Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcPropertyConstraintRelationship to remove.
         * @return success.
         */
        bool removeIfcPropertyConstraintRelationship(IfcPropertyConstraintRelationship *arg);
        /**
         * Create an IfcPropertyConstraintRelationship Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcPropertyConstraintRelationship entity.
         */
        Step::RefPtr< IfcPropertyConstraintRelationship > createIfcPropertyConstraintRelationship(bool isVolatile = false);
        /**
         * Clone an IfcPropertyConstraintRelationship Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcPropertyConstraintRelationship Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcPropertyConstraintRelationship *cloneIfcPropertyConstraintRelationship(const IfcPropertyConstraintRelationship &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcPropertyConstraintRelationship Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcPropertyConstraintRelationship entities.
         */
        Step::RefLinkedList< IfcPropertyConstraintRelationship > &getAllIfcPropertyConstraintRelationship();
        /**
         * Get the IfcPropertyDefinition entity by it's Id.
         * 
         * @param id The Id of the IfcPropertyDefinition.
         * @return A pointer to the IfcPropertyDefinition if found, NULL otherwise.
         */
        IfcPropertyDefinition *getIfcPropertyDefinition(Step::Id id);
        /**
         * Removes a IfcPropertyDefinition Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcPropertyDefinition to remove.
         * @return success.
         */
        bool removeIfcPropertyDefinition(IfcPropertyDefinition *arg);
        /**
         * Create an IfcPropertyDefinition Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcPropertyDefinition entity.
         */
        Step::RefPtr< IfcPropertyDefinition > createIfcPropertyDefinition(bool isVolatile = false);
        /**
         * Clone an IfcPropertyDefinition Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcPropertyDefinition Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcPropertyDefinition *cloneIfcPropertyDefinition(const IfcPropertyDefinition &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcPropertyDefinition Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcPropertyDefinition entities.
         */
        Step::RefLinkedList< IfcPropertyDefinition > &getAllIfcPropertyDefinition();
        /**
         * Get the IfcPropertyDependencyRelationship entity by it's Id.
         * 
         * @param id The Id of the IfcPropertyDependencyRelationship.
         * @return A pointer to the IfcPropertyDependencyRelationship if found, NULL otherwise.
         */
        IfcPropertyDependencyRelationship *getIfcPropertyDependencyRelationship(Step::Id id);
        /**
         * Removes a IfcPropertyDependencyRelationship Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcPropertyDependencyRelationship to remove.
         * @return success.
         */
        bool removeIfcPropertyDependencyRelationship(IfcPropertyDependencyRelationship *arg);
        /**
         * Create an IfcPropertyDependencyRelationship Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcPropertyDependencyRelationship entity.
         */
        Step::RefPtr< IfcPropertyDependencyRelationship > createIfcPropertyDependencyRelationship(bool isVolatile = false);
        /**
         * Clone an IfcPropertyDependencyRelationship Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcPropertyDependencyRelationship Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcPropertyDependencyRelationship *cloneIfcPropertyDependencyRelationship(const IfcPropertyDependencyRelationship &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcPropertyDependencyRelationship Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcPropertyDependencyRelationship entities.
         */
        Step::RefLinkedList< IfcPropertyDependencyRelationship > &getAllIfcPropertyDependencyRelationship();
        /**
         * Get the IfcPropertyEnumeratedValue entity by it's Id.
         * 
         * @param id The Id of the IfcPropertyEnumeratedValue.
         * @return A pointer to the IfcPropertyEnumeratedValue if found, NULL otherwise.
         */
        IfcPropertyEnumeratedValue *getIfcPropertyEnumeratedValue(Step::Id id);
        /**
         * Removes a IfcPropertyEnumeratedValue Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcPropertyEnumeratedValue to remove.
         * @return success.
         */
        bool removeIfcPropertyEnumeratedValue(IfcPropertyEnumeratedValue *arg);
        /**
         * Create an IfcPropertyEnumeratedValue Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcPropertyEnumeratedValue entity.
         */
        Step::RefPtr< IfcPropertyEnumeratedValue > createIfcPropertyEnumeratedValue(bool isVolatile = false);
        /**
         * Clone an IfcPropertyEnumeratedValue Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcPropertyEnumeratedValue Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcPropertyEnumeratedValue *cloneIfcPropertyEnumeratedValue(const IfcPropertyEnumeratedValue &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcPropertyEnumeratedValue Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcPropertyEnumeratedValue entities.
         */
        Step::RefLinkedList< IfcPropertyEnumeratedValue > &getAllIfcPropertyEnumeratedValue();
        /**
         * Get the IfcPropertyEnumeration entity by it's Id.
         * 
         * @param id The Id of the IfcPropertyEnumeration.
         * @return A pointer to the IfcPropertyEnumeration if found, NULL otherwise.
         */
        IfcPropertyEnumeration *getIfcPropertyEnumeration(Step::Id id);
        /**
         * Removes a IfcPropertyEnumeration Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcPropertyEnumeration to remove.
         * @return success.
         */
        bool removeIfcPropertyEnumeration(IfcPropertyEnumeration *arg);
        /**
         * Create an IfcPropertyEnumeration Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcPropertyEnumeration entity.
         */
        Step::RefPtr< IfcPropertyEnumeration > createIfcPropertyEnumeration(bool isVolatile = false);
        /**
         * Clone an IfcPropertyEnumeration Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcPropertyEnumeration Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcPropertyEnumeration *cloneIfcPropertyEnumeration(const IfcPropertyEnumeration &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcPropertyEnumeration Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcPropertyEnumeration entities.
         */
        Step::RefLinkedList< IfcPropertyEnumeration > &getAllIfcPropertyEnumeration();
        /**
         * Get the IfcPropertyListValue entity by it's Id.
         * 
         * @param id The Id of the IfcPropertyListValue.
         * @return A pointer to the IfcPropertyListValue if found, NULL otherwise.
         */
        IfcPropertyListValue *getIfcPropertyListValue(Step::Id id);
        /**
         * Removes a IfcPropertyListValue Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcPropertyListValue to remove.
         * @return success.
         */
        bool removeIfcPropertyListValue(IfcPropertyListValue *arg);
        /**
         * Create an IfcPropertyListValue Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcPropertyListValue entity.
         */
        Step::RefPtr< IfcPropertyListValue > createIfcPropertyListValue(bool isVolatile = false);
        /**
         * Clone an IfcPropertyListValue Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcPropertyListValue Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcPropertyListValue *cloneIfcPropertyListValue(const IfcPropertyListValue &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcPropertyListValue Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcPropertyListValue entities.
         */
        Step::RefLinkedList< IfcPropertyListValue > &getAllIfcPropertyListValue();
        /**
         * Get the IfcPropertyReferenceValue entity by it's Id.
         * 
         * @param id The Id of the IfcPropertyReferenceValue.
         * @return A pointer to the IfcPropertyReferenceValue if found, NULL otherwise.
         */
        IfcPropertyReferenceValue *getIfcPropertyReferenceValue(Step::Id id);
        /**
         * Removes a IfcPropertyReferenceValue Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcPropertyReferenceValue to remove.
         * @return success.
         */
        bool removeIfcPropertyReferenceValue(IfcPropertyReferenceValue *arg);
        /**
         * Create an IfcPropertyReferenceValue Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcPropertyReferenceValue entity.
         */
        Step::RefPtr< IfcPropertyReferenceValue > createIfcPropertyReferenceValue(bool isVolatile = false);
        /**
         * Clone an IfcPropertyReferenceValue Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcPropertyReferenceValue Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcPropertyReferenceValue *cloneIfcPropertyReferenceValue(const IfcPropertyReferenceValue &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcPropertyReferenceValue Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcPropertyReferenceValue entities.
         */
        Step::RefLinkedList< IfcPropertyReferenceValue > &getAllIfcPropertyReferenceValue();
        /**
         * Get the IfcPropertySet entity by it's Id.
         * 
         * @param id The Id of the IfcPropertySet.
         * @return A pointer to the IfcPropertySet if found, NULL otherwise.
         */
        IfcPropertySet *getIfcPropertySet(Step::Id id);
        /**
         * Removes a IfcPropertySet Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcPropertySet to remove.
         * @return success.
         */
        bool removeIfcPropertySet(IfcPropertySet *arg);
        /**
         * Create an IfcPropertySet Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcPropertySet entity.
         */
        Step::RefPtr< IfcPropertySet > createIfcPropertySet(bool isVolatile = false);
        /**
         * Clone an IfcPropertySet Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcPropertySet Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcPropertySet *cloneIfcPropertySet(const IfcPropertySet &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcPropertySet Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcPropertySet entities.
         */
        Step::RefLinkedList< IfcPropertySet > &getAllIfcPropertySet();
        /**
         * Get the IfcPropertySetDefinition entity by it's Id.
         * 
         * @param id The Id of the IfcPropertySetDefinition.
         * @return A pointer to the IfcPropertySetDefinition if found, NULL otherwise.
         */
        IfcPropertySetDefinition *getIfcPropertySetDefinition(Step::Id id);
        /**
         * Removes a IfcPropertySetDefinition Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcPropertySetDefinition to remove.
         * @return success.
         */
        bool removeIfcPropertySetDefinition(IfcPropertySetDefinition *arg);
        /**
         * Create an IfcPropertySetDefinition Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcPropertySetDefinition entity.
         */
        Step::RefPtr< IfcPropertySetDefinition > createIfcPropertySetDefinition(bool isVolatile = false);
        /**
         * Clone an IfcPropertySetDefinition Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcPropertySetDefinition Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcPropertySetDefinition *cloneIfcPropertySetDefinition(const IfcPropertySetDefinition &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcPropertySetDefinition Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcPropertySetDefinition entities.
         */
        Step::RefLinkedList< IfcPropertySetDefinition > &getAllIfcPropertySetDefinition();
        /**
         * Get the IfcPropertySingleValue entity by it's Id.
         * 
         * @param id The Id of the IfcPropertySingleValue.
         * @return A pointer to the IfcPropertySingleValue if found, NULL otherwise.
         */
        IfcPropertySingleValue *getIfcPropertySingleValue(Step::Id id);
        /**
         * Removes a IfcPropertySingleValue Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcPropertySingleValue to remove.
         * @return success.
         */
        bool removeIfcPropertySingleValue(IfcPropertySingleValue *arg);
        /**
         * Create an IfcPropertySingleValue Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcPropertySingleValue entity.
         */
        Step::RefPtr< IfcPropertySingleValue > createIfcPropertySingleValue(bool isVolatile = false);
        /**
         * Clone an IfcPropertySingleValue Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcPropertySingleValue Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcPropertySingleValue *cloneIfcPropertySingleValue(const IfcPropertySingleValue &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcPropertySingleValue Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcPropertySingleValue entities.
         */
        Step::RefLinkedList< IfcPropertySingleValue > &getAllIfcPropertySingleValue();
        /**
         * Get the IfcPropertyTableValue entity by it's Id.
         * 
         * @param id The Id of the IfcPropertyTableValue.
         * @return A pointer to the IfcPropertyTableValue if found, NULL otherwise.
         */
        IfcPropertyTableValue *getIfcPropertyTableValue(Step::Id id);
        /**
         * Removes a IfcPropertyTableValue Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcPropertyTableValue to remove.
         * @return success.
         */
        bool removeIfcPropertyTableValue(IfcPropertyTableValue *arg);
        /**
         * Create an IfcPropertyTableValue Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcPropertyTableValue entity.
         */
        Step::RefPtr< IfcPropertyTableValue > createIfcPropertyTableValue(bool isVolatile = false);
        /**
         * Clone an IfcPropertyTableValue Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcPropertyTableValue Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcPropertyTableValue *cloneIfcPropertyTableValue(const IfcPropertyTableValue &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcPropertyTableValue Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcPropertyTableValue entities.
         */
        Step::RefLinkedList< IfcPropertyTableValue > &getAllIfcPropertyTableValue();
        /**
         * Get the IfcProtectiveDeviceType entity by it's Id.
         * 
         * @param id The Id of the IfcProtectiveDeviceType.
         * @return A pointer to the IfcProtectiveDeviceType if found, NULL otherwise.
         */
        IfcProtectiveDeviceType *getIfcProtectiveDeviceType(Step::Id id);
        /**
         * Removes a IfcProtectiveDeviceType Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcProtectiveDeviceType to remove.
         * @return success.
         */
        bool removeIfcProtectiveDeviceType(IfcProtectiveDeviceType *arg);
        /**
         * Create an IfcProtectiveDeviceType Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcProtectiveDeviceType entity.
         */
        Step::RefPtr< IfcProtectiveDeviceType > createIfcProtectiveDeviceType(bool isVolatile = false);
        /**
         * Clone an IfcProtectiveDeviceType Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcProtectiveDeviceType Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcProtectiveDeviceType *cloneIfcProtectiveDeviceType(const IfcProtectiveDeviceType &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcProtectiveDeviceType Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcProtectiveDeviceType entities.
         */
        Step::RefLinkedList< IfcProtectiveDeviceType > &getAllIfcProtectiveDeviceType();
        /**
         * Get the IfcProxy entity by it's Id.
         * 
         * @param id The Id of the IfcProxy.
         * @return A pointer to the IfcProxy if found, NULL otherwise.
         */
        IfcProxy *getIfcProxy(Step::Id id);
        /**
         * Removes a IfcProxy Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcProxy to remove.
         * @return success.
         */
        bool removeIfcProxy(IfcProxy *arg);
        /**
         * Create an IfcProxy Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcProxy entity.
         */
        Step::RefPtr< IfcProxy > createIfcProxy(bool isVolatile = false);
        /**
         * Clone an IfcProxy Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcProxy Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcProxy *cloneIfcProxy(const IfcProxy &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcProxy Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcProxy entities.
         */
        Step::RefLinkedList< IfcProxy > &getAllIfcProxy();
        /**
         * Get the IfcPumpType entity by it's Id.
         * 
         * @param id The Id of the IfcPumpType.
         * @return A pointer to the IfcPumpType if found, NULL otherwise.
         */
        IfcPumpType *getIfcPumpType(Step::Id id);
        /**
         * Removes a IfcPumpType Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcPumpType to remove.
         * @return success.
         */
        bool removeIfcPumpType(IfcPumpType *arg);
        /**
         * Create an IfcPumpType Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcPumpType entity.
         */
        Step::RefPtr< IfcPumpType > createIfcPumpType(bool isVolatile = false);
        /**
         * Clone an IfcPumpType Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcPumpType Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcPumpType *cloneIfcPumpType(const IfcPumpType &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcPumpType Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcPumpType entities.
         */
        Step::RefLinkedList< IfcPumpType > &getAllIfcPumpType();
        /**
         * Get the IfcQuantityArea entity by it's Id.
         * 
         * @param id The Id of the IfcQuantityArea.
         * @return A pointer to the IfcQuantityArea if found, NULL otherwise.
         */
        IfcQuantityArea *getIfcQuantityArea(Step::Id id);
        /**
         * Removes a IfcQuantityArea Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcQuantityArea to remove.
         * @return success.
         */
        bool removeIfcQuantityArea(IfcQuantityArea *arg);
        /**
         * Create an IfcQuantityArea Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcQuantityArea entity.
         */
        Step::RefPtr< IfcQuantityArea > createIfcQuantityArea(bool isVolatile = false);
        /**
         * Clone an IfcQuantityArea Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcQuantityArea Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcQuantityArea *cloneIfcQuantityArea(const IfcQuantityArea &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcQuantityArea Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcQuantityArea entities.
         */
        Step::RefLinkedList< IfcQuantityArea > &getAllIfcQuantityArea();
        /**
         * Get the IfcQuantityCount entity by it's Id.
         * 
         * @param id The Id of the IfcQuantityCount.
         * @return A pointer to the IfcQuantityCount if found, NULL otherwise.
         */
        IfcQuantityCount *getIfcQuantityCount(Step::Id id);
        /**
         * Removes a IfcQuantityCount Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcQuantityCount to remove.
         * @return success.
         */
        bool removeIfcQuantityCount(IfcQuantityCount *arg);
        /**
         * Create an IfcQuantityCount Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcQuantityCount entity.
         */
        Step::RefPtr< IfcQuantityCount > createIfcQuantityCount(bool isVolatile = false);
        /**
         * Clone an IfcQuantityCount Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcQuantityCount Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcQuantityCount *cloneIfcQuantityCount(const IfcQuantityCount &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcQuantityCount Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcQuantityCount entities.
         */
        Step::RefLinkedList< IfcQuantityCount > &getAllIfcQuantityCount();
        /**
         * Get the IfcQuantityLength entity by it's Id.
         * 
         * @param id The Id of the IfcQuantityLength.
         * @return A pointer to the IfcQuantityLength if found, NULL otherwise.
         */
        IfcQuantityLength *getIfcQuantityLength(Step::Id id);
        /**
         * Removes a IfcQuantityLength Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcQuantityLength to remove.
         * @return success.
         */
        bool removeIfcQuantityLength(IfcQuantityLength *arg);
        /**
         * Create an IfcQuantityLength Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcQuantityLength entity.
         */
        Step::RefPtr< IfcQuantityLength > createIfcQuantityLength(bool isVolatile = false);
        /**
         * Clone an IfcQuantityLength Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcQuantityLength Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcQuantityLength *cloneIfcQuantityLength(const IfcQuantityLength &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcQuantityLength Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcQuantityLength entities.
         */
        Step::RefLinkedList< IfcQuantityLength > &getAllIfcQuantityLength();
        /**
         * Get the IfcQuantityTime entity by it's Id.
         * 
         * @param id The Id of the IfcQuantityTime.
         * @return A pointer to the IfcQuantityTime if found, NULL otherwise.
         */
        IfcQuantityTime *getIfcQuantityTime(Step::Id id);
        /**
         * Removes a IfcQuantityTime Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcQuantityTime to remove.
         * @return success.
         */
        bool removeIfcQuantityTime(IfcQuantityTime *arg);
        /**
         * Create an IfcQuantityTime Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcQuantityTime entity.
         */
        Step::RefPtr< IfcQuantityTime > createIfcQuantityTime(bool isVolatile = false);
        /**
         * Clone an IfcQuantityTime Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcQuantityTime Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcQuantityTime *cloneIfcQuantityTime(const IfcQuantityTime &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcQuantityTime Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcQuantityTime entities.
         */
        Step::RefLinkedList< IfcQuantityTime > &getAllIfcQuantityTime();
        /**
         * Get the IfcQuantityVolume entity by it's Id.
         * 
         * @param id The Id of the IfcQuantityVolume.
         * @return A pointer to the IfcQuantityVolume if found, NULL otherwise.
         */
        IfcQuantityVolume *getIfcQuantityVolume(Step::Id id);
        /**
         * Removes a IfcQuantityVolume Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcQuantityVolume to remove.
         * @return success.
         */
        bool removeIfcQuantityVolume(IfcQuantityVolume *arg);
        /**
         * Create an IfcQuantityVolume Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcQuantityVolume entity.
         */
        Step::RefPtr< IfcQuantityVolume > createIfcQuantityVolume(bool isVolatile = false);
        /**
         * Clone an IfcQuantityVolume Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcQuantityVolume Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcQuantityVolume *cloneIfcQuantityVolume(const IfcQuantityVolume &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcQuantityVolume Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcQuantityVolume entities.
         */
        Step::RefLinkedList< IfcQuantityVolume > &getAllIfcQuantityVolume();
        /**
         * Get the IfcQuantityWeight entity by it's Id.
         * 
         * @param id The Id of the IfcQuantityWeight.
         * @return A pointer to the IfcQuantityWeight if found, NULL otherwise.
         */
        IfcQuantityWeight *getIfcQuantityWeight(Step::Id id);
        /**
         * Removes a IfcQuantityWeight Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcQuantityWeight to remove.
         * @return success.
         */
        bool removeIfcQuantityWeight(IfcQuantityWeight *arg);
        /**
         * Create an IfcQuantityWeight Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcQuantityWeight entity.
         */
        Step::RefPtr< IfcQuantityWeight > createIfcQuantityWeight(bool isVolatile = false);
        /**
         * Clone an IfcQuantityWeight Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcQuantityWeight Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcQuantityWeight *cloneIfcQuantityWeight(const IfcQuantityWeight &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcQuantityWeight Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcQuantityWeight entities.
         */
        Step::RefLinkedList< IfcQuantityWeight > &getAllIfcQuantityWeight();
        /**
         * Get the IfcRadiusDimension entity by it's Id.
         * 
         * @param id The Id of the IfcRadiusDimension.
         * @return A pointer to the IfcRadiusDimension if found, NULL otherwise.
         */
        IfcRadiusDimension *getIfcRadiusDimension(Step::Id id);
        /**
         * Removes a IfcRadiusDimension Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcRadiusDimension to remove.
         * @return success.
         */
        bool removeIfcRadiusDimension(IfcRadiusDimension *arg);
        /**
         * Create an IfcRadiusDimension Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcRadiusDimension entity.
         */
        Step::RefPtr< IfcRadiusDimension > createIfcRadiusDimension(bool isVolatile = false);
        /**
         * Clone an IfcRadiusDimension Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcRadiusDimension Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcRadiusDimension *cloneIfcRadiusDimension(const IfcRadiusDimension &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcRadiusDimension Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcRadiusDimension entities.
         */
        Step::RefLinkedList< IfcRadiusDimension > &getAllIfcRadiusDimension();
        /**
         * Get the IfcRailing entity by it's Id.
         * 
         * @param id The Id of the IfcRailing.
         * @return A pointer to the IfcRailing if found, NULL otherwise.
         */
        IfcRailing *getIfcRailing(Step::Id id);
        /**
         * Removes a IfcRailing Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcRailing to remove.
         * @return success.
         */
        bool removeIfcRailing(IfcRailing *arg);
        /**
         * Create an IfcRailing Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcRailing entity.
         */
        Step::RefPtr< IfcRailing > createIfcRailing(bool isVolatile = false);
        /**
         * Clone an IfcRailing Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcRailing Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcRailing *cloneIfcRailing(const IfcRailing &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcRailing Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcRailing entities.
         */
        Step::RefLinkedList< IfcRailing > &getAllIfcRailing();
        /**
         * Get the IfcRailingType entity by it's Id.
         * 
         * @param id The Id of the IfcRailingType.
         * @return A pointer to the IfcRailingType if found, NULL otherwise.
         */
        IfcRailingType *getIfcRailingType(Step::Id id);
        /**
         * Removes a IfcRailingType Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcRailingType to remove.
         * @return success.
         */
        bool removeIfcRailingType(IfcRailingType *arg);
        /**
         * Create an IfcRailingType Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcRailingType entity.
         */
        Step::RefPtr< IfcRailingType > createIfcRailingType(bool isVolatile = false);
        /**
         * Clone an IfcRailingType Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcRailingType Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcRailingType *cloneIfcRailingType(const IfcRailingType &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcRailingType Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcRailingType entities.
         */
        Step::RefLinkedList< IfcRailingType > &getAllIfcRailingType();
        /**
         * Get the IfcRamp entity by it's Id.
         * 
         * @param id The Id of the IfcRamp.
         * @return A pointer to the IfcRamp if found, NULL otherwise.
         */
        IfcRamp *getIfcRamp(Step::Id id);
        /**
         * Removes a IfcRamp Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcRamp to remove.
         * @return success.
         */
        bool removeIfcRamp(IfcRamp *arg);
        /**
         * Create an IfcRamp Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcRamp entity.
         */
        Step::RefPtr< IfcRamp > createIfcRamp(bool isVolatile = false);
        /**
         * Clone an IfcRamp Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcRamp Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcRamp *cloneIfcRamp(const IfcRamp &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcRamp Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcRamp entities.
         */
        Step::RefLinkedList< IfcRamp > &getAllIfcRamp();
        /**
         * Get the IfcRampFlight entity by it's Id.
         * 
         * @param id The Id of the IfcRampFlight.
         * @return A pointer to the IfcRampFlight if found, NULL otherwise.
         */
        IfcRampFlight *getIfcRampFlight(Step::Id id);
        /**
         * Removes a IfcRampFlight Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcRampFlight to remove.
         * @return success.
         */
        bool removeIfcRampFlight(IfcRampFlight *arg);
        /**
         * Create an IfcRampFlight Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcRampFlight entity.
         */
        Step::RefPtr< IfcRampFlight > createIfcRampFlight(bool isVolatile = false);
        /**
         * Clone an IfcRampFlight Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcRampFlight Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcRampFlight *cloneIfcRampFlight(const IfcRampFlight &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcRampFlight Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcRampFlight entities.
         */
        Step::RefLinkedList< IfcRampFlight > &getAllIfcRampFlight();
        /**
         * Get the IfcRampFlightType entity by it's Id.
         * 
         * @param id The Id of the IfcRampFlightType.
         * @return A pointer to the IfcRampFlightType if found, NULL otherwise.
         */
        IfcRampFlightType *getIfcRampFlightType(Step::Id id);
        /**
         * Removes a IfcRampFlightType Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcRampFlightType to remove.
         * @return success.
         */
        bool removeIfcRampFlightType(IfcRampFlightType *arg);
        /**
         * Create an IfcRampFlightType Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcRampFlightType entity.
         */
        Step::RefPtr< IfcRampFlightType > createIfcRampFlightType(bool isVolatile = false);
        /**
         * Clone an IfcRampFlightType Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcRampFlightType Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcRampFlightType *cloneIfcRampFlightType(const IfcRampFlightType &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcRampFlightType Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcRampFlightType entities.
         */
        Step::RefLinkedList< IfcRampFlightType > &getAllIfcRampFlightType();
        /**
         * Get the IfcRationalBezierCurve entity by it's Id.
         * 
         * @param id The Id of the IfcRationalBezierCurve.
         * @return A pointer to the IfcRationalBezierCurve if found, NULL otherwise.
         */
        IfcRationalBezierCurve *getIfcRationalBezierCurve(Step::Id id);
        /**
         * Removes a IfcRationalBezierCurve Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcRationalBezierCurve to remove.
         * @return success.
         */
        bool removeIfcRationalBezierCurve(IfcRationalBezierCurve *arg);
        /**
         * Create an IfcRationalBezierCurve Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcRationalBezierCurve entity.
         */
        Step::RefPtr< IfcRationalBezierCurve > createIfcRationalBezierCurve(bool isVolatile = false);
        /**
         * Clone an IfcRationalBezierCurve Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcRationalBezierCurve Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcRationalBezierCurve *cloneIfcRationalBezierCurve(const IfcRationalBezierCurve &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcRationalBezierCurve Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcRationalBezierCurve entities.
         */
        Step::RefLinkedList< IfcRationalBezierCurve > &getAllIfcRationalBezierCurve();
        /**
         * Get the IfcRectangleHollowProfileDef entity by it's Id.
         * 
         * @param id The Id of the IfcRectangleHollowProfileDef.
         * @return A pointer to the IfcRectangleHollowProfileDef if found, NULL otherwise.
         */
        IfcRectangleHollowProfileDef *getIfcRectangleHollowProfileDef(Step::Id id);
        /**
         * Removes a IfcRectangleHollowProfileDef Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcRectangleHollowProfileDef to remove.
         * @return success.
         */
        bool removeIfcRectangleHollowProfileDef(IfcRectangleHollowProfileDef *arg);
        /**
         * Create an IfcRectangleHollowProfileDef Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcRectangleHollowProfileDef entity.
         */
        Step::RefPtr< IfcRectangleHollowProfileDef > createIfcRectangleHollowProfileDef(bool isVolatile = false);
        /**
         * Clone an IfcRectangleHollowProfileDef Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcRectangleHollowProfileDef Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcRectangleHollowProfileDef *cloneIfcRectangleHollowProfileDef(const IfcRectangleHollowProfileDef &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcRectangleHollowProfileDef Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcRectangleHollowProfileDef entities.
         */
        Step::RefLinkedList< IfcRectangleHollowProfileDef > &getAllIfcRectangleHollowProfileDef();
        /**
         * Get the IfcRectangleProfileDef entity by it's Id.
         * 
         * @param id The Id of the IfcRectangleProfileDef.
         * @return A pointer to the IfcRectangleProfileDef if found, NULL otherwise.
         */
        IfcRectangleProfileDef *getIfcRectangleProfileDef(Step::Id id);
        /**
         * Removes a IfcRectangleProfileDef Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcRectangleProfileDef to remove.
         * @return success.
         */
        bool removeIfcRectangleProfileDef(IfcRectangleProfileDef *arg);
        /**
         * Create an IfcRectangleProfileDef Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcRectangleProfileDef entity.
         */
        Step::RefPtr< IfcRectangleProfileDef > createIfcRectangleProfileDef(bool isVolatile = false);
        /**
         * Clone an IfcRectangleProfileDef Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcRectangleProfileDef Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcRectangleProfileDef *cloneIfcRectangleProfileDef(const IfcRectangleProfileDef &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcRectangleProfileDef Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcRectangleProfileDef entities.
         */
        Step::RefLinkedList< IfcRectangleProfileDef > &getAllIfcRectangleProfileDef();
        /**
         * Get the IfcRectangularPyramid entity by it's Id.
         * 
         * @param id The Id of the IfcRectangularPyramid.
         * @return A pointer to the IfcRectangularPyramid if found, NULL otherwise.
         */
        IfcRectangularPyramid *getIfcRectangularPyramid(Step::Id id);
        /**
         * Removes a IfcRectangularPyramid Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcRectangularPyramid to remove.
         * @return success.
         */
        bool removeIfcRectangularPyramid(IfcRectangularPyramid *arg);
        /**
         * Create an IfcRectangularPyramid Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcRectangularPyramid entity.
         */
        Step::RefPtr< IfcRectangularPyramid > createIfcRectangularPyramid(bool isVolatile = false);
        /**
         * Clone an IfcRectangularPyramid Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcRectangularPyramid Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcRectangularPyramid *cloneIfcRectangularPyramid(const IfcRectangularPyramid &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcRectangularPyramid Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcRectangularPyramid entities.
         */
        Step::RefLinkedList< IfcRectangularPyramid > &getAllIfcRectangularPyramid();
        /**
         * Get the IfcRectangularTrimmedSurface entity by it's Id.
         * 
         * @param id The Id of the IfcRectangularTrimmedSurface.
         * @return A pointer to the IfcRectangularTrimmedSurface if found, NULL otherwise.
         */
        IfcRectangularTrimmedSurface *getIfcRectangularTrimmedSurface(Step::Id id);
        /**
         * Removes a IfcRectangularTrimmedSurface Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcRectangularTrimmedSurface to remove.
         * @return success.
         */
        bool removeIfcRectangularTrimmedSurface(IfcRectangularTrimmedSurface *arg);
        /**
         * Create an IfcRectangularTrimmedSurface Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcRectangularTrimmedSurface entity.
         */
        Step::RefPtr< IfcRectangularTrimmedSurface > createIfcRectangularTrimmedSurface(bool isVolatile = false);
        /**
         * Clone an IfcRectangularTrimmedSurface Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcRectangularTrimmedSurface Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcRectangularTrimmedSurface *cloneIfcRectangularTrimmedSurface(const IfcRectangularTrimmedSurface &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcRectangularTrimmedSurface Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcRectangularTrimmedSurface entities.
         */
        Step::RefLinkedList< IfcRectangularTrimmedSurface > &getAllIfcRectangularTrimmedSurface();
        /**
         * Get the IfcReferencesValueDocument entity by it's Id.
         * 
         * @param id The Id of the IfcReferencesValueDocument.
         * @return A pointer to the IfcReferencesValueDocument if found, NULL otherwise.
         */
        IfcReferencesValueDocument *getIfcReferencesValueDocument(Step::Id id);
        /**
         * Removes a IfcReferencesValueDocument Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcReferencesValueDocument to remove.
         * @return success.
         */
        bool removeIfcReferencesValueDocument(IfcReferencesValueDocument *arg);
        /**
         * Create an IfcReferencesValueDocument Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcReferencesValueDocument entity.
         */
        Step::RefPtr< IfcReferencesValueDocument > createIfcReferencesValueDocument(bool isVolatile = false);
        /**
         * Clone an IfcReferencesValueDocument Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcReferencesValueDocument Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcReferencesValueDocument *cloneIfcReferencesValueDocument(const IfcReferencesValueDocument &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcReferencesValueDocument Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcReferencesValueDocument entities.
         */
        Step::RefLinkedList< IfcReferencesValueDocument > &getAllIfcReferencesValueDocument();
        /**
         * Get the IfcRegularTimeSeries entity by it's Id.
         * 
         * @param id The Id of the IfcRegularTimeSeries.
         * @return A pointer to the IfcRegularTimeSeries if found, NULL otherwise.
         */
        IfcRegularTimeSeries *getIfcRegularTimeSeries(Step::Id id);
        /**
         * Removes a IfcRegularTimeSeries Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcRegularTimeSeries to remove.
         * @return success.
         */
        bool removeIfcRegularTimeSeries(IfcRegularTimeSeries *arg);
        /**
         * Create an IfcRegularTimeSeries Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcRegularTimeSeries entity.
         */
        Step::RefPtr< IfcRegularTimeSeries > createIfcRegularTimeSeries(bool isVolatile = false);
        /**
         * Clone an IfcRegularTimeSeries Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcRegularTimeSeries Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcRegularTimeSeries *cloneIfcRegularTimeSeries(const IfcRegularTimeSeries &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcRegularTimeSeries Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcRegularTimeSeries entities.
         */
        Step::RefLinkedList< IfcRegularTimeSeries > &getAllIfcRegularTimeSeries();
        /**
         * Get the IfcReinforcementBarProperties entity by it's Id.
         * 
         * @param id The Id of the IfcReinforcementBarProperties.
         * @return A pointer to the IfcReinforcementBarProperties if found, NULL otherwise.
         */
        IfcReinforcementBarProperties *getIfcReinforcementBarProperties(Step::Id id);
        /**
         * Removes a IfcReinforcementBarProperties Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcReinforcementBarProperties to remove.
         * @return success.
         */
        bool removeIfcReinforcementBarProperties(IfcReinforcementBarProperties *arg);
        /**
         * Create an IfcReinforcementBarProperties Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcReinforcementBarProperties entity.
         */
        Step::RefPtr< IfcReinforcementBarProperties > createIfcReinforcementBarProperties(bool isVolatile = false);
        /**
         * Clone an IfcReinforcementBarProperties Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcReinforcementBarProperties Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcReinforcementBarProperties *cloneIfcReinforcementBarProperties(const IfcReinforcementBarProperties &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcReinforcementBarProperties Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcReinforcementBarProperties entities.
         */
        Step::RefLinkedList< IfcReinforcementBarProperties > &getAllIfcReinforcementBarProperties();
        /**
         * Get the IfcReinforcementDefinitionProperties entity by it's Id.
         * 
         * @param id The Id of the IfcReinforcementDefinitionProperties.
         * @return A pointer to the IfcReinforcementDefinitionProperties if found, NULL otherwise.
         */
        IfcReinforcementDefinitionProperties *getIfcReinforcementDefinitionProperties(Step::Id id);
        /**
         * Removes a IfcReinforcementDefinitionProperties Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcReinforcementDefinitionProperties to remove.
         * @return success.
         */
        bool removeIfcReinforcementDefinitionProperties(IfcReinforcementDefinitionProperties *arg);
        /**
         * Create an IfcReinforcementDefinitionProperties Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcReinforcementDefinitionProperties entity.
         */
        Step::RefPtr< IfcReinforcementDefinitionProperties > createIfcReinforcementDefinitionProperties(bool isVolatile = false);
        /**
         * Clone an IfcReinforcementDefinitionProperties Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcReinforcementDefinitionProperties Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcReinforcementDefinitionProperties *cloneIfcReinforcementDefinitionProperties(const IfcReinforcementDefinitionProperties &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcReinforcementDefinitionProperties Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcReinforcementDefinitionProperties entities.
         */
        Step::RefLinkedList< IfcReinforcementDefinitionProperties > &getAllIfcReinforcementDefinitionProperties();
        /**
         * Get the IfcReinforcingBar entity by it's Id.
         * 
         * @param id The Id of the IfcReinforcingBar.
         * @return A pointer to the IfcReinforcingBar if found, NULL otherwise.
         */
        IfcReinforcingBar *getIfcReinforcingBar(Step::Id id);
        /**
         * Removes a IfcReinforcingBar Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcReinforcingBar to remove.
         * @return success.
         */
        bool removeIfcReinforcingBar(IfcReinforcingBar *arg);
        /**
         * Create an IfcReinforcingBar Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcReinforcingBar entity.
         */
        Step::RefPtr< IfcReinforcingBar > createIfcReinforcingBar(bool isVolatile = false);
        /**
         * Clone an IfcReinforcingBar Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcReinforcingBar Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcReinforcingBar *cloneIfcReinforcingBar(const IfcReinforcingBar &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcReinforcingBar Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcReinforcingBar entities.
         */
        Step::RefLinkedList< IfcReinforcingBar > &getAllIfcReinforcingBar();
        /**
         * Get the IfcReinforcingElement entity by it's Id.
         * 
         * @param id The Id of the IfcReinforcingElement.
         * @return A pointer to the IfcReinforcingElement if found, NULL otherwise.
         */
        IfcReinforcingElement *getIfcReinforcingElement(Step::Id id);
        /**
         * Removes a IfcReinforcingElement Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcReinforcingElement to remove.
         * @return success.
         */
        bool removeIfcReinforcingElement(IfcReinforcingElement *arg);
        /**
         * Create an IfcReinforcingElement Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcReinforcingElement entity.
         */
        Step::RefPtr< IfcReinforcingElement > createIfcReinforcingElement(bool isVolatile = false);
        /**
         * Clone an IfcReinforcingElement Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcReinforcingElement Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcReinforcingElement *cloneIfcReinforcingElement(const IfcReinforcingElement &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcReinforcingElement Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcReinforcingElement entities.
         */
        Step::RefLinkedList< IfcReinforcingElement > &getAllIfcReinforcingElement();
        /**
         * Get the IfcReinforcingMesh entity by it's Id.
         * 
         * @param id The Id of the IfcReinforcingMesh.
         * @return A pointer to the IfcReinforcingMesh if found, NULL otherwise.
         */
        IfcReinforcingMesh *getIfcReinforcingMesh(Step::Id id);
        /**
         * Removes a IfcReinforcingMesh Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcReinforcingMesh to remove.
         * @return success.
         */
        bool removeIfcReinforcingMesh(IfcReinforcingMesh *arg);
        /**
         * Create an IfcReinforcingMesh Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcReinforcingMesh entity.
         */
        Step::RefPtr< IfcReinforcingMesh > createIfcReinforcingMesh(bool isVolatile = false);
        /**
         * Clone an IfcReinforcingMesh Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcReinforcingMesh Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcReinforcingMesh *cloneIfcReinforcingMesh(const IfcReinforcingMesh &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcReinforcingMesh Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcReinforcingMesh entities.
         */
        Step::RefLinkedList< IfcReinforcingMesh > &getAllIfcReinforcingMesh();
        /**
         * Get the IfcRelAggregates entity by it's Id.
         * 
         * @param id The Id of the IfcRelAggregates.
         * @return A pointer to the IfcRelAggregates if found, NULL otherwise.
         */
        IfcRelAggregates *getIfcRelAggregates(Step::Id id);
        /**
         * Removes a IfcRelAggregates Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcRelAggregates to remove.
         * @return success.
         */
        bool removeIfcRelAggregates(IfcRelAggregates *arg);
        /**
         * Create an IfcRelAggregates Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcRelAggregates entity.
         */
        Step::RefPtr< IfcRelAggregates > createIfcRelAggregates(bool isVolatile = false);
        /**
         * Clone an IfcRelAggregates Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcRelAggregates Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcRelAggregates *cloneIfcRelAggregates(const IfcRelAggregates &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcRelAggregates Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcRelAggregates entities.
         */
        Step::RefLinkedList< IfcRelAggregates > &getAllIfcRelAggregates();
        /**
         * Get the IfcRelAssigns entity by it's Id.
         * 
         * @param id The Id of the IfcRelAssigns.
         * @return A pointer to the IfcRelAssigns if found, NULL otherwise.
         */
        IfcRelAssigns *getIfcRelAssigns(Step::Id id);
        /**
         * Removes a IfcRelAssigns Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcRelAssigns to remove.
         * @return success.
         */
        bool removeIfcRelAssigns(IfcRelAssigns *arg);
        /**
         * Create an IfcRelAssigns Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcRelAssigns entity.
         */
        Step::RefPtr< IfcRelAssigns > createIfcRelAssigns(bool isVolatile = false);
        /**
         * Clone an IfcRelAssigns Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcRelAssigns Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcRelAssigns *cloneIfcRelAssigns(const IfcRelAssigns &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcRelAssigns Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcRelAssigns entities.
         */
        Step::RefLinkedList< IfcRelAssigns > &getAllIfcRelAssigns();
        /**
         * Get the IfcRelAssignsTasks entity by it's Id.
         * 
         * @param id The Id of the IfcRelAssignsTasks.
         * @return A pointer to the IfcRelAssignsTasks if found, NULL otherwise.
         */
        IfcRelAssignsTasks *getIfcRelAssignsTasks(Step::Id id);
        /**
         * Removes a IfcRelAssignsTasks Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcRelAssignsTasks to remove.
         * @return success.
         */
        bool removeIfcRelAssignsTasks(IfcRelAssignsTasks *arg);
        /**
         * Create an IfcRelAssignsTasks Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcRelAssignsTasks entity.
         */
        Step::RefPtr< IfcRelAssignsTasks > createIfcRelAssignsTasks(bool isVolatile = false);
        /**
         * Clone an IfcRelAssignsTasks Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcRelAssignsTasks Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcRelAssignsTasks *cloneIfcRelAssignsTasks(const IfcRelAssignsTasks &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcRelAssignsTasks Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcRelAssignsTasks entities.
         */
        Step::RefLinkedList< IfcRelAssignsTasks > &getAllIfcRelAssignsTasks();
        /**
         * Get the IfcRelAssignsToActor entity by it's Id.
         * 
         * @param id The Id of the IfcRelAssignsToActor.
         * @return A pointer to the IfcRelAssignsToActor if found, NULL otherwise.
         */
        IfcRelAssignsToActor *getIfcRelAssignsToActor(Step::Id id);
        /**
         * Removes a IfcRelAssignsToActor Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcRelAssignsToActor to remove.
         * @return success.
         */
        bool removeIfcRelAssignsToActor(IfcRelAssignsToActor *arg);
        /**
         * Create an IfcRelAssignsToActor Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcRelAssignsToActor entity.
         */
        Step::RefPtr< IfcRelAssignsToActor > createIfcRelAssignsToActor(bool isVolatile = false);
        /**
         * Clone an IfcRelAssignsToActor Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcRelAssignsToActor Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcRelAssignsToActor *cloneIfcRelAssignsToActor(const IfcRelAssignsToActor &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcRelAssignsToActor Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcRelAssignsToActor entities.
         */
        Step::RefLinkedList< IfcRelAssignsToActor > &getAllIfcRelAssignsToActor();
        /**
         * Get the IfcRelAssignsToControl entity by it's Id.
         * 
         * @param id The Id of the IfcRelAssignsToControl.
         * @return A pointer to the IfcRelAssignsToControl if found, NULL otherwise.
         */
        IfcRelAssignsToControl *getIfcRelAssignsToControl(Step::Id id);
        /**
         * Removes a IfcRelAssignsToControl Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcRelAssignsToControl to remove.
         * @return success.
         */
        bool removeIfcRelAssignsToControl(IfcRelAssignsToControl *arg);
        /**
         * Create an IfcRelAssignsToControl Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcRelAssignsToControl entity.
         */
        Step::RefPtr< IfcRelAssignsToControl > createIfcRelAssignsToControl(bool isVolatile = false);
        /**
         * Clone an IfcRelAssignsToControl Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcRelAssignsToControl Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcRelAssignsToControl *cloneIfcRelAssignsToControl(const IfcRelAssignsToControl &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcRelAssignsToControl Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcRelAssignsToControl entities.
         */
        Step::RefLinkedList< IfcRelAssignsToControl > &getAllIfcRelAssignsToControl();
        /**
         * Get the IfcRelAssignsToGroup entity by it's Id.
         * 
         * @param id The Id of the IfcRelAssignsToGroup.
         * @return A pointer to the IfcRelAssignsToGroup if found, NULL otherwise.
         */
        IfcRelAssignsToGroup *getIfcRelAssignsToGroup(Step::Id id);
        /**
         * Removes a IfcRelAssignsToGroup Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcRelAssignsToGroup to remove.
         * @return success.
         */
        bool removeIfcRelAssignsToGroup(IfcRelAssignsToGroup *arg);
        /**
         * Create an IfcRelAssignsToGroup Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcRelAssignsToGroup entity.
         */
        Step::RefPtr< IfcRelAssignsToGroup > createIfcRelAssignsToGroup(bool isVolatile = false);
        /**
         * Clone an IfcRelAssignsToGroup Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcRelAssignsToGroup Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcRelAssignsToGroup *cloneIfcRelAssignsToGroup(const IfcRelAssignsToGroup &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcRelAssignsToGroup Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcRelAssignsToGroup entities.
         */
        Step::RefLinkedList< IfcRelAssignsToGroup > &getAllIfcRelAssignsToGroup();
        /**
         * Get the IfcRelAssignsToProcess entity by it's Id.
         * 
         * @param id The Id of the IfcRelAssignsToProcess.
         * @return A pointer to the IfcRelAssignsToProcess if found, NULL otherwise.
         */
        IfcRelAssignsToProcess *getIfcRelAssignsToProcess(Step::Id id);
        /**
         * Removes a IfcRelAssignsToProcess Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcRelAssignsToProcess to remove.
         * @return success.
         */
        bool removeIfcRelAssignsToProcess(IfcRelAssignsToProcess *arg);
        /**
         * Create an IfcRelAssignsToProcess Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcRelAssignsToProcess entity.
         */
        Step::RefPtr< IfcRelAssignsToProcess > createIfcRelAssignsToProcess(bool isVolatile = false);
        /**
         * Clone an IfcRelAssignsToProcess Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcRelAssignsToProcess Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcRelAssignsToProcess *cloneIfcRelAssignsToProcess(const IfcRelAssignsToProcess &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcRelAssignsToProcess Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcRelAssignsToProcess entities.
         */
        Step::RefLinkedList< IfcRelAssignsToProcess > &getAllIfcRelAssignsToProcess();
        /**
         * Get the IfcRelAssignsToProduct entity by it's Id.
         * 
         * @param id The Id of the IfcRelAssignsToProduct.
         * @return A pointer to the IfcRelAssignsToProduct if found, NULL otherwise.
         */
        IfcRelAssignsToProduct *getIfcRelAssignsToProduct(Step::Id id);
        /**
         * Removes a IfcRelAssignsToProduct Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcRelAssignsToProduct to remove.
         * @return success.
         */
        bool removeIfcRelAssignsToProduct(IfcRelAssignsToProduct *arg);
        /**
         * Create an IfcRelAssignsToProduct Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcRelAssignsToProduct entity.
         */
        Step::RefPtr< IfcRelAssignsToProduct > createIfcRelAssignsToProduct(bool isVolatile = false);
        /**
         * Clone an IfcRelAssignsToProduct Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcRelAssignsToProduct Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcRelAssignsToProduct *cloneIfcRelAssignsToProduct(const IfcRelAssignsToProduct &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcRelAssignsToProduct Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcRelAssignsToProduct entities.
         */
        Step::RefLinkedList< IfcRelAssignsToProduct > &getAllIfcRelAssignsToProduct();
        /**
         * Get the IfcRelAssignsToProjectOrder entity by it's Id.
         * 
         * @param id The Id of the IfcRelAssignsToProjectOrder.
         * @return A pointer to the IfcRelAssignsToProjectOrder if found, NULL otherwise.
         */
        IfcRelAssignsToProjectOrder *getIfcRelAssignsToProjectOrder(Step::Id id);
        /**
         * Removes a IfcRelAssignsToProjectOrder Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcRelAssignsToProjectOrder to remove.
         * @return success.
         */
        bool removeIfcRelAssignsToProjectOrder(IfcRelAssignsToProjectOrder *arg);
        /**
         * Create an IfcRelAssignsToProjectOrder Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcRelAssignsToProjectOrder entity.
         */
        Step::RefPtr< IfcRelAssignsToProjectOrder > createIfcRelAssignsToProjectOrder(bool isVolatile = false);
        /**
         * Clone an IfcRelAssignsToProjectOrder Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcRelAssignsToProjectOrder Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcRelAssignsToProjectOrder *cloneIfcRelAssignsToProjectOrder(const IfcRelAssignsToProjectOrder &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcRelAssignsToProjectOrder Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcRelAssignsToProjectOrder entities.
         */
        Step::RefLinkedList< IfcRelAssignsToProjectOrder > &getAllIfcRelAssignsToProjectOrder();
        /**
         * Get the IfcRelAssignsToResource entity by it's Id.
         * 
         * @param id The Id of the IfcRelAssignsToResource.
         * @return A pointer to the IfcRelAssignsToResource if found, NULL otherwise.
         */
        IfcRelAssignsToResource *getIfcRelAssignsToResource(Step::Id id);
        /**
         * Removes a IfcRelAssignsToResource Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcRelAssignsToResource to remove.
         * @return success.
         */
        bool removeIfcRelAssignsToResource(IfcRelAssignsToResource *arg);
        /**
         * Create an IfcRelAssignsToResource Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcRelAssignsToResource entity.
         */
        Step::RefPtr< IfcRelAssignsToResource > createIfcRelAssignsToResource(bool isVolatile = false);
        /**
         * Clone an IfcRelAssignsToResource Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcRelAssignsToResource Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcRelAssignsToResource *cloneIfcRelAssignsToResource(const IfcRelAssignsToResource &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcRelAssignsToResource Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcRelAssignsToResource entities.
         */
        Step::RefLinkedList< IfcRelAssignsToResource > &getAllIfcRelAssignsToResource();
        /**
         * Get the IfcRelAssociates entity by it's Id.
         * 
         * @param id The Id of the IfcRelAssociates.
         * @return A pointer to the IfcRelAssociates if found, NULL otherwise.
         */
        IfcRelAssociates *getIfcRelAssociates(Step::Id id);
        /**
         * Removes a IfcRelAssociates Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcRelAssociates to remove.
         * @return success.
         */
        bool removeIfcRelAssociates(IfcRelAssociates *arg);
        /**
         * Create an IfcRelAssociates Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcRelAssociates entity.
         */
        Step::RefPtr< IfcRelAssociates > createIfcRelAssociates(bool isVolatile = false);
        /**
         * Clone an IfcRelAssociates Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcRelAssociates Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcRelAssociates *cloneIfcRelAssociates(const IfcRelAssociates &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcRelAssociates Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcRelAssociates entities.
         */
        Step::RefLinkedList< IfcRelAssociates > &getAllIfcRelAssociates();
        /**
         * Get the IfcRelAssociatesAppliedValue entity by it's Id.
         * 
         * @param id The Id of the IfcRelAssociatesAppliedValue.
         * @return A pointer to the IfcRelAssociatesAppliedValue if found, NULL otherwise.
         */
        IfcRelAssociatesAppliedValue *getIfcRelAssociatesAppliedValue(Step::Id id);
        /**
         * Removes a IfcRelAssociatesAppliedValue Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcRelAssociatesAppliedValue to remove.
         * @return success.
         */
        bool removeIfcRelAssociatesAppliedValue(IfcRelAssociatesAppliedValue *arg);
        /**
         * Create an IfcRelAssociatesAppliedValue Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcRelAssociatesAppliedValue entity.
         */
        Step::RefPtr< IfcRelAssociatesAppliedValue > createIfcRelAssociatesAppliedValue(bool isVolatile = false);
        /**
         * Clone an IfcRelAssociatesAppliedValue Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcRelAssociatesAppliedValue Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcRelAssociatesAppliedValue *cloneIfcRelAssociatesAppliedValue(const IfcRelAssociatesAppliedValue &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcRelAssociatesAppliedValue Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcRelAssociatesAppliedValue entities.
         */
        Step::RefLinkedList< IfcRelAssociatesAppliedValue > &getAllIfcRelAssociatesAppliedValue();
        /**
         * Get the IfcRelAssociatesApproval entity by it's Id.
         * 
         * @param id The Id of the IfcRelAssociatesApproval.
         * @return A pointer to the IfcRelAssociatesApproval if found, NULL otherwise.
         */
        IfcRelAssociatesApproval *getIfcRelAssociatesApproval(Step::Id id);
        /**
         * Removes a IfcRelAssociatesApproval Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcRelAssociatesApproval to remove.
         * @return success.
         */
        bool removeIfcRelAssociatesApproval(IfcRelAssociatesApproval *arg);
        /**
         * Create an IfcRelAssociatesApproval Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcRelAssociatesApproval entity.
         */
        Step::RefPtr< IfcRelAssociatesApproval > createIfcRelAssociatesApproval(bool isVolatile = false);
        /**
         * Clone an IfcRelAssociatesApproval Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcRelAssociatesApproval Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcRelAssociatesApproval *cloneIfcRelAssociatesApproval(const IfcRelAssociatesApproval &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcRelAssociatesApproval Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcRelAssociatesApproval entities.
         */
        Step::RefLinkedList< IfcRelAssociatesApproval > &getAllIfcRelAssociatesApproval();
        /**
         * Get the IfcRelAssociatesClassification entity by it's Id.
         * 
         * @param id The Id of the IfcRelAssociatesClassification.
         * @return A pointer to the IfcRelAssociatesClassification if found, NULL otherwise.
         */
        IfcRelAssociatesClassification *getIfcRelAssociatesClassification(Step::Id id);
        /**
         * Removes a IfcRelAssociatesClassification Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcRelAssociatesClassification to remove.
         * @return success.
         */
        bool removeIfcRelAssociatesClassification(IfcRelAssociatesClassification *arg);
        /**
         * Create an IfcRelAssociatesClassification Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcRelAssociatesClassification entity.
         */
        Step::RefPtr< IfcRelAssociatesClassification > createIfcRelAssociatesClassification(bool isVolatile = false);
        /**
         * Clone an IfcRelAssociatesClassification Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcRelAssociatesClassification Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcRelAssociatesClassification *cloneIfcRelAssociatesClassification(const IfcRelAssociatesClassification &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcRelAssociatesClassification Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcRelAssociatesClassification entities.
         */
        Step::RefLinkedList< IfcRelAssociatesClassification > &getAllIfcRelAssociatesClassification();
        /**
         * Get the IfcRelAssociatesConstraint entity by it's Id.
         * 
         * @param id The Id of the IfcRelAssociatesConstraint.
         * @return A pointer to the IfcRelAssociatesConstraint if found, NULL otherwise.
         */
        IfcRelAssociatesConstraint *getIfcRelAssociatesConstraint(Step::Id id);
        /**
         * Removes a IfcRelAssociatesConstraint Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcRelAssociatesConstraint to remove.
         * @return success.
         */
        bool removeIfcRelAssociatesConstraint(IfcRelAssociatesConstraint *arg);
        /**
         * Create an IfcRelAssociatesConstraint Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcRelAssociatesConstraint entity.
         */
        Step::RefPtr< IfcRelAssociatesConstraint > createIfcRelAssociatesConstraint(bool isVolatile = false);
        /**
         * Clone an IfcRelAssociatesConstraint Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcRelAssociatesConstraint Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcRelAssociatesConstraint *cloneIfcRelAssociatesConstraint(const IfcRelAssociatesConstraint &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcRelAssociatesConstraint Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcRelAssociatesConstraint entities.
         */
        Step::RefLinkedList< IfcRelAssociatesConstraint > &getAllIfcRelAssociatesConstraint();
        /**
         * Get the IfcRelAssociatesDocument entity by it's Id.
         * 
         * @param id The Id of the IfcRelAssociatesDocument.
         * @return A pointer to the IfcRelAssociatesDocument if found, NULL otherwise.
         */
        IfcRelAssociatesDocument *getIfcRelAssociatesDocument(Step::Id id);
        /**
         * Removes a IfcRelAssociatesDocument Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcRelAssociatesDocument to remove.
         * @return success.
         */
        bool removeIfcRelAssociatesDocument(IfcRelAssociatesDocument *arg);
        /**
         * Create an IfcRelAssociatesDocument Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcRelAssociatesDocument entity.
         */
        Step::RefPtr< IfcRelAssociatesDocument > createIfcRelAssociatesDocument(bool isVolatile = false);
        /**
         * Clone an IfcRelAssociatesDocument Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcRelAssociatesDocument Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcRelAssociatesDocument *cloneIfcRelAssociatesDocument(const IfcRelAssociatesDocument &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcRelAssociatesDocument Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcRelAssociatesDocument entities.
         */
        Step::RefLinkedList< IfcRelAssociatesDocument > &getAllIfcRelAssociatesDocument();
        /**
         * Get the IfcRelAssociatesLibrary entity by it's Id.
         * 
         * @param id The Id of the IfcRelAssociatesLibrary.
         * @return A pointer to the IfcRelAssociatesLibrary if found, NULL otherwise.
         */
        IfcRelAssociatesLibrary *getIfcRelAssociatesLibrary(Step::Id id);
        /**
         * Removes a IfcRelAssociatesLibrary Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcRelAssociatesLibrary to remove.
         * @return success.
         */
        bool removeIfcRelAssociatesLibrary(IfcRelAssociatesLibrary *arg);
        /**
         * Create an IfcRelAssociatesLibrary Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcRelAssociatesLibrary entity.
         */
        Step::RefPtr< IfcRelAssociatesLibrary > createIfcRelAssociatesLibrary(bool isVolatile = false);
        /**
         * Clone an IfcRelAssociatesLibrary Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcRelAssociatesLibrary Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcRelAssociatesLibrary *cloneIfcRelAssociatesLibrary(const IfcRelAssociatesLibrary &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcRelAssociatesLibrary Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcRelAssociatesLibrary entities.
         */
        Step::RefLinkedList< IfcRelAssociatesLibrary > &getAllIfcRelAssociatesLibrary();
        /**
         * Get the IfcRelAssociatesMaterial entity by it's Id.
         * 
         * @param id The Id of the IfcRelAssociatesMaterial.
         * @return A pointer to the IfcRelAssociatesMaterial if found, NULL otherwise.
         */
        IfcRelAssociatesMaterial *getIfcRelAssociatesMaterial(Step::Id id);
        /**
         * Removes a IfcRelAssociatesMaterial Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcRelAssociatesMaterial to remove.
         * @return success.
         */
        bool removeIfcRelAssociatesMaterial(IfcRelAssociatesMaterial *arg);
        /**
         * Create an IfcRelAssociatesMaterial Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcRelAssociatesMaterial entity.
         */
        Step::RefPtr< IfcRelAssociatesMaterial > createIfcRelAssociatesMaterial(bool isVolatile = false);
        /**
         * Clone an IfcRelAssociatesMaterial Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcRelAssociatesMaterial Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcRelAssociatesMaterial *cloneIfcRelAssociatesMaterial(const IfcRelAssociatesMaterial &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcRelAssociatesMaterial Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcRelAssociatesMaterial entities.
         */
        Step::RefLinkedList< IfcRelAssociatesMaterial > &getAllIfcRelAssociatesMaterial();
        /**
         * Get the IfcRelAssociatesProfileProperties entity by it's Id.
         * 
         * @param id The Id of the IfcRelAssociatesProfileProperties.
         * @return A pointer to the IfcRelAssociatesProfileProperties if found, NULL otherwise.
         */
        IfcRelAssociatesProfileProperties *getIfcRelAssociatesProfileProperties(Step::Id id);
        /**
         * Removes a IfcRelAssociatesProfileProperties Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcRelAssociatesProfileProperties to remove.
         * @return success.
         */
        bool removeIfcRelAssociatesProfileProperties(IfcRelAssociatesProfileProperties *arg);
        /**
         * Create an IfcRelAssociatesProfileProperties Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcRelAssociatesProfileProperties entity.
         */
        Step::RefPtr< IfcRelAssociatesProfileProperties > createIfcRelAssociatesProfileProperties(bool isVolatile = false);
        /**
         * Clone an IfcRelAssociatesProfileProperties Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcRelAssociatesProfileProperties Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcRelAssociatesProfileProperties *cloneIfcRelAssociatesProfileProperties(const IfcRelAssociatesProfileProperties &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcRelAssociatesProfileProperties Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcRelAssociatesProfileProperties entities.
         */
        Step::RefLinkedList< IfcRelAssociatesProfileProperties > &getAllIfcRelAssociatesProfileProperties();
        /**
         * Get the IfcRelationship entity by it's Id.
         * 
         * @param id The Id of the IfcRelationship.
         * @return A pointer to the IfcRelationship if found, NULL otherwise.
         */
        IfcRelationship *getIfcRelationship(Step::Id id);
        /**
         * Removes a IfcRelationship Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcRelationship to remove.
         * @return success.
         */
        bool removeIfcRelationship(IfcRelationship *arg);
        /**
         * Create an IfcRelationship Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcRelationship entity.
         */
        Step::RefPtr< IfcRelationship > createIfcRelationship(bool isVolatile = false);
        /**
         * Clone an IfcRelationship Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcRelationship Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcRelationship *cloneIfcRelationship(const IfcRelationship &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcRelationship Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcRelationship entities.
         */
        Step::RefLinkedList< IfcRelationship > &getAllIfcRelationship();
        /**
         * Get the IfcRelaxation entity by it's Id.
         * 
         * @param id The Id of the IfcRelaxation.
         * @return A pointer to the IfcRelaxation if found, NULL otherwise.
         */
        IfcRelaxation *getIfcRelaxation(Step::Id id);
        /**
         * Removes a IfcRelaxation Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcRelaxation to remove.
         * @return success.
         */
        bool removeIfcRelaxation(IfcRelaxation *arg);
        /**
         * Create an IfcRelaxation Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcRelaxation entity.
         */
        Step::RefPtr< IfcRelaxation > createIfcRelaxation(bool isVolatile = false);
        /**
         * Clone an IfcRelaxation Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcRelaxation Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcRelaxation *cloneIfcRelaxation(const IfcRelaxation &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcRelaxation Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcRelaxation entities.
         */
        Step::RefLinkedList< IfcRelaxation > &getAllIfcRelaxation();
        /**
         * Get the IfcRelConnects entity by it's Id.
         * 
         * @param id The Id of the IfcRelConnects.
         * @return A pointer to the IfcRelConnects if found, NULL otherwise.
         */
        IfcRelConnects *getIfcRelConnects(Step::Id id);
        /**
         * Removes a IfcRelConnects Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcRelConnects to remove.
         * @return success.
         */
        bool removeIfcRelConnects(IfcRelConnects *arg);
        /**
         * Create an IfcRelConnects Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcRelConnects entity.
         */
        Step::RefPtr< IfcRelConnects > createIfcRelConnects(bool isVolatile = false);
        /**
         * Clone an IfcRelConnects Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcRelConnects Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcRelConnects *cloneIfcRelConnects(const IfcRelConnects &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcRelConnects Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcRelConnects entities.
         */
        Step::RefLinkedList< IfcRelConnects > &getAllIfcRelConnects();
        /**
         * Get the IfcRelConnectsElements entity by it's Id.
         * 
         * @param id The Id of the IfcRelConnectsElements.
         * @return A pointer to the IfcRelConnectsElements if found, NULL otherwise.
         */
        IfcRelConnectsElements *getIfcRelConnectsElements(Step::Id id);
        /**
         * Removes a IfcRelConnectsElements Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcRelConnectsElements to remove.
         * @return success.
         */
        bool removeIfcRelConnectsElements(IfcRelConnectsElements *arg);
        /**
         * Create an IfcRelConnectsElements Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcRelConnectsElements entity.
         */
        Step::RefPtr< IfcRelConnectsElements > createIfcRelConnectsElements(bool isVolatile = false);
        /**
         * Clone an IfcRelConnectsElements Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcRelConnectsElements Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcRelConnectsElements *cloneIfcRelConnectsElements(const IfcRelConnectsElements &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcRelConnectsElements Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcRelConnectsElements entities.
         */
        Step::RefLinkedList< IfcRelConnectsElements > &getAllIfcRelConnectsElements();
        /**
         * Get the IfcRelConnectsPathElements entity by it's Id.
         * 
         * @param id The Id of the IfcRelConnectsPathElements.
         * @return A pointer to the IfcRelConnectsPathElements if found, NULL otherwise.
         */
        IfcRelConnectsPathElements *getIfcRelConnectsPathElements(Step::Id id);
        /**
         * Removes a IfcRelConnectsPathElements Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcRelConnectsPathElements to remove.
         * @return success.
         */
        bool removeIfcRelConnectsPathElements(IfcRelConnectsPathElements *arg);
        /**
         * Create an IfcRelConnectsPathElements Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcRelConnectsPathElements entity.
         */
        Step::RefPtr< IfcRelConnectsPathElements > createIfcRelConnectsPathElements(bool isVolatile = false);
        /**
         * Clone an IfcRelConnectsPathElements Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcRelConnectsPathElements Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcRelConnectsPathElements *cloneIfcRelConnectsPathElements(const IfcRelConnectsPathElements &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcRelConnectsPathElements Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcRelConnectsPathElements entities.
         */
        Step::RefLinkedList< IfcRelConnectsPathElements > &getAllIfcRelConnectsPathElements();
        /**
         * Get the IfcRelConnectsPorts entity by it's Id.
         * 
         * @param id The Id of the IfcRelConnectsPorts.
         * @return A pointer to the IfcRelConnectsPorts if found, NULL otherwise.
         */
        IfcRelConnectsPorts *getIfcRelConnectsPorts(Step::Id id);
        /**
         * Removes a IfcRelConnectsPorts Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcRelConnectsPorts to remove.
         * @return success.
         */
        bool removeIfcRelConnectsPorts(IfcRelConnectsPorts *arg);
        /**
         * Create an IfcRelConnectsPorts Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcRelConnectsPorts entity.
         */
        Step::RefPtr< IfcRelConnectsPorts > createIfcRelConnectsPorts(bool isVolatile = false);
        /**
         * Clone an IfcRelConnectsPorts Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcRelConnectsPorts Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcRelConnectsPorts *cloneIfcRelConnectsPorts(const IfcRelConnectsPorts &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcRelConnectsPorts Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcRelConnectsPorts entities.
         */
        Step::RefLinkedList< IfcRelConnectsPorts > &getAllIfcRelConnectsPorts();
        /**
         * Get the IfcRelConnectsPortToElement entity by it's Id.
         * 
         * @param id The Id of the IfcRelConnectsPortToElement.
         * @return A pointer to the IfcRelConnectsPortToElement if found, NULL otherwise.
         */
        IfcRelConnectsPortToElement *getIfcRelConnectsPortToElement(Step::Id id);
        /**
         * Removes a IfcRelConnectsPortToElement Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcRelConnectsPortToElement to remove.
         * @return success.
         */
        bool removeIfcRelConnectsPortToElement(IfcRelConnectsPortToElement *arg);
        /**
         * Create an IfcRelConnectsPortToElement Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcRelConnectsPortToElement entity.
         */
        Step::RefPtr< IfcRelConnectsPortToElement > createIfcRelConnectsPortToElement(bool isVolatile = false);
        /**
         * Clone an IfcRelConnectsPortToElement Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcRelConnectsPortToElement Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcRelConnectsPortToElement *cloneIfcRelConnectsPortToElement(const IfcRelConnectsPortToElement &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcRelConnectsPortToElement Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcRelConnectsPortToElement entities.
         */
        Step::RefLinkedList< IfcRelConnectsPortToElement > &getAllIfcRelConnectsPortToElement();
        /**
         * Get the IfcRelConnectsStructuralActivity entity by it's Id.
         * 
         * @param id The Id of the IfcRelConnectsStructuralActivity.
         * @return A pointer to the IfcRelConnectsStructuralActivity if found, NULL otherwise.
         */
        IfcRelConnectsStructuralActivity *getIfcRelConnectsStructuralActivity(Step::Id id);
        /**
         * Removes a IfcRelConnectsStructuralActivity Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcRelConnectsStructuralActivity to remove.
         * @return success.
         */
        bool removeIfcRelConnectsStructuralActivity(IfcRelConnectsStructuralActivity *arg);
        /**
         * Create an IfcRelConnectsStructuralActivity Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcRelConnectsStructuralActivity entity.
         */
        Step::RefPtr< IfcRelConnectsStructuralActivity > createIfcRelConnectsStructuralActivity(bool isVolatile = false);
        /**
         * Clone an IfcRelConnectsStructuralActivity Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcRelConnectsStructuralActivity Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcRelConnectsStructuralActivity *cloneIfcRelConnectsStructuralActivity(const IfcRelConnectsStructuralActivity &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcRelConnectsStructuralActivity Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcRelConnectsStructuralActivity entities.
         */
        Step::RefLinkedList< IfcRelConnectsStructuralActivity > &getAllIfcRelConnectsStructuralActivity();
        /**
         * Get the IfcRelConnectsStructuralElement entity by it's Id.
         * 
         * @param id The Id of the IfcRelConnectsStructuralElement.
         * @return A pointer to the IfcRelConnectsStructuralElement if found, NULL otherwise.
         */
        IfcRelConnectsStructuralElement *getIfcRelConnectsStructuralElement(Step::Id id);
        /**
         * Removes a IfcRelConnectsStructuralElement Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcRelConnectsStructuralElement to remove.
         * @return success.
         */
        bool removeIfcRelConnectsStructuralElement(IfcRelConnectsStructuralElement *arg);
        /**
         * Create an IfcRelConnectsStructuralElement Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcRelConnectsStructuralElement entity.
         */
        Step::RefPtr< IfcRelConnectsStructuralElement > createIfcRelConnectsStructuralElement(bool isVolatile = false);
        /**
         * Clone an IfcRelConnectsStructuralElement Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcRelConnectsStructuralElement Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcRelConnectsStructuralElement *cloneIfcRelConnectsStructuralElement(const IfcRelConnectsStructuralElement &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcRelConnectsStructuralElement Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcRelConnectsStructuralElement entities.
         */
        Step::RefLinkedList< IfcRelConnectsStructuralElement > &getAllIfcRelConnectsStructuralElement();
        /**
         * Get the IfcRelConnectsStructuralMember entity by it's Id.
         * 
         * @param id The Id of the IfcRelConnectsStructuralMember.
         * @return A pointer to the IfcRelConnectsStructuralMember if found, NULL otherwise.
         */
        IfcRelConnectsStructuralMember *getIfcRelConnectsStructuralMember(Step::Id id);
        /**
         * Removes a IfcRelConnectsStructuralMember Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcRelConnectsStructuralMember to remove.
         * @return success.
         */
        bool removeIfcRelConnectsStructuralMember(IfcRelConnectsStructuralMember *arg);
        /**
         * Create an IfcRelConnectsStructuralMember Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcRelConnectsStructuralMember entity.
         */
        Step::RefPtr< IfcRelConnectsStructuralMember > createIfcRelConnectsStructuralMember(bool isVolatile = false);
        /**
         * Clone an IfcRelConnectsStructuralMember Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcRelConnectsStructuralMember Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcRelConnectsStructuralMember *cloneIfcRelConnectsStructuralMember(const IfcRelConnectsStructuralMember &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcRelConnectsStructuralMember Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcRelConnectsStructuralMember entities.
         */
        Step::RefLinkedList< IfcRelConnectsStructuralMember > &getAllIfcRelConnectsStructuralMember();
        /**
         * Get the IfcRelConnectsWithEccentricity entity by it's Id.
         * 
         * @param id The Id of the IfcRelConnectsWithEccentricity.
         * @return A pointer to the IfcRelConnectsWithEccentricity if found, NULL otherwise.
         */
        IfcRelConnectsWithEccentricity *getIfcRelConnectsWithEccentricity(Step::Id id);
        /**
         * Removes a IfcRelConnectsWithEccentricity Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcRelConnectsWithEccentricity to remove.
         * @return success.
         */
        bool removeIfcRelConnectsWithEccentricity(IfcRelConnectsWithEccentricity *arg);
        /**
         * Create an IfcRelConnectsWithEccentricity Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcRelConnectsWithEccentricity entity.
         */
        Step::RefPtr< IfcRelConnectsWithEccentricity > createIfcRelConnectsWithEccentricity(bool isVolatile = false);
        /**
         * Clone an IfcRelConnectsWithEccentricity Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcRelConnectsWithEccentricity Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcRelConnectsWithEccentricity *cloneIfcRelConnectsWithEccentricity(const IfcRelConnectsWithEccentricity &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcRelConnectsWithEccentricity Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcRelConnectsWithEccentricity entities.
         */
        Step::RefLinkedList< IfcRelConnectsWithEccentricity > &getAllIfcRelConnectsWithEccentricity();
        /**
         * Get the IfcRelConnectsWithRealizingElements entity by it's Id.
         * 
         * @param id The Id of the IfcRelConnectsWithRealizingElements.
         * @return A pointer to the IfcRelConnectsWithRealizingElements if found, NULL otherwise.
         */
        IfcRelConnectsWithRealizingElements *getIfcRelConnectsWithRealizingElements(Step::Id id);
        /**
         * Removes a IfcRelConnectsWithRealizingElements Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcRelConnectsWithRealizingElements to remove.
         * @return success.
         */
        bool removeIfcRelConnectsWithRealizingElements(IfcRelConnectsWithRealizingElements *arg);
        /**
         * Create an IfcRelConnectsWithRealizingElements Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcRelConnectsWithRealizingElements entity.
         */
        Step::RefPtr< IfcRelConnectsWithRealizingElements > createIfcRelConnectsWithRealizingElements(bool isVolatile = false);
        /**
         * Clone an IfcRelConnectsWithRealizingElements Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcRelConnectsWithRealizingElements Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcRelConnectsWithRealizingElements *cloneIfcRelConnectsWithRealizingElements(const IfcRelConnectsWithRealizingElements &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcRelConnectsWithRealizingElements Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcRelConnectsWithRealizingElements entities.
         */
        Step::RefLinkedList< IfcRelConnectsWithRealizingElements > &getAllIfcRelConnectsWithRealizingElements();
        /**
         * Get the IfcRelContainedInSpatialStructure entity by it's Id.
         * 
         * @param id The Id of the IfcRelContainedInSpatialStructure.
         * @return A pointer to the IfcRelContainedInSpatialStructure if found, NULL otherwise.
         */
        IfcRelContainedInSpatialStructure *getIfcRelContainedInSpatialStructure(Step::Id id);
        /**
         * Removes a IfcRelContainedInSpatialStructure Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcRelContainedInSpatialStructure to remove.
         * @return success.
         */
        bool removeIfcRelContainedInSpatialStructure(IfcRelContainedInSpatialStructure *arg);
        /**
         * Create an IfcRelContainedInSpatialStructure Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcRelContainedInSpatialStructure entity.
         */
        Step::RefPtr< IfcRelContainedInSpatialStructure > createIfcRelContainedInSpatialStructure(bool isVolatile = false);
        /**
         * Clone an IfcRelContainedInSpatialStructure Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcRelContainedInSpatialStructure Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcRelContainedInSpatialStructure *cloneIfcRelContainedInSpatialStructure(const IfcRelContainedInSpatialStructure &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcRelContainedInSpatialStructure Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcRelContainedInSpatialStructure entities.
         */
        Step::RefLinkedList< IfcRelContainedInSpatialStructure > &getAllIfcRelContainedInSpatialStructure();
        /**
         * Get the IfcRelCoversBldgElements entity by it's Id.
         * 
         * @param id The Id of the IfcRelCoversBldgElements.
         * @return A pointer to the IfcRelCoversBldgElements if found, NULL otherwise.
         */
        IfcRelCoversBldgElements *getIfcRelCoversBldgElements(Step::Id id);
        /**
         * Removes a IfcRelCoversBldgElements Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcRelCoversBldgElements to remove.
         * @return success.
         */
        bool removeIfcRelCoversBldgElements(IfcRelCoversBldgElements *arg);
        /**
         * Create an IfcRelCoversBldgElements Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcRelCoversBldgElements entity.
         */
        Step::RefPtr< IfcRelCoversBldgElements > createIfcRelCoversBldgElements(bool isVolatile = false);
        /**
         * Clone an IfcRelCoversBldgElements Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcRelCoversBldgElements Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcRelCoversBldgElements *cloneIfcRelCoversBldgElements(const IfcRelCoversBldgElements &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcRelCoversBldgElements Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcRelCoversBldgElements entities.
         */
        Step::RefLinkedList< IfcRelCoversBldgElements > &getAllIfcRelCoversBldgElements();
        /**
         * Get the IfcRelCoversSpaces entity by it's Id.
         * 
         * @param id The Id of the IfcRelCoversSpaces.
         * @return A pointer to the IfcRelCoversSpaces if found, NULL otherwise.
         */
        IfcRelCoversSpaces *getIfcRelCoversSpaces(Step::Id id);
        /**
         * Removes a IfcRelCoversSpaces Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcRelCoversSpaces to remove.
         * @return success.
         */
        bool removeIfcRelCoversSpaces(IfcRelCoversSpaces *arg);
        /**
         * Create an IfcRelCoversSpaces Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcRelCoversSpaces entity.
         */
        Step::RefPtr< IfcRelCoversSpaces > createIfcRelCoversSpaces(bool isVolatile = false);
        /**
         * Clone an IfcRelCoversSpaces Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcRelCoversSpaces Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcRelCoversSpaces *cloneIfcRelCoversSpaces(const IfcRelCoversSpaces &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcRelCoversSpaces Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcRelCoversSpaces entities.
         */
        Step::RefLinkedList< IfcRelCoversSpaces > &getAllIfcRelCoversSpaces();
        /**
         * Get the IfcRelDecomposes entity by it's Id.
         * 
         * @param id The Id of the IfcRelDecomposes.
         * @return A pointer to the IfcRelDecomposes if found, NULL otherwise.
         */
        IfcRelDecomposes *getIfcRelDecomposes(Step::Id id);
        /**
         * Removes a IfcRelDecomposes Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcRelDecomposes to remove.
         * @return success.
         */
        bool removeIfcRelDecomposes(IfcRelDecomposes *arg);
        /**
         * Create an IfcRelDecomposes Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcRelDecomposes entity.
         */
        Step::RefPtr< IfcRelDecomposes > createIfcRelDecomposes(bool isVolatile = false);
        /**
         * Clone an IfcRelDecomposes Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcRelDecomposes Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcRelDecomposes *cloneIfcRelDecomposes(const IfcRelDecomposes &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcRelDecomposes Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcRelDecomposes entities.
         */
        Step::RefLinkedList< IfcRelDecomposes > &getAllIfcRelDecomposes();
        /**
         * Get the IfcRelDefines entity by it's Id.
         * 
         * @param id The Id of the IfcRelDefines.
         * @return A pointer to the IfcRelDefines if found, NULL otherwise.
         */
        IfcRelDefines *getIfcRelDefines(Step::Id id);
        /**
         * Removes a IfcRelDefines Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcRelDefines to remove.
         * @return success.
         */
        bool removeIfcRelDefines(IfcRelDefines *arg);
        /**
         * Create an IfcRelDefines Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcRelDefines entity.
         */
        Step::RefPtr< IfcRelDefines > createIfcRelDefines(bool isVolatile = false);
        /**
         * Clone an IfcRelDefines Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcRelDefines Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcRelDefines *cloneIfcRelDefines(const IfcRelDefines &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcRelDefines Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcRelDefines entities.
         */
        Step::RefLinkedList< IfcRelDefines > &getAllIfcRelDefines();
        /**
         * Get the IfcRelDefinesByProperties entity by it's Id.
         * 
         * @param id The Id of the IfcRelDefinesByProperties.
         * @return A pointer to the IfcRelDefinesByProperties if found, NULL otherwise.
         */
        IfcRelDefinesByProperties *getIfcRelDefinesByProperties(Step::Id id);
        /**
         * Removes a IfcRelDefinesByProperties Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcRelDefinesByProperties to remove.
         * @return success.
         */
        bool removeIfcRelDefinesByProperties(IfcRelDefinesByProperties *arg);
        /**
         * Create an IfcRelDefinesByProperties Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcRelDefinesByProperties entity.
         */
        Step::RefPtr< IfcRelDefinesByProperties > createIfcRelDefinesByProperties(bool isVolatile = false);
        /**
         * Clone an IfcRelDefinesByProperties Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcRelDefinesByProperties Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcRelDefinesByProperties *cloneIfcRelDefinesByProperties(const IfcRelDefinesByProperties &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcRelDefinesByProperties Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcRelDefinesByProperties entities.
         */
        Step::RefLinkedList< IfcRelDefinesByProperties > &getAllIfcRelDefinesByProperties();
        /**
         * Get the IfcRelDefinesByType entity by it's Id.
         * 
         * @param id The Id of the IfcRelDefinesByType.
         * @return A pointer to the IfcRelDefinesByType if found, NULL otherwise.
         */
        IfcRelDefinesByType *getIfcRelDefinesByType(Step::Id id);
        /**
         * Removes a IfcRelDefinesByType Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcRelDefinesByType to remove.
         * @return success.
         */
        bool removeIfcRelDefinesByType(IfcRelDefinesByType *arg);
        /**
         * Create an IfcRelDefinesByType Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcRelDefinesByType entity.
         */
        Step::RefPtr< IfcRelDefinesByType > createIfcRelDefinesByType(bool isVolatile = false);
        /**
         * Clone an IfcRelDefinesByType Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcRelDefinesByType Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcRelDefinesByType *cloneIfcRelDefinesByType(const IfcRelDefinesByType &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcRelDefinesByType Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcRelDefinesByType entities.
         */
        Step::RefLinkedList< IfcRelDefinesByType > &getAllIfcRelDefinesByType();
        /**
         * Get the IfcRelFillsElement entity by it's Id.
         * 
         * @param id The Id of the IfcRelFillsElement.
         * @return A pointer to the IfcRelFillsElement if found, NULL otherwise.
         */
        IfcRelFillsElement *getIfcRelFillsElement(Step::Id id);
        /**
         * Removes a IfcRelFillsElement Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcRelFillsElement to remove.
         * @return success.
         */
        bool removeIfcRelFillsElement(IfcRelFillsElement *arg);
        /**
         * Create an IfcRelFillsElement Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcRelFillsElement entity.
         */
        Step::RefPtr< IfcRelFillsElement > createIfcRelFillsElement(bool isVolatile = false);
        /**
         * Clone an IfcRelFillsElement Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcRelFillsElement Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcRelFillsElement *cloneIfcRelFillsElement(const IfcRelFillsElement &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcRelFillsElement Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcRelFillsElement entities.
         */
        Step::RefLinkedList< IfcRelFillsElement > &getAllIfcRelFillsElement();
        /**
         * Get the IfcRelFlowControlElements entity by it's Id.
         * 
         * @param id The Id of the IfcRelFlowControlElements.
         * @return A pointer to the IfcRelFlowControlElements if found, NULL otherwise.
         */
        IfcRelFlowControlElements *getIfcRelFlowControlElements(Step::Id id);
        /**
         * Removes a IfcRelFlowControlElements Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcRelFlowControlElements to remove.
         * @return success.
         */
        bool removeIfcRelFlowControlElements(IfcRelFlowControlElements *arg);
        /**
         * Create an IfcRelFlowControlElements Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcRelFlowControlElements entity.
         */
        Step::RefPtr< IfcRelFlowControlElements > createIfcRelFlowControlElements(bool isVolatile = false);
        /**
         * Clone an IfcRelFlowControlElements Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcRelFlowControlElements Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcRelFlowControlElements *cloneIfcRelFlowControlElements(const IfcRelFlowControlElements &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcRelFlowControlElements Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcRelFlowControlElements entities.
         */
        Step::RefLinkedList< IfcRelFlowControlElements > &getAllIfcRelFlowControlElements();
        /**
         * Get the IfcRelInteractionRequirements entity by it's Id.
         * 
         * @param id The Id of the IfcRelInteractionRequirements.
         * @return A pointer to the IfcRelInteractionRequirements if found, NULL otherwise.
         */
        IfcRelInteractionRequirements *getIfcRelInteractionRequirements(Step::Id id);
        /**
         * Removes a IfcRelInteractionRequirements Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcRelInteractionRequirements to remove.
         * @return success.
         */
        bool removeIfcRelInteractionRequirements(IfcRelInteractionRequirements *arg);
        /**
         * Create an IfcRelInteractionRequirements Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcRelInteractionRequirements entity.
         */
        Step::RefPtr< IfcRelInteractionRequirements > createIfcRelInteractionRequirements(bool isVolatile = false);
        /**
         * Clone an IfcRelInteractionRequirements Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcRelInteractionRequirements Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcRelInteractionRequirements *cloneIfcRelInteractionRequirements(const IfcRelInteractionRequirements &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcRelInteractionRequirements Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcRelInteractionRequirements entities.
         */
        Step::RefLinkedList< IfcRelInteractionRequirements > &getAllIfcRelInteractionRequirements();
        /**
         * Get the IfcRelNests entity by it's Id.
         * 
         * @param id The Id of the IfcRelNests.
         * @return A pointer to the IfcRelNests if found, NULL otherwise.
         */
        IfcRelNests *getIfcRelNests(Step::Id id);
        /**
         * Removes a IfcRelNests Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcRelNests to remove.
         * @return success.
         */
        bool removeIfcRelNests(IfcRelNests *arg);
        /**
         * Create an IfcRelNests Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcRelNests entity.
         */
        Step::RefPtr< IfcRelNests > createIfcRelNests(bool isVolatile = false);
        /**
         * Clone an IfcRelNests Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcRelNests Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcRelNests *cloneIfcRelNests(const IfcRelNests &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcRelNests Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcRelNests entities.
         */
        Step::RefLinkedList< IfcRelNests > &getAllIfcRelNests();
        /**
         * Get the IfcRelOccupiesSpaces entity by it's Id.
         * 
         * @param id The Id of the IfcRelOccupiesSpaces.
         * @return A pointer to the IfcRelOccupiesSpaces if found, NULL otherwise.
         */
        IfcRelOccupiesSpaces *getIfcRelOccupiesSpaces(Step::Id id);
        /**
         * Removes a IfcRelOccupiesSpaces Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcRelOccupiesSpaces to remove.
         * @return success.
         */
        bool removeIfcRelOccupiesSpaces(IfcRelOccupiesSpaces *arg);
        /**
         * Create an IfcRelOccupiesSpaces Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcRelOccupiesSpaces entity.
         */
        Step::RefPtr< IfcRelOccupiesSpaces > createIfcRelOccupiesSpaces(bool isVolatile = false);
        /**
         * Clone an IfcRelOccupiesSpaces Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcRelOccupiesSpaces Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcRelOccupiesSpaces *cloneIfcRelOccupiesSpaces(const IfcRelOccupiesSpaces &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcRelOccupiesSpaces Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcRelOccupiesSpaces entities.
         */
        Step::RefLinkedList< IfcRelOccupiesSpaces > &getAllIfcRelOccupiesSpaces();
        /**
         * Get the IfcRelOverridesProperties entity by it's Id.
         * 
         * @param id The Id of the IfcRelOverridesProperties.
         * @return A pointer to the IfcRelOverridesProperties if found, NULL otherwise.
         */
        IfcRelOverridesProperties *getIfcRelOverridesProperties(Step::Id id);
        /**
         * Removes a IfcRelOverridesProperties Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcRelOverridesProperties to remove.
         * @return success.
         */
        bool removeIfcRelOverridesProperties(IfcRelOverridesProperties *arg);
        /**
         * Create an IfcRelOverridesProperties Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcRelOverridesProperties entity.
         */
        Step::RefPtr< IfcRelOverridesProperties > createIfcRelOverridesProperties(bool isVolatile = false);
        /**
         * Clone an IfcRelOverridesProperties Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcRelOverridesProperties Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcRelOverridesProperties *cloneIfcRelOverridesProperties(const IfcRelOverridesProperties &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcRelOverridesProperties Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcRelOverridesProperties entities.
         */
        Step::RefLinkedList< IfcRelOverridesProperties > &getAllIfcRelOverridesProperties();
        /**
         * Get the IfcRelProjectsElement entity by it's Id.
         * 
         * @param id The Id of the IfcRelProjectsElement.
         * @return A pointer to the IfcRelProjectsElement if found, NULL otherwise.
         */
        IfcRelProjectsElement *getIfcRelProjectsElement(Step::Id id);
        /**
         * Removes a IfcRelProjectsElement Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcRelProjectsElement to remove.
         * @return success.
         */
        bool removeIfcRelProjectsElement(IfcRelProjectsElement *arg);
        /**
         * Create an IfcRelProjectsElement Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcRelProjectsElement entity.
         */
        Step::RefPtr< IfcRelProjectsElement > createIfcRelProjectsElement(bool isVolatile = false);
        /**
         * Clone an IfcRelProjectsElement Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcRelProjectsElement Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcRelProjectsElement *cloneIfcRelProjectsElement(const IfcRelProjectsElement &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcRelProjectsElement Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcRelProjectsElement entities.
         */
        Step::RefLinkedList< IfcRelProjectsElement > &getAllIfcRelProjectsElement();
        /**
         * Get the IfcRelReferencedInSpatialStructure entity by it's Id.
         * 
         * @param id The Id of the IfcRelReferencedInSpatialStructure.
         * @return A pointer to the IfcRelReferencedInSpatialStructure if found, NULL otherwise.
         */
        IfcRelReferencedInSpatialStructure *getIfcRelReferencedInSpatialStructure(Step::Id id);
        /**
         * Removes a IfcRelReferencedInSpatialStructure Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcRelReferencedInSpatialStructure to remove.
         * @return success.
         */
        bool removeIfcRelReferencedInSpatialStructure(IfcRelReferencedInSpatialStructure *arg);
        /**
         * Create an IfcRelReferencedInSpatialStructure Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcRelReferencedInSpatialStructure entity.
         */
        Step::RefPtr< IfcRelReferencedInSpatialStructure > createIfcRelReferencedInSpatialStructure(bool isVolatile = false);
        /**
         * Clone an IfcRelReferencedInSpatialStructure Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcRelReferencedInSpatialStructure Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcRelReferencedInSpatialStructure *cloneIfcRelReferencedInSpatialStructure(const IfcRelReferencedInSpatialStructure &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcRelReferencedInSpatialStructure Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcRelReferencedInSpatialStructure entities.
         */
        Step::RefLinkedList< IfcRelReferencedInSpatialStructure > &getAllIfcRelReferencedInSpatialStructure();
        /**
         * Get the IfcRelSchedulesCostItems entity by it's Id.
         * 
         * @param id The Id of the IfcRelSchedulesCostItems.
         * @return A pointer to the IfcRelSchedulesCostItems if found, NULL otherwise.
         */
        IfcRelSchedulesCostItems *getIfcRelSchedulesCostItems(Step::Id id);
        /**
         * Removes a IfcRelSchedulesCostItems Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcRelSchedulesCostItems to remove.
         * @return success.
         */
        bool removeIfcRelSchedulesCostItems(IfcRelSchedulesCostItems *arg);
        /**
         * Create an IfcRelSchedulesCostItems Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcRelSchedulesCostItems entity.
         */
        Step::RefPtr< IfcRelSchedulesCostItems > createIfcRelSchedulesCostItems(bool isVolatile = false);
        /**
         * Clone an IfcRelSchedulesCostItems Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcRelSchedulesCostItems Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcRelSchedulesCostItems *cloneIfcRelSchedulesCostItems(const IfcRelSchedulesCostItems &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcRelSchedulesCostItems Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcRelSchedulesCostItems entities.
         */
        Step::RefLinkedList< IfcRelSchedulesCostItems > &getAllIfcRelSchedulesCostItems();
        /**
         * Get the IfcRelSequence entity by it's Id.
         * 
         * @param id The Id of the IfcRelSequence.
         * @return A pointer to the IfcRelSequence if found, NULL otherwise.
         */
        IfcRelSequence *getIfcRelSequence(Step::Id id);
        /**
         * Removes a IfcRelSequence Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcRelSequence to remove.
         * @return success.
         */
        bool removeIfcRelSequence(IfcRelSequence *arg);
        /**
         * Create an IfcRelSequence Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcRelSequence entity.
         */
        Step::RefPtr< IfcRelSequence > createIfcRelSequence(bool isVolatile = false);
        /**
         * Clone an IfcRelSequence Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcRelSequence Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcRelSequence *cloneIfcRelSequence(const IfcRelSequence &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcRelSequence Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcRelSequence entities.
         */
        Step::RefLinkedList< IfcRelSequence > &getAllIfcRelSequence();
        /**
         * Get the IfcRelServicesBuildings entity by it's Id.
         * 
         * @param id The Id of the IfcRelServicesBuildings.
         * @return A pointer to the IfcRelServicesBuildings if found, NULL otherwise.
         */
        IfcRelServicesBuildings *getIfcRelServicesBuildings(Step::Id id);
        /**
         * Removes a IfcRelServicesBuildings Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcRelServicesBuildings to remove.
         * @return success.
         */
        bool removeIfcRelServicesBuildings(IfcRelServicesBuildings *arg);
        /**
         * Create an IfcRelServicesBuildings Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcRelServicesBuildings entity.
         */
        Step::RefPtr< IfcRelServicesBuildings > createIfcRelServicesBuildings(bool isVolatile = false);
        /**
         * Clone an IfcRelServicesBuildings Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcRelServicesBuildings Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcRelServicesBuildings *cloneIfcRelServicesBuildings(const IfcRelServicesBuildings &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcRelServicesBuildings Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcRelServicesBuildings entities.
         */
        Step::RefLinkedList< IfcRelServicesBuildings > &getAllIfcRelServicesBuildings();
        /**
         * Get the IfcRelSpaceBoundary entity by it's Id.
         * 
         * @param id The Id of the IfcRelSpaceBoundary.
         * @return A pointer to the IfcRelSpaceBoundary if found, NULL otherwise.
         */
        IfcRelSpaceBoundary *getIfcRelSpaceBoundary(Step::Id id);
        /**
         * Removes a IfcRelSpaceBoundary Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcRelSpaceBoundary to remove.
         * @return success.
         */
        bool removeIfcRelSpaceBoundary(IfcRelSpaceBoundary *arg);
        /**
         * Create an IfcRelSpaceBoundary Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcRelSpaceBoundary entity.
         */
        Step::RefPtr< IfcRelSpaceBoundary > createIfcRelSpaceBoundary(bool isVolatile = false);
        /**
         * Clone an IfcRelSpaceBoundary Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcRelSpaceBoundary Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcRelSpaceBoundary *cloneIfcRelSpaceBoundary(const IfcRelSpaceBoundary &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcRelSpaceBoundary Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcRelSpaceBoundary entities.
         */
        Step::RefLinkedList< IfcRelSpaceBoundary > &getAllIfcRelSpaceBoundary();
        /**
         * Get the IfcRelVoidsElement entity by it's Id.
         * 
         * @param id The Id of the IfcRelVoidsElement.
         * @return A pointer to the IfcRelVoidsElement if found, NULL otherwise.
         */
        IfcRelVoidsElement *getIfcRelVoidsElement(Step::Id id);
        /**
         * Removes a IfcRelVoidsElement Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcRelVoidsElement to remove.
         * @return success.
         */
        bool removeIfcRelVoidsElement(IfcRelVoidsElement *arg);
        /**
         * Create an IfcRelVoidsElement Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcRelVoidsElement entity.
         */
        Step::RefPtr< IfcRelVoidsElement > createIfcRelVoidsElement(bool isVolatile = false);
        /**
         * Clone an IfcRelVoidsElement Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcRelVoidsElement Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcRelVoidsElement *cloneIfcRelVoidsElement(const IfcRelVoidsElement &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcRelVoidsElement Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcRelVoidsElement entities.
         */
        Step::RefLinkedList< IfcRelVoidsElement > &getAllIfcRelVoidsElement();
        /**
         * Get the IfcRepresentation entity by it's Id.
         * 
         * @param id The Id of the IfcRepresentation.
         * @return A pointer to the IfcRepresentation if found, NULL otherwise.
         */
        IfcRepresentation *getIfcRepresentation(Step::Id id);
        /**
         * Removes a IfcRepresentation Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcRepresentation to remove.
         * @return success.
         */
        bool removeIfcRepresentation(IfcRepresentation *arg);
        /**
         * Create an IfcRepresentation Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcRepresentation entity.
         */
        Step::RefPtr< IfcRepresentation > createIfcRepresentation(bool isVolatile = false);
        /**
         * Clone an IfcRepresentation Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcRepresentation Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcRepresentation *cloneIfcRepresentation(const IfcRepresentation &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcRepresentation Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcRepresentation entities.
         */
        Step::RefLinkedList< IfcRepresentation > &getAllIfcRepresentation();
        /**
         * Get the IfcRepresentationContext entity by it's Id.
         * 
         * @param id The Id of the IfcRepresentationContext.
         * @return A pointer to the IfcRepresentationContext if found, NULL otherwise.
         */
        IfcRepresentationContext *getIfcRepresentationContext(Step::Id id);
        /**
         * Removes a IfcRepresentationContext Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcRepresentationContext to remove.
         * @return success.
         */
        bool removeIfcRepresentationContext(IfcRepresentationContext *arg);
        /**
         * Create an IfcRepresentationContext Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcRepresentationContext entity.
         */
        Step::RefPtr< IfcRepresentationContext > createIfcRepresentationContext(bool isVolatile = false);
        /**
         * Clone an IfcRepresentationContext Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcRepresentationContext Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcRepresentationContext *cloneIfcRepresentationContext(const IfcRepresentationContext &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcRepresentationContext Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcRepresentationContext entities.
         */
        Step::RefLinkedList< IfcRepresentationContext > &getAllIfcRepresentationContext();
        /**
         * Get the IfcRepresentationItem entity by it's Id.
         * 
         * @param id The Id of the IfcRepresentationItem.
         * @return A pointer to the IfcRepresentationItem if found, NULL otherwise.
         */
        IfcRepresentationItem *getIfcRepresentationItem(Step::Id id);
        /**
         * Removes a IfcRepresentationItem Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcRepresentationItem to remove.
         * @return success.
         */
        bool removeIfcRepresentationItem(IfcRepresentationItem *arg);
        /**
         * Create an IfcRepresentationItem Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcRepresentationItem entity.
         */
        Step::RefPtr< IfcRepresentationItem > createIfcRepresentationItem(bool isVolatile = false);
        /**
         * Clone an IfcRepresentationItem Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcRepresentationItem Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcRepresentationItem *cloneIfcRepresentationItem(const IfcRepresentationItem &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcRepresentationItem Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcRepresentationItem entities.
         */
        Step::RefLinkedList< IfcRepresentationItem > &getAllIfcRepresentationItem();
        /**
         * Get the IfcRepresentationMap entity by it's Id.
         * 
         * @param id The Id of the IfcRepresentationMap.
         * @return A pointer to the IfcRepresentationMap if found, NULL otherwise.
         */
        IfcRepresentationMap *getIfcRepresentationMap(Step::Id id);
        /**
         * Removes a IfcRepresentationMap Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcRepresentationMap to remove.
         * @return success.
         */
        bool removeIfcRepresentationMap(IfcRepresentationMap *arg);
        /**
         * Create an IfcRepresentationMap Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcRepresentationMap entity.
         */
        Step::RefPtr< IfcRepresentationMap > createIfcRepresentationMap(bool isVolatile = false);
        /**
         * Clone an IfcRepresentationMap Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcRepresentationMap Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcRepresentationMap *cloneIfcRepresentationMap(const IfcRepresentationMap &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcRepresentationMap Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcRepresentationMap entities.
         */
        Step::RefLinkedList< IfcRepresentationMap > &getAllIfcRepresentationMap();
        /**
         * Get the IfcResource entity by it's Id.
         * 
         * @param id The Id of the IfcResource.
         * @return A pointer to the IfcResource if found, NULL otherwise.
         */
        IfcResource *getIfcResource(Step::Id id);
        /**
         * Removes a IfcResource Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcResource to remove.
         * @return success.
         */
        bool removeIfcResource(IfcResource *arg);
        /**
         * Create an IfcResource Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcResource entity.
         */
        Step::RefPtr< IfcResource > createIfcResource(bool isVolatile = false);
        /**
         * Clone an IfcResource Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcResource Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcResource *cloneIfcResource(const IfcResource &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcResource Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcResource entities.
         */
        Step::RefLinkedList< IfcResource > &getAllIfcResource();
        /**
         * Get the IfcRevolvedAreaSolid entity by it's Id.
         * 
         * @param id The Id of the IfcRevolvedAreaSolid.
         * @return A pointer to the IfcRevolvedAreaSolid if found, NULL otherwise.
         */
        IfcRevolvedAreaSolid *getIfcRevolvedAreaSolid(Step::Id id);
        /**
         * Removes a IfcRevolvedAreaSolid Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcRevolvedAreaSolid to remove.
         * @return success.
         */
        bool removeIfcRevolvedAreaSolid(IfcRevolvedAreaSolid *arg);
        /**
         * Create an IfcRevolvedAreaSolid Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcRevolvedAreaSolid entity.
         */
        Step::RefPtr< IfcRevolvedAreaSolid > createIfcRevolvedAreaSolid(bool isVolatile = false);
        /**
         * Clone an IfcRevolvedAreaSolid Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcRevolvedAreaSolid Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcRevolvedAreaSolid *cloneIfcRevolvedAreaSolid(const IfcRevolvedAreaSolid &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcRevolvedAreaSolid Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcRevolvedAreaSolid entities.
         */
        Step::RefLinkedList< IfcRevolvedAreaSolid > &getAllIfcRevolvedAreaSolid();
        /**
         * Get the IfcRibPlateProfileProperties entity by it's Id.
         * 
         * @param id The Id of the IfcRibPlateProfileProperties.
         * @return A pointer to the IfcRibPlateProfileProperties if found, NULL otherwise.
         */
        IfcRibPlateProfileProperties *getIfcRibPlateProfileProperties(Step::Id id);
        /**
         * Removes a IfcRibPlateProfileProperties Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcRibPlateProfileProperties to remove.
         * @return success.
         */
        bool removeIfcRibPlateProfileProperties(IfcRibPlateProfileProperties *arg);
        /**
         * Create an IfcRibPlateProfileProperties Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcRibPlateProfileProperties entity.
         */
        Step::RefPtr< IfcRibPlateProfileProperties > createIfcRibPlateProfileProperties(bool isVolatile = false);
        /**
         * Clone an IfcRibPlateProfileProperties Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcRibPlateProfileProperties Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcRibPlateProfileProperties *cloneIfcRibPlateProfileProperties(const IfcRibPlateProfileProperties &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcRibPlateProfileProperties Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcRibPlateProfileProperties entities.
         */
        Step::RefLinkedList< IfcRibPlateProfileProperties > &getAllIfcRibPlateProfileProperties();
        /**
         * Get the IfcRightCircularCone entity by it's Id.
         * 
         * @param id The Id of the IfcRightCircularCone.
         * @return A pointer to the IfcRightCircularCone if found, NULL otherwise.
         */
        IfcRightCircularCone *getIfcRightCircularCone(Step::Id id);
        /**
         * Removes a IfcRightCircularCone Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcRightCircularCone to remove.
         * @return success.
         */
        bool removeIfcRightCircularCone(IfcRightCircularCone *arg);
        /**
         * Create an IfcRightCircularCone Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcRightCircularCone entity.
         */
        Step::RefPtr< IfcRightCircularCone > createIfcRightCircularCone(bool isVolatile = false);
        /**
         * Clone an IfcRightCircularCone Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcRightCircularCone Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcRightCircularCone *cloneIfcRightCircularCone(const IfcRightCircularCone &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcRightCircularCone Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcRightCircularCone entities.
         */
        Step::RefLinkedList< IfcRightCircularCone > &getAllIfcRightCircularCone();
        /**
         * Get the IfcRightCircularCylinder entity by it's Id.
         * 
         * @param id The Id of the IfcRightCircularCylinder.
         * @return A pointer to the IfcRightCircularCylinder if found, NULL otherwise.
         */
        IfcRightCircularCylinder *getIfcRightCircularCylinder(Step::Id id);
        /**
         * Removes a IfcRightCircularCylinder Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcRightCircularCylinder to remove.
         * @return success.
         */
        bool removeIfcRightCircularCylinder(IfcRightCircularCylinder *arg);
        /**
         * Create an IfcRightCircularCylinder Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcRightCircularCylinder entity.
         */
        Step::RefPtr< IfcRightCircularCylinder > createIfcRightCircularCylinder(bool isVolatile = false);
        /**
         * Clone an IfcRightCircularCylinder Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcRightCircularCylinder Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcRightCircularCylinder *cloneIfcRightCircularCylinder(const IfcRightCircularCylinder &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcRightCircularCylinder Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcRightCircularCylinder entities.
         */
        Step::RefLinkedList< IfcRightCircularCylinder > &getAllIfcRightCircularCylinder();
        /**
         * Get the IfcRoof entity by it's Id.
         * 
         * @param id The Id of the IfcRoof.
         * @return A pointer to the IfcRoof if found, NULL otherwise.
         */
        IfcRoof *getIfcRoof(Step::Id id);
        /**
         * Removes a IfcRoof Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcRoof to remove.
         * @return success.
         */
        bool removeIfcRoof(IfcRoof *arg);
        /**
         * Create an IfcRoof Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcRoof entity.
         */
        Step::RefPtr< IfcRoof > createIfcRoof(bool isVolatile = false);
        /**
         * Clone an IfcRoof Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcRoof Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcRoof *cloneIfcRoof(const IfcRoof &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcRoof Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcRoof entities.
         */
        Step::RefLinkedList< IfcRoof > &getAllIfcRoof();
        /**
         * Get the IfcRoot entity by it's Id.
         * 
         * @param id The Id of the IfcRoot.
         * @return A pointer to the IfcRoot if found, NULL otherwise.
         */
        IfcRoot *getIfcRoot(Step::Id id);
        /**
         * Removes a IfcRoot Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcRoot to remove.
         * @return success.
         */
        bool removeIfcRoot(IfcRoot *arg);
        /**
         * Create an IfcRoot Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcRoot entity.
         */
        Step::RefPtr< IfcRoot > createIfcRoot(bool isVolatile = false);
        /**
         * Clone an IfcRoot Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcRoot Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcRoot *cloneIfcRoot(const IfcRoot &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcRoot Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcRoot entities.
         */
        Step::RefLinkedList< IfcRoot > &getAllIfcRoot();
        /**
         * Get the IfcRoundedEdgeFeature entity by it's Id.
         * 
         * @param id The Id of the IfcRoundedEdgeFeature.
         * @return A pointer to the IfcRoundedEdgeFeature if found, NULL otherwise.
         */
        IfcRoundedEdgeFeature *getIfcRoundedEdgeFeature(Step::Id id);
        /**
         * Removes a IfcRoundedEdgeFeature Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcRoundedEdgeFeature to remove.
         * @return success.
         */
        bool removeIfcRoundedEdgeFeature(IfcRoundedEdgeFeature *arg);
        /**
         * Create an IfcRoundedEdgeFeature Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcRoundedEdgeFeature entity.
         */
        Step::RefPtr< IfcRoundedEdgeFeature > createIfcRoundedEdgeFeature(bool isVolatile = false);
        /**
         * Clone an IfcRoundedEdgeFeature Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcRoundedEdgeFeature Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcRoundedEdgeFeature *cloneIfcRoundedEdgeFeature(const IfcRoundedEdgeFeature &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcRoundedEdgeFeature Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcRoundedEdgeFeature entities.
         */
        Step::RefLinkedList< IfcRoundedEdgeFeature > &getAllIfcRoundedEdgeFeature();
        /**
         * Get the IfcRoundedRectangleProfileDef entity by it's Id.
         * 
         * @param id The Id of the IfcRoundedRectangleProfileDef.
         * @return A pointer to the IfcRoundedRectangleProfileDef if found, NULL otherwise.
         */
        IfcRoundedRectangleProfileDef *getIfcRoundedRectangleProfileDef(Step::Id id);
        /**
         * Removes a IfcRoundedRectangleProfileDef Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcRoundedRectangleProfileDef to remove.
         * @return success.
         */
        bool removeIfcRoundedRectangleProfileDef(IfcRoundedRectangleProfileDef *arg);
        /**
         * Create an IfcRoundedRectangleProfileDef Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcRoundedRectangleProfileDef entity.
         */
        Step::RefPtr< IfcRoundedRectangleProfileDef > createIfcRoundedRectangleProfileDef(bool isVolatile = false);
        /**
         * Clone an IfcRoundedRectangleProfileDef Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcRoundedRectangleProfileDef Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcRoundedRectangleProfileDef *cloneIfcRoundedRectangleProfileDef(const IfcRoundedRectangleProfileDef &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcRoundedRectangleProfileDef Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcRoundedRectangleProfileDef entities.
         */
        Step::RefLinkedList< IfcRoundedRectangleProfileDef > &getAllIfcRoundedRectangleProfileDef();
        /**
         * Get the IfcSanitaryTerminalType entity by it's Id.
         * 
         * @param id The Id of the IfcSanitaryTerminalType.
         * @return A pointer to the IfcSanitaryTerminalType if found, NULL otherwise.
         */
        IfcSanitaryTerminalType *getIfcSanitaryTerminalType(Step::Id id);
        /**
         * Removes a IfcSanitaryTerminalType Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcSanitaryTerminalType to remove.
         * @return success.
         */
        bool removeIfcSanitaryTerminalType(IfcSanitaryTerminalType *arg);
        /**
         * Create an IfcSanitaryTerminalType Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcSanitaryTerminalType entity.
         */
        Step::RefPtr< IfcSanitaryTerminalType > createIfcSanitaryTerminalType(bool isVolatile = false);
        /**
         * Clone an IfcSanitaryTerminalType Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcSanitaryTerminalType Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcSanitaryTerminalType *cloneIfcSanitaryTerminalType(const IfcSanitaryTerminalType &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcSanitaryTerminalType Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcSanitaryTerminalType entities.
         */
        Step::RefLinkedList< IfcSanitaryTerminalType > &getAllIfcSanitaryTerminalType();
        /**
         * Get the IfcScheduleTimeControl entity by it's Id.
         * 
         * @param id The Id of the IfcScheduleTimeControl.
         * @return A pointer to the IfcScheduleTimeControl if found, NULL otherwise.
         */
        IfcScheduleTimeControl *getIfcScheduleTimeControl(Step::Id id);
        /**
         * Removes a IfcScheduleTimeControl Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcScheduleTimeControl to remove.
         * @return success.
         */
        bool removeIfcScheduleTimeControl(IfcScheduleTimeControl *arg);
        /**
         * Create an IfcScheduleTimeControl Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcScheduleTimeControl entity.
         */
        Step::RefPtr< IfcScheduleTimeControl > createIfcScheduleTimeControl(bool isVolatile = false);
        /**
         * Clone an IfcScheduleTimeControl Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcScheduleTimeControl Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcScheduleTimeControl *cloneIfcScheduleTimeControl(const IfcScheduleTimeControl &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcScheduleTimeControl Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcScheduleTimeControl entities.
         */
        Step::RefLinkedList< IfcScheduleTimeControl > &getAllIfcScheduleTimeControl();
        /**
         * Get the IfcSectionedSpine entity by it's Id.
         * 
         * @param id The Id of the IfcSectionedSpine.
         * @return A pointer to the IfcSectionedSpine if found, NULL otherwise.
         */
        IfcSectionedSpine *getIfcSectionedSpine(Step::Id id);
        /**
         * Removes a IfcSectionedSpine Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcSectionedSpine to remove.
         * @return success.
         */
        bool removeIfcSectionedSpine(IfcSectionedSpine *arg);
        /**
         * Create an IfcSectionedSpine Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcSectionedSpine entity.
         */
        Step::RefPtr< IfcSectionedSpine > createIfcSectionedSpine(bool isVolatile = false);
        /**
         * Clone an IfcSectionedSpine Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcSectionedSpine Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcSectionedSpine *cloneIfcSectionedSpine(const IfcSectionedSpine &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcSectionedSpine Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcSectionedSpine entities.
         */
        Step::RefLinkedList< IfcSectionedSpine > &getAllIfcSectionedSpine();
        /**
         * Get the IfcSectionProperties entity by it's Id.
         * 
         * @param id The Id of the IfcSectionProperties.
         * @return A pointer to the IfcSectionProperties if found, NULL otherwise.
         */
        IfcSectionProperties *getIfcSectionProperties(Step::Id id);
        /**
         * Removes a IfcSectionProperties Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcSectionProperties to remove.
         * @return success.
         */
        bool removeIfcSectionProperties(IfcSectionProperties *arg);
        /**
         * Create an IfcSectionProperties Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcSectionProperties entity.
         */
        Step::RefPtr< IfcSectionProperties > createIfcSectionProperties(bool isVolatile = false);
        /**
         * Clone an IfcSectionProperties Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcSectionProperties Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcSectionProperties *cloneIfcSectionProperties(const IfcSectionProperties &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcSectionProperties Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcSectionProperties entities.
         */
        Step::RefLinkedList< IfcSectionProperties > &getAllIfcSectionProperties();
        /**
         * Get the IfcSectionReinforcementProperties entity by it's Id.
         * 
         * @param id The Id of the IfcSectionReinforcementProperties.
         * @return A pointer to the IfcSectionReinforcementProperties if found, NULL otherwise.
         */
        IfcSectionReinforcementProperties *getIfcSectionReinforcementProperties(Step::Id id);
        /**
         * Removes a IfcSectionReinforcementProperties Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcSectionReinforcementProperties to remove.
         * @return success.
         */
        bool removeIfcSectionReinforcementProperties(IfcSectionReinforcementProperties *arg);
        /**
         * Create an IfcSectionReinforcementProperties Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcSectionReinforcementProperties entity.
         */
        Step::RefPtr< IfcSectionReinforcementProperties > createIfcSectionReinforcementProperties(bool isVolatile = false);
        /**
         * Clone an IfcSectionReinforcementProperties Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcSectionReinforcementProperties Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcSectionReinforcementProperties *cloneIfcSectionReinforcementProperties(const IfcSectionReinforcementProperties &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcSectionReinforcementProperties Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcSectionReinforcementProperties entities.
         */
        Step::RefLinkedList< IfcSectionReinforcementProperties > &getAllIfcSectionReinforcementProperties();
        /**
         * Get the IfcSensorType entity by it's Id.
         * 
         * @param id The Id of the IfcSensorType.
         * @return A pointer to the IfcSensorType if found, NULL otherwise.
         */
        IfcSensorType *getIfcSensorType(Step::Id id);
        /**
         * Removes a IfcSensorType Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcSensorType to remove.
         * @return success.
         */
        bool removeIfcSensorType(IfcSensorType *arg);
        /**
         * Create an IfcSensorType Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcSensorType entity.
         */
        Step::RefPtr< IfcSensorType > createIfcSensorType(bool isVolatile = false);
        /**
         * Clone an IfcSensorType Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcSensorType Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcSensorType *cloneIfcSensorType(const IfcSensorType &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcSensorType Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcSensorType entities.
         */
        Step::RefLinkedList< IfcSensorType > &getAllIfcSensorType();
        /**
         * Get the IfcServiceLife entity by it's Id.
         * 
         * @param id The Id of the IfcServiceLife.
         * @return A pointer to the IfcServiceLife if found, NULL otherwise.
         */
        IfcServiceLife *getIfcServiceLife(Step::Id id);
        /**
         * Removes a IfcServiceLife Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcServiceLife to remove.
         * @return success.
         */
        bool removeIfcServiceLife(IfcServiceLife *arg);
        /**
         * Create an IfcServiceLife Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcServiceLife entity.
         */
        Step::RefPtr< IfcServiceLife > createIfcServiceLife(bool isVolatile = false);
        /**
         * Clone an IfcServiceLife Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcServiceLife Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcServiceLife *cloneIfcServiceLife(const IfcServiceLife &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcServiceLife Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcServiceLife entities.
         */
        Step::RefLinkedList< IfcServiceLife > &getAllIfcServiceLife();
        /**
         * Get the IfcServiceLifeFactor entity by it's Id.
         * 
         * @param id The Id of the IfcServiceLifeFactor.
         * @return A pointer to the IfcServiceLifeFactor if found, NULL otherwise.
         */
        IfcServiceLifeFactor *getIfcServiceLifeFactor(Step::Id id);
        /**
         * Removes a IfcServiceLifeFactor Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcServiceLifeFactor to remove.
         * @return success.
         */
        bool removeIfcServiceLifeFactor(IfcServiceLifeFactor *arg);
        /**
         * Create an IfcServiceLifeFactor Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcServiceLifeFactor entity.
         */
        Step::RefPtr< IfcServiceLifeFactor > createIfcServiceLifeFactor(bool isVolatile = false);
        /**
         * Clone an IfcServiceLifeFactor Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcServiceLifeFactor Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcServiceLifeFactor *cloneIfcServiceLifeFactor(const IfcServiceLifeFactor &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcServiceLifeFactor Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcServiceLifeFactor entities.
         */
        Step::RefLinkedList< IfcServiceLifeFactor > &getAllIfcServiceLifeFactor();
        /**
         * Get the IfcShapeAspect entity by it's Id.
         * 
         * @param id The Id of the IfcShapeAspect.
         * @return A pointer to the IfcShapeAspect if found, NULL otherwise.
         */
        IfcShapeAspect *getIfcShapeAspect(Step::Id id);
        /**
         * Removes a IfcShapeAspect Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcShapeAspect to remove.
         * @return success.
         */
        bool removeIfcShapeAspect(IfcShapeAspect *arg);
        /**
         * Create an IfcShapeAspect Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcShapeAspect entity.
         */
        Step::RefPtr< IfcShapeAspect > createIfcShapeAspect(bool isVolatile = false);
        /**
         * Clone an IfcShapeAspect Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcShapeAspect Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcShapeAspect *cloneIfcShapeAspect(const IfcShapeAspect &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcShapeAspect Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcShapeAspect entities.
         */
        Step::RefLinkedList< IfcShapeAspect > &getAllIfcShapeAspect();
        /**
         * Get the IfcShapeModel entity by it's Id.
         * 
         * @param id The Id of the IfcShapeModel.
         * @return A pointer to the IfcShapeModel if found, NULL otherwise.
         */
        IfcShapeModel *getIfcShapeModel(Step::Id id);
        /**
         * Removes a IfcShapeModel Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcShapeModel to remove.
         * @return success.
         */
        bool removeIfcShapeModel(IfcShapeModel *arg);
        /**
         * Create an IfcShapeModel Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcShapeModel entity.
         */
        Step::RefPtr< IfcShapeModel > createIfcShapeModel(bool isVolatile = false);
        /**
         * Clone an IfcShapeModel Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcShapeModel Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcShapeModel *cloneIfcShapeModel(const IfcShapeModel &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcShapeModel Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcShapeModel entities.
         */
        Step::RefLinkedList< IfcShapeModel > &getAllIfcShapeModel();
        /**
         * Get the IfcShapeRepresentation entity by it's Id.
         * 
         * @param id The Id of the IfcShapeRepresentation.
         * @return A pointer to the IfcShapeRepresentation if found, NULL otherwise.
         */
        IfcShapeRepresentation *getIfcShapeRepresentation(Step::Id id);
        /**
         * Removes a IfcShapeRepresentation Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcShapeRepresentation to remove.
         * @return success.
         */
        bool removeIfcShapeRepresentation(IfcShapeRepresentation *arg);
        /**
         * Create an IfcShapeRepresentation Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcShapeRepresentation entity.
         */
        Step::RefPtr< IfcShapeRepresentation > createIfcShapeRepresentation(bool isVolatile = false);
        /**
         * Clone an IfcShapeRepresentation Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcShapeRepresentation Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcShapeRepresentation *cloneIfcShapeRepresentation(const IfcShapeRepresentation &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcShapeRepresentation Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcShapeRepresentation entities.
         */
        Step::RefLinkedList< IfcShapeRepresentation > &getAllIfcShapeRepresentation();
        /**
         * Get the IfcShellBasedSurfaceModel entity by it's Id.
         * 
         * @param id The Id of the IfcShellBasedSurfaceModel.
         * @return A pointer to the IfcShellBasedSurfaceModel if found, NULL otherwise.
         */
        IfcShellBasedSurfaceModel *getIfcShellBasedSurfaceModel(Step::Id id);
        /**
         * Removes a IfcShellBasedSurfaceModel Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcShellBasedSurfaceModel to remove.
         * @return success.
         */
        bool removeIfcShellBasedSurfaceModel(IfcShellBasedSurfaceModel *arg);
        /**
         * Create an IfcShellBasedSurfaceModel Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcShellBasedSurfaceModel entity.
         */
        Step::RefPtr< IfcShellBasedSurfaceModel > createIfcShellBasedSurfaceModel(bool isVolatile = false);
        /**
         * Clone an IfcShellBasedSurfaceModel Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcShellBasedSurfaceModel Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcShellBasedSurfaceModel *cloneIfcShellBasedSurfaceModel(const IfcShellBasedSurfaceModel &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcShellBasedSurfaceModel Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcShellBasedSurfaceModel entities.
         */
        Step::RefLinkedList< IfcShellBasedSurfaceModel > &getAllIfcShellBasedSurfaceModel();
        /**
         * Get the IfcSimpleProperty entity by it's Id.
         * 
         * @param id The Id of the IfcSimpleProperty.
         * @return A pointer to the IfcSimpleProperty if found, NULL otherwise.
         */
        IfcSimpleProperty *getIfcSimpleProperty(Step::Id id);
        /**
         * Removes a IfcSimpleProperty Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcSimpleProperty to remove.
         * @return success.
         */
        bool removeIfcSimpleProperty(IfcSimpleProperty *arg);
        /**
         * Create an IfcSimpleProperty Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcSimpleProperty entity.
         */
        Step::RefPtr< IfcSimpleProperty > createIfcSimpleProperty(bool isVolatile = false);
        /**
         * Clone an IfcSimpleProperty Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcSimpleProperty Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcSimpleProperty *cloneIfcSimpleProperty(const IfcSimpleProperty &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcSimpleProperty Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcSimpleProperty entities.
         */
        Step::RefLinkedList< IfcSimpleProperty > &getAllIfcSimpleProperty();
        /**
         * Get the IfcSite entity by it's Id.
         * 
         * @param id The Id of the IfcSite.
         * @return A pointer to the IfcSite if found, NULL otherwise.
         */
        IfcSite *getIfcSite(Step::Id id);
        /**
         * Removes a IfcSite Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcSite to remove.
         * @return success.
         */
        bool removeIfcSite(IfcSite *arg);
        /**
         * Create an IfcSite Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcSite entity.
         */
        Step::RefPtr< IfcSite > createIfcSite(bool isVolatile = false);
        /**
         * Clone an IfcSite Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcSite Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcSite *cloneIfcSite(const IfcSite &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcSite Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcSite entities.
         */
        Step::RefLinkedList< IfcSite > &getAllIfcSite();
        /**
         * Get the IfcSIUnit entity by it's Id.
         * 
         * @param id The Id of the IfcSIUnit.
         * @return A pointer to the IfcSIUnit if found, NULL otherwise.
         */
        IfcSIUnit *getIfcSIUnit(Step::Id id);
        /**
         * Removes a IfcSIUnit Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcSIUnit to remove.
         * @return success.
         */
        bool removeIfcSIUnit(IfcSIUnit *arg);
        /**
         * Create an IfcSIUnit Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcSIUnit entity.
         */
        Step::RefPtr< IfcSIUnit > createIfcSIUnit(bool isVolatile = false);
        /**
         * Clone an IfcSIUnit Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcSIUnit Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcSIUnit *cloneIfcSIUnit(const IfcSIUnit &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcSIUnit Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcSIUnit entities.
         */
        Step::RefLinkedList< IfcSIUnit > &getAllIfcSIUnit();
        /**
         * Get the IfcSlab entity by it's Id.
         * 
         * @param id The Id of the IfcSlab.
         * @return A pointer to the IfcSlab if found, NULL otherwise.
         */
        IfcSlab *getIfcSlab(Step::Id id);
        /**
         * Removes a IfcSlab Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcSlab to remove.
         * @return success.
         */
        bool removeIfcSlab(IfcSlab *arg);
        /**
         * Create an IfcSlab Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcSlab entity.
         */
        Step::RefPtr< IfcSlab > createIfcSlab(bool isVolatile = false);
        /**
         * Clone an IfcSlab Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcSlab Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcSlab *cloneIfcSlab(const IfcSlab &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcSlab Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcSlab entities.
         */
        Step::RefLinkedList< IfcSlab > &getAllIfcSlab();
        /**
         * Get the IfcSlabType entity by it's Id.
         * 
         * @param id The Id of the IfcSlabType.
         * @return A pointer to the IfcSlabType if found, NULL otherwise.
         */
        IfcSlabType *getIfcSlabType(Step::Id id);
        /**
         * Removes a IfcSlabType Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcSlabType to remove.
         * @return success.
         */
        bool removeIfcSlabType(IfcSlabType *arg);
        /**
         * Create an IfcSlabType Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcSlabType entity.
         */
        Step::RefPtr< IfcSlabType > createIfcSlabType(bool isVolatile = false);
        /**
         * Clone an IfcSlabType Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcSlabType Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcSlabType *cloneIfcSlabType(const IfcSlabType &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcSlabType Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcSlabType entities.
         */
        Step::RefLinkedList< IfcSlabType > &getAllIfcSlabType();
        /**
         * Get the IfcSlippageConnectionCondition entity by it's Id.
         * 
         * @param id The Id of the IfcSlippageConnectionCondition.
         * @return A pointer to the IfcSlippageConnectionCondition if found, NULL otherwise.
         */
        IfcSlippageConnectionCondition *getIfcSlippageConnectionCondition(Step::Id id);
        /**
         * Removes a IfcSlippageConnectionCondition Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcSlippageConnectionCondition to remove.
         * @return success.
         */
        bool removeIfcSlippageConnectionCondition(IfcSlippageConnectionCondition *arg);
        /**
         * Create an IfcSlippageConnectionCondition Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcSlippageConnectionCondition entity.
         */
        Step::RefPtr< IfcSlippageConnectionCondition > createIfcSlippageConnectionCondition(bool isVolatile = false);
        /**
         * Clone an IfcSlippageConnectionCondition Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcSlippageConnectionCondition Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcSlippageConnectionCondition *cloneIfcSlippageConnectionCondition(const IfcSlippageConnectionCondition &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcSlippageConnectionCondition Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcSlippageConnectionCondition entities.
         */
        Step::RefLinkedList< IfcSlippageConnectionCondition > &getAllIfcSlippageConnectionCondition();
        /**
         * Get the IfcSolidModel entity by it's Id.
         * 
         * @param id The Id of the IfcSolidModel.
         * @return A pointer to the IfcSolidModel if found, NULL otherwise.
         */
        IfcSolidModel *getIfcSolidModel(Step::Id id);
        /**
         * Removes a IfcSolidModel Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcSolidModel to remove.
         * @return success.
         */
        bool removeIfcSolidModel(IfcSolidModel *arg);
        /**
         * Create an IfcSolidModel Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcSolidModel entity.
         */
        Step::RefPtr< IfcSolidModel > createIfcSolidModel(bool isVolatile = false);
        /**
         * Clone an IfcSolidModel Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcSolidModel Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcSolidModel *cloneIfcSolidModel(const IfcSolidModel &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcSolidModel Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcSolidModel entities.
         */
        Step::RefLinkedList< IfcSolidModel > &getAllIfcSolidModel();
        /**
         * Get the IfcSoundProperties entity by it's Id.
         * 
         * @param id The Id of the IfcSoundProperties.
         * @return A pointer to the IfcSoundProperties if found, NULL otherwise.
         */
        IfcSoundProperties *getIfcSoundProperties(Step::Id id);
        /**
         * Removes a IfcSoundProperties Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcSoundProperties to remove.
         * @return success.
         */
        bool removeIfcSoundProperties(IfcSoundProperties *arg);
        /**
         * Create an IfcSoundProperties Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcSoundProperties entity.
         */
        Step::RefPtr< IfcSoundProperties > createIfcSoundProperties(bool isVolatile = false);
        /**
         * Clone an IfcSoundProperties Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcSoundProperties Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcSoundProperties *cloneIfcSoundProperties(const IfcSoundProperties &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcSoundProperties Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcSoundProperties entities.
         */
        Step::RefLinkedList< IfcSoundProperties > &getAllIfcSoundProperties();
        /**
         * Get the IfcSoundValue entity by it's Id.
         * 
         * @param id The Id of the IfcSoundValue.
         * @return A pointer to the IfcSoundValue if found, NULL otherwise.
         */
        IfcSoundValue *getIfcSoundValue(Step::Id id);
        /**
         * Removes a IfcSoundValue Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcSoundValue to remove.
         * @return success.
         */
        bool removeIfcSoundValue(IfcSoundValue *arg);
        /**
         * Create an IfcSoundValue Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcSoundValue entity.
         */
        Step::RefPtr< IfcSoundValue > createIfcSoundValue(bool isVolatile = false);
        /**
         * Clone an IfcSoundValue Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcSoundValue Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcSoundValue *cloneIfcSoundValue(const IfcSoundValue &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcSoundValue Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcSoundValue entities.
         */
        Step::RefLinkedList< IfcSoundValue > &getAllIfcSoundValue();
        /**
         * Get the IfcSpace entity by it's Id.
         * 
         * @param id The Id of the IfcSpace.
         * @return A pointer to the IfcSpace if found, NULL otherwise.
         */
        IfcSpace *getIfcSpace(Step::Id id);
        /**
         * Removes a IfcSpace Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcSpace to remove.
         * @return success.
         */
        bool removeIfcSpace(IfcSpace *arg);
        /**
         * Create an IfcSpace Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcSpace entity.
         */
        Step::RefPtr< IfcSpace > createIfcSpace(bool isVolatile = false);
        /**
         * Clone an IfcSpace Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcSpace Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcSpace *cloneIfcSpace(const IfcSpace &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcSpace Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcSpace entities.
         */
        Step::RefLinkedList< IfcSpace > &getAllIfcSpace();
        /**
         * Get the IfcSpaceHeaterType entity by it's Id.
         * 
         * @param id The Id of the IfcSpaceHeaterType.
         * @return A pointer to the IfcSpaceHeaterType if found, NULL otherwise.
         */
        IfcSpaceHeaterType *getIfcSpaceHeaterType(Step::Id id);
        /**
         * Removes a IfcSpaceHeaterType Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcSpaceHeaterType to remove.
         * @return success.
         */
        bool removeIfcSpaceHeaterType(IfcSpaceHeaterType *arg);
        /**
         * Create an IfcSpaceHeaterType Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcSpaceHeaterType entity.
         */
        Step::RefPtr< IfcSpaceHeaterType > createIfcSpaceHeaterType(bool isVolatile = false);
        /**
         * Clone an IfcSpaceHeaterType Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcSpaceHeaterType Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcSpaceHeaterType *cloneIfcSpaceHeaterType(const IfcSpaceHeaterType &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcSpaceHeaterType Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcSpaceHeaterType entities.
         */
        Step::RefLinkedList< IfcSpaceHeaterType > &getAllIfcSpaceHeaterType();
        /**
         * Get the IfcSpaceProgram entity by it's Id.
         * 
         * @param id The Id of the IfcSpaceProgram.
         * @return A pointer to the IfcSpaceProgram if found, NULL otherwise.
         */
        IfcSpaceProgram *getIfcSpaceProgram(Step::Id id);
        /**
         * Removes a IfcSpaceProgram Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcSpaceProgram to remove.
         * @return success.
         */
        bool removeIfcSpaceProgram(IfcSpaceProgram *arg);
        /**
         * Create an IfcSpaceProgram Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcSpaceProgram entity.
         */
        Step::RefPtr< IfcSpaceProgram > createIfcSpaceProgram(bool isVolatile = false);
        /**
         * Clone an IfcSpaceProgram Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcSpaceProgram Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcSpaceProgram *cloneIfcSpaceProgram(const IfcSpaceProgram &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcSpaceProgram Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcSpaceProgram entities.
         */
        Step::RefLinkedList< IfcSpaceProgram > &getAllIfcSpaceProgram();
        /**
         * Get the IfcSpaceThermalLoadProperties entity by it's Id.
         * 
         * @param id The Id of the IfcSpaceThermalLoadProperties.
         * @return A pointer to the IfcSpaceThermalLoadProperties if found, NULL otherwise.
         */
        IfcSpaceThermalLoadProperties *getIfcSpaceThermalLoadProperties(Step::Id id);
        /**
         * Removes a IfcSpaceThermalLoadProperties Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcSpaceThermalLoadProperties to remove.
         * @return success.
         */
        bool removeIfcSpaceThermalLoadProperties(IfcSpaceThermalLoadProperties *arg);
        /**
         * Create an IfcSpaceThermalLoadProperties Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcSpaceThermalLoadProperties entity.
         */
        Step::RefPtr< IfcSpaceThermalLoadProperties > createIfcSpaceThermalLoadProperties(bool isVolatile = false);
        /**
         * Clone an IfcSpaceThermalLoadProperties Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcSpaceThermalLoadProperties Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcSpaceThermalLoadProperties *cloneIfcSpaceThermalLoadProperties(const IfcSpaceThermalLoadProperties &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcSpaceThermalLoadProperties Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcSpaceThermalLoadProperties entities.
         */
        Step::RefLinkedList< IfcSpaceThermalLoadProperties > &getAllIfcSpaceThermalLoadProperties();
        /**
         * Get the IfcSpaceType entity by it's Id.
         * 
         * @param id The Id of the IfcSpaceType.
         * @return A pointer to the IfcSpaceType if found, NULL otherwise.
         */
        IfcSpaceType *getIfcSpaceType(Step::Id id);
        /**
         * Removes a IfcSpaceType Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcSpaceType to remove.
         * @return success.
         */
        bool removeIfcSpaceType(IfcSpaceType *arg);
        /**
         * Create an IfcSpaceType Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcSpaceType entity.
         */
        Step::RefPtr< IfcSpaceType > createIfcSpaceType(bool isVolatile = false);
        /**
         * Clone an IfcSpaceType Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcSpaceType Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcSpaceType *cloneIfcSpaceType(const IfcSpaceType &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcSpaceType Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcSpaceType entities.
         */
        Step::RefLinkedList< IfcSpaceType > &getAllIfcSpaceType();
        /**
         * Get the IfcSpatialStructureElement entity by it's Id.
         * 
         * @param id The Id of the IfcSpatialStructureElement.
         * @return A pointer to the IfcSpatialStructureElement if found, NULL otherwise.
         */
        IfcSpatialStructureElement *getIfcSpatialStructureElement(Step::Id id);
        /**
         * Removes a IfcSpatialStructureElement Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcSpatialStructureElement to remove.
         * @return success.
         */
        bool removeIfcSpatialStructureElement(IfcSpatialStructureElement *arg);
        /**
         * Create an IfcSpatialStructureElement Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcSpatialStructureElement entity.
         */
        Step::RefPtr< IfcSpatialStructureElement > createIfcSpatialStructureElement(bool isVolatile = false);
        /**
         * Clone an IfcSpatialStructureElement Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcSpatialStructureElement Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcSpatialStructureElement *cloneIfcSpatialStructureElement(const IfcSpatialStructureElement &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcSpatialStructureElement Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcSpatialStructureElement entities.
         */
        Step::RefLinkedList< IfcSpatialStructureElement > &getAllIfcSpatialStructureElement();
        /**
         * Get the IfcSpatialStructureElementType entity by it's Id.
         * 
         * @param id The Id of the IfcSpatialStructureElementType.
         * @return A pointer to the IfcSpatialStructureElementType if found, NULL otherwise.
         */
        IfcSpatialStructureElementType *getIfcSpatialStructureElementType(Step::Id id);
        /**
         * Removes a IfcSpatialStructureElementType Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcSpatialStructureElementType to remove.
         * @return success.
         */
        bool removeIfcSpatialStructureElementType(IfcSpatialStructureElementType *arg);
        /**
         * Create an IfcSpatialStructureElementType Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcSpatialStructureElementType entity.
         */
        Step::RefPtr< IfcSpatialStructureElementType > createIfcSpatialStructureElementType(bool isVolatile = false);
        /**
         * Clone an IfcSpatialStructureElementType Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcSpatialStructureElementType Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcSpatialStructureElementType *cloneIfcSpatialStructureElementType(const IfcSpatialStructureElementType &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcSpatialStructureElementType Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcSpatialStructureElementType entities.
         */
        Step::RefLinkedList< IfcSpatialStructureElementType > &getAllIfcSpatialStructureElementType();
        /**
         * Get the IfcSphere entity by it's Id.
         * 
         * @param id The Id of the IfcSphere.
         * @return A pointer to the IfcSphere if found, NULL otherwise.
         */
        IfcSphere *getIfcSphere(Step::Id id);
        /**
         * Removes a IfcSphere Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcSphere to remove.
         * @return success.
         */
        bool removeIfcSphere(IfcSphere *arg);
        /**
         * Create an IfcSphere Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcSphere entity.
         */
        Step::RefPtr< IfcSphere > createIfcSphere(bool isVolatile = false);
        /**
         * Clone an IfcSphere Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcSphere Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcSphere *cloneIfcSphere(const IfcSphere &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcSphere Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcSphere entities.
         */
        Step::RefLinkedList< IfcSphere > &getAllIfcSphere();
        /**
         * Get the IfcStackTerminalType entity by it's Id.
         * 
         * @param id The Id of the IfcStackTerminalType.
         * @return A pointer to the IfcStackTerminalType if found, NULL otherwise.
         */
        IfcStackTerminalType *getIfcStackTerminalType(Step::Id id);
        /**
         * Removes a IfcStackTerminalType Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcStackTerminalType to remove.
         * @return success.
         */
        bool removeIfcStackTerminalType(IfcStackTerminalType *arg);
        /**
         * Create an IfcStackTerminalType Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcStackTerminalType entity.
         */
        Step::RefPtr< IfcStackTerminalType > createIfcStackTerminalType(bool isVolatile = false);
        /**
         * Clone an IfcStackTerminalType Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcStackTerminalType Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcStackTerminalType *cloneIfcStackTerminalType(const IfcStackTerminalType &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcStackTerminalType Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcStackTerminalType entities.
         */
        Step::RefLinkedList< IfcStackTerminalType > &getAllIfcStackTerminalType();
        /**
         * Get the IfcStair entity by it's Id.
         * 
         * @param id The Id of the IfcStair.
         * @return A pointer to the IfcStair if found, NULL otherwise.
         */
        IfcStair *getIfcStair(Step::Id id);
        /**
         * Removes a IfcStair Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcStair to remove.
         * @return success.
         */
        bool removeIfcStair(IfcStair *arg);
        /**
         * Create an IfcStair Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcStair entity.
         */
        Step::RefPtr< IfcStair > createIfcStair(bool isVolatile = false);
        /**
         * Clone an IfcStair Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcStair Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcStair *cloneIfcStair(const IfcStair &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcStair Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcStair entities.
         */
        Step::RefLinkedList< IfcStair > &getAllIfcStair();
        /**
         * Get the IfcStairFlight entity by it's Id.
         * 
         * @param id The Id of the IfcStairFlight.
         * @return A pointer to the IfcStairFlight if found, NULL otherwise.
         */
        IfcStairFlight *getIfcStairFlight(Step::Id id);
        /**
         * Removes a IfcStairFlight Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcStairFlight to remove.
         * @return success.
         */
        bool removeIfcStairFlight(IfcStairFlight *arg);
        /**
         * Create an IfcStairFlight Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcStairFlight entity.
         */
        Step::RefPtr< IfcStairFlight > createIfcStairFlight(bool isVolatile = false);
        /**
         * Clone an IfcStairFlight Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcStairFlight Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcStairFlight *cloneIfcStairFlight(const IfcStairFlight &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcStairFlight Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcStairFlight entities.
         */
        Step::RefLinkedList< IfcStairFlight > &getAllIfcStairFlight();
        /**
         * Get the IfcStairFlightType entity by it's Id.
         * 
         * @param id The Id of the IfcStairFlightType.
         * @return A pointer to the IfcStairFlightType if found, NULL otherwise.
         */
        IfcStairFlightType *getIfcStairFlightType(Step::Id id);
        /**
         * Removes a IfcStairFlightType Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcStairFlightType to remove.
         * @return success.
         */
        bool removeIfcStairFlightType(IfcStairFlightType *arg);
        /**
         * Create an IfcStairFlightType Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcStairFlightType entity.
         */
        Step::RefPtr< IfcStairFlightType > createIfcStairFlightType(bool isVolatile = false);
        /**
         * Clone an IfcStairFlightType Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcStairFlightType Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcStairFlightType *cloneIfcStairFlightType(const IfcStairFlightType &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcStairFlightType Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcStairFlightType entities.
         */
        Step::RefLinkedList< IfcStairFlightType > &getAllIfcStairFlightType();
        /**
         * Get the IfcStructuralAction entity by it's Id.
         * 
         * @param id The Id of the IfcStructuralAction.
         * @return A pointer to the IfcStructuralAction if found, NULL otherwise.
         */
        IfcStructuralAction *getIfcStructuralAction(Step::Id id);
        /**
         * Removes a IfcStructuralAction Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcStructuralAction to remove.
         * @return success.
         */
        bool removeIfcStructuralAction(IfcStructuralAction *arg);
        /**
         * Create an IfcStructuralAction Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcStructuralAction entity.
         */
        Step::RefPtr< IfcStructuralAction > createIfcStructuralAction(bool isVolatile = false);
        /**
         * Clone an IfcStructuralAction Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcStructuralAction Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcStructuralAction *cloneIfcStructuralAction(const IfcStructuralAction &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcStructuralAction Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcStructuralAction entities.
         */
        Step::RefLinkedList< IfcStructuralAction > &getAllIfcStructuralAction();
        /**
         * Get the IfcStructuralActivity entity by it's Id.
         * 
         * @param id The Id of the IfcStructuralActivity.
         * @return A pointer to the IfcStructuralActivity if found, NULL otherwise.
         */
        IfcStructuralActivity *getIfcStructuralActivity(Step::Id id);
        /**
         * Removes a IfcStructuralActivity Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcStructuralActivity to remove.
         * @return success.
         */
        bool removeIfcStructuralActivity(IfcStructuralActivity *arg);
        /**
         * Create an IfcStructuralActivity Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcStructuralActivity entity.
         */
        Step::RefPtr< IfcStructuralActivity > createIfcStructuralActivity(bool isVolatile = false);
        /**
         * Clone an IfcStructuralActivity Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcStructuralActivity Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcStructuralActivity *cloneIfcStructuralActivity(const IfcStructuralActivity &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcStructuralActivity Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcStructuralActivity entities.
         */
        Step::RefLinkedList< IfcStructuralActivity > &getAllIfcStructuralActivity();
        /**
         * Get the IfcStructuralAnalysisModel entity by it's Id.
         * 
         * @param id The Id of the IfcStructuralAnalysisModel.
         * @return A pointer to the IfcStructuralAnalysisModel if found, NULL otherwise.
         */
        IfcStructuralAnalysisModel *getIfcStructuralAnalysisModel(Step::Id id);
        /**
         * Removes a IfcStructuralAnalysisModel Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcStructuralAnalysisModel to remove.
         * @return success.
         */
        bool removeIfcStructuralAnalysisModel(IfcStructuralAnalysisModel *arg);
        /**
         * Create an IfcStructuralAnalysisModel Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcStructuralAnalysisModel entity.
         */
        Step::RefPtr< IfcStructuralAnalysisModel > createIfcStructuralAnalysisModel(bool isVolatile = false);
        /**
         * Clone an IfcStructuralAnalysisModel Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcStructuralAnalysisModel Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcStructuralAnalysisModel *cloneIfcStructuralAnalysisModel(const IfcStructuralAnalysisModel &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcStructuralAnalysisModel Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcStructuralAnalysisModel entities.
         */
        Step::RefLinkedList< IfcStructuralAnalysisModel > &getAllIfcStructuralAnalysisModel();
        /**
         * Get the IfcStructuralConnection entity by it's Id.
         * 
         * @param id The Id of the IfcStructuralConnection.
         * @return A pointer to the IfcStructuralConnection if found, NULL otherwise.
         */
        IfcStructuralConnection *getIfcStructuralConnection(Step::Id id);
        /**
         * Removes a IfcStructuralConnection Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcStructuralConnection to remove.
         * @return success.
         */
        bool removeIfcStructuralConnection(IfcStructuralConnection *arg);
        /**
         * Create an IfcStructuralConnection Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcStructuralConnection entity.
         */
        Step::RefPtr< IfcStructuralConnection > createIfcStructuralConnection(bool isVolatile = false);
        /**
         * Clone an IfcStructuralConnection Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcStructuralConnection Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcStructuralConnection *cloneIfcStructuralConnection(const IfcStructuralConnection &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcStructuralConnection Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcStructuralConnection entities.
         */
        Step::RefLinkedList< IfcStructuralConnection > &getAllIfcStructuralConnection();
        /**
         * Get the IfcStructuralConnectionCondition entity by it's Id.
         * 
         * @param id The Id of the IfcStructuralConnectionCondition.
         * @return A pointer to the IfcStructuralConnectionCondition if found, NULL otherwise.
         */
        IfcStructuralConnectionCondition *getIfcStructuralConnectionCondition(Step::Id id);
        /**
         * Removes a IfcStructuralConnectionCondition Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcStructuralConnectionCondition to remove.
         * @return success.
         */
        bool removeIfcStructuralConnectionCondition(IfcStructuralConnectionCondition *arg);
        /**
         * Create an IfcStructuralConnectionCondition Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcStructuralConnectionCondition entity.
         */
        Step::RefPtr< IfcStructuralConnectionCondition > createIfcStructuralConnectionCondition(bool isVolatile = false);
        /**
         * Clone an IfcStructuralConnectionCondition Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcStructuralConnectionCondition Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcStructuralConnectionCondition *cloneIfcStructuralConnectionCondition(const IfcStructuralConnectionCondition &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcStructuralConnectionCondition Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcStructuralConnectionCondition entities.
         */
        Step::RefLinkedList< IfcStructuralConnectionCondition > &getAllIfcStructuralConnectionCondition();
        /**
         * Get the IfcStructuralCurveConnection entity by it's Id.
         * 
         * @param id The Id of the IfcStructuralCurveConnection.
         * @return A pointer to the IfcStructuralCurveConnection if found, NULL otherwise.
         */
        IfcStructuralCurveConnection *getIfcStructuralCurveConnection(Step::Id id);
        /**
         * Removes a IfcStructuralCurveConnection Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcStructuralCurveConnection to remove.
         * @return success.
         */
        bool removeIfcStructuralCurveConnection(IfcStructuralCurveConnection *arg);
        /**
         * Create an IfcStructuralCurveConnection Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcStructuralCurveConnection entity.
         */
        Step::RefPtr< IfcStructuralCurveConnection > createIfcStructuralCurveConnection(bool isVolatile = false);
        /**
         * Clone an IfcStructuralCurveConnection Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcStructuralCurveConnection Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcStructuralCurveConnection *cloneIfcStructuralCurveConnection(const IfcStructuralCurveConnection &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcStructuralCurveConnection Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcStructuralCurveConnection entities.
         */
        Step::RefLinkedList< IfcStructuralCurveConnection > &getAllIfcStructuralCurveConnection();
        /**
         * Get the IfcStructuralCurveMember entity by it's Id.
         * 
         * @param id The Id of the IfcStructuralCurveMember.
         * @return A pointer to the IfcStructuralCurveMember if found, NULL otherwise.
         */
        IfcStructuralCurveMember *getIfcStructuralCurveMember(Step::Id id);
        /**
         * Removes a IfcStructuralCurveMember Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcStructuralCurveMember to remove.
         * @return success.
         */
        bool removeIfcStructuralCurveMember(IfcStructuralCurveMember *arg);
        /**
         * Create an IfcStructuralCurveMember Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcStructuralCurveMember entity.
         */
        Step::RefPtr< IfcStructuralCurveMember > createIfcStructuralCurveMember(bool isVolatile = false);
        /**
         * Clone an IfcStructuralCurveMember Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcStructuralCurveMember Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcStructuralCurveMember *cloneIfcStructuralCurveMember(const IfcStructuralCurveMember &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcStructuralCurveMember Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcStructuralCurveMember entities.
         */
        Step::RefLinkedList< IfcStructuralCurveMember > &getAllIfcStructuralCurveMember();
        /**
         * Get the IfcStructuralCurveMemberVarying entity by it's Id.
         * 
         * @param id The Id of the IfcStructuralCurveMemberVarying.
         * @return A pointer to the IfcStructuralCurveMemberVarying if found, NULL otherwise.
         */
        IfcStructuralCurveMemberVarying *getIfcStructuralCurveMemberVarying(Step::Id id);
        /**
         * Removes a IfcStructuralCurveMemberVarying Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcStructuralCurveMemberVarying to remove.
         * @return success.
         */
        bool removeIfcStructuralCurveMemberVarying(IfcStructuralCurveMemberVarying *arg);
        /**
         * Create an IfcStructuralCurveMemberVarying Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcStructuralCurveMemberVarying entity.
         */
        Step::RefPtr< IfcStructuralCurveMemberVarying > createIfcStructuralCurveMemberVarying(bool isVolatile = false);
        /**
         * Clone an IfcStructuralCurveMemberVarying Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcStructuralCurveMemberVarying Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcStructuralCurveMemberVarying *cloneIfcStructuralCurveMemberVarying(const IfcStructuralCurveMemberVarying &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcStructuralCurveMemberVarying Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcStructuralCurveMemberVarying entities.
         */
        Step::RefLinkedList< IfcStructuralCurveMemberVarying > &getAllIfcStructuralCurveMemberVarying();
        /**
         * Get the IfcStructuralItem entity by it's Id.
         * 
         * @param id The Id of the IfcStructuralItem.
         * @return A pointer to the IfcStructuralItem if found, NULL otherwise.
         */
        IfcStructuralItem *getIfcStructuralItem(Step::Id id);
        /**
         * Removes a IfcStructuralItem Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcStructuralItem to remove.
         * @return success.
         */
        bool removeIfcStructuralItem(IfcStructuralItem *arg);
        /**
         * Create an IfcStructuralItem Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcStructuralItem entity.
         */
        Step::RefPtr< IfcStructuralItem > createIfcStructuralItem(bool isVolatile = false);
        /**
         * Clone an IfcStructuralItem Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcStructuralItem Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcStructuralItem *cloneIfcStructuralItem(const IfcStructuralItem &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcStructuralItem Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcStructuralItem entities.
         */
        Step::RefLinkedList< IfcStructuralItem > &getAllIfcStructuralItem();
        /**
         * Get the IfcStructuralLinearAction entity by it's Id.
         * 
         * @param id The Id of the IfcStructuralLinearAction.
         * @return A pointer to the IfcStructuralLinearAction if found, NULL otherwise.
         */
        IfcStructuralLinearAction *getIfcStructuralLinearAction(Step::Id id);
        /**
         * Removes a IfcStructuralLinearAction Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcStructuralLinearAction to remove.
         * @return success.
         */
        bool removeIfcStructuralLinearAction(IfcStructuralLinearAction *arg);
        /**
         * Create an IfcStructuralLinearAction Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcStructuralLinearAction entity.
         */
        Step::RefPtr< IfcStructuralLinearAction > createIfcStructuralLinearAction(bool isVolatile = false);
        /**
         * Clone an IfcStructuralLinearAction Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcStructuralLinearAction Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcStructuralLinearAction *cloneIfcStructuralLinearAction(const IfcStructuralLinearAction &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcStructuralLinearAction Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcStructuralLinearAction entities.
         */
        Step::RefLinkedList< IfcStructuralLinearAction > &getAllIfcStructuralLinearAction();
        /**
         * Get the IfcStructuralLinearActionVarying entity by it's Id.
         * 
         * @param id The Id of the IfcStructuralLinearActionVarying.
         * @return A pointer to the IfcStructuralLinearActionVarying if found, NULL otherwise.
         */
        IfcStructuralLinearActionVarying *getIfcStructuralLinearActionVarying(Step::Id id);
        /**
         * Removes a IfcStructuralLinearActionVarying Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcStructuralLinearActionVarying to remove.
         * @return success.
         */
        bool removeIfcStructuralLinearActionVarying(IfcStructuralLinearActionVarying *arg);
        /**
         * Create an IfcStructuralLinearActionVarying Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcStructuralLinearActionVarying entity.
         */
        Step::RefPtr< IfcStructuralLinearActionVarying > createIfcStructuralLinearActionVarying(bool isVolatile = false);
        /**
         * Clone an IfcStructuralLinearActionVarying Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcStructuralLinearActionVarying Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcStructuralLinearActionVarying *cloneIfcStructuralLinearActionVarying(const IfcStructuralLinearActionVarying &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcStructuralLinearActionVarying Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcStructuralLinearActionVarying entities.
         */
        Step::RefLinkedList< IfcStructuralLinearActionVarying > &getAllIfcStructuralLinearActionVarying();
        /**
         * Get the IfcStructuralLoad entity by it's Id.
         * 
         * @param id The Id of the IfcStructuralLoad.
         * @return A pointer to the IfcStructuralLoad if found, NULL otherwise.
         */
        IfcStructuralLoad *getIfcStructuralLoad(Step::Id id);
        /**
         * Removes a IfcStructuralLoad Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcStructuralLoad to remove.
         * @return success.
         */
        bool removeIfcStructuralLoad(IfcStructuralLoad *arg);
        /**
         * Create an IfcStructuralLoad Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcStructuralLoad entity.
         */
        Step::RefPtr< IfcStructuralLoad > createIfcStructuralLoad(bool isVolatile = false);
        /**
         * Clone an IfcStructuralLoad Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcStructuralLoad Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcStructuralLoad *cloneIfcStructuralLoad(const IfcStructuralLoad &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcStructuralLoad Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcStructuralLoad entities.
         */
        Step::RefLinkedList< IfcStructuralLoad > &getAllIfcStructuralLoad();
        /**
         * Get the IfcStructuralLoadGroup entity by it's Id.
         * 
         * @param id The Id of the IfcStructuralLoadGroup.
         * @return A pointer to the IfcStructuralLoadGroup if found, NULL otherwise.
         */
        IfcStructuralLoadGroup *getIfcStructuralLoadGroup(Step::Id id);
        /**
         * Removes a IfcStructuralLoadGroup Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcStructuralLoadGroup to remove.
         * @return success.
         */
        bool removeIfcStructuralLoadGroup(IfcStructuralLoadGroup *arg);
        /**
         * Create an IfcStructuralLoadGroup Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcStructuralLoadGroup entity.
         */
        Step::RefPtr< IfcStructuralLoadGroup > createIfcStructuralLoadGroup(bool isVolatile = false);
        /**
         * Clone an IfcStructuralLoadGroup Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcStructuralLoadGroup Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcStructuralLoadGroup *cloneIfcStructuralLoadGroup(const IfcStructuralLoadGroup &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcStructuralLoadGroup Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcStructuralLoadGroup entities.
         */
        Step::RefLinkedList< IfcStructuralLoadGroup > &getAllIfcStructuralLoadGroup();
        /**
         * Get the IfcStructuralLoadLinearForce entity by it's Id.
         * 
         * @param id The Id of the IfcStructuralLoadLinearForce.
         * @return A pointer to the IfcStructuralLoadLinearForce if found, NULL otherwise.
         */
        IfcStructuralLoadLinearForce *getIfcStructuralLoadLinearForce(Step::Id id);
        /**
         * Removes a IfcStructuralLoadLinearForce Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcStructuralLoadLinearForce to remove.
         * @return success.
         */
        bool removeIfcStructuralLoadLinearForce(IfcStructuralLoadLinearForce *arg);
        /**
         * Create an IfcStructuralLoadLinearForce Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcStructuralLoadLinearForce entity.
         */
        Step::RefPtr< IfcStructuralLoadLinearForce > createIfcStructuralLoadLinearForce(bool isVolatile = false);
        /**
         * Clone an IfcStructuralLoadLinearForce Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcStructuralLoadLinearForce Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcStructuralLoadLinearForce *cloneIfcStructuralLoadLinearForce(const IfcStructuralLoadLinearForce &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcStructuralLoadLinearForce Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcStructuralLoadLinearForce entities.
         */
        Step::RefLinkedList< IfcStructuralLoadLinearForce > &getAllIfcStructuralLoadLinearForce();
        /**
         * Get the IfcStructuralLoadPlanarForce entity by it's Id.
         * 
         * @param id The Id of the IfcStructuralLoadPlanarForce.
         * @return A pointer to the IfcStructuralLoadPlanarForce if found, NULL otherwise.
         */
        IfcStructuralLoadPlanarForce *getIfcStructuralLoadPlanarForce(Step::Id id);
        /**
         * Removes a IfcStructuralLoadPlanarForce Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcStructuralLoadPlanarForce to remove.
         * @return success.
         */
        bool removeIfcStructuralLoadPlanarForce(IfcStructuralLoadPlanarForce *arg);
        /**
         * Create an IfcStructuralLoadPlanarForce Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcStructuralLoadPlanarForce entity.
         */
        Step::RefPtr< IfcStructuralLoadPlanarForce > createIfcStructuralLoadPlanarForce(bool isVolatile = false);
        /**
         * Clone an IfcStructuralLoadPlanarForce Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcStructuralLoadPlanarForce Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcStructuralLoadPlanarForce *cloneIfcStructuralLoadPlanarForce(const IfcStructuralLoadPlanarForce &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcStructuralLoadPlanarForce Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcStructuralLoadPlanarForce entities.
         */
        Step::RefLinkedList< IfcStructuralLoadPlanarForce > &getAllIfcStructuralLoadPlanarForce();
        /**
         * Get the IfcStructuralLoadSingleDisplacement entity by it's Id.
         * 
         * @param id The Id of the IfcStructuralLoadSingleDisplacement.
         * @return A pointer to the IfcStructuralLoadSingleDisplacement if found, NULL otherwise.
         */
        IfcStructuralLoadSingleDisplacement *getIfcStructuralLoadSingleDisplacement(Step::Id id);
        /**
         * Removes a IfcStructuralLoadSingleDisplacement Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcStructuralLoadSingleDisplacement to remove.
         * @return success.
         */
        bool removeIfcStructuralLoadSingleDisplacement(IfcStructuralLoadSingleDisplacement *arg);
        /**
         * Create an IfcStructuralLoadSingleDisplacement Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcStructuralLoadSingleDisplacement entity.
         */
        Step::RefPtr< IfcStructuralLoadSingleDisplacement > createIfcStructuralLoadSingleDisplacement(bool isVolatile = false);
        /**
         * Clone an IfcStructuralLoadSingleDisplacement Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcStructuralLoadSingleDisplacement Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcStructuralLoadSingleDisplacement *cloneIfcStructuralLoadSingleDisplacement(const IfcStructuralLoadSingleDisplacement &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcStructuralLoadSingleDisplacement Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcStructuralLoadSingleDisplacement entities.
         */
        Step::RefLinkedList< IfcStructuralLoadSingleDisplacement > &getAllIfcStructuralLoadSingleDisplacement();
        /**
         * Get the IfcStructuralLoadSingleDisplacementDistortion entity by it's Id.
         * 
         * @param id The Id of the IfcStructuralLoadSingleDisplacementDistortion.
         * @return A pointer to the IfcStructuralLoadSingleDisplacementDistortion if found, NULL otherwise.
         */
        IfcStructuralLoadSingleDisplacementDistortion *getIfcStructuralLoadSingleDisplacementDistortion(Step::Id id);
        /**
         * Removes a IfcStructuralLoadSingleDisplacementDistortion Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcStructuralLoadSingleDisplacementDistortion to remove.
         * @return success.
         */
        bool removeIfcStructuralLoadSingleDisplacementDistortion(IfcStructuralLoadSingleDisplacementDistortion *arg);
        /**
         * Create an IfcStructuralLoadSingleDisplacementDistortion Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcStructuralLoadSingleDisplacementDistortion entity.
         */
        Step::RefPtr< IfcStructuralLoadSingleDisplacementDistortion > createIfcStructuralLoadSingleDisplacementDistortion(bool isVolatile = false);
        /**
         * Clone an IfcStructuralLoadSingleDisplacementDistortion Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcStructuralLoadSingleDisplacementDistortion Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcStructuralLoadSingleDisplacementDistortion *cloneIfcStructuralLoadSingleDisplacementDistortion(const IfcStructuralLoadSingleDisplacementDistortion &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcStructuralLoadSingleDisplacementDistortion Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcStructuralLoadSingleDisplacementDistortion entities.
         */
        Step::RefLinkedList< IfcStructuralLoadSingleDisplacementDistortion > &getAllIfcStructuralLoadSingleDisplacementDistortion();
        /**
         * Get the IfcStructuralLoadSingleForce entity by it's Id.
         * 
         * @param id The Id of the IfcStructuralLoadSingleForce.
         * @return A pointer to the IfcStructuralLoadSingleForce if found, NULL otherwise.
         */
        IfcStructuralLoadSingleForce *getIfcStructuralLoadSingleForce(Step::Id id);
        /**
         * Removes a IfcStructuralLoadSingleForce Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcStructuralLoadSingleForce to remove.
         * @return success.
         */
        bool removeIfcStructuralLoadSingleForce(IfcStructuralLoadSingleForce *arg);
        /**
         * Create an IfcStructuralLoadSingleForce Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcStructuralLoadSingleForce entity.
         */
        Step::RefPtr< IfcStructuralLoadSingleForce > createIfcStructuralLoadSingleForce(bool isVolatile = false);
        /**
         * Clone an IfcStructuralLoadSingleForce Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcStructuralLoadSingleForce Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcStructuralLoadSingleForce *cloneIfcStructuralLoadSingleForce(const IfcStructuralLoadSingleForce &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcStructuralLoadSingleForce Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcStructuralLoadSingleForce entities.
         */
        Step::RefLinkedList< IfcStructuralLoadSingleForce > &getAllIfcStructuralLoadSingleForce();
        /**
         * Get the IfcStructuralLoadSingleForceWarping entity by it's Id.
         * 
         * @param id The Id of the IfcStructuralLoadSingleForceWarping.
         * @return A pointer to the IfcStructuralLoadSingleForceWarping if found, NULL otherwise.
         */
        IfcStructuralLoadSingleForceWarping *getIfcStructuralLoadSingleForceWarping(Step::Id id);
        /**
         * Removes a IfcStructuralLoadSingleForceWarping Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcStructuralLoadSingleForceWarping to remove.
         * @return success.
         */
        bool removeIfcStructuralLoadSingleForceWarping(IfcStructuralLoadSingleForceWarping *arg);
        /**
         * Create an IfcStructuralLoadSingleForceWarping Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcStructuralLoadSingleForceWarping entity.
         */
        Step::RefPtr< IfcStructuralLoadSingleForceWarping > createIfcStructuralLoadSingleForceWarping(bool isVolatile = false);
        /**
         * Clone an IfcStructuralLoadSingleForceWarping Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcStructuralLoadSingleForceWarping Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcStructuralLoadSingleForceWarping *cloneIfcStructuralLoadSingleForceWarping(const IfcStructuralLoadSingleForceWarping &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcStructuralLoadSingleForceWarping Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcStructuralLoadSingleForceWarping entities.
         */
        Step::RefLinkedList< IfcStructuralLoadSingleForceWarping > &getAllIfcStructuralLoadSingleForceWarping();
        /**
         * Get the IfcStructuralLoadStatic entity by it's Id.
         * 
         * @param id The Id of the IfcStructuralLoadStatic.
         * @return A pointer to the IfcStructuralLoadStatic if found, NULL otherwise.
         */
        IfcStructuralLoadStatic *getIfcStructuralLoadStatic(Step::Id id);
        /**
         * Removes a IfcStructuralLoadStatic Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcStructuralLoadStatic to remove.
         * @return success.
         */
        bool removeIfcStructuralLoadStatic(IfcStructuralLoadStatic *arg);
        /**
         * Create an IfcStructuralLoadStatic Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcStructuralLoadStatic entity.
         */
        Step::RefPtr< IfcStructuralLoadStatic > createIfcStructuralLoadStatic(bool isVolatile = false);
        /**
         * Clone an IfcStructuralLoadStatic Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcStructuralLoadStatic Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcStructuralLoadStatic *cloneIfcStructuralLoadStatic(const IfcStructuralLoadStatic &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcStructuralLoadStatic Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcStructuralLoadStatic entities.
         */
        Step::RefLinkedList< IfcStructuralLoadStatic > &getAllIfcStructuralLoadStatic();
        /**
         * Get the IfcStructuralLoadTemperature entity by it's Id.
         * 
         * @param id The Id of the IfcStructuralLoadTemperature.
         * @return A pointer to the IfcStructuralLoadTemperature if found, NULL otherwise.
         */
        IfcStructuralLoadTemperature *getIfcStructuralLoadTemperature(Step::Id id);
        /**
         * Removes a IfcStructuralLoadTemperature Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcStructuralLoadTemperature to remove.
         * @return success.
         */
        bool removeIfcStructuralLoadTemperature(IfcStructuralLoadTemperature *arg);
        /**
         * Create an IfcStructuralLoadTemperature Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcStructuralLoadTemperature entity.
         */
        Step::RefPtr< IfcStructuralLoadTemperature > createIfcStructuralLoadTemperature(bool isVolatile = false);
        /**
         * Clone an IfcStructuralLoadTemperature Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcStructuralLoadTemperature Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcStructuralLoadTemperature *cloneIfcStructuralLoadTemperature(const IfcStructuralLoadTemperature &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcStructuralLoadTemperature Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcStructuralLoadTemperature entities.
         */
        Step::RefLinkedList< IfcStructuralLoadTemperature > &getAllIfcStructuralLoadTemperature();
        /**
         * Get the IfcStructuralMember entity by it's Id.
         * 
         * @param id The Id of the IfcStructuralMember.
         * @return A pointer to the IfcStructuralMember if found, NULL otherwise.
         */
        IfcStructuralMember *getIfcStructuralMember(Step::Id id);
        /**
         * Removes a IfcStructuralMember Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcStructuralMember to remove.
         * @return success.
         */
        bool removeIfcStructuralMember(IfcStructuralMember *arg);
        /**
         * Create an IfcStructuralMember Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcStructuralMember entity.
         */
        Step::RefPtr< IfcStructuralMember > createIfcStructuralMember(bool isVolatile = false);
        /**
         * Clone an IfcStructuralMember Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcStructuralMember Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcStructuralMember *cloneIfcStructuralMember(const IfcStructuralMember &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcStructuralMember Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcStructuralMember entities.
         */
        Step::RefLinkedList< IfcStructuralMember > &getAllIfcStructuralMember();
        /**
         * Get the IfcStructuralPlanarAction entity by it's Id.
         * 
         * @param id The Id of the IfcStructuralPlanarAction.
         * @return A pointer to the IfcStructuralPlanarAction if found, NULL otherwise.
         */
        IfcStructuralPlanarAction *getIfcStructuralPlanarAction(Step::Id id);
        /**
         * Removes a IfcStructuralPlanarAction Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcStructuralPlanarAction to remove.
         * @return success.
         */
        bool removeIfcStructuralPlanarAction(IfcStructuralPlanarAction *arg);
        /**
         * Create an IfcStructuralPlanarAction Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcStructuralPlanarAction entity.
         */
        Step::RefPtr< IfcStructuralPlanarAction > createIfcStructuralPlanarAction(bool isVolatile = false);
        /**
         * Clone an IfcStructuralPlanarAction Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcStructuralPlanarAction Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcStructuralPlanarAction *cloneIfcStructuralPlanarAction(const IfcStructuralPlanarAction &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcStructuralPlanarAction Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcStructuralPlanarAction entities.
         */
        Step::RefLinkedList< IfcStructuralPlanarAction > &getAllIfcStructuralPlanarAction();
        /**
         * Get the IfcStructuralPlanarActionVarying entity by it's Id.
         * 
         * @param id The Id of the IfcStructuralPlanarActionVarying.
         * @return A pointer to the IfcStructuralPlanarActionVarying if found, NULL otherwise.
         */
        IfcStructuralPlanarActionVarying *getIfcStructuralPlanarActionVarying(Step::Id id);
        /**
         * Removes a IfcStructuralPlanarActionVarying Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcStructuralPlanarActionVarying to remove.
         * @return success.
         */
        bool removeIfcStructuralPlanarActionVarying(IfcStructuralPlanarActionVarying *arg);
        /**
         * Create an IfcStructuralPlanarActionVarying Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcStructuralPlanarActionVarying entity.
         */
        Step::RefPtr< IfcStructuralPlanarActionVarying > createIfcStructuralPlanarActionVarying(bool isVolatile = false);
        /**
         * Clone an IfcStructuralPlanarActionVarying Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcStructuralPlanarActionVarying Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcStructuralPlanarActionVarying *cloneIfcStructuralPlanarActionVarying(const IfcStructuralPlanarActionVarying &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcStructuralPlanarActionVarying Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcStructuralPlanarActionVarying entities.
         */
        Step::RefLinkedList< IfcStructuralPlanarActionVarying > &getAllIfcStructuralPlanarActionVarying();
        /**
         * Get the IfcStructuralPointAction entity by it's Id.
         * 
         * @param id The Id of the IfcStructuralPointAction.
         * @return A pointer to the IfcStructuralPointAction if found, NULL otherwise.
         */
        IfcStructuralPointAction *getIfcStructuralPointAction(Step::Id id);
        /**
         * Removes a IfcStructuralPointAction Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcStructuralPointAction to remove.
         * @return success.
         */
        bool removeIfcStructuralPointAction(IfcStructuralPointAction *arg);
        /**
         * Create an IfcStructuralPointAction Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcStructuralPointAction entity.
         */
        Step::RefPtr< IfcStructuralPointAction > createIfcStructuralPointAction(bool isVolatile = false);
        /**
         * Clone an IfcStructuralPointAction Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcStructuralPointAction Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcStructuralPointAction *cloneIfcStructuralPointAction(const IfcStructuralPointAction &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcStructuralPointAction Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcStructuralPointAction entities.
         */
        Step::RefLinkedList< IfcStructuralPointAction > &getAllIfcStructuralPointAction();
        /**
         * Get the IfcStructuralPointConnection entity by it's Id.
         * 
         * @param id The Id of the IfcStructuralPointConnection.
         * @return A pointer to the IfcStructuralPointConnection if found, NULL otherwise.
         */
        IfcStructuralPointConnection *getIfcStructuralPointConnection(Step::Id id);
        /**
         * Removes a IfcStructuralPointConnection Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcStructuralPointConnection to remove.
         * @return success.
         */
        bool removeIfcStructuralPointConnection(IfcStructuralPointConnection *arg);
        /**
         * Create an IfcStructuralPointConnection Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcStructuralPointConnection entity.
         */
        Step::RefPtr< IfcStructuralPointConnection > createIfcStructuralPointConnection(bool isVolatile = false);
        /**
         * Clone an IfcStructuralPointConnection Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcStructuralPointConnection Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcStructuralPointConnection *cloneIfcStructuralPointConnection(const IfcStructuralPointConnection &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcStructuralPointConnection Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcStructuralPointConnection entities.
         */
        Step::RefLinkedList< IfcStructuralPointConnection > &getAllIfcStructuralPointConnection();
        /**
         * Get the IfcStructuralPointReaction entity by it's Id.
         * 
         * @param id The Id of the IfcStructuralPointReaction.
         * @return A pointer to the IfcStructuralPointReaction if found, NULL otherwise.
         */
        IfcStructuralPointReaction *getIfcStructuralPointReaction(Step::Id id);
        /**
         * Removes a IfcStructuralPointReaction Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcStructuralPointReaction to remove.
         * @return success.
         */
        bool removeIfcStructuralPointReaction(IfcStructuralPointReaction *arg);
        /**
         * Create an IfcStructuralPointReaction Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcStructuralPointReaction entity.
         */
        Step::RefPtr< IfcStructuralPointReaction > createIfcStructuralPointReaction(bool isVolatile = false);
        /**
         * Clone an IfcStructuralPointReaction Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcStructuralPointReaction Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcStructuralPointReaction *cloneIfcStructuralPointReaction(const IfcStructuralPointReaction &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcStructuralPointReaction Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcStructuralPointReaction entities.
         */
        Step::RefLinkedList< IfcStructuralPointReaction > &getAllIfcStructuralPointReaction();
        /**
         * Get the IfcStructuralProfileProperties entity by it's Id.
         * 
         * @param id The Id of the IfcStructuralProfileProperties.
         * @return A pointer to the IfcStructuralProfileProperties if found, NULL otherwise.
         */
        IfcStructuralProfileProperties *getIfcStructuralProfileProperties(Step::Id id);
        /**
         * Removes a IfcStructuralProfileProperties Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcStructuralProfileProperties to remove.
         * @return success.
         */
        bool removeIfcStructuralProfileProperties(IfcStructuralProfileProperties *arg);
        /**
         * Create an IfcStructuralProfileProperties Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcStructuralProfileProperties entity.
         */
        Step::RefPtr< IfcStructuralProfileProperties > createIfcStructuralProfileProperties(bool isVolatile = false);
        /**
         * Clone an IfcStructuralProfileProperties Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcStructuralProfileProperties Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcStructuralProfileProperties *cloneIfcStructuralProfileProperties(const IfcStructuralProfileProperties &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcStructuralProfileProperties Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcStructuralProfileProperties entities.
         */
        Step::RefLinkedList< IfcStructuralProfileProperties > &getAllIfcStructuralProfileProperties();
        /**
         * Get the IfcStructuralReaction entity by it's Id.
         * 
         * @param id The Id of the IfcStructuralReaction.
         * @return A pointer to the IfcStructuralReaction if found, NULL otherwise.
         */
        IfcStructuralReaction *getIfcStructuralReaction(Step::Id id);
        /**
         * Removes a IfcStructuralReaction Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcStructuralReaction to remove.
         * @return success.
         */
        bool removeIfcStructuralReaction(IfcStructuralReaction *arg);
        /**
         * Create an IfcStructuralReaction Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcStructuralReaction entity.
         */
        Step::RefPtr< IfcStructuralReaction > createIfcStructuralReaction(bool isVolatile = false);
        /**
         * Clone an IfcStructuralReaction Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcStructuralReaction Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcStructuralReaction *cloneIfcStructuralReaction(const IfcStructuralReaction &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcStructuralReaction Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcStructuralReaction entities.
         */
        Step::RefLinkedList< IfcStructuralReaction > &getAllIfcStructuralReaction();
        /**
         * Get the IfcStructuralResultGroup entity by it's Id.
         * 
         * @param id The Id of the IfcStructuralResultGroup.
         * @return A pointer to the IfcStructuralResultGroup if found, NULL otherwise.
         */
        IfcStructuralResultGroup *getIfcStructuralResultGroup(Step::Id id);
        /**
         * Removes a IfcStructuralResultGroup Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcStructuralResultGroup to remove.
         * @return success.
         */
        bool removeIfcStructuralResultGroup(IfcStructuralResultGroup *arg);
        /**
         * Create an IfcStructuralResultGroup Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcStructuralResultGroup entity.
         */
        Step::RefPtr< IfcStructuralResultGroup > createIfcStructuralResultGroup(bool isVolatile = false);
        /**
         * Clone an IfcStructuralResultGroup Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcStructuralResultGroup Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcStructuralResultGroup *cloneIfcStructuralResultGroup(const IfcStructuralResultGroup &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcStructuralResultGroup Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcStructuralResultGroup entities.
         */
        Step::RefLinkedList< IfcStructuralResultGroup > &getAllIfcStructuralResultGroup();
        /**
         * Get the IfcStructuralSteelProfileProperties entity by it's Id.
         * 
         * @param id The Id of the IfcStructuralSteelProfileProperties.
         * @return A pointer to the IfcStructuralSteelProfileProperties if found, NULL otherwise.
         */
        IfcStructuralSteelProfileProperties *getIfcStructuralSteelProfileProperties(Step::Id id);
        /**
         * Removes a IfcStructuralSteelProfileProperties Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcStructuralSteelProfileProperties to remove.
         * @return success.
         */
        bool removeIfcStructuralSteelProfileProperties(IfcStructuralSteelProfileProperties *arg);
        /**
         * Create an IfcStructuralSteelProfileProperties Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcStructuralSteelProfileProperties entity.
         */
        Step::RefPtr< IfcStructuralSteelProfileProperties > createIfcStructuralSteelProfileProperties(bool isVolatile = false);
        /**
         * Clone an IfcStructuralSteelProfileProperties Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcStructuralSteelProfileProperties Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcStructuralSteelProfileProperties *cloneIfcStructuralSteelProfileProperties(const IfcStructuralSteelProfileProperties &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcStructuralSteelProfileProperties Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcStructuralSteelProfileProperties entities.
         */
        Step::RefLinkedList< IfcStructuralSteelProfileProperties > &getAllIfcStructuralSteelProfileProperties();
        /**
         * Get the IfcStructuralSurfaceConnection entity by it's Id.
         * 
         * @param id The Id of the IfcStructuralSurfaceConnection.
         * @return A pointer to the IfcStructuralSurfaceConnection if found, NULL otherwise.
         */
        IfcStructuralSurfaceConnection *getIfcStructuralSurfaceConnection(Step::Id id);
        /**
         * Removes a IfcStructuralSurfaceConnection Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcStructuralSurfaceConnection to remove.
         * @return success.
         */
        bool removeIfcStructuralSurfaceConnection(IfcStructuralSurfaceConnection *arg);
        /**
         * Create an IfcStructuralSurfaceConnection Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcStructuralSurfaceConnection entity.
         */
        Step::RefPtr< IfcStructuralSurfaceConnection > createIfcStructuralSurfaceConnection(bool isVolatile = false);
        /**
         * Clone an IfcStructuralSurfaceConnection Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcStructuralSurfaceConnection Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcStructuralSurfaceConnection *cloneIfcStructuralSurfaceConnection(const IfcStructuralSurfaceConnection &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcStructuralSurfaceConnection Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcStructuralSurfaceConnection entities.
         */
        Step::RefLinkedList< IfcStructuralSurfaceConnection > &getAllIfcStructuralSurfaceConnection();
        /**
         * Get the IfcStructuralSurfaceMember entity by it's Id.
         * 
         * @param id The Id of the IfcStructuralSurfaceMember.
         * @return A pointer to the IfcStructuralSurfaceMember if found, NULL otherwise.
         */
        IfcStructuralSurfaceMember *getIfcStructuralSurfaceMember(Step::Id id);
        /**
         * Removes a IfcStructuralSurfaceMember Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcStructuralSurfaceMember to remove.
         * @return success.
         */
        bool removeIfcStructuralSurfaceMember(IfcStructuralSurfaceMember *arg);
        /**
         * Create an IfcStructuralSurfaceMember Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcStructuralSurfaceMember entity.
         */
        Step::RefPtr< IfcStructuralSurfaceMember > createIfcStructuralSurfaceMember(bool isVolatile = false);
        /**
         * Clone an IfcStructuralSurfaceMember Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcStructuralSurfaceMember Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcStructuralSurfaceMember *cloneIfcStructuralSurfaceMember(const IfcStructuralSurfaceMember &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcStructuralSurfaceMember Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcStructuralSurfaceMember entities.
         */
        Step::RefLinkedList< IfcStructuralSurfaceMember > &getAllIfcStructuralSurfaceMember();
        /**
         * Get the IfcStructuralSurfaceMemberVarying entity by it's Id.
         * 
         * @param id The Id of the IfcStructuralSurfaceMemberVarying.
         * @return A pointer to the IfcStructuralSurfaceMemberVarying if found, NULL otherwise.
         */
        IfcStructuralSurfaceMemberVarying *getIfcStructuralSurfaceMemberVarying(Step::Id id);
        /**
         * Removes a IfcStructuralSurfaceMemberVarying Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcStructuralSurfaceMemberVarying to remove.
         * @return success.
         */
        bool removeIfcStructuralSurfaceMemberVarying(IfcStructuralSurfaceMemberVarying *arg);
        /**
         * Create an IfcStructuralSurfaceMemberVarying Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcStructuralSurfaceMemberVarying entity.
         */
        Step::RefPtr< IfcStructuralSurfaceMemberVarying > createIfcStructuralSurfaceMemberVarying(bool isVolatile = false);
        /**
         * Clone an IfcStructuralSurfaceMemberVarying Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcStructuralSurfaceMemberVarying Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcStructuralSurfaceMemberVarying *cloneIfcStructuralSurfaceMemberVarying(const IfcStructuralSurfaceMemberVarying &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcStructuralSurfaceMemberVarying Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcStructuralSurfaceMemberVarying entities.
         */
        Step::RefLinkedList< IfcStructuralSurfaceMemberVarying > &getAllIfcStructuralSurfaceMemberVarying();
        /**
         * Get the IfcStructuredDimensionCallout entity by it's Id.
         * 
         * @param id The Id of the IfcStructuredDimensionCallout.
         * @return A pointer to the IfcStructuredDimensionCallout if found, NULL otherwise.
         */
        IfcStructuredDimensionCallout *getIfcStructuredDimensionCallout(Step::Id id);
        /**
         * Removes a IfcStructuredDimensionCallout Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcStructuredDimensionCallout to remove.
         * @return success.
         */
        bool removeIfcStructuredDimensionCallout(IfcStructuredDimensionCallout *arg);
        /**
         * Create an IfcStructuredDimensionCallout Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcStructuredDimensionCallout entity.
         */
        Step::RefPtr< IfcStructuredDimensionCallout > createIfcStructuredDimensionCallout(bool isVolatile = false);
        /**
         * Clone an IfcStructuredDimensionCallout Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcStructuredDimensionCallout Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcStructuredDimensionCallout *cloneIfcStructuredDimensionCallout(const IfcStructuredDimensionCallout &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcStructuredDimensionCallout Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcStructuredDimensionCallout entities.
         */
        Step::RefLinkedList< IfcStructuredDimensionCallout > &getAllIfcStructuredDimensionCallout();
        /**
         * Get the IfcStyledItem entity by it's Id.
         * 
         * @param id The Id of the IfcStyledItem.
         * @return A pointer to the IfcStyledItem if found, NULL otherwise.
         */
        IfcStyledItem *getIfcStyledItem(Step::Id id);
        /**
         * Removes a IfcStyledItem Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcStyledItem to remove.
         * @return success.
         */
        bool removeIfcStyledItem(IfcStyledItem *arg);
        /**
         * Create an IfcStyledItem Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcStyledItem entity.
         */
        Step::RefPtr< IfcStyledItem > createIfcStyledItem(bool isVolatile = false);
        /**
         * Clone an IfcStyledItem Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcStyledItem Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcStyledItem *cloneIfcStyledItem(const IfcStyledItem &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcStyledItem Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcStyledItem entities.
         */
        Step::RefLinkedList< IfcStyledItem > &getAllIfcStyledItem();
        /**
         * Get the IfcStyledRepresentation entity by it's Id.
         * 
         * @param id The Id of the IfcStyledRepresentation.
         * @return A pointer to the IfcStyledRepresentation if found, NULL otherwise.
         */
        IfcStyledRepresentation *getIfcStyledRepresentation(Step::Id id);
        /**
         * Removes a IfcStyledRepresentation Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcStyledRepresentation to remove.
         * @return success.
         */
        bool removeIfcStyledRepresentation(IfcStyledRepresentation *arg);
        /**
         * Create an IfcStyledRepresentation Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcStyledRepresentation entity.
         */
        Step::RefPtr< IfcStyledRepresentation > createIfcStyledRepresentation(bool isVolatile = false);
        /**
         * Clone an IfcStyledRepresentation Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcStyledRepresentation Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcStyledRepresentation *cloneIfcStyledRepresentation(const IfcStyledRepresentation &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcStyledRepresentation Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcStyledRepresentation entities.
         */
        Step::RefLinkedList< IfcStyledRepresentation > &getAllIfcStyledRepresentation();
        /**
         * Get the IfcStyleModel entity by it's Id.
         * 
         * @param id The Id of the IfcStyleModel.
         * @return A pointer to the IfcStyleModel if found, NULL otherwise.
         */
        IfcStyleModel *getIfcStyleModel(Step::Id id);
        /**
         * Removes a IfcStyleModel Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcStyleModel to remove.
         * @return success.
         */
        bool removeIfcStyleModel(IfcStyleModel *arg);
        /**
         * Create an IfcStyleModel Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcStyleModel entity.
         */
        Step::RefPtr< IfcStyleModel > createIfcStyleModel(bool isVolatile = false);
        /**
         * Clone an IfcStyleModel Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcStyleModel Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcStyleModel *cloneIfcStyleModel(const IfcStyleModel &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcStyleModel Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcStyleModel entities.
         */
        Step::RefLinkedList< IfcStyleModel > &getAllIfcStyleModel();
        /**
         * Get the IfcSubContractResource entity by it's Id.
         * 
         * @param id The Id of the IfcSubContractResource.
         * @return A pointer to the IfcSubContractResource if found, NULL otherwise.
         */
        IfcSubContractResource *getIfcSubContractResource(Step::Id id);
        /**
         * Removes a IfcSubContractResource Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcSubContractResource to remove.
         * @return success.
         */
        bool removeIfcSubContractResource(IfcSubContractResource *arg);
        /**
         * Create an IfcSubContractResource Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcSubContractResource entity.
         */
        Step::RefPtr< IfcSubContractResource > createIfcSubContractResource(bool isVolatile = false);
        /**
         * Clone an IfcSubContractResource Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcSubContractResource Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcSubContractResource *cloneIfcSubContractResource(const IfcSubContractResource &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcSubContractResource Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcSubContractResource entities.
         */
        Step::RefLinkedList< IfcSubContractResource > &getAllIfcSubContractResource();
        /**
         * Get the IfcSubedge entity by it's Id.
         * 
         * @param id The Id of the IfcSubedge.
         * @return A pointer to the IfcSubedge if found, NULL otherwise.
         */
        IfcSubedge *getIfcSubedge(Step::Id id);
        /**
         * Removes a IfcSubedge Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcSubedge to remove.
         * @return success.
         */
        bool removeIfcSubedge(IfcSubedge *arg);
        /**
         * Create an IfcSubedge Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcSubedge entity.
         */
        Step::RefPtr< IfcSubedge > createIfcSubedge(bool isVolatile = false);
        /**
         * Clone an IfcSubedge Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcSubedge Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcSubedge *cloneIfcSubedge(const IfcSubedge &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcSubedge Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcSubedge entities.
         */
        Step::RefLinkedList< IfcSubedge > &getAllIfcSubedge();
        /**
         * Get the IfcSurface entity by it's Id.
         * 
         * @param id The Id of the IfcSurface.
         * @return A pointer to the IfcSurface if found, NULL otherwise.
         */
        IfcSurface *getIfcSurface(Step::Id id);
        /**
         * Removes a IfcSurface Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcSurface to remove.
         * @return success.
         */
        bool removeIfcSurface(IfcSurface *arg);
        /**
         * Create an IfcSurface Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcSurface entity.
         */
        Step::RefPtr< IfcSurface > createIfcSurface(bool isVolatile = false);
        /**
         * Clone an IfcSurface Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcSurface Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcSurface *cloneIfcSurface(const IfcSurface &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcSurface Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcSurface entities.
         */
        Step::RefLinkedList< IfcSurface > &getAllIfcSurface();
        /**
         * Get the IfcSurfaceCurveSweptAreaSolid entity by it's Id.
         * 
         * @param id The Id of the IfcSurfaceCurveSweptAreaSolid.
         * @return A pointer to the IfcSurfaceCurveSweptAreaSolid if found, NULL otherwise.
         */
        IfcSurfaceCurveSweptAreaSolid *getIfcSurfaceCurveSweptAreaSolid(Step::Id id);
        /**
         * Removes a IfcSurfaceCurveSweptAreaSolid Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcSurfaceCurveSweptAreaSolid to remove.
         * @return success.
         */
        bool removeIfcSurfaceCurveSweptAreaSolid(IfcSurfaceCurveSweptAreaSolid *arg);
        /**
         * Create an IfcSurfaceCurveSweptAreaSolid Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcSurfaceCurveSweptAreaSolid entity.
         */
        Step::RefPtr< IfcSurfaceCurveSweptAreaSolid > createIfcSurfaceCurveSweptAreaSolid(bool isVolatile = false);
        /**
         * Clone an IfcSurfaceCurveSweptAreaSolid Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcSurfaceCurveSweptAreaSolid Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcSurfaceCurveSweptAreaSolid *cloneIfcSurfaceCurveSweptAreaSolid(const IfcSurfaceCurveSweptAreaSolid &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcSurfaceCurveSweptAreaSolid Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcSurfaceCurveSweptAreaSolid entities.
         */
        Step::RefLinkedList< IfcSurfaceCurveSweptAreaSolid > &getAllIfcSurfaceCurveSweptAreaSolid();
        /**
         * Get the IfcSurfaceOfLinearExtrusion entity by it's Id.
         * 
         * @param id The Id of the IfcSurfaceOfLinearExtrusion.
         * @return A pointer to the IfcSurfaceOfLinearExtrusion if found, NULL otherwise.
         */
        IfcSurfaceOfLinearExtrusion *getIfcSurfaceOfLinearExtrusion(Step::Id id);
        /**
         * Removes a IfcSurfaceOfLinearExtrusion Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcSurfaceOfLinearExtrusion to remove.
         * @return success.
         */
        bool removeIfcSurfaceOfLinearExtrusion(IfcSurfaceOfLinearExtrusion *arg);
        /**
         * Create an IfcSurfaceOfLinearExtrusion Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcSurfaceOfLinearExtrusion entity.
         */
        Step::RefPtr< IfcSurfaceOfLinearExtrusion > createIfcSurfaceOfLinearExtrusion(bool isVolatile = false);
        /**
         * Clone an IfcSurfaceOfLinearExtrusion Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcSurfaceOfLinearExtrusion Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcSurfaceOfLinearExtrusion *cloneIfcSurfaceOfLinearExtrusion(const IfcSurfaceOfLinearExtrusion &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcSurfaceOfLinearExtrusion Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcSurfaceOfLinearExtrusion entities.
         */
        Step::RefLinkedList< IfcSurfaceOfLinearExtrusion > &getAllIfcSurfaceOfLinearExtrusion();
        /**
         * Get the IfcSurfaceOfRevolution entity by it's Id.
         * 
         * @param id The Id of the IfcSurfaceOfRevolution.
         * @return A pointer to the IfcSurfaceOfRevolution if found, NULL otherwise.
         */
        IfcSurfaceOfRevolution *getIfcSurfaceOfRevolution(Step::Id id);
        /**
         * Removes a IfcSurfaceOfRevolution Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcSurfaceOfRevolution to remove.
         * @return success.
         */
        bool removeIfcSurfaceOfRevolution(IfcSurfaceOfRevolution *arg);
        /**
         * Create an IfcSurfaceOfRevolution Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcSurfaceOfRevolution entity.
         */
        Step::RefPtr< IfcSurfaceOfRevolution > createIfcSurfaceOfRevolution(bool isVolatile = false);
        /**
         * Clone an IfcSurfaceOfRevolution Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcSurfaceOfRevolution Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcSurfaceOfRevolution *cloneIfcSurfaceOfRevolution(const IfcSurfaceOfRevolution &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcSurfaceOfRevolution Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcSurfaceOfRevolution entities.
         */
        Step::RefLinkedList< IfcSurfaceOfRevolution > &getAllIfcSurfaceOfRevolution();
        /**
         * Get the IfcSurfaceStyle entity by it's Id.
         * 
         * @param id The Id of the IfcSurfaceStyle.
         * @return A pointer to the IfcSurfaceStyle if found, NULL otherwise.
         */
        IfcSurfaceStyle *getIfcSurfaceStyle(Step::Id id);
        /**
         * Removes a IfcSurfaceStyle Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcSurfaceStyle to remove.
         * @return success.
         */
        bool removeIfcSurfaceStyle(IfcSurfaceStyle *arg);
        /**
         * Create an IfcSurfaceStyle Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcSurfaceStyle entity.
         */
        Step::RefPtr< IfcSurfaceStyle > createIfcSurfaceStyle(bool isVolatile = false);
        /**
         * Clone an IfcSurfaceStyle Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcSurfaceStyle Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcSurfaceStyle *cloneIfcSurfaceStyle(const IfcSurfaceStyle &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcSurfaceStyle Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcSurfaceStyle entities.
         */
        Step::RefLinkedList< IfcSurfaceStyle > &getAllIfcSurfaceStyle();
        /**
         * Get the IfcSurfaceStyleLighting entity by it's Id.
         * 
         * @param id The Id of the IfcSurfaceStyleLighting.
         * @return A pointer to the IfcSurfaceStyleLighting if found, NULL otherwise.
         */
        IfcSurfaceStyleLighting *getIfcSurfaceStyleLighting(Step::Id id);
        /**
         * Removes a IfcSurfaceStyleLighting Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcSurfaceStyleLighting to remove.
         * @return success.
         */
        bool removeIfcSurfaceStyleLighting(IfcSurfaceStyleLighting *arg);
        /**
         * Create an IfcSurfaceStyleLighting Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcSurfaceStyleLighting entity.
         */
        Step::RefPtr< IfcSurfaceStyleLighting > createIfcSurfaceStyleLighting(bool isVolatile = false);
        /**
         * Clone an IfcSurfaceStyleLighting Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcSurfaceStyleLighting Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcSurfaceStyleLighting *cloneIfcSurfaceStyleLighting(const IfcSurfaceStyleLighting &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcSurfaceStyleLighting Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcSurfaceStyleLighting entities.
         */
        Step::RefLinkedList< IfcSurfaceStyleLighting > &getAllIfcSurfaceStyleLighting();
        /**
         * Get the IfcSurfaceStyleRefraction entity by it's Id.
         * 
         * @param id The Id of the IfcSurfaceStyleRefraction.
         * @return A pointer to the IfcSurfaceStyleRefraction if found, NULL otherwise.
         */
        IfcSurfaceStyleRefraction *getIfcSurfaceStyleRefraction(Step::Id id);
        /**
         * Removes a IfcSurfaceStyleRefraction Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcSurfaceStyleRefraction to remove.
         * @return success.
         */
        bool removeIfcSurfaceStyleRefraction(IfcSurfaceStyleRefraction *arg);
        /**
         * Create an IfcSurfaceStyleRefraction Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcSurfaceStyleRefraction entity.
         */
        Step::RefPtr< IfcSurfaceStyleRefraction > createIfcSurfaceStyleRefraction(bool isVolatile = false);
        /**
         * Clone an IfcSurfaceStyleRefraction Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcSurfaceStyleRefraction Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcSurfaceStyleRefraction *cloneIfcSurfaceStyleRefraction(const IfcSurfaceStyleRefraction &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcSurfaceStyleRefraction Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcSurfaceStyleRefraction entities.
         */
        Step::RefLinkedList< IfcSurfaceStyleRefraction > &getAllIfcSurfaceStyleRefraction();
        /**
         * Get the IfcSurfaceStyleRendering entity by it's Id.
         * 
         * @param id The Id of the IfcSurfaceStyleRendering.
         * @return A pointer to the IfcSurfaceStyleRendering if found, NULL otherwise.
         */
        IfcSurfaceStyleRendering *getIfcSurfaceStyleRendering(Step::Id id);
        /**
         * Removes a IfcSurfaceStyleRendering Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcSurfaceStyleRendering to remove.
         * @return success.
         */
        bool removeIfcSurfaceStyleRendering(IfcSurfaceStyleRendering *arg);
        /**
         * Create an IfcSurfaceStyleRendering Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcSurfaceStyleRendering entity.
         */
        Step::RefPtr< IfcSurfaceStyleRendering > createIfcSurfaceStyleRendering(bool isVolatile = false);
        /**
         * Clone an IfcSurfaceStyleRendering Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcSurfaceStyleRendering Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcSurfaceStyleRendering *cloneIfcSurfaceStyleRendering(const IfcSurfaceStyleRendering &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcSurfaceStyleRendering Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcSurfaceStyleRendering entities.
         */
        Step::RefLinkedList< IfcSurfaceStyleRendering > &getAllIfcSurfaceStyleRendering();
        /**
         * Get the IfcSurfaceStyleShading entity by it's Id.
         * 
         * @param id The Id of the IfcSurfaceStyleShading.
         * @return A pointer to the IfcSurfaceStyleShading if found, NULL otherwise.
         */
        IfcSurfaceStyleShading *getIfcSurfaceStyleShading(Step::Id id);
        /**
         * Removes a IfcSurfaceStyleShading Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcSurfaceStyleShading to remove.
         * @return success.
         */
        bool removeIfcSurfaceStyleShading(IfcSurfaceStyleShading *arg);
        /**
         * Create an IfcSurfaceStyleShading Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcSurfaceStyleShading entity.
         */
        Step::RefPtr< IfcSurfaceStyleShading > createIfcSurfaceStyleShading(bool isVolatile = false);
        /**
         * Clone an IfcSurfaceStyleShading Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcSurfaceStyleShading Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcSurfaceStyleShading *cloneIfcSurfaceStyleShading(const IfcSurfaceStyleShading &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcSurfaceStyleShading Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcSurfaceStyleShading entities.
         */
        Step::RefLinkedList< IfcSurfaceStyleShading > &getAllIfcSurfaceStyleShading();
        /**
         * Get the IfcSurfaceStyleWithTextures entity by it's Id.
         * 
         * @param id The Id of the IfcSurfaceStyleWithTextures.
         * @return A pointer to the IfcSurfaceStyleWithTextures if found, NULL otherwise.
         */
        IfcSurfaceStyleWithTextures *getIfcSurfaceStyleWithTextures(Step::Id id);
        /**
         * Removes a IfcSurfaceStyleWithTextures Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcSurfaceStyleWithTextures to remove.
         * @return success.
         */
        bool removeIfcSurfaceStyleWithTextures(IfcSurfaceStyleWithTextures *arg);
        /**
         * Create an IfcSurfaceStyleWithTextures Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcSurfaceStyleWithTextures entity.
         */
        Step::RefPtr< IfcSurfaceStyleWithTextures > createIfcSurfaceStyleWithTextures(bool isVolatile = false);
        /**
         * Clone an IfcSurfaceStyleWithTextures Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcSurfaceStyleWithTextures Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcSurfaceStyleWithTextures *cloneIfcSurfaceStyleWithTextures(const IfcSurfaceStyleWithTextures &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcSurfaceStyleWithTextures Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcSurfaceStyleWithTextures entities.
         */
        Step::RefLinkedList< IfcSurfaceStyleWithTextures > &getAllIfcSurfaceStyleWithTextures();
        /**
         * Get the IfcSurfaceTexture entity by it's Id.
         * 
         * @param id The Id of the IfcSurfaceTexture.
         * @return A pointer to the IfcSurfaceTexture if found, NULL otherwise.
         */
        IfcSurfaceTexture *getIfcSurfaceTexture(Step::Id id);
        /**
         * Removes a IfcSurfaceTexture Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcSurfaceTexture to remove.
         * @return success.
         */
        bool removeIfcSurfaceTexture(IfcSurfaceTexture *arg);
        /**
         * Create an IfcSurfaceTexture Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcSurfaceTexture entity.
         */
        Step::RefPtr< IfcSurfaceTexture > createIfcSurfaceTexture(bool isVolatile = false);
        /**
         * Clone an IfcSurfaceTexture Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcSurfaceTexture Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcSurfaceTexture *cloneIfcSurfaceTexture(const IfcSurfaceTexture &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcSurfaceTexture Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcSurfaceTexture entities.
         */
        Step::RefLinkedList< IfcSurfaceTexture > &getAllIfcSurfaceTexture();
        /**
         * Get the IfcSweptAreaSolid entity by it's Id.
         * 
         * @param id The Id of the IfcSweptAreaSolid.
         * @return A pointer to the IfcSweptAreaSolid if found, NULL otherwise.
         */
        IfcSweptAreaSolid *getIfcSweptAreaSolid(Step::Id id);
        /**
         * Removes a IfcSweptAreaSolid Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcSweptAreaSolid to remove.
         * @return success.
         */
        bool removeIfcSweptAreaSolid(IfcSweptAreaSolid *arg);
        /**
         * Create an IfcSweptAreaSolid Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcSweptAreaSolid entity.
         */
        Step::RefPtr< IfcSweptAreaSolid > createIfcSweptAreaSolid(bool isVolatile = false);
        /**
         * Clone an IfcSweptAreaSolid Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcSweptAreaSolid Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcSweptAreaSolid *cloneIfcSweptAreaSolid(const IfcSweptAreaSolid &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcSweptAreaSolid Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcSweptAreaSolid entities.
         */
        Step::RefLinkedList< IfcSweptAreaSolid > &getAllIfcSweptAreaSolid();
        /**
         * Get the IfcSweptDiskSolid entity by it's Id.
         * 
         * @param id The Id of the IfcSweptDiskSolid.
         * @return A pointer to the IfcSweptDiskSolid if found, NULL otherwise.
         */
        IfcSweptDiskSolid *getIfcSweptDiskSolid(Step::Id id);
        /**
         * Removes a IfcSweptDiskSolid Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcSweptDiskSolid to remove.
         * @return success.
         */
        bool removeIfcSweptDiskSolid(IfcSweptDiskSolid *arg);
        /**
         * Create an IfcSweptDiskSolid Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcSweptDiskSolid entity.
         */
        Step::RefPtr< IfcSweptDiskSolid > createIfcSweptDiskSolid(bool isVolatile = false);
        /**
         * Clone an IfcSweptDiskSolid Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcSweptDiskSolid Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcSweptDiskSolid *cloneIfcSweptDiskSolid(const IfcSweptDiskSolid &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcSweptDiskSolid Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcSweptDiskSolid entities.
         */
        Step::RefLinkedList< IfcSweptDiskSolid > &getAllIfcSweptDiskSolid();
        /**
         * Get the IfcSweptSurface entity by it's Id.
         * 
         * @param id The Id of the IfcSweptSurface.
         * @return A pointer to the IfcSweptSurface if found, NULL otherwise.
         */
        IfcSweptSurface *getIfcSweptSurface(Step::Id id);
        /**
         * Removes a IfcSweptSurface Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcSweptSurface to remove.
         * @return success.
         */
        bool removeIfcSweptSurface(IfcSweptSurface *arg);
        /**
         * Create an IfcSweptSurface Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcSweptSurface entity.
         */
        Step::RefPtr< IfcSweptSurface > createIfcSweptSurface(bool isVolatile = false);
        /**
         * Clone an IfcSweptSurface Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcSweptSurface Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcSweptSurface *cloneIfcSweptSurface(const IfcSweptSurface &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcSweptSurface Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcSweptSurface entities.
         */
        Step::RefLinkedList< IfcSweptSurface > &getAllIfcSweptSurface();
        /**
         * Get the IfcSwitchingDeviceType entity by it's Id.
         * 
         * @param id The Id of the IfcSwitchingDeviceType.
         * @return A pointer to the IfcSwitchingDeviceType if found, NULL otherwise.
         */
        IfcSwitchingDeviceType *getIfcSwitchingDeviceType(Step::Id id);
        /**
         * Removes a IfcSwitchingDeviceType Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcSwitchingDeviceType to remove.
         * @return success.
         */
        bool removeIfcSwitchingDeviceType(IfcSwitchingDeviceType *arg);
        /**
         * Create an IfcSwitchingDeviceType Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcSwitchingDeviceType entity.
         */
        Step::RefPtr< IfcSwitchingDeviceType > createIfcSwitchingDeviceType(bool isVolatile = false);
        /**
         * Clone an IfcSwitchingDeviceType Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcSwitchingDeviceType Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcSwitchingDeviceType *cloneIfcSwitchingDeviceType(const IfcSwitchingDeviceType &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcSwitchingDeviceType Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcSwitchingDeviceType entities.
         */
        Step::RefLinkedList< IfcSwitchingDeviceType > &getAllIfcSwitchingDeviceType();
        /**
         * Get the IfcSymbolStyle entity by it's Id.
         * 
         * @param id The Id of the IfcSymbolStyle.
         * @return A pointer to the IfcSymbolStyle if found, NULL otherwise.
         */
        IfcSymbolStyle *getIfcSymbolStyle(Step::Id id);
        /**
         * Removes a IfcSymbolStyle Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcSymbolStyle to remove.
         * @return success.
         */
        bool removeIfcSymbolStyle(IfcSymbolStyle *arg);
        /**
         * Create an IfcSymbolStyle Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcSymbolStyle entity.
         */
        Step::RefPtr< IfcSymbolStyle > createIfcSymbolStyle(bool isVolatile = false);
        /**
         * Clone an IfcSymbolStyle Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcSymbolStyle Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcSymbolStyle *cloneIfcSymbolStyle(const IfcSymbolStyle &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcSymbolStyle Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcSymbolStyle entities.
         */
        Step::RefLinkedList< IfcSymbolStyle > &getAllIfcSymbolStyle();
        /**
         * Get the IfcSystem entity by it's Id.
         * 
         * @param id The Id of the IfcSystem.
         * @return A pointer to the IfcSystem if found, NULL otherwise.
         */
        IfcSystem *getIfcSystem(Step::Id id);
        /**
         * Removes a IfcSystem Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcSystem to remove.
         * @return success.
         */
        bool removeIfcSystem(IfcSystem *arg);
        /**
         * Create an IfcSystem Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcSystem entity.
         */
        Step::RefPtr< IfcSystem > createIfcSystem(bool isVolatile = false);
        /**
         * Clone an IfcSystem Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcSystem Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcSystem *cloneIfcSystem(const IfcSystem &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcSystem Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcSystem entities.
         */
        Step::RefLinkedList< IfcSystem > &getAllIfcSystem();
        /**
         * Get the IfcSystemFurnitureElementType entity by it's Id.
         * 
         * @param id The Id of the IfcSystemFurnitureElementType.
         * @return A pointer to the IfcSystemFurnitureElementType if found, NULL otherwise.
         */
        IfcSystemFurnitureElementType *getIfcSystemFurnitureElementType(Step::Id id);
        /**
         * Removes a IfcSystemFurnitureElementType Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcSystemFurnitureElementType to remove.
         * @return success.
         */
        bool removeIfcSystemFurnitureElementType(IfcSystemFurnitureElementType *arg);
        /**
         * Create an IfcSystemFurnitureElementType Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcSystemFurnitureElementType entity.
         */
        Step::RefPtr< IfcSystemFurnitureElementType > createIfcSystemFurnitureElementType(bool isVolatile = false);
        /**
         * Clone an IfcSystemFurnitureElementType Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcSystemFurnitureElementType Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcSystemFurnitureElementType *cloneIfcSystemFurnitureElementType(const IfcSystemFurnitureElementType &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcSystemFurnitureElementType Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcSystemFurnitureElementType entities.
         */
        Step::RefLinkedList< IfcSystemFurnitureElementType > &getAllIfcSystemFurnitureElementType();
        /**
         * Get the IfcTable entity by it's Id.
         * 
         * @param id The Id of the IfcTable.
         * @return A pointer to the IfcTable if found, NULL otherwise.
         */
        IfcTable *getIfcTable(Step::Id id);
        /**
         * Removes a IfcTable Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcTable to remove.
         * @return success.
         */
        bool removeIfcTable(IfcTable *arg);
        /**
         * Create an IfcTable Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcTable entity.
         */
        Step::RefPtr< IfcTable > createIfcTable(bool isVolatile = false);
        /**
         * Clone an IfcTable Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcTable Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcTable *cloneIfcTable(const IfcTable &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcTable Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcTable entities.
         */
        Step::RefLinkedList< IfcTable > &getAllIfcTable();
        /**
         * Get the IfcTableRow entity by it's Id.
         * 
         * @param id The Id of the IfcTableRow.
         * @return A pointer to the IfcTableRow if found, NULL otherwise.
         */
        IfcTableRow *getIfcTableRow(Step::Id id);
        /**
         * Removes a IfcTableRow Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcTableRow to remove.
         * @return success.
         */
        bool removeIfcTableRow(IfcTableRow *arg);
        /**
         * Create an IfcTableRow Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcTableRow entity.
         */
        Step::RefPtr< IfcTableRow > createIfcTableRow(bool isVolatile = false);
        /**
         * Clone an IfcTableRow Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcTableRow Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcTableRow *cloneIfcTableRow(const IfcTableRow &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcTableRow Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcTableRow entities.
         */
        Step::RefLinkedList< IfcTableRow > &getAllIfcTableRow();
        /**
         * Get the IfcTankType entity by it's Id.
         * 
         * @param id The Id of the IfcTankType.
         * @return A pointer to the IfcTankType if found, NULL otherwise.
         */
        IfcTankType *getIfcTankType(Step::Id id);
        /**
         * Removes a IfcTankType Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcTankType to remove.
         * @return success.
         */
        bool removeIfcTankType(IfcTankType *arg);
        /**
         * Create an IfcTankType Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcTankType entity.
         */
        Step::RefPtr< IfcTankType > createIfcTankType(bool isVolatile = false);
        /**
         * Clone an IfcTankType Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcTankType Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcTankType *cloneIfcTankType(const IfcTankType &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcTankType Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcTankType entities.
         */
        Step::RefLinkedList< IfcTankType > &getAllIfcTankType();
        /**
         * Get the IfcTask entity by it's Id.
         * 
         * @param id The Id of the IfcTask.
         * @return A pointer to the IfcTask if found, NULL otherwise.
         */
        IfcTask *getIfcTask(Step::Id id);
        /**
         * Removes a IfcTask Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcTask to remove.
         * @return success.
         */
        bool removeIfcTask(IfcTask *arg);
        /**
         * Create an IfcTask Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcTask entity.
         */
        Step::RefPtr< IfcTask > createIfcTask(bool isVolatile = false);
        /**
         * Clone an IfcTask Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcTask Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcTask *cloneIfcTask(const IfcTask &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcTask Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcTask entities.
         */
        Step::RefLinkedList< IfcTask > &getAllIfcTask();
        /**
         * Get the IfcTelecomAddress entity by it's Id.
         * 
         * @param id The Id of the IfcTelecomAddress.
         * @return A pointer to the IfcTelecomAddress if found, NULL otherwise.
         */
        IfcTelecomAddress *getIfcTelecomAddress(Step::Id id);
        /**
         * Removes a IfcTelecomAddress Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcTelecomAddress to remove.
         * @return success.
         */
        bool removeIfcTelecomAddress(IfcTelecomAddress *arg);
        /**
         * Create an IfcTelecomAddress Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcTelecomAddress entity.
         */
        Step::RefPtr< IfcTelecomAddress > createIfcTelecomAddress(bool isVolatile = false);
        /**
         * Clone an IfcTelecomAddress Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcTelecomAddress Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcTelecomAddress *cloneIfcTelecomAddress(const IfcTelecomAddress &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcTelecomAddress Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcTelecomAddress entities.
         */
        Step::RefLinkedList< IfcTelecomAddress > &getAllIfcTelecomAddress();
        /**
         * Get the IfcTendon entity by it's Id.
         * 
         * @param id The Id of the IfcTendon.
         * @return A pointer to the IfcTendon if found, NULL otherwise.
         */
        IfcTendon *getIfcTendon(Step::Id id);
        /**
         * Removes a IfcTendon Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcTendon to remove.
         * @return success.
         */
        bool removeIfcTendon(IfcTendon *arg);
        /**
         * Create an IfcTendon Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcTendon entity.
         */
        Step::RefPtr< IfcTendon > createIfcTendon(bool isVolatile = false);
        /**
         * Clone an IfcTendon Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcTendon Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcTendon *cloneIfcTendon(const IfcTendon &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcTendon Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcTendon entities.
         */
        Step::RefLinkedList< IfcTendon > &getAllIfcTendon();
        /**
         * Get the IfcTendonAnchor entity by it's Id.
         * 
         * @param id The Id of the IfcTendonAnchor.
         * @return A pointer to the IfcTendonAnchor if found, NULL otherwise.
         */
        IfcTendonAnchor *getIfcTendonAnchor(Step::Id id);
        /**
         * Removes a IfcTendonAnchor Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcTendonAnchor to remove.
         * @return success.
         */
        bool removeIfcTendonAnchor(IfcTendonAnchor *arg);
        /**
         * Create an IfcTendonAnchor Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcTendonAnchor entity.
         */
        Step::RefPtr< IfcTendonAnchor > createIfcTendonAnchor(bool isVolatile = false);
        /**
         * Clone an IfcTendonAnchor Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcTendonAnchor Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcTendonAnchor *cloneIfcTendonAnchor(const IfcTendonAnchor &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcTendonAnchor Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcTendonAnchor entities.
         */
        Step::RefLinkedList< IfcTendonAnchor > &getAllIfcTendonAnchor();
        /**
         * Get the IfcTerminatorSymbol entity by it's Id.
         * 
         * @param id The Id of the IfcTerminatorSymbol.
         * @return A pointer to the IfcTerminatorSymbol if found, NULL otherwise.
         */
        IfcTerminatorSymbol *getIfcTerminatorSymbol(Step::Id id);
        /**
         * Removes a IfcTerminatorSymbol Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcTerminatorSymbol to remove.
         * @return success.
         */
        bool removeIfcTerminatorSymbol(IfcTerminatorSymbol *arg);
        /**
         * Create an IfcTerminatorSymbol Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcTerminatorSymbol entity.
         */
        Step::RefPtr< IfcTerminatorSymbol > createIfcTerminatorSymbol(bool isVolatile = false);
        /**
         * Clone an IfcTerminatorSymbol Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcTerminatorSymbol Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcTerminatorSymbol *cloneIfcTerminatorSymbol(const IfcTerminatorSymbol &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcTerminatorSymbol Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcTerminatorSymbol entities.
         */
        Step::RefLinkedList< IfcTerminatorSymbol > &getAllIfcTerminatorSymbol();
        /**
         * Get the IfcTextLiteral entity by it's Id.
         * 
         * @param id The Id of the IfcTextLiteral.
         * @return A pointer to the IfcTextLiteral if found, NULL otherwise.
         */
        IfcTextLiteral *getIfcTextLiteral(Step::Id id);
        /**
         * Removes a IfcTextLiteral Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcTextLiteral to remove.
         * @return success.
         */
        bool removeIfcTextLiteral(IfcTextLiteral *arg);
        /**
         * Create an IfcTextLiteral Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcTextLiteral entity.
         */
        Step::RefPtr< IfcTextLiteral > createIfcTextLiteral(bool isVolatile = false);
        /**
         * Clone an IfcTextLiteral Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcTextLiteral Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcTextLiteral *cloneIfcTextLiteral(const IfcTextLiteral &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcTextLiteral Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcTextLiteral entities.
         */
        Step::RefLinkedList< IfcTextLiteral > &getAllIfcTextLiteral();
        /**
         * Get the IfcTextLiteralWithExtent entity by it's Id.
         * 
         * @param id The Id of the IfcTextLiteralWithExtent.
         * @return A pointer to the IfcTextLiteralWithExtent if found, NULL otherwise.
         */
        IfcTextLiteralWithExtent *getIfcTextLiteralWithExtent(Step::Id id);
        /**
         * Removes a IfcTextLiteralWithExtent Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcTextLiteralWithExtent to remove.
         * @return success.
         */
        bool removeIfcTextLiteralWithExtent(IfcTextLiteralWithExtent *arg);
        /**
         * Create an IfcTextLiteralWithExtent Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcTextLiteralWithExtent entity.
         */
        Step::RefPtr< IfcTextLiteralWithExtent > createIfcTextLiteralWithExtent(bool isVolatile = false);
        /**
         * Clone an IfcTextLiteralWithExtent Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcTextLiteralWithExtent Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcTextLiteralWithExtent *cloneIfcTextLiteralWithExtent(const IfcTextLiteralWithExtent &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcTextLiteralWithExtent Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcTextLiteralWithExtent entities.
         */
        Step::RefLinkedList< IfcTextLiteralWithExtent > &getAllIfcTextLiteralWithExtent();
        /**
         * Get the IfcTextStyle entity by it's Id.
         * 
         * @param id The Id of the IfcTextStyle.
         * @return A pointer to the IfcTextStyle if found, NULL otherwise.
         */
        IfcTextStyle *getIfcTextStyle(Step::Id id);
        /**
         * Removes a IfcTextStyle Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcTextStyle to remove.
         * @return success.
         */
        bool removeIfcTextStyle(IfcTextStyle *arg);
        /**
         * Create an IfcTextStyle Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcTextStyle entity.
         */
        Step::RefPtr< IfcTextStyle > createIfcTextStyle(bool isVolatile = false);
        /**
         * Clone an IfcTextStyle Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcTextStyle Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcTextStyle *cloneIfcTextStyle(const IfcTextStyle &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcTextStyle Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcTextStyle entities.
         */
        Step::RefLinkedList< IfcTextStyle > &getAllIfcTextStyle();
        /**
         * Get the IfcTextStyleFontModel entity by it's Id.
         * 
         * @param id The Id of the IfcTextStyleFontModel.
         * @return A pointer to the IfcTextStyleFontModel if found, NULL otherwise.
         */
        IfcTextStyleFontModel *getIfcTextStyleFontModel(Step::Id id);
        /**
         * Removes a IfcTextStyleFontModel Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcTextStyleFontModel to remove.
         * @return success.
         */
        bool removeIfcTextStyleFontModel(IfcTextStyleFontModel *arg);
        /**
         * Create an IfcTextStyleFontModel Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcTextStyleFontModel entity.
         */
        Step::RefPtr< IfcTextStyleFontModel > createIfcTextStyleFontModel(bool isVolatile = false);
        /**
         * Clone an IfcTextStyleFontModel Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcTextStyleFontModel Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcTextStyleFontModel *cloneIfcTextStyleFontModel(const IfcTextStyleFontModel &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcTextStyleFontModel Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcTextStyleFontModel entities.
         */
        Step::RefLinkedList< IfcTextStyleFontModel > &getAllIfcTextStyleFontModel();
        /**
         * Get the IfcTextStyleForDefinedFont entity by it's Id.
         * 
         * @param id The Id of the IfcTextStyleForDefinedFont.
         * @return A pointer to the IfcTextStyleForDefinedFont if found, NULL otherwise.
         */
        IfcTextStyleForDefinedFont *getIfcTextStyleForDefinedFont(Step::Id id);
        /**
         * Removes a IfcTextStyleForDefinedFont Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcTextStyleForDefinedFont to remove.
         * @return success.
         */
        bool removeIfcTextStyleForDefinedFont(IfcTextStyleForDefinedFont *arg);
        /**
         * Create an IfcTextStyleForDefinedFont Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcTextStyleForDefinedFont entity.
         */
        Step::RefPtr< IfcTextStyleForDefinedFont > createIfcTextStyleForDefinedFont(bool isVolatile = false);
        /**
         * Clone an IfcTextStyleForDefinedFont Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcTextStyleForDefinedFont Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcTextStyleForDefinedFont *cloneIfcTextStyleForDefinedFont(const IfcTextStyleForDefinedFont &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcTextStyleForDefinedFont Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcTextStyleForDefinedFont entities.
         */
        Step::RefLinkedList< IfcTextStyleForDefinedFont > &getAllIfcTextStyleForDefinedFont();
        /**
         * Get the IfcTextStyleTextModel entity by it's Id.
         * 
         * @param id The Id of the IfcTextStyleTextModel.
         * @return A pointer to the IfcTextStyleTextModel if found, NULL otherwise.
         */
        IfcTextStyleTextModel *getIfcTextStyleTextModel(Step::Id id);
        /**
         * Removes a IfcTextStyleTextModel Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcTextStyleTextModel to remove.
         * @return success.
         */
        bool removeIfcTextStyleTextModel(IfcTextStyleTextModel *arg);
        /**
         * Create an IfcTextStyleTextModel Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcTextStyleTextModel entity.
         */
        Step::RefPtr< IfcTextStyleTextModel > createIfcTextStyleTextModel(bool isVolatile = false);
        /**
         * Clone an IfcTextStyleTextModel Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcTextStyleTextModel Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcTextStyleTextModel *cloneIfcTextStyleTextModel(const IfcTextStyleTextModel &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcTextStyleTextModel Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcTextStyleTextModel entities.
         */
        Step::RefLinkedList< IfcTextStyleTextModel > &getAllIfcTextStyleTextModel();
        /**
         * Get the IfcTextStyleWithBoxCharacteristics entity by it's Id.
         * 
         * @param id The Id of the IfcTextStyleWithBoxCharacteristics.
         * @return A pointer to the IfcTextStyleWithBoxCharacteristics if found, NULL otherwise.
         */
        IfcTextStyleWithBoxCharacteristics *getIfcTextStyleWithBoxCharacteristics(Step::Id id);
        /**
         * Removes a IfcTextStyleWithBoxCharacteristics Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcTextStyleWithBoxCharacteristics to remove.
         * @return success.
         */
        bool removeIfcTextStyleWithBoxCharacteristics(IfcTextStyleWithBoxCharacteristics *arg);
        /**
         * Create an IfcTextStyleWithBoxCharacteristics Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcTextStyleWithBoxCharacteristics entity.
         */
        Step::RefPtr< IfcTextStyleWithBoxCharacteristics > createIfcTextStyleWithBoxCharacteristics(bool isVolatile = false);
        /**
         * Clone an IfcTextStyleWithBoxCharacteristics Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcTextStyleWithBoxCharacteristics Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcTextStyleWithBoxCharacteristics *cloneIfcTextStyleWithBoxCharacteristics(const IfcTextStyleWithBoxCharacteristics &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcTextStyleWithBoxCharacteristics Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcTextStyleWithBoxCharacteristics entities.
         */
        Step::RefLinkedList< IfcTextStyleWithBoxCharacteristics > &getAllIfcTextStyleWithBoxCharacteristics();
        /**
         * Get the IfcTextureCoordinate entity by it's Id.
         * 
         * @param id The Id of the IfcTextureCoordinate.
         * @return A pointer to the IfcTextureCoordinate if found, NULL otherwise.
         */
        IfcTextureCoordinate *getIfcTextureCoordinate(Step::Id id);
        /**
         * Removes a IfcTextureCoordinate Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcTextureCoordinate to remove.
         * @return success.
         */
        bool removeIfcTextureCoordinate(IfcTextureCoordinate *arg);
        /**
         * Create an IfcTextureCoordinate Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcTextureCoordinate entity.
         */
        Step::RefPtr< IfcTextureCoordinate > createIfcTextureCoordinate(bool isVolatile = false);
        /**
         * Clone an IfcTextureCoordinate Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcTextureCoordinate Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcTextureCoordinate *cloneIfcTextureCoordinate(const IfcTextureCoordinate &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcTextureCoordinate Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcTextureCoordinate entities.
         */
        Step::RefLinkedList< IfcTextureCoordinate > &getAllIfcTextureCoordinate();
        /**
         * Get the IfcTextureCoordinateGenerator entity by it's Id.
         * 
         * @param id The Id of the IfcTextureCoordinateGenerator.
         * @return A pointer to the IfcTextureCoordinateGenerator if found, NULL otherwise.
         */
        IfcTextureCoordinateGenerator *getIfcTextureCoordinateGenerator(Step::Id id);
        /**
         * Removes a IfcTextureCoordinateGenerator Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcTextureCoordinateGenerator to remove.
         * @return success.
         */
        bool removeIfcTextureCoordinateGenerator(IfcTextureCoordinateGenerator *arg);
        /**
         * Create an IfcTextureCoordinateGenerator Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcTextureCoordinateGenerator entity.
         */
        Step::RefPtr< IfcTextureCoordinateGenerator > createIfcTextureCoordinateGenerator(bool isVolatile = false);
        /**
         * Clone an IfcTextureCoordinateGenerator Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcTextureCoordinateGenerator Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcTextureCoordinateGenerator *cloneIfcTextureCoordinateGenerator(const IfcTextureCoordinateGenerator &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcTextureCoordinateGenerator Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcTextureCoordinateGenerator entities.
         */
        Step::RefLinkedList< IfcTextureCoordinateGenerator > &getAllIfcTextureCoordinateGenerator();
        /**
         * Get the IfcTextureMap entity by it's Id.
         * 
         * @param id The Id of the IfcTextureMap.
         * @return A pointer to the IfcTextureMap if found, NULL otherwise.
         */
        IfcTextureMap *getIfcTextureMap(Step::Id id);
        /**
         * Removes a IfcTextureMap Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcTextureMap to remove.
         * @return success.
         */
        bool removeIfcTextureMap(IfcTextureMap *arg);
        /**
         * Create an IfcTextureMap Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcTextureMap entity.
         */
        Step::RefPtr< IfcTextureMap > createIfcTextureMap(bool isVolatile = false);
        /**
         * Clone an IfcTextureMap Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcTextureMap Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcTextureMap *cloneIfcTextureMap(const IfcTextureMap &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcTextureMap Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcTextureMap entities.
         */
        Step::RefLinkedList< IfcTextureMap > &getAllIfcTextureMap();
        /**
         * Get the IfcTextureVertex entity by it's Id.
         * 
         * @param id The Id of the IfcTextureVertex.
         * @return A pointer to the IfcTextureVertex if found, NULL otherwise.
         */
        IfcTextureVertex *getIfcTextureVertex(Step::Id id);
        /**
         * Removes a IfcTextureVertex Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcTextureVertex to remove.
         * @return success.
         */
        bool removeIfcTextureVertex(IfcTextureVertex *arg);
        /**
         * Create an IfcTextureVertex Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcTextureVertex entity.
         */
        Step::RefPtr< IfcTextureVertex > createIfcTextureVertex(bool isVolatile = false);
        /**
         * Clone an IfcTextureVertex Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcTextureVertex Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcTextureVertex *cloneIfcTextureVertex(const IfcTextureVertex &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcTextureVertex Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcTextureVertex entities.
         */
        Step::RefLinkedList< IfcTextureVertex > &getAllIfcTextureVertex();
        /**
         * Get the IfcThermalMaterialProperties entity by it's Id.
         * 
         * @param id The Id of the IfcThermalMaterialProperties.
         * @return A pointer to the IfcThermalMaterialProperties if found, NULL otherwise.
         */
        IfcThermalMaterialProperties *getIfcThermalMaterialProperties(Step::Id id);
        /**
         * Removes a IfcThermalMaterialProperties Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcThermalMaterialProperties to remove.
         * @return success.
         */
        bool removeIfcThermalMaterialProperties(IfcThermalMaterialProperties *arg);
        /**
         * Create an IfcThermalMaterialProperties Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcThermalMaterialProperties entity.
         */
        Step::RefPtr< IfcThermalMaterialProperties > createIfcThermalMaterialProperties(bool isVolatile = false);
        /**
         * Clone an IfcThermalMaterialProperties Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcThermalMaterialProperties Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcThermalMaterialProperties *cloneIfcThermalMaterialProperties(const IfcThermalMaterialProperties &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcThermalMaterialProperties Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcThermalMaterialProperties entities.
         */
        Step::RefLinkedList< IfcThermalMaterialProperties > &getAllIfcThermalMaterialProperties();
        /**
         * Get the IfcTimeSeries entity by it's Id.
         * 
         * @param id The Id of the IfcTimeSeries.
         * @return A pointer to the IfcTimeSeries if found, NULL otherwise.
         */
        IfcTimeSeries *getIfcTimeSeries(Step::Id id);
        /**
         * Removes a IfcTimeSeries Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcTimeSeries to remove.
         * @return success.
         */
        bool removeIfcTimeSeries(IfcTimeSeries *arg);
        /**
         * Create an IfcTimeSeries Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcTimeSeries entity.
         */
        Step::RefPtr< IfcTimeSeries > createIfcTimeSeries(bool isVolatile = false);
        /**
         * Clone an IfcTimeSeries Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcTimeSeries Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcTimeSeries *cloneIfcTimeSeries(const IfcTimeSeries &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcTimeSeries Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcTimeSeries entities.
         */
        Step::RefLinkedList< IfcTimeSeries > &getAllIfcTimeSeries();
        /**
         * Get the IfcTimeSeriesReferenceRelationship entity by it's Id.
         * 
         * @param id The Id of the IfcTimeSeriesReferenceRelationship.
         * @return A pointer to the IfcTimeSeriesReferenceRelationship if found, NULL otherwise.
         */
        IfcTimeSeriesReferenceRelationship *getIfcTimeSeriesReferenceRelationship(Step::Id id);
        /**
         * Removes a IfcTimeSeriesReferenceRelationship Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcTimeSeriesReferenceRelationship to remove.
         * @return success.
         */
        bool removeIfcTimeSeriesReferenceRelationship(IfcTimeSeriesReferenceRelationship *arg);
        /**
         * Create an IfcTimeSeriesReferenceRelationship Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcTimeSeriesReferenceRelationship entity.
         */
        Step::RefPtr< IfcTimeSeriesReferenceRelationship > createIfcTimeSeriesReferenceRelationship(bool isVolatile = false);
        /**
         * Clone an IfcTimeSeriesReferenceRelationship Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcTimeSeriesReferenceRelationship Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcTimeSeriesReferenceRelationship *cloneIfcTimeSeriesReferenceRelationship(const IfcTimeSeriesReferenceRelationship &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcTimeSeriesReferenceRelationship Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcTimeSeriesReferenceRelationship entities.
         */
        Step::RefLinkedList< IfcTimeSeriesReferenceRelationship > &getAllIfcTimeSeriesReferenceRelationship();
        /**
         * Get the IfcTimeSeriesSchedule entity by it's Id.
         * 
         * @param id The Id of the IfcTimeSeriesSchedule.
         * @return A pointer to the IfcTimeSeriesSchedule if found, NULL otherwise.
         */
        IfcTimeSeriesSchedule *getIfcTimeSeriesSchedule(Step::Id id);
        /**
         * Removes a IfcTimeSeriesSchedule Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcTimeSeriesSchedule to remove.
         * @return success.
         */
        bool removeIfcTimeSeriesSchedule(IfcTimeSeriesSchedule *arg);
        /**
         * Create an IfcTimeSeriesSchedule Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcTimeSeriesSchedule entity.
         */
        Step::RefPtr< IfcTimeSeriesSchedule > createIfcTimeSeriesSchedule(bool isVolatile = false);
        /**
         * Clone an IfcTimeSeriesSchedule Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcTimeSeriesSchedule Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcTimeSeriesSchedule *cloneIfcTimeSeriesSchedule(const IfcTimeSeriesSchedule &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcTimeSeriesSchedule Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcTimeSeriesSchedule entities.
         */
        Step::RefLinkedList< IfcTimeSeriesSchedule > &getAllIfcTimeSeriesSchedule();
        /**
         * Get the IfcTimeSeriesValue entity by it's Id.
         * 
         * @param id The Id of the IfcTimeSeriesValue.
         * @return A pointer to the IfcTimeSeriesValue if found, NULL otherwise.
         */
        IfcTimeSeriesValue *getIfcTimeSeriesValue(Step::Id id);
        /**
         * Removes a IfcTimeSeriesValue Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcTimeSeriesValue to remove.
         * @return success.
         */
        bool removeIfcTimeSeriesValue(IfcTimeSeriesValue *arg);
        /**
         * Create an IfcTimeSeriesValue Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcTimeSeriesValue entity.
         */
        Step::RefPtr< IfcTimeSeriesValue > createIfcTimeSeriesValue(bool isVolatile = false);
        /**
         * Clone an IfcTimeSeriesValue Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcTimeSeriesValue Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcTimeSeriesValue *cloneIfcTimeSeriesValue(const IfcTimeSeriesValue &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcTimeSeriesValue Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcTimeSeriesValue entities.
         */
        Step::RefLinkedList< IfcTimeSeriesValue > &getAllIfcTimeSeriesValue();
        /**
         * Get the IfcTopologicalRepresentationItem entity by it's Id.
         * 
         * @param id The Id of the IfcTopologicalRepresentationItem.
         * @return A pointer to the IfcTopologicalRepresentationItem if found, NULL otherwise.
         */
        IfcTopologicalRepresentationItem *getIfcTopologicalRepresentationItem(Step::Id id);
        /**
         * Removes a IfcTopologicalRepresentationItem Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcTopologicalRepresentationItem to remove.
         * @return success.
         */
        bool removeIfcTopologicalRepresentationItem(IfcTopologicalRepresentationItem *arg);
        /**
         * Create an IfcTopologicalRepresentationItem Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcTopologicalRepresentationItem entity.
         */
        Step::RefPtr< IfcTopologicalRepresentationItem > createIfcTopologicalRepresentationItem(bool isVolatile = false);
        /**
         * Clone an IfcTopologicalRepresentationItem Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcTopologicalRepresentationItem Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcTopologicalRepresentationItem *cloneIfcTopologicalRepresentationItem(const IfcTopologicalRepresentationItem &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcTopologicalRepresentationItem Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcTopologicalRepresentationItem entities.
         */
        Step::RefLinkedList< IfcTopologicalRepresentationItem > &getAllIfcTopologicalRepresentationItem();
        /**
         * Get the IfcTopologyRepresentation entity by it's Id.
         * 
         * @param id The Id of the IfcTopologyRepresentation.
         * @return A pointer to the IfcTopologyRepresentation if found, NULL otherwise.
         */
        IfcTopologyRepresentation *getIfcTopologyRepresentation(Step::Id id);
        /**
         * Removes a IfcTopologyRepresentation Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcTopologyRepresentation to remove.
         * @return success.
         */
        bool removeIfcTopologyRepresentation(IfcTopologyRepresentation *arg);
        /**
         * Create an IfcTopologyRepresentation Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcTopologyRepresentation entity.
         */
        Step::RefPtr< IfcTopologyRepresentation > createIfcTopologyRepresentation(bool isVolatile = false);
        /**
         * Clone an IfcTopologyRepresentation Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcTopologyRepresentation Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcTopologyRepresentation *cloneIfcTopologyRepresentation(const IfcTopologyRepresentation &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcTopologyRepresentation Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcTopologyRepresentation entities.
         */
        Step::RefLinkedList< IfcTopologyRepresentation > &getAllIfcTopologyRepresentation();
        /**
         * Get the IfcTransformerType entity by it's Id.
         * 
         * @param id The Id of the IfcTransformerType.
         * @return A pointer to the IfcTransformerType if found, NULL otherwise.
         */
        IfcTransformerType *getIfcTransformerType(Step::Id id);
        /**
         * Removes a IfcTransformerType Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcTransformerType to remove.
         * @return success.
         */
        bool removeIfcTransformerType(IfcTransformerType *arg);
        /**
         * Create an IfcTransformerType Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcTransformerType entity.
         */
        Step::RefPtr< IfcTransformerType > createIfcTransformerType(bool isVolatile = false);
        /**
         * Clone an IfcTransformerType Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcTransformerType Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcTransformerType *cloneIfcTransformerType(const IfcTransformerType &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcTransformerType Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcTransformerType entities.
         */
        Step::RefLinkedList< IfcTransformerType > &getAllIfcTransformerType();
        /**
         * Get the IfcTransportElement entity by it's Id.
         * 
         * @param id The Id of the IfcTransportElement.
         * @return A pointer to the IfcTransportElement if found, NULL otherwise.
         */
        IfcTransportElement *getIfcTransportElement(Step::Id id);
        /**
         * Removes a IfcTransportElement Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcTransportElement to remove.
         * @return success.
         */
        bool removeIfcTransportElement(IfcTransportElement *arg);
        /**
         * Create an IfcTransportElement Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcTransportElement entity.
         */
        Step::RefPtr< IfcTransportElement > createIfcTransportElement(bool isVolatile = false);
        /**
         * Clone an IfcTransportElement Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcTransportElement Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcTransportElement *cloneIfcTransportElement(const IfcTransportElement &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcTransportElement Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcTransportElement entities.
         */
        Step::RefLinkedList< IfcTransportElement > &getAllIfcTransportElement();
        /**
         * Get the IfcTransportElementType entity by it's Id.
         * 
         * @param id The Id of the IfcTransportElementType.
         * @return A pointer to the IfcTransportElementType if found, NULL otherwise.
         */
        IfcTransportElementType *getIfcTransportElementType(Step::Id id);
        /**
         * Removes a IfcTransportElementType Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcTransportElementType to remove.
         * @return success.
         */
        bool removeIfcTransportElementType(IfcTransportElementType *arg);
        /**
         * Create an IfcTransportElementType Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcTransportElementType entity.
         */
        Step::RefPtr< IfcTransportElementType > createIfcTransportElementType(bool isVolatile = false);
        /**
         * Clone an IfcTransportElementType Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcTransportElementType Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcTransportElementType *cloneIfcTransportElementType(const IfcTransportElementType &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcTransportElementType Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcTransportElementType entities.
         */
        Step::RefLinkedList< IfcTransportElementType > &getAllIfcTransportElementType();
        /**
         * Get the IfcTrapeziumProfileDef entity by it's Id.
         * 
         * @param id The Id of the IfcTrapeziumProfileDef.
         * @return A pointer to the IfcTrapeziumProfileDef if found, NULL otherwise.
         */
        IfcTrapeziumProfileDef *getIfcTrapeziumProfileDef(Step::Id id);
        /**
         * Removes a IfcTrapeziumProfileDef Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcTrapeziumProfileDef to remove.
         * @return success.
         */
        bool removeIfcTrapeziumProfileDef(IfcTrapeziumProfileDef *arg);
        /**
         * Create an IfcTrapeziumProfileDef Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcTrapeziumProfileDef entity.
         */
        Step::RefPtr< IfcTrapeziumProfileDef > createIfcTrapeziumProfileDef(bool isVolatile = false);
        /**
         * Clone an IfcTrapeziumProfileDef Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcTrapeziumProfileDef Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcTrapeziumProfileDef *cloneIfcTrapeziumProfileDef(const IfcTrapeziumProfileDef &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcTrapeziumProfileDef Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcTrapeziumProfileDef entities.
         */
        Step::RefLinkedList< IfcTrapeziumProfileDef > &getAllIfcTrapeziumProfileDef();
        /**
         * Get the IfcTrimmedCurve entity by it's Id.
         * 
         * @param id The Id of the IfcTrimmedCurve.
         * @return A pointer to the IfcTrimmedCurve if found, NULL otherwise.
         */
        IfcTrimmedCurve *getIfcTrimmedCurve(Step::Id id);
        /**
         * Removes a IfcTrimmedCurve Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcTrimmedCurve to remove.
         * @return success.
         */
        bool removeIfcTrimmedCurve(IfcTrimmedCurve *arg);
        /**
         * Create an IfcTrimmedCurve Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcTrimmedCurve entity.
         */
        Step::RefPtr< IfcTrimmedCurve > createIfcTrimmedCurve(bool isVolatile = false);
        /**
         * Clone an IfcTrimmedCurve Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcTrimmedCurve Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcTrimmedCurve *cloneIfcTrimmedCurve(const IfcTrimmedCurve &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcTrimmedCurve Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcTrimmedCurve entities.
         */
        Step::RefLinkedList< IfcTrimmedCurve > &getAllIfcTrimmedCurve();
        /**
         * Get the IfcTShapeProfileDef entity by it's Id.
         * 
         * @param id The Id of the IfcTShapeProfileDef.
         * @return A pointer to the IfcTShapeProfileDef if found, NULL otherwise.
         */
        IfcTShapeProfileDef *getIfcTShapeProfileDef(Step::Id id);
        /**
         * Removes a IfcTShapeProfileDef Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcTShapeProfileDef to remove.
         * @return success.
         */
        bool removeIfcTShapeProfileDef(IfcTShapeProfileDef *arg);
        /**
         * Create an IfcTShapeProfileDef Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcTShapeProfileDef entity.
         */
        Step::RefPtr< IfcTShapeProfileDef > createIfcTShapeProfileDef(bool isVolatile = false);
        /**
         * Clone an IfcTShapeProfileDef Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcTShapeProfileDef Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcTShapeProfileDef *cloneIfcTShapeProfileDef(const IfcTShapeProfileDef &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcTShapeProfileDef Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcTShapeProfileDef entities.
         */
        Step::RefLinkedList< IfcTShapeProfileDef > &getAllIfcTShapeProfileDef();
        /**
         * Get the IfcTubeBundleType entity by it's Id.
         * 
         * @param id The Id of the IfcTubeBundleType.
         * @return A pointer to the IfcTubeBundleType if found, NULL otherwise.
         */
        IfcTubeBundleType *getIfcTubeBundleType(Step::Id id);
        /**
         * Removes a IfcTubeBundleType Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcTubeBundleType to remove.
         * @return success.
         */
        bool removeIfcTubeBundleType(IfcTubeBundleType *arg);
        /**
         * Create an IfcTubeBundleType Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcTubeBundleType entity.
         */
        Step::RefPtr< IfcTubeBundleType > createIfcTubeBundleType(bool isVolatile = false);
        /**
         * Clone an IfcTubeBundleType Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcTubeBundleType Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcTubeBundleType *cloneIfcTubeBundleType(const IfcTubeBundleType &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcTubeBundleType Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcTubeBundleType entities.
         */
        Step::RefLinkedList< IfcTubeBundleType > &getAllIfcTubeBundleType();
        /**
         * Get the IfcTwoDirectionRepeatFactor entity by it's Id.
         * 
         * @param id The Id of the IfcTwoDirectionRepeatFactor.
         * @return A pointer to the IfcTwoDirectionRepeatFactor if found, NULL otherwise.
         */
        IfcTwoDirectionRepeatFactor *getIfcTwoDirectionRepeatFactor(Step::Id id);
        /**
         * Removes a IfcTwoDirectionRepeatFactor Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcTwoDirectionRepeatFactor to remove.
         * @return success.
         */
        bool removeIfcTwoDirectionRepeatFactor(IfcTwoDirectionRepeatFactor *arg);
        /**
         * Create an IfcTwoDirectionRepeatFactor Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcTwoDirectionRepeatFactor entity.
         */
        Step::RefPtr< IfcTwoDirectionRepeatFactor > createIfcTwoDirectionRepeatFactor(bool isVolatile = false);
        /**
         * Clone an IfcTwoDirectionRepeatFactor Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcTwoDirectionRepeatFactor Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcTwoDirectionRepeatFactor *cloneIfcTwoDirectionRepeatFactor(const IfcTwoDirectionRepeatFactor &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcTwoDirectionRepeatFactor Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcTwoDirectionRepeatFactor entities.
         */
        Step::RefLinkedList< IfcTwoDirectionRepeatFactor > &getAllIfcTwoDirectionRepeatFactor();
        /**
         * Get the IfcTypeObject entity by it's Id.
         * 
         * @param id The Id of the IfcTypeObject.
         * @return A pointer to the IfcTypeObject if found, NULL otherwise.
         */
        IfcTypeObject *getIfcTypeObject(Step::Id id);
        /**
         * Removes a IfcTypeObject Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcTypeObject to remove.
         * @return success.
         */
        bool removeIfcTypeObject(IfcTypeObject *arg);
        /**
         * Create an IfcTypeObject Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcTypeObject entity.
         */
        Step::RefPtr< IfcTypeObject > createIfcTypeObject(bool isVolatile = false);
        /**
         * Clone an IfcTypeObject Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcTypeObject Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcTypeObject *cloneIfcTypeObject(const IfcTypeObject &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcTypeObject Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcTypeObject entities.
         */
        Step::RefLinkedList< IfcTypeObject > &getAllIfcTypeObject();
        /**
         * Get the IfcTypeProduct entity by it's Id.
         * 
         * @param id The Id of the IfcTypeProduct.
         * @return A pointer to the IfcTypeProduct if found, NULL otherwise.
         */
        IfcTypeProduct *getIfcTypeProduct(Step::Id id);
        /**
         * Removes a IfcTypeProduct Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcTypeProduct to remove.
         * @return success.
         */
        bool removeIfcTypeProduct(IfcTypeProduct *arg);
        /**
         * Create an IfcTypeProduct Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcTypeProduct entity.
         */
        Step::RefPtr< IfcTypeProduct > createIfcTypeProduct(bool isVolatile = false);
        /**
         * Clone an IfcTypeProduct Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcTypeProduct Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcTypeProduct *cloneIfcTypeProduct(const IfcTypeProduct &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcTypeProduct Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcTypeProduct entities.
         */
        Step::RefLinkedList< IfcTypeProduct > &getAllIfcTypeProduct();
        /**
         * Get the IfcUnitaryEquipmentType entity by it's Id.
         * 
         * @param id The Id of the IfcUnitaryEquipmentType.
         * @return A pointer to the IfcUnitaryEquipmentType if found, NULL otherwise.
         */
        IfcUnitaryEquipmentType *getIfcUnitaryEquipmentType(Step::Id id);
        /**
         * Removes a IfcUnitaryEquipmentType Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcUnitaryEquipmentType to remove.
         * @return success.
         */
        bool removeIfcUnitaryEquipmentType(IfcUnitaryEquipmentType *arg);
        /**
         * Create an IfcUnitaryEquipmentType Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcUnitaryEquipmentType entity.
         */
        Step::RefPtr< IfcUnitaryEquipmentType > createIfcUnitaryEquipmentType(bool isVolatile = false);
        /**
         * Clone an IfcUnitaryEquipmentType Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcUnitaryEquipmentType Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcUnitaryEquipmentType *cloneIfcUnitaryEquipmentType(const IfcUnitaryEquipmentType &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcUnitaryEquipmentType Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcUnitaryEquipmentType entities.
         */
        Step::RefLinkedList< IfcUnitaryEquipmentType > &getAllIfcUnitaryEquipmentType();
        /**
         * Get the IfcUnitAssignment entity by it's Id.
         * 
         * @param id The Id of the IfcUnitAssignment.
         * @return A pointer to the IfcUnitAssignment if found, NULL otherwise.
         */
        IfcUnitAssignment *getIfcUnitAssignment(Step::Id id);
        /**
         * Removes a IfcUnitAssignment Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcUnitAssignment to remove.
         * @return success.
         */
        bool removeIfcUnitAssignment(IfcUnitAssignment *arg);
        /**
         * Create an IfcUnitAssignment Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcUnitAssignment entity.
         */
        Step::RefPtr< IfcUnitAssignment > createIfcUnitAssignment(bool isVolatile = false);
        /**
         * Clone an IfcUnitAssignment Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcUnitAssignment Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcUnitAssignment *cloneIfcUnitAssignment(const IfcUnitAssignment &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcUnitAssignment Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcUnitAssignment entities.
         */
        Step::RefLinkedList< IfcUnitAssignment > &getAllIfcUnitAssignment();
        /**
         * Get the IfcUShapeProfileDef entity by it's Id.
         * 
         * @param id The Id of the IfcUShapeProfileDef.
         * @return A pointer to the IfcUShapeProfileDef if found, NULL otherwise.
         */
        IfcUShapeProfileDef *getIfcUShapeProfileDef(Step::Id id);
        /**
         * Removes a IfcUShapeProfileDef Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcUShapeProfileDef to remove.
         * @return success.
         */
        bool removeIfcUShapeProfileDef(IfcUShapeProfileDef *arg);
        /**
         * Create an IfcUShapeProfileDef Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcUShapeProfileDef entity.
         */
        Step::RefPtr< IfcUShapeProfileDef > createIfcUShapeProfileDef(bool isVolatile = false);
        /**
         * Clone an IfcUShapeProfileDef Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcUShapeProfileDef Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcUShapeProfileDef *cloneIfcUShapeProfileDef(const IfcUShapeProfileDef &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcUShapeProfileDef Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcUShapeProfileDef entities.
         */
        Step::RefLinkedList< IfcUShapeProfileDef > &getAllIfcUShapeProfileDef();
        /**
         * Get the IfcValveType entity by it's Id.
         * 
         * @param id The Id of the IfcValveType.
         * @return A pointer to the IfcValveType if found, NULL otherwise.
         */
        IfcValveType *getIfcValveType(Step::Id id);
        /**
         * Removes a IfcValveType Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcValveType to remove.
         * @return success.
         */
        bool removeIfcValveType(IfcValveType *arg);
        /**
         * Create an IfcValveType Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcValveType entity.
         */
        Step::RefPtr< IfcValveType > createIfcValveType(bool isVolatile = false);
        /**
         * Clone an IfcValveType Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcValveType Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcValveType *cloneIfcValveType(const IfcValveType &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcValveType Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcValveType entities.
         */
        Step::RefLinkedList< IfcValveType > &getAllIfcValveType();
        /**
         * Get the IfcVector entity by it's Id.
         * 
         * @param id The Id of the IfcVector.
         * @return A pointer to the IfcVector if found, NULL otherwise.
         */
        IfcVector *getIfcVector(Step::Id id);
        /**
         * Removes a IfcVector Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcVector to remove.
         * @return success.
         */
        bool removeIfcVector(IfcVector *arg);
        /**
         * Create an IfcVector Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcVector entity.
         */
        Step::RefPtr< IfcVector > createIfcVector(bool isVolatile = false);
        /**
         * Clone an IfcVector Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcVector Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcVector *cloneIfcVector(const IfcVector &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcVector Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcVector entities.
         */
        Step::RefLinkedList< IfcVector > &getAllIfcVector();
        /**
         * Get the IfcVertex entity by it's Id.
         * 
         * @param id The Id of the IfcVertex.
         * @return A pointer to the IfcVertex if found, NULL otherwise.
         */
        IfcVertex *getIfcVertex(Step::Id id);
        /**
         * Removes a IfcVertex Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcVertex to remove.
         * @return success.
         */
        bool removeIfcVertex(IfcVertex *arg);
        /**
         * Create an IfcVertex Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcVertex entity.
         */
        Step::RefPtr< IfcVertex > createIfcVertex(bool isVolatile = false);
        /**
         * Clone an IfcVertex Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcVertex Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcVertex *cloneIfcVertex(const IfcVertex &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcVertex Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcVertex entities.
         */
        Step::RefLinkedList< IfcVertex > &getAllIfcVertex();
        /**
         * Get the IfcVertexBasedTextureMap entity by it's Id.
         * 
         * @param id The Id of the IfcVertexBasedTextureMap.
         * @return A pointer to the IfcVertexBasedTextureMap if found, NULL otherwise.
         */
        IfcVertexBasedTextureMap *getIfcVertexBasedTextureMap(Step::Id id);
        /**
         * Removes a IfcVertexBasedTextureMap Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcVertexBasedTextureMap to remove.
         * @return success.
         */
        bool removeIfcVertexBasedTextureMap(IfcVertexBasedTextureMap *arg);
        /**
         * Create an IfcVertexBasedTextureMap Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcVertexBasedTextureMap entity.
         */
        Step::RefPtr< IfcVertexBasedTextureMap > createIfcVertexBasedTextureMap(bool isVolatile = false);
        /**
         * Clone an IfcVertexBasedTextureMap Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcVertexBasedTextureMap Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcVertexBasedTextureMap *cloneIfcVertexBasedTextureMap(const IfcVertexBasedTextureMap &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcVertexBasedTextureMap Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcVertexBasedTextureMap entities.
         */
        Step::RefLinkedList< IfcVertexBasedTextureMap > &getAllIfcVertexBasedTextureMap();
        /**
         * Get the IfcVertexLoop entity by it's Id.
         * 
         * @param id The Id of the IfcVertexLoop.
         * @return A pointer to the IfcVertexLoop if found, NULL otherwise.
         */
        IfcVertexLoop *getIfcVertexLoop(Step::Id id);
        /**
         * Removes a IfcVertexLoop Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcVertexLoop to remove.
         * @return success.
         */
        bool removeIfcVertexLoop(IfcVertexLoop *arg);
        /**
         * Create an IfcVertexLoop Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcVertexLoop entity.
         */
        Step::RefPtr< IfcVertexLoop > createIfcVertexLoop(bool isVolatile = false);
        /**
         * Clone an IfcVertexLoop Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcVertexLoop Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcVertexLoop *cloneIfcVertexLoop(const IfcVertexLoop &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcVertexLoop Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcVertexLoop entities.
         */
        Step::RefLinkedList< IfcVertexLoop > &getAllIfcVertexLoop();
        /**
         * Get the IfcVertexPoint entity by it's Id.
         * 
         * @param id The Id of the IfcVertexPoint.
         * @return A pointer to the IfcVertexPoint if found, NULL otherwise.
         */
        IfcVertexPoint *getIfcVertexPoint(Step::Id id);
        /**
         * Removes a IfcVertexPoint Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcVertexPoint to remove.
         * @return success.
         */
        bool removeIfcVertexPoint(IfcVertexPoint *arg);
        /**
         * Create an IfcVertexPoint Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcVertexPoint entity.
         */
        Step::RefPtr< IfcVertexPoint > createIfcVertexPoint(bool isVolatile = false);
        /**
         * Clone an IfcVertexPoint Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcVertexPoint Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcVertexPoint *cloneIfcVertexPoint(const IfcVertexPoint &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcVertexPoint Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcVertexPoint entities.
         */
        Step::RefLinkedList< IfcVertexPoint > &getAllIfcVertexPoint();
        /**
         * Get the IfcVibrationIsolatorType entity by it's Id.
         * 
         * @param id The Id of the IfcVibrationIsolatorType.
         * @return A pointer to the IfcVibrationIsolatorType if found, NULL otherwise.
         */
        IfcVibrationIsolatorType *getIfcVibrationIsolatorType(Step::Id id);
        /**
         * Removes a IfcVibrationIsolatorType Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcVibrationIsolatorType to remove.
         * @return success.
         */
        bool removeIfcVibrationIsolatorType(IfcVibrationIsolatorType *arg);
        /**
         * Create an IfcVibrationIsolatorType Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcVibrationIsolatorType entity.
         */
        Step::RefPtr< IfcVibrationIsolatorType > createIfcVibrationIsolatorType(bool isVolatile = false);
        /**
         * Clone an IfcVibrationIsolatorType Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcVibrationIsolatorType Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcVibrationIsolatorType *cloneIfcVibrationIsolatorType(const IfcVibrationIsolatorType &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcVibrationIsolatorType Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcVibrationIsolatorType entities.
         */
        Step::RefLinkedList< IfcVibrationIsolatorType > &getAllIfcVibrationIsolatorType();
        /**
         * Get the IfcVirtualElement entity by it's Id.
         * 
         * @param id The Id of the IfcVirtualElement.
         * @return A pointer to the IfcVirtualElement if found, NULL otherwise.
         */
        IfcVirtualElement *getIfcVirtualElement(Step::Id id);
        /**
         * Removes a IfcVirtualElement Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcVirtualElement to remove.
         * @return success.
         */
        bool removeIfcVirtualElement(IfcVirtualElement *arg);
        /**
         * Create an IfcVirtualElement Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcVirtualElement entity.
         */
        Step::RefPtr< IfcVirtualElement > createIfcVirtualElement(bool isVolatile = false);
        /**
         * Clone an IfcVirtualElement Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcVirtualElement Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcVirtualElement *cloneIfcVirtualElement(const IfcVirtualElement &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcVirtualElement Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcVirtualElement entities.
         */
        Step::RefLinkedList< IfcVirtualElement > &getAllIfcVirtualElement();
        /**
         * Get the IfcVirtualGridIntersection entity by it's Id.
         * 
         * @param id The Id of the IfcVirtualGridIntersection.
         * @return A pointer to the IfcVirtualGridIntersection if found, NULL otherwise.
         */
        IfcVirtualGridIntersection *getIfcVirtualGridIntersection(Step::Id id);
        /**
         * Removes a IfcVirtualGridIntersection Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcVirtualGridIntersection to remove.
         * @return success.
         */
        bool removeIfcVirtualGridIntersection(IfcVirtualGridIntersection *arg);
        /**
         * Create an IfcVirtualGridIntersection Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcVirtualGridIntersection entity.
         */
        Step::RefPtr< IfcVirtualGridIntersection > createIfcVirtualGridIntersection(bool isVolatile = false);
        /**
         * Clone an IfcVirtualGridIntersection Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcVirtualGridIntersection Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcVirtualGridIntersection *cloneIfcVirtualGridIntersection(const IfcVirtualGridIntersection &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcVirtualGridIntersection Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcVirtualGridIntersection entities.
         */
        Step::RefLinkedList< IfcVirtualGridIntersection > &getAllIfcVirtualGridIntersection();
        /**
         * Get the IfcWall entity by it's Id.
         * 
         * @param id The Id of the IfcWall.
         * @return A pointer to the IfcWall if found, NULL otherwise.
         */
        IfcWall *getIfcWall(Step::Id id);
        /**
         * Removes a IfcWall Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcWall to remove.
         * @return success.
         */
        bool removeIfcWall(IfcWall *arg);
        /**
         * Create an IfcWall Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcWall entity.
         */
        Step::RefPtr< IfcWall > createIfcWall(bool isVolatile = false);
        /**
         * Clone an IfcWall Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcWall Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcWall *cloneIfcWall(const IfcWall &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcWall Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcWall entities.
         */
        Step::RefLinkedList< IfcWall > &getAllIfcWall();
        /**
         * Get the IfcWallStandardCase entity by it's Id.
         * 
         * @param id The Id of the IfcWallStandardCase.
         * @return A pointer to the IfcWallStandardCase if found, NULL otherwise.
         */
        IfcWallStandardCase *getIfcWallStandardCase(Step::Id id);
        /**
         * Removes a IfcWallStandardCase Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcWallStandardCase to remove.
         * @return success.
         */
        bool removeIfcWallStandardCase(IfcWallStandardCase *arg);
        /**
         * Create an IfcWallStandardCase Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcWallStandardCase entity.
         */
        Step::RefPtr< IfcWallStandardCase > createIfcWallStandardCase(bool isVolatile = false);
        /**
         * Clone an IfcWallStandardCase Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcWallStandardCase Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcWallStandardCase *cloneIfcWallStandardCase(const IfcWallStandardCase &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcWallStandardCase Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcWallStandardCase entities.
         */
        Step::RefLinkedList< IfcWallStandardCase > &getAllIfcWallStandardCase();
        /**
         * Get the IfcWallType entity by it's Id.
         * 
         * @param id The Id of the IfcWallType.
         * @return A pointer to the IfcWallType if found, NULL otherwise.
         */
        IfcWallType *getIfcWallType(Step::Id id);
        /**
         * Removes a IfcWallType Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcWallType to remove.
         * @return success.
         */
        bool removeIfcWallType(IfcWallType *arg);
        /**
         * Create an IfcWallType Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcWallType entity.
         */
        Step::RefPtr< IfcWallType > createIfcWallType(bool isVolatile = false);
        /**
         * Clone an IfcWallType Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcWallType Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcWallType *cloneIfcWallType(const IfcWallType &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcWallType Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcWallType entities.
         */
        Step::RefLinkedList< IfcWallType > &getAllIfcWallType();
        /**
         * Get the IfcWasteTerminalType entity by it's Id.
         * 
         * @param id The Id of the IfcWasteTerminalType.
         * @return A pointer to the IfcWasteTerminalType if found, NULL otherwise.
         */
        IfcWasteTerminalType *getIfcWasteTerminalType(Step::Id id);
        /**
         * Removes a IfcWasteTerminalType Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcWasteTerminalType to remove.
         * @return success.
         */
        bool removeIfcWasteTerminalType(IfcWasteTerminalType *arg);
        /**
         * Create an IfcWasteTerminalType Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcWasteTerminalType entity.
         */
        Step::RefPtr< IfcWasteTerminalType > createIfcWasteTerminalType(bool isVolatile = false);
        /**
         * Clone an IfcWasteTerminalType Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcWasteTerminalType Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcWasteTerminalType *cloneIfcWasteTerminalType(const IfcWasteTerminalType &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcWasteTerminalType Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcWasteTerminalType entities.
         */
        Step::RefLinkedList< IfcWasteTerminalType > &getAllIfcWasteTerminalType();
        /**
         * Get the IfcWaterProperties entity by it's Id.
         * 
         * @param id The Id of the IfcWaterProperties.
         * @return A pointer to the IfcWaterProperties if found, NULL otherwise.
         */
        IfcWaterProperties *getIfcWaterProperties(Step::Id id);
        /**
         * Removes a IfcWaterProperties Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcWaterProperties to remove.
         * @return success.
         */
        bool removeIfcWaterProperties(IfcWaterProperties *arg);
        /**
         * Create an IfcWaterProperties Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcWaterProperties entity.
         */
        Step::RefPtr< IfcWaterProperties > createIfcWaterProperties(bool isVolatile = false);
        /**
         * Clone an IfcWaterProperties Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcWaterProperties Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcWaterProperties *cloneIfcWaterProperties(const IfcWaterProperties &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcWaterProperties Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcWaterProperties entities.
         */
        Step::RefLinkedList< IfcWaterProperties > &getAllIfcWaterProperties();
        /**
         * Get the IfcWindow entity by it's Id.
         * 
         * @param id The Id of the IfcWindow.
         * @return A pointer to the IfcWindow if found, NULL otherwise.
         */
        IfcWindow *getIfcWindow(Step::Id id);
        /**
         * Removes a IfcWindow Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcWindow to remove.
         * @return success.
         */
        bool removeIfcWindow(IfcWindow *arg);
        /**
         * Create an IfcWindow Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcWindow entity.
         */
        Step::RefPtr< IfcWindow > createIfcWindow(bool isVolatile = false);
        /**
         * Clone an IfcWindow Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcWindow Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcWindow *cloneIfcWindow(const IfcWindow &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcWindow Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcWindow entities.
         */
        Step::RefLinkedList< IfcWindow > &getAllIfcWindow();
        /**
         * Get the IfcWindowLiningProperties entity by it's Id.
         * 
         * @param id The Id of the IfcWindowLiningProperties.
         * @return A pointer to the IfcWindowLiningProperties if found, NULL otherwise.
         */
        IfcWindowLiningProperties *getIfcWindowLiningProperties(Step::Id id);
        /**
         * Removes a IfcWindowLiningProperties Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcWindowLiningProperties to remove.
         * @return success.
         */
        bool removeIfcWindowLiningProperties(IfcWindowLiningProperties *arg);
        /**
         * Create an IfcWindowLiningProperties Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcWindowLiningProperties entity.
         */
        Step::RefPtr< IfcWindowLiningProperties > createIfcWindowLiningProperties(bool isVolatile = false);
        /**
         * Clone an IfcWindowLiningProperties Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcWindowLiningProperties Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcWindowLiningProperties *cloneIfcWindowLiningProperties(const IfcWindowLiningProperties &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcWindowLiningProperties Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcWindowLiningProperties entities.
         */
        Step::RefLinkedList< IfcWindowLiningProperties > &getAllIfcWindowLiningProperties();
        /**
         * Get the IfcWindowPanelProperties entity by it's Id.
         * 
         * @param id The Id of the IfcWindowPanelProperties.
         * @return A pointer to the IfcWindowPanelProperties if found, NULL otherwise.
         */
        IfcWindowPanelProperties *getIfcWindowPanelProperties(Step::Id id);
        /**
         * Removes a IfcWindowPanelProperties Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcWindowPanelProperties to remove.
         * @return success.
         */
        bool removeIfcWindowPanelProperties(IfcWindowPanelProperties *arg);
        /**
         * Create an IfcWindowPanelProperties Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcWindowPanelProperties entity.
         */
        Step::RefPtr< IfcWindowPanelProperties > createIfcWindowPanelProperties(bool isVolatile = false);
        /**
         * Clone an IfcWindowPanelProperties Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcWindowPanelProperties Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcWindowPanelProperties *cloneIfcWindowPanelProperties(const IfcWindowPanelProperties &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcWindowPanelProperties Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcWindowPanelProperties entities.
         */
        Step::RefLinkedList< IfcWindowPanelProperties > &getAllIfcWindowPanelProperties();
        /**
         * Get the IfcWindowStyle entity by it's Id.
         * 
         * @param id The Id of the IfcWindowStyle.
         * @return A pointer to the IfcWindowStyle if found, NULL otherwise.
         */
        IfcWindowStyle *getIfcWindowStyle(Step::Id id);
        /**
         * Removes a IfcWindowStyle Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcWindowStyle to remove.
         * @return success.
         */
        bool removeIfcWindowStyle(IfcWindowStyle *arg);
        /**
         * Create an IfcWindowStyle Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcWindowStyle entity.
         */
        Step::RefPtr< IfcWindowStyle > createIfcWindowStyle(bool isVolatile = false);
        /**
         * Clone an IfcWindowStyle Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcWindowStyle Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcWindowStyle *cloneIfcWindowStyle(const IfcWindowStyle &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcWindowStyle Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcWindowStyle entities.
         */
        Step::RefLinkedList< IfcWindowStyle > &getAllIfcWindowStyle();
        /**
         * Get the IfcWorkControl entity by it's Id.
         * 
         * @param id The Id of the IfcWorkControl.
         * @return A pointer to the IfcWorkControl if found, NULL otherwise.
         */
        IfcWorkControl *getIfcWorkControl(Step::Id id);
        /**
         * Removes a IfcWorkControl Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcWorkControl to remove.
         * @return success.
         */
        bool removeIfcWorkControl(IfcWorkControl *arg);
        /**
         * Create an IfcWorkControl Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcWorkControl entity.
         */
        Step::RefPtr< IfcWorkControl > createIfcWorkControl(bool isVolatile = false);
        /**
         * Clone an IfcWorkControl Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcWorkControl Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcWorkControl *cloneIfcWorkControl(const IfcWorkControl &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcWorkControl Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcWorkControl entities.
         */
        Step::RefLinkedList< IfcWorkControl > &getAllIfcWorkControl();
        /**
         * Get the IfcWorkPlan entity by it's Id.
         * 
         * @param id The Id of the IfcWorkPlan.
         * @return A pointer to the IfcWorkPlan if found, NULL otherwise.
         */
        IfcWorkPlan *getIfcWorkPlan(Step::Id id);
        /**
         * Removes a IfcWorkPlan Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcWorkPlan to remove.
         * @return success.
         */
        bool removeIfcWorkPlan(IfcWorkPlan *arg);
        /**
         * Create an IfcWorkPlan Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcWorkPlan entity.
         */
        Step::RefPtr< IfcWorkPlan > createIfcWorkPlan(bool isVolatile = false);
        /**
         * Clone an IfcWorkPlan Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcWorkPlan Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcWorkPlan *cloneIfcWorkPlan(const IfcWorkPlan &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcWorkPlan Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcWorkPlan entities.
         */
        Step::RefLinkedList< IfcWorkPlan > &getAllIfcWorkPlan();
        /**
         * Get the IfcWorkSchedule entity by it's Id.
         * 
         * @param id The Id of the IfcWorkSchedule.
         * @return A pointer to the IfcWorkSchedule if found, NULL otherwise.
         */
        IfcWorkSchedule *getIfcWorkSchedule(Step::Id id);
        /**
         * Removes a IfcWorkSchedule Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcWorkSchedule to remove.
         * @return success.
         */
        bool removeIfcWorkSchedule(IfcWorkSchedule *arg);
        /**
         * Create an IfcWorkSchedule Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcWorkSchedule entity.
         */
        Step::RefPtr< IfcWorkSchedule > createIfcWorkSchedule(bool isVolatile = false);
        /**
         * Clone an IfcWorkSchedule Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcWorkSchedule Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcWorkSchedule *cloneIfcWorkSchedule(const IfcWorkSchedule &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcWorkSchedule Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcWorkSchedule entities.
         */
        Step::RefLinkedList< IfcWorkSchedule > &getAllIfcWorkSchedule();
        /**
         * Get the IfcZone entity by it's Id.
         * 
         * @param id The Id of the IfcZone.
         * @return A pointer to the IfcZone if found, NULL otherwise.
         */
        IfcZone *getIfcZone(Step::Id id);
        /**
         * Removes a IfcZone Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcZone to remove.
         * @return success.
         */
        bool removeIfcZone(IfcZone *arg);
        /**
         * Create an IfcZone Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcZone entity.
         */
        Step::RefPtr< IfcZone > createIfcZone(bool isVolatile = false);
        /**
         * Clone an IfcZone Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcZone Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcZone *cloneIfcZone(const IfcZone &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcZone Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcZone entities.
         */
        Step::RefLinkedList< IfcZone > &getAllIfcZone();
        /**
         * Get the IfcZShapeProfileDef entity by it's Id.
         * 
         * @param id The Id of the IfcZShapeProfileDef.
         * @return A pointer to the IfcZShapeProfileDef if found, NULL otherwise.
         */
        IfcZShapeProfileDef *getIfcZShapeProfileDef(Step::Id id);
        /**
         * Removes a IfcZShapeProfileDef Entity from the ExpressDataSet's maps.
         * 
         * @param arg The pointer to the IfcZShapeProfileDef to remove.
         * @return success.
         */
        bool removeIfcZShapeProfileDef(IfcZShapeProfileDef *arg);
        /**
         * Create an IfcZShapeProfileDef Entity in this ExpressDataSet.
         * 
         * @param isVolatile If set to true the Entity will not be stored in the ExpressDataSet maps. It is considered to be volatile.
         * @return The newly allocated IfcZShapeProfileDef entity.
         */
        Step::RefPtr< IfcZShapeProfileDef > createIfcZShapeProfileDef(bool isVolatile = false);
        /**
         * Clone an IfcZShapeProfileDef Entity into this ExpressDataSet with the given copy operator.
         * 
         * @param obj The IfcZShapeProfileDef Entity to clone.
         * @param copyop The copy operator to use when cloning obj.
         * @return The newly cloned entity.
         */
        IfcZShapeProfileDef *cloneIfcZShapeProfileDef(const IfcZShapeProfileDef &obj, const CopyOp &copyop);
        /**
         * Get all the entities of a given IfcZShapeProfileDef Entity type AND it's sub-types from this ExpressDataSet.
         * 
         * @return The list of references to the IfcZShapeProfileDef entities.
         */
        Step::RefLinkedList< IfcZShapeProfileDef > &getAllIfcZShapeProfileDef();

        friend class SPFReader;
        friend class SPFWriter;

    private:
        std::map<Step::Id, Step::BaseObjectPtr > m_Ifc2DCompositeCurve_Map;
        Step::RefLinkedList< Ifc2DCompositeCurve > m_refIfc2DCompositeCurveList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcActionRequest_Map;
        Step::RefLinkedList< IfcActionRequest > m_refIfcActionRequestList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcActor_Map;
        Step::RefLinkedList< IfcActor > m_refIfcActorList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcActorRole_Map;
        Step::RefLinkedList< IfcActorRole > m_refIfcActorRoleList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcActuatorType_Map;
        Step::RefLinkedList< IfcActuatorType > m_refIfcActuatorTypeList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcAddress_Map;
        Step::RefLinkedList< IfcAddress > m_refIfcAddressList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcAirTerminalBoxType_Map;
        Step::RefLinkedList< IfcAirTerminalBoxType > m_refIfcAirTerminalBoxTypeList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcAirTerminalType_Map;
        Step::RefLinkedList< IfcAirTerminalType > m_refIfcAirTerminalTypeList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcAirToAirHeatRecoveryType_Map;
        Step::RefLinkedList< IfcAirToAirHeatRecoveryType > m_refIfcAirToAirHeatRecoveryTypeList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcAlarmType_Map;
        Step::RefLinkedList< IfcAlarmType > m_refIfcAlarmTypeList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcAngularDimension_Map;
        Step::RefLinkedList< IfcAngularDimension > m_refIfcAngularDimensionList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcAnnotation_Map;
        Step::RefLinkedList< IfcAnnotation > m_refIfcAnnotationList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcAnnotationCurveOccurrence_Map;
        Step::RefLinkedList< IfcAnnotationCurveOccurrence > m_refIfcAnnotationCurveOccurrenceList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcAnnotationFillArea_Map;
        Step::RefLinkedList< IfcAnnotationFillArea > m_refIfcAnnotationFillAreaList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcAnnotationFillAreaOccurrence_Map;
        Step::RefLinkedList< IfcAnnotationFillAreaOccurrence > m_refIfcAnnotationFillAreaOccurrenceList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcAnnotationOccurrence_Map;
        Step::RefLinkedList< IfcAnnotationOccurrence > m_refIfcAnnotationOccurrenceList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcAnnotationSurface_Map;
        Step::RefLinkedList< IfcAnnotationSurface > m_refIfcAnnotationSurfaceList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcAnnotationSurfaceOccurrence_Map;
        Step::RefLinkedList< IfcAnnotationSurfaceOccurrence > m_refIfcAnnotationSurfaceOccurrenceList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcAnnotationSymbolOccurrence_Map;
        Step::RefLinkedList< IfcAnnotationSymbolOccurrence > m_refIfcAnnotationSymbolOccurrenceList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcAnnotationTextOccurrence_Map;
        Step::RefLinkedList< IfcAnnotationTextOccurrence > m_refIfcAnnotationTextOccurrenceList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcApplication_Map;
        Step::RefLinkedList< IfcApplication > m_refIfcApplicationList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcAppliedValue_Map;
        Step::RefLinkedList< IfcAppliedValue > m_refIfcAppliedValueList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcAppliedValueRelationship_Map;
        Step::RefLinkedList< IfcAppliedValueRelationship > m_refIfcAppliedValueRelationshipList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcApproval_Map;
        Step::RefLinkedList< IfcApproval > m_refIfcApprovalList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcApprovalActorRelationship_Map;
        Step::RefLinkedList< IfcApprovalActorRelationship > m_refIfcApprovalActorRelationshipList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcApprovalPropertyRelationship_Map;
        Step::RefLinkedList< IfcApprovalPropertyRelationship > m_refIfcApprovalPropertyRelationshipList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcApprovalRelationship_Map;
        Step::RefLinkedList< IfcApprovalRelationship > m_refIfcApprovalRelationshipList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcArbitraryClosedProfileDef_Map;
        Step::RefLinkedList< IfcArbitraryClosedProfileDef > m_refIfcArbitraryClosedProfileDefList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcArbitraryOpenProfileDef_Map;
        Step::RefLinkedList< IfcArbitraryOpenProfileDef > m_refIfcArbitraryOpenProfileDefList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcArbitraryProfileDefWithVoids_Map;
        Step::RefLinkedList< IfcArbitraryProfileDefWithVoids > m_refIfcArbitraryProfileDefWithVoidsList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcAsset_Map;
        Step::RefLinkedList< IfcAsset > m_refIfcAssetList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcAsymmetricIShapeProfileDef_Map;
        Step::RefLinkedList< IfcAsymmetricIShapeProfileDef > m_refIfcAsymmetricIShapeProfileDefList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcAxis1Placement_Map;
        Step::RefLinkedList< IfcAxis1Placement > m_refIfcAxis1PlacementList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcAxis2Placement2D_Map;
        Step::RefLinkedList< IfcAxis2Placement2D > m_refIfcAxis2Placement2DList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcAxis2Placement3D_Map;
        Step::RefLinkedList< IfcAxis2Placement3D > m_refIfcAxis2Placement3DList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcBeam_Map;
        Step::RefLinkedList< IfcBeam > m_refIfcBeamList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcBeamType_Map;
        Step::RefLinkedList< IfcBeamType > m_refIfcBeamTypeList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcBezierCurve_Map;
        Step::RefLinkedList< IfcBezierCurve > m_refIfcBezierCurveList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcBlobTexture_Map;
        Step::RefLinkedList< IfcBlobTexture > m_refIfcBlobTextureList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcBlock_Map;
        Step::RefLinkedList< IfcBlock > m_refIfcBlockList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcBoilerType_Map;
        Step::RefLinkedList< IfcBoilerType > m_refIfcBoilerTypeList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcBooleanClippingResult_Map;
        Step::RefLinkedList< IfcBooleanClippingResult > m_refIfcBooleanClippingResultList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcBooleanResult_Map;
        Step::RefLinkedList< IfcBooleanResult > m_refIfcBooleanResultList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcBoundaryCondition_Map;
        Step::RefLinkedList< IfcBoundaryCondition > m_refIfcBoundaryConditionList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcBoundaryEdgeCondition_Map;
        Step::RefLinkedList< IfcBoundaryEdgeCondition > m_refIfcBoundaryEdgeConditionList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcBoundaryFaceCondition_Map;
        Step::RefLinkedList< IfcBoundaryFaceCondition > m_refIfcBoundaryFaceConditionList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcBoundaryNodeCondition_Map;
        Step::RefLinkedList< IfcBoundaryNodeCondition > m_refIfcBoundaryNodeConditionList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcBoundaryNodeConditionWarping_Map;
        Step::RefLinkedList< IfcBoundaryNodeConditionWarping > m_refIfcBoundaryNodeConditionWarpingList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcBoundedCurve_Map;
        Step::RefLinkedList< IfcBoundedCurve > m_refIfcBoundedCurveList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcBoundedSurface_Map;
        Step::RefLinkedList< IfcBoundedSurface > m_refIfcBoundedSurfaceList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcBoundingBox_Map;
        Step::RefLinkedList< IfcBoundingBox > m_refIfcBoundingBoxList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcBoxedHalfSpace_Map;
        Step::RefLinkedList< IfcBoxedHalfSpace > m_refIfcBoxedHalfSpaceList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcBSplineCurve_Map;
        Step::RefLinkedList< IfcBSplineCurve > m_refIfcBSplineCurveList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcBuilding_Map;
        Step::RefLinkedList< IfcBuilding > m_refIfcBuildingList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcBuildingElement_Map;
        Step::RefLinkedList< IfcBuildingElement > m_refIfcBuildingElementList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcBuildingElementComponent_Map;
        Step::RefLinkedList< IfcBuildingElementComponent > m_refIfcBuildingElementComponentList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcBuildingElementPart_Map;
        Step::RefLinkedList< IfcBuildingElementPart > m_refIfcBuildingElementPartList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcBuildingElementProxy_Map;
        Step::RefLinkedList< IfcBuildingElementProxy > m_refIfcBuildingElementProxyList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcBuildingElementProxyType_Map;
        Step::RefLinkedList< IfcBuildingElementProxyType > m_refIfcBuildingElementProxyTypeList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcBuildingElementType_Map;
        Step::RefLinkedList< IfcBuildingElementType > m_refIfcBuildingElementTypeList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcBuildingStorey_Map;
        Step::RefLinkedList< IfcBuildingStorey > m_refIfcBuildingStoreyList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcCableCarrierFittingType_Map;
        Step::RefLinkedList< IfcCableCarrierFittingType > m_refIfcCableCarrierFittingTypeList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcCableCarrierSegmentType_Map;
        Step::RefLinkedList< IfcCableCarrierSegmentType > m_refIfcCableCarrierSegmentTypeList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcCableSegmentType_Map;
        Step::RefLinkedList< IfcCableSegmentType > m_refIfcCableSegmentTypeList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcCalendarDate_Map;
        Step::RefLinkedList< IfcCalendarDate > m_refIfcCalendarDateList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcCartesianPoint_Map;
        Step::RefLinkedList< IfcCartesianPoint > m_refIfcCartesianPointList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcCartesianTransformationOperator_Map;
        Step::RefLinkedList< IfcCartesianTransformationOperator > m_refIfcCartesianTransformationOperatorList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcCartesianTransformationOperator2D_Map;
        Step::RefLinkedList< IfcCartesianTransformationOperator2D > m_refIfcCartesianTransformationOperator2DList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcCartesianTransformationOperator2DnonUniform_Map;
        Step::RefLinkedList< IfcCartesianTransformationOperator2DnonUniform > m_refIfcCartesianTransformationOperator2DnonUniformList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcCartesianTransformationOperator3D_Map;
        Step::RefLinkedList< IfcCartesianTransformationOperator3D > m_refIfcCartesianTransformationOperator3DList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcCartesianTransformationOperator3DnonUniform_Map;
        Step::RefLinkedList< IfcCartesianTransformationOperator3DnonUniform > m_refIfcCartesianTransformationOperator3DnonUniformList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcCenterLineProfileDef_Map;
        Step::RefLinkedList< IfcCenterLineProfileDef > m_refIfcCenterLineProfileDefList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcChamferEdgeFeature_Map;
        Step::RefLinkedList< IfcChamferEdgeFeature > m_refIfcChamferEdgeFeatureList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcChillerType_Map;
        Step::RefLinkedList< IfcChillerType > m_refIfcChillerTypeList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcCircle_Map;
        Step::RefLinkedList< IfcCircle > m_refIfcCircleList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcCircleHollowProfileDef_Map;
        Step::RefLinkedList< IfcCircleHollowProfileDef > m_refIfcCircleHollowProfileDefList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcCircleProfileDef_Map;
        Step::RefLinkedList< IfcCircleProfileDef > m_refIfcCircleProfileDefList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcClassification_Map;
        Step::RefLinkedList< IfcClassification > m_refIfcClassificationList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcClassificationItem_Map;
        Step::RefLinkedList< IfcClassificationItem > m_refIfcClassificationItemList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcClassificationItemRelationship_Map;
        Step::RefLinkedList< IfcClassificationItemRelationship > m_refIfcClassificationItemRelationshipList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcClassificationNotation_Map;
        Step::RefLinkedList< IfcClassificationNotation > m_refIfcClassificationNotationList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcClassificationNotationFacet_Map;
        Step::RefLinkedList< IfcClassificationNotationFacet > m_refIfcClassificationNotationFacetList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcClassificationReference_Map;
        Step::RefLinkedList< IfcClassificationReference > m_refIfcClassificationReferenceList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcClosedShell_Map;
        Step::RefLinkedList< IfcClosedShell > m_refIfcClosedShellList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcCoilType_Map;
        Step::RefLinkedList< IfcCoilType > m_refIfcCoilTypeList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcColourRgb_Map;
        Step::RefLinkedList< IfcColourRgb > m_refIfcColourRgbList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcColourSpecification_Map;
        Step::RefLinkedList< IfcColourSpecification > m_refIfcColourSpecificationList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcColumn_Map;
        Step::RefLinkedList< IfcColumn > m_refIfcColumnList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcColumnType_Map;
        Step::RefLinkedList< IfcColumnType > m_refIfcColumnTypeList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcComplexProperty_Map;
        Step::RefLinkedList< IfcComplexProperty > m_refIfcComplexPropertyList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcCompositeCurve_Map;
        Step::RefLinkedList< IfcCompositeCurve > m_refIfcCompositeCurveList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcCompositeCurveSegment_Map;
        Step::RefLinkedList< IfcCompositeCurveSegment > m_refIfcCompositeCurveSegmentList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcCompositeProfileDef_Map;
        Step::RefLinkedList< IfcCompositeProfileDef > m_refIfcCompositeProfileDefList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcCompressorType_Map;
        Step::RefLinkedList< IfcCompressorType > m_refIfcCompressorTypeList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcCondenserType_Map;
        Step::RefLinkedList< IfcCondenserType > m_refIfcCondenserTypeList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcCondition_Map;
        Step::RefLinkedList< IfcCondition > m_refIfcConditionList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcConditionCriterion_Map;
        Step::RefLinkedList< IfcConditionCriterion > m_refIfcConditionCriterionList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcConic_Map;
        Step::RefLinkedList< IfcConic > m_refIfcConicList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcConnectedFaceSet_Map;
        Step::RefLinkedList< IfcConnectedFaceSet > m_refIfcConnectedFaceSetList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcConnectionCurveGeometry_Map;
        Step::RefLinkedList< IfcConnectionCurveGeometry > m_refIfcConnectionCurveGeometryList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcConnectionGeometry_Map;
        Step::RefLinkedList< IfcConnectionGeometry > m_refIfcConnectionGeometryList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcConnectionPointEccentricity_Map;
        Step::RefLinkedList< IfcConnectionPointEccentricity > m_refIfcConnectionPointEccentricityList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcConnectionPointGeometry_Map;
        Step::RefLinkedList< IfcConnectionPointGeometry > m_refIfcConnectionPointGeometryList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcConnectionPortGeometry_Map;
        Step::RefLinkedList< IfcConnectionPortGeometry > m_refIfcConnectionPortGeometryList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcConnectionSurfaceGeometry_Map;
        Step::RefLinkedList< IfcConnectionSurfaceGeometry > m_refIfcConnectionSurfaceGeometryList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcConstraint_Map;
        Step::RefLinkedList< IfcConstraint > m_refIfcConstraintList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcConstraintAggregationRelationship_Map;
        Step::RefLinkedList< IfcConstraintAggregationRelationship > m_refIfcConstraintAggregationRelationshipList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcConstraintClassificationRelationship_Map;
        Step::RefLinkedList< IfcConstraintClassificationRelationship > m_refIfcConstraintClassificationRelationshipList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcConstraintRelationship_Map;
        Step::RefLinkedList< IfcConstraintRelationship > m_refIfcConstraintRelationshipList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcConstructionEquipmentResource_Map;
        Step::RefLinkedList< IfcConstructionEquipmentResource > m_refIfcConstructionEquipmentResourceList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcConstructionMaterialResource_Map;
        Step::RefLinkedList< IfcConstructionMaterialResource > m_refIfcConstructionMaterialResourceList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcConstructionProductResource_Map;
        Step::RefLinkedList< IfcConstructionProductResource > m_refIfcConstructionProductResourceList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcConstructionResource_Map;
        Step::RefLinkedList< IfcConstructionResource > m_refIfcConstructionResourceList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcContextDependentUnit_Map;
        Step::RefLinkedList< IfcContextDependentUnit > m_refIfcContextDependentUnitList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcControl_Map;
        Step::RefLinkedList< IfcControl > m_refIfcControlList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcControllerType_Map;
        Step::RefLinkedList< IfcControllerType > m_refIfcControllerTypeList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcConversionBasedUnit_Map;
        Step::RefLinkedList< IfcConversionBasedUnit > m_refIfcConversionBasedUnitList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcCooledBeamType_Map;
        Step::RefLinkedList< IfcCooledBeamType > m_refIfcCooledBeamTypeList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcCoolingTowerType_Map;
        Step::RefLinkedList< IfcCoolingTowerType > m_refIfcCoolingTowerTypeList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcCoordinatedUniversalTimeOffset_Map;
        Step::RefLinkedList< IfcCoordinatedUniversalTimeOffset > m_refIfcCoordinatedUniversalTimeOffsetList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcCostItem_Map;
        Step::RefLinkedList< IfcCostItem > m_refIfcCostItemList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcCostSchedule_Map;
        Step::RefLinkedList< IfcCostSchedule > m_refIfcCostScheduleList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcCostValue_Map;
        Step::RefLinkedList< IfcCostValue > m_refIfcCostValueList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcCovering_Map;
        Step::RefLinkedList< IfcCovering > m_refIfcCoveringList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcCoveringType_Map;
        Step::RefLinkedList< IfcCoveringType > m_refIfcCoveringTypeList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcCraneRailAShapeProfileDef_Map;
        Step::RefLinkedList< IfcCraneRailAShapeProfileDef > m_refIfcCraneRailAShapeProfileDefList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcCraneRailFShapeProfileDef_Map;
        Step::RefLinkedList< IfcCraneRailFShapeProfileDef > m_refIfcCraneRailFShapeProfileDefList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcCrewResource_Map;
        Step::RefLinkedList< IfcCrewResource > m_refIfcCrewResourceList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcCsgPrimitive3D_Map;
        Step::RefLinkedList< IfcCsgPrimitive3D > m_refIfcCsgPrimitive3DList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcCsgSolid_Map;
        Step::RefLinkedList< IfcCsgSolid > m_refIfcCsgSolidList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcCShapeProfileDef_Map;
        Step::RefLinkedList< IfcCShapeProfileDef > m_refIfcCShapeProfileDefList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcCurrencyRelationship_Map;
        Step::RefLinkedList< IfcCurrencyRelationship > m_refIfcCurrencyRelationshipList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcCurtainWall_Map;
        Step::RefLinkedList< IfcCurtainWall > m_refIfcCurtainWallList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcCurtainWallType_Map;
        Step::RefLinkedList< IfcCurtainWallType > m_refIfcCurtainWallTypeList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcCurve_Map;
        Step::RefLinkedList< IfcCurve > m_refIfcCurveList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcCurveBoundedPlane_Map;
        Step::RefLinkedList< IfcCurveBoundedPlane > m_refIfcCurveBoundedPlaneList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcCurveStyle_Map;
        Step::RefLinkedList< IfcCurveStyle > m_refIfcCurveStyleList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcCurveStyleFont_Map;
        Step::RefLinkedList< IfcCurveStyleFont > m_refIfcCurveStyleFontList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcCurveStyleFontAndScaling_Map;
        Step::RefLinkedList< IfcCurveStyleFontAndScaling > m_refIfcCurveStyleFontAndScalingList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcCurveStyleFontPattern_Map;
        Step::RefLinkedList< IfcCurveStyleFontPattern > m_refIfcCurveStyleFontPatternList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcDamperType_Map;
        Step::RefLinkedList< IfcDamperType > m_refIfcDamperTypeList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcDateAndTime_Map;
        Step::RefLinkedList< IfcDateAndTime > m_refIfcDateAndTimeList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcDefinedSymbol_Map;
        Step::RefLinkedList< IfcDefinedSymbol > m_refIfcDefinedSymbolList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcDerivedProfileDef_Map;
        Step::RefLinkedList< IfcDerivedProfileDef > m_refIfcDerivedProfileDefList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcDerivedUnit_Map;
        Step::RefLinkedList< IfcDerivedUnit > m_refIfcDerivedUnitList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcDerivedUnitElement_Map;
        Step::RefLinkedList< IfcDerivedUnitElement > m_refIfcDerivedUnitElementList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcDiameterDimension_Map;
        Step::RefLinkedList< IfcDiameterDimension > m_refIfcDiameterDimensionList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcDimensionalExponents_Map;
        Step::RefLinkedList< IfcDimensionalExponents > m_refIfcDimensionalExponentsList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcDimensionCalloutRelationship_Map;
        Step::RefLinkedList< IfcDimensionCalloutRelationship > m_refIfcDimensionCalloutRelationshipList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcDimensionCurve_Map;
        Step::RefLinkedList< IfcDimensionCurve > m_refIfcDimensionCurveList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcDimensionCurveDirectedCallout_Map;
        Step::RefLinkedList< IfcDimensionCurveDirectedCallout > m_refIfcDimensionCurveDirectedCalloutList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcDimensionCurveTerminator_Map;
        Step::RefLinkedList< IfcDimensionCurveTerminator > m_refIfcDimensionCurveTerminatorList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcDimensionPair_Map;
        Step::RefLinkedList< IfcDimensionPair > m_refIfcDimensionPairList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcDirection_Map;
        Step::RefLinkedList< IfcDirection > m_refIfcDirectionList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcDiscreteAccessory_Map;
        Step::RefLinkedList< IfcDiscreteAccessory > m_refIfcDiscreteAccessoryList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcDiscreteAccessoryType_Map;
        Step::RefLinkedList< IfcDiscreteAccessoryType > m_refIfcDiscreteAccessoryTypeList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcDistributionChamberElement_Map;
        Step::RefLinkedList< IfcDistributionChamberElement > m_refIfcDistributionChamberElementList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcDistributionChamberElementType_Map;
        Step::RefLinkedList< IfcDistributionChamberElementType > m_refIfcDistributionChamberElementTypeList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcDistributionControlElement_Map;
        Step::RefLinkedList< IfcDistributionControlElement > m_refIfcDistributionControlElementList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcDistributionControlElementType_Map;
        Step::RefLinkedList< IfcDistributionControlElementType > m_refIfcDistributionControlElementTypeList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcDistributionElement_Map;
        Step::RefLinkedList< IfcDistributionElement > m_refIfcDistributionElementList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcDistributionElementType_Map;
        Step::RefLinkedList< IfcDistributionElementType > m_refIfcDistributionElementTypeList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcDistributionFlowElement_Map;
        Step::RefLinkedList< IfcDistributionFlowElement > m_refIfcDistributionFlowElementList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcDistributionFlowElementType_Map;
        Step::RefLinkedList< IfcDistributionFlowElementType > m_refIfcDistributionFlowElementTypeList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcDistributionPort_Map;
        Step::RefLinkedList< IfcDistributionPort > m_refIfcDistributionPortList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcDocumentElectronicFormat_Map;
        Step::RefLinkedList< IfcDocumentElectronicFormat > m_refIfcDocumentElectronicFormatList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcDocumentInformation_Map;
        Step::RefLinkedList< IfcDocumentInformation > m_refIfcDocumentInformationList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcDocumentInformationRelationship_Map;
        Step::RefLinkedList< IfcDocumentInformationRelationship > m_refIfcDocumentInformationRelationshipList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcDocumentReference_Map;
        Step::RefLinkedList< IfcDocumentReference > m_refIfcDocumentReferenceList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcDoor_Map;
        Step::RefLinkedList< IfcDoor > m_refIfcDoorList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcDoorLiningProperties_Map;
        Step::RefLinkedList< IfcDoorLiningProperties > m_refIfcDoorLiningPropertiesList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcDoorPanelProperties_Map;
        Step::RefLinkedList< IfcDoorPanelProperties > m_refIfcDoorPanelPropertiesList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcDoorStyle_Map;
        Step::RefLinkedList< IfcDoorStyle > m_refIfcDoorStyleList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcDraughtingCallout_Map;
        Step::RefLinkedList< IfcDraughtingCallout > m_refIfcDraughtingCalloutList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcDraughtingCalloutRelationship_Map;
        Step::RefLinkedList< IfcDraughtingCalloutRelationship > m_refIfcDraughtingCalloutRelationshipList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcDraughtingPreDefinedColour_Map;
        Step::RefLinkedList< IfcDraughtingPreDefinedColour > m_refIfcDraughtingPreDefinedColourList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcDraughtingPreDefinedCurveFont_Map;
        Step::RefLinkedList< IfcDraughtingPreDefinedCurveFont > m_refIfcDraughtingPreDefinedCurveFontList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcDraughtingPreDefinedTextFont_Map;
        Step::RefLinkedList< IfcDraughtingPreDefinedTextFont > m_refIfcDraughtingPreDefinedTextFontList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcDuctFittingType_Map;
        Step::RefLinkedList< IfcDuctFittingType > m_refIfcDuctFittingTypeList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcDuctSegmentType_Map;
        Step::RefLinkedList< IfcDuctSegmentType > m_refIfcDuctSegmentTypeList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcDuctSilencerType_Map;
        Step::RefLinkedList< IfcDuctSilencerType > m_refIfcDuctSilencerTypeList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcEdge_Map;
        Step::RefLinkedList< IfcEdge > m_refIfcEdgeList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcEdgeCurve_Map;
        Step::RefLinkedList< IfcEdgeCurve > m_refIfcEdgeCurveList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcEdgeFeature_Map;
        Step::RefLinkedList< IfcEdgeFeature > m_refIfcEdgeFeatureList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcEdgeLoop_Map;
        Step::RefLinkedList< IfcEdgeLoop > m_refIfcEdgeLoopList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcElectricalBaseProperties_Map;
        Step::RefLinkedList< IfcElectricalBaseProperties > m_refIfcElectricalBasePropertiesList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcElectricalCircuit_Map;
        Step::RefLinkedList< IfcElectricalCircuit > m_refIfcElectricalCircuitList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcElectricalElement_Map;
        Step::RefLinkedList< IfcElectricalElement > m_refIfcElectricalElementList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcElectricApplianceType_Map;
        Step::RefLinkedList< IfcElectricApplianceType > m_refIfcElectricApplianceTypeList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcElectricDistributionPoint_Map;
        Step::RefLinkedList< IfcElectricDistributionPoint > m_refIfcElectricDistributionPointList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcElectricFlowStorageDeviceType_Map;
        Step::RefLinkedList< IfcElectricFlowStorageDeviceType > m_refIfcElectricFlowStorageDeviceTypeList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcElectricGeneratorType_Map;
        Step::RefLinkedList< IfcElectricGeneratorType > m_refIfcElectricGeneratorTypeList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcElectricHeaterType_Map;
        Step::RefLinkedList< IfcElectricHeaterType > m_refIfcElectricHeaterTypeList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcElectricMotorType_Map;
        Step::RefLinkedList< IfcElectricMotorType > m_refIfcElectricMotorTypeList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcElectricTimeControlType_Map;
        Step::RefLinkedList< IfcElectricTimeControlType > m_refIfcElectricTimeControlTypeList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcElement_Map;
        Step::RefLinkedList< IfcElement > m_refIfcElementList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcElementarySurface_Map;
        Step::RefLinkedList< IfcElementarySurface > m_refIfcElementarySurfaceList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcElementAssembly_Map;
        Step::RefLinkedList< IfcElementAssembly > m_refIfcElementAssemblyList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcElementComponent_Map;
        Step::RefLinkedList< IfcElementComponent > m_refIfcElementComponentList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcElementComponentType_Map;
        Step::RefLinkedList< IfcElementComponentType > m_refIfcElementComponentTypeList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcElementQuantity_Map;
        Step::RefLinkedList< IfcElementQuantity > m_refIfcElementQuantityList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcElementType_Map;
        Step::RefLinkedList< IfcElementType > m_refIfcElementTypeList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcEllipse_Map;
        Step::RefLinkedList< IfcEllipse > m_refIfcEllipseList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcEllipseProfileDef_Map;
        Step::RefLinkedList< IfcEllipseProfileDef > m_refIfcEllipseProfileDefList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcEnergyConversionDevice_Map;
        Step::RefLinkedList< IfcEnergyConversionDevice > m_refIfcEnergyConversionDeviceList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcEnergyConversionDeviceType_Map;
        Step::RefLinkedList< IfcEnergyConversionDeviceType > m_refIfcEnergyConversionDeviceTypeList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcEnergyProperties_Map;
        Step::RefLinkedList< IfcEnergyProperties > m_refIfcEnergyPropertiesList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcEnvironmentalImpactValue_Map;
        Step::RefLinkedList< IfcEnvironmentalImpactValue > m_refIfcEnvironmentalImpactValueList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcEquipmentElement_Map;
        Step::RefLinkedList< IfcEquipmentElement > m_refIfcEquipmentElementList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcEquipmentStandard_Map;
        Step::RefLinkedList< IfcEquipmentStandard > m_refIfcEquipmentStandardList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcEvaporativeCoolerType_Map;
        Step::RefLinkedList< IfcEvaporativeCoolerType > m_refIfcEvaporativeCoolerTypeList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcEvaporatorType_Map;
        Step::RefLinkedList< IfcEvaporatorType > m_refIfcEvaporatorTypeList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcExtendedMaterialProperties_Map;
        Step::RefLinkedList< IfcExtendedMaterialProperties > m_refIfcExtendedMaterialPropertiesList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcExternallyDefinedHatchStyle_Map;
        Step::RefLinkedList< IfcExternallyDefinedHatchStyle > m_refIfcExternallyDefinedHatchStyleList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcExternallyDefinedSurfaceStyle_Map;
        Step::RefLinkedList< IfcExternallyDefinedSurfaceStyle > m_refIfcExternallyDefinedSurfaceStyleList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcExternallyDefinedSymbol_Map;
        Step::RefLinkedList< IfcExternallyDefinedSymbol > m_refIfcExternallyDefinedSymbolList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcExternallyDefinedTextFont_Map;
        Step::RefLinkedList< IfcExternallyDefinedTextFont > m_refIfcExternallyDefinedTextFontList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcExternalReference_Map;
        Step::RefLinkedList< IfcExternalReference > m_refIfcExternalReferenceList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcExtrudedAreaSolid_Map;
        Step::RefLinkedList< IfcExtrudedAreaSolid > m_refIfcExtrudedAreaSolidList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcFace_Map;
        Step::RefLinkedList< IfcFace > m_refIfcFaceList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcFaceBasedSurfaceModel_Map;
        Step::RefLinkedList< IfcFaceBasedSurfaceModel > m_refIfcFaceBasedSurfaceModelList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcFaceBound_Map;
        Step::RefLinkedList< IfcFaceBound > m_refIfcFaceBoundList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcFaceOuterBound_Map;
        Step::RefLinkedList< IfcFaceOuterBound > m_refIfcFaceOuterBoundList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcFaceSurface_Map;
        Step::RefLinkedList< IfcFaceSurface > m_refIfcFaceSurfaceList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcFacetedBrep_Map;
        Step::RefLinkedList< IfcFacetedBrep > m_refIfcFacetedBrepList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcFacetedBrepWithVoids_Map;
        Step::RefLinkedList< IfcFacetedBrepWithVoids > m_refIfcFacetedBrepWithVoidsList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcFailureConnectionCondition_Map;
        Step::RefLinkedList< IfcFailureConnectionCondition > m_refIfcFailureConnectionConditionList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcFanType_Map;
        Step::RefLinkedList< IfcFanType > m_refIfcFanTypeList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcFastener_Map;
        Step::RefLinkedList< IfcFastener > m_refIfcFastenerList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcFastenerType_Map;
        Step::RefLinkedList< IfcFastenerType > m_refIfcFastenerTypeList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcFeatureElement_Map;
        Step::RefLinkedList< IfcFeatureElement > m_refIfcFeatureElementList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcFeatureElementAddition_Map;
        Step::RefLinkedList< IfcFeatureElementAddition > m_refIfcFeatureElementAdditionList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcFeatureElementSubtraction_Map;
        Step::RefLinkedList< IfcFeatureElementSubtraction > m_refIfcFeatureElementSubtractionList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcFillAreaStyle_Map;
        Step::RefLinkedList< IfcFillAreaStyle > m_refIfcFillAreaStyleList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcFillAreaStyleHatching_Map;
        Step::RefLinkedList< IfcFillAreaStyleHatching > m_refIfcFillAreaStyleHatchingList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcFillAreaStyleTiles_Map;
        Step::RefLinkedList< IfcFillAreaStyleTiles > m_refIfcFillAreaStyleTilesList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcFillAreaStyleTileSymbolWithStyle_Map;
        Step::RefLinkedList< IfcFillAreaStyleTileSymbolWithStyle > m_refIfcFillAreaStyleTileSymbolWithStyleList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcFilterType_Map;
        Step::RefLinkedList< IfcFilterType > m_refIfcFilterTypeList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcFireSuppressionTerminalType_Map;
        Step::RefLinkedList< IfcFireSuppressionTerminalType > m_refIfcFireSuppressionTerminalTypeList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcFlowController_Map;
        Step::RefLinkedList< IfcFlowController > m_refIfcFlowControllerList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcFlowControllerType_Map;
        Step::RefLinkedList< IfcFlowControllerType > m_refIfcFlowControllerTypeList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcFlowFitting_Map;
        Step::RefLinkedList< IfcFlowFitting > m_refIfcFlowFittingList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcFlowFittingType_Map;
        Step::RefLinkedList< IfcFlowFittingType > m_refIfcFlowFittingTypeList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcFlowInstrumentType_Map;
        Step::RefLinkedList< IfcFlowInstrumentType > m_refIfcFlowInstrumentTypeList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcFlowMeterType_Map;
        Step::RefLinkedList< IfcFlowMeterType > m_refIfcFlowMeterTypeList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcFlowMovingDevice_Map;
        Step::RefLinkedList< IfcFlowMovingDevice > m_refIfcFlowMovingDeviceList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcFlowMovingDeviceType_Map;
        Step::RefLinkedList< IfcFlowMovingDeviceType > m_refIfcFlowMovingDeviceTypeList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcFlowSegment_Map;
        Step::RefLinkedList< IfcFlowSegment > m_refIfcFlowSegmentList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcFlowSegmentType_Map;
        Step::RefLinkedList< IfcFlowSegmentType > m_refIfcFlowSegmentTypeList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcFlowStorageDevice_Map;
        Step::RefLinkedList< IfcFlowStorageDevice > m_refIfcFlowStorageDeviceList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcFlowStorageDeviceType_Map;
        Step::RefLinkedList< IfcFlowStorageDeviceType > m_refIfcFlowStorageDeviceTypeList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcFlowTerminal_Map;
        Step::RefLinkedList< IfcFlowTerminal > m_refIfcFlowTerminalList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcFlowTerminalType_Map;
        Step::RefLinkedList< IfcFlowTerminalType > m_refIfcFlowTerminalTypeList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcFlowTreatmentDevice_Map;
        Step::RefLinkedList< IfcFlowTreatmentDevice > m_refIfcFlowTreatmentDeviceList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcFlowTreatmentDeviceType_Map;
        Step::RefLinkedList< IfcFlowTreatmentDeviceType > m_refIfcFlowTreatmentDeviceTypeList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcFluidFlowProperties_Map;
        Step::RefLinkedList< IfcFluidFlowProperties > m_refIfcFluidFlowPropertiesList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcFooting_Map;
        Step::RefLinkedList< IfcFooting > m_refIfcFootingList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcFuelProperties_Map;
        Step::RefLinkedList< IfcFuelProperties > m_refIfcFuelPropertiesList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcFurnishingElement_Map;
        Step::RefLinkedList< IfcFurnishingElement > m_refIfcFurnishingElementList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcFurnishingElementType_Map;
        Step::RefLinkedList< IfcFurnishingElementType > m_refIfcFurnishingElementTypeList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcFurnitureStandard_Map;
        Step::RefLinkedList< IfcFurnitureStandard > m_refIfcFurnitureStandardList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcFurnitureType_Map;
        Step::RefLinkedList< IfcFurnitureType > m_refIfcFurnitureTypeList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcGasTerminalType_Map;
        Step::RefLinkedList< IfcGasTerminalType > m_refIfcGasTerminalTypeList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcGeneralMaterialProperties_Map;
        Step::RefLinkedList< IfcGeneralMaterialProperties > m_refIfcGeneralMaterialPropertiesList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcGeneralProfileProperties_Map;
        Step::RefLinkedList< IfcGeneralProfileProperties > m_refIfcGeneralProfilePropertiesList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcGeometricCurveSet_Map;
        Step::RefLinkedList< IfcGeometricCurveSet > m_refIfcGeometricCurveSetList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcGeometricRepresentationContext_Map;
        Step::RefLinkedList< IfcGeometricRepresentationContext > m_refIfcGeometricRepresentationContextList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcGeometricRepresentationItem_Map;
        Step::RefLinkedList< IfcGeometricRepresentationItem > m_refIfcGeometricRepresentationItemList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcGeometricRepresentationSubContext_Map;
        Step::RefLinkedList< IfcGeometricRepresentationSubContext > m_refIfcGeometricRepresentationSubContextList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcGeometricSet_Map;
        Step::RefLinkedList< IfcGeometricSet > m_refIfcGeometricSetList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcGrid_Map;
        Step::RefLinkedList< IfcGrid > m_refIfcGridList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcGridAxis_Map;
        Step::RefLinkedList< IfcGridAxis > m_refIfcGridAxisList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcGridPlacement_Map;
        Step::RefLinkedList< IfcGridPlacement > m_refIfcGridPlacementList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcGroup_Map;
        Step::RefLinkedList< IfcGroup > m_refIfcGroupList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcHalfSpaceSolid_Map;
        Step::RefLinkedList< IfcHalfSpaceSolid > m_refIfcHalfSpaceSolidList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcHeatExchangerType_Map;
        Step::RefLinkedList< IfcHeatExchangerType > m_refIfcHeatExchangerTypeList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcHumidifierType_Map;
        Step::RefLinkedList< IfcHumidifierType > m_refIfcHumidifierTypeList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcHygroscopicMaterialProperties_Map;
        Step::RefLinkedList< IfcHygroscopicMaterialProperties > m_refIfcHygroscopicMaterialPropertiesList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcImageTexture_Map;
        Step::RefLinkedList< IfcImageTexture > m_refIfcImageTextureList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcInventory_Map;
        Step::RefLinkedList< IfcInventory > m_refIfcInventoryList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcIrregularTimeSeries_Map;
        Step::RefLinkedList< IfcIrregularTimeSeries > m_refIfcIrregularTimeSeriesList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcIrregularTimeSeriesValue_Map;
        Step::RefLinkedList< IfcIrregularTimeSeriesValue > m_refIfcIrregularTimeSeriesValueList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcIShapeProfileDef_Map;
        Step::RefLinkedList< IfcIShapeProfileDef > m_refIfcIShapeProfileDefList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcJunctionBoxType_Map;
        Step::RefLinkedList< IfcJunctionBoxType > m_refIfcJunctionBoxTypeList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcLaborResource_Map;
        Step::RefLinkedList< IfcLaborResource > m_refIfcLaborResourceList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcLampType_Map;
        Step::RefLinkedList< IfcLampType > m_refIfcLampTypeList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcLibraryInformation_Map;
        Step::RefLinkedList< IfcLibraryInformation > m_refIfcLibraryInformationList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcLibraryReference_Map;
        Step::RefLinkedList< IfcLibraryReference > m_refIfcLibraryReferenceList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcLightDistributionData_Map;
        Step::RefLinkedList< IfcLightDistributionData > m_refIfcLightDistributionDataList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcLightFixtureType_Map;
        Step::RefLinkedList< IfcLightFixtureType > m_refIfcLightFixtureTypeList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcLightIntensityDistribution_Map;
        Step::RefLinkedList< IfcLightIntensityDistribution > m_refIfcLightIntensityDistributionList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcLightSource_Map;
        Step::RefLinkedList< IfcLightSource > m_refIfcLightSourceList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcLightSourceAmbient_Map;
        Step::RefLinkedList< IfcLightSourceAmbient > m_refIfcLightSourceAmbientList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcLightSourceDirectional_Map;
        Step::RefLinkedList< IfcLightSourceDirectional > m_refIfcLightSourceDirectionalList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcLightSourceGoniometric_Map;
        Step::RefLinkedList< IfcLightSourceGoniometric > m_refIfcLightSourceGoniometricList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcLightSourcePositional_Map;
        Step::RefLinkedList< IfcLightSourcePositional > m_refIfcLightSourcePositionalList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcLightSourceSpot_Map;
        Step::RefLinkedList< IfcLightSourceSpot > m_refIfcLightSourceSpotList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcLine_Map;
        Step::RefLinkedList< IfcLine > m_refIfcLineList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcLinearDimension_Map;
        Step::RefLinkedList< IfcLinearDimension > m_refIfcLinearDimensionList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcLocalPlacement_Map;
        Step::RefLinkedList< IfcLocalPlacement > m_refIfcLocalPlacementList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcLocalTime_Map;
        Step::RefLinkedList< IfcLocalTime > m_refIfcLocalTimeList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcLoop_Map;
        Step::RefLinkedList< IfcLoop > m_refIfcLoopList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcLShapeProfileDef_Map;
        Step::RefLinkedList< IfcLShapeProfileDef > m_refIfcLShapeProfileDefList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcManifoldSolidBrep_Map;
        Step::RefLinkedList< IfcManifoldSolidBrep > m_refIfcManifoldSolidBrepList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcMappedItem_Map;
        Step::RefLinkedList< IfcMappedItem > m_refIfcMappedItemList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcMaterial_Map;
        Step::RefLinkedList< IfcMaterial > m_refIfcMaterialList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcMaterialClassificationRelationship_Map;
        Step::RefLinkedList< IfcMaterialClassificationRelationship > m_refIfcMaterialClassificationRelationshipList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcMaterialDefinitionRepresentation_Map;
        Step::RefLinkedList< IfcMaterialDefinitionRepresentation > m_refIfcMaterialDefinitionRepresentationList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcMaterialLayer_Map;
        Step::RefLinkedList< IfcMaterialLayer > m_refIfcMaterialLayerList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcMaterialLayerSet_Map;
        Step::RefLinkedList< IfcMaterialLayerSet > m_refIfcMaterialLayerSetList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcMaterialLayerSetUsage_Map;
        Step::RefLinkedList< IfcMaterialLayerSetUsage > m_refIfcMaterialLayerSetUsageList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcMaterialList_Map;
        Step::RefLinkedList< IfcMaterialList > m_refIfcMaterialListList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcMaterialProperties_Map;
        Step::RefLinkedList< IfcMaterialProperties > m_refIfcMaterialPropertiesList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcMeasureWithUnit_Map;
        Step::RefLinkedList< IfcMeasureWithUnit > m_refIfcMeasureWithUnitList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcMechanicalConcreteMaterialProperties_Map;
        Step::RefLinkedList< IfcMechanicalConcreteMaterialProperties > m_refIfcMechanicalConcreteMaterialPropertiesList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcMechanicalFastener_Map;
        Step::RefLinkedList< IfcMechanicalFastener > m_refIfcMechanicalFastenerList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcMechanicalFastenerType_Map;
        Step::RefLinkedList< IfcMechanicalFastenerType > m_refIfcMechanicalFastenerTypeList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcMechanicalMaterialProperties_Map;
        Step::RefLinkedList< IfcMechanicalMaterialProperties > m_refIfcMechanicalMaterialPropertiesList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcMechanicalSteelMaterialProperties_Map;
        Step::RefLinkedList< IfcMechanicalSteelMaterialProperties > m_refIfcMechanicalSteelMaterialPropertiesList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcMember_Map;
        Step::RefLinkedList< IfcMember > m_refIfcMemberList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcMemberType_Map;
        Step::RefLinkedList< IfcMemberType > m_refIfcMemberTypeList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcMetric_Map;
        Step::RefLinkedList< IfcMetric > m_refIfcMetricList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcMonetaryUnit_Map;
        Step::RefLinkedList< IfcMonetaryUnit > m_refIfcMonetaryUnitList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcMotorConnectionType_Map;
        Step::RefLinkedList< IfcMotorConnectionType > m_refIfcMotorConnectionTypeList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcMove_Map;
        Step::RefLinkedList< IfcMove > m_refIfcMoveList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcNamedUnit_Map;
        Step::RefLinkedList< IfcNamedUnit > m_refIfcNamedUnitList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcObject_Map;
        Step::RefLinkedList< IfcObject > m_refIfcObjectList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcObjectDefinition_Map;
        Step::RefLinkedList< IfcObjectDefinition > m_refIfcObjectDefinitionList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcObjective_Map;
        Step::RefLinkedList< IfcObjective > m_refIfcObjectiveList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcObjectPlacement_Map;
        Step::RefLinkedList< IfcObjectPlacement > m_refIfcObjectPlacementList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcOccupant_Map;
        Step::RefLinkedList< IfcOccupant > m_refIfcOccupantList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcOffsetCurve2D_Map;
        Step::RefLinkedList< IfcOffsetCurve2D > m_refIfcOffsetCurve2DList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcOffsetCurve3D_Map;
        Step::RefLinkedList< IfcOffsetCurve3D > m_refIfcOffsetCurve3DList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcOneDirectionRepeatFactor_Map;
        Step::RefLinkedList< IfcOneDirectionRepeatFactor > m_refIfcOneDirectionRepeatFactorList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcOpeningElement_Map;
        Step::RefLinkedList< IfcOpeningElement > m_refIfcOpeningElementList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcOpenShell_Map;
        Step::RefLinkedList< IfcOpenShell > m_refIfcOpenShellList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcOpticalMaterialProperties_Map;
        Step::RefLinkedList< IfcOpticalMaterialProperties > m_refIfcOpticalMaterialPropertiesList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcOrderAction_Map;
        Step::RefLinkedList< IfcOrderAction > m_refIfcOrderActionList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcOrganization_Map;
        Step::RefLinkedList< IfcOrganization > m_refIfcOrganizationList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcOrganizationRelationship_Map;
        Step::RefLinkedList< IfcOrganizationRelationship > m_refIfcOrganizationRelationshipList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcOrientedEdge_Map;
        Step::RefLinkedList< IfcOrientedEdge > m_refIfcOrientedEdgeList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcOutletType_Map;
        Step::RefLinkedList< IfcOutletType > m_refIfcOutletTypeList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcOwnerHistory_Map;
        Step::RefLinkedList< IfcOwnerHistory > m_refIfcOwnerHistoryList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcParameterizedProfileDef_Map;
        Step::RefLinkedList< IfcParameterizedProfileDef > m_refIfcParameterizedProfileDefList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcPath_Map;
        Step::RefLinkedList< IfcPath > m_refIfcPathList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcPerformanceHistory_Map;
        Step::RefLinkedList< IfcPerformanceHistory > m_refIfcPerformanceHistoryList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcPermeableCoveringProperties_Map;
        Step::RefLinkedList< IfcPermeableCoveringProperties > m_refIfcPermeableCoveringPropertiesList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcPermit_Map;
        Step::RefLinkedList< IfcPermit > m_refIfcPermitList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcPerson_Map;
        Step::RefLinkedList< IfcPerson > m_refIfcPersonList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcPersonAndOrganization_Map;
        Step::RefLinkedList< IfcPersonAndOrganization > m_refIfcPersonAndOrganizationList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcPhysicalComplexQuantity_Map;
        Step::RefLinkedList< IfcPhysicalComplexQuantity > m_refIfcPhysicalComplexQuantityList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcPhysicalQuantity_Map;
        Step::RefLinkedList< IfcPhysicalQuantity > m_refIfcPhysicalQuantityList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcPhysicalSimpleQuantity_Map;
        Step::RefLinkedList< IfcPhysicalSimpleQuantity > m_refIfcPhysicalSimpleQuantityList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcPile_Map;
        Step::RefLinkedList< IfcPile > m_refIfcPileList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcPipeFittingType_Map;
        Step::RefLinkedList< IfcPipeFittingType > m_refIfcPipeFittingTypeList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcPipeSegmentType_Map;
        Step::RefLinkedList< IfcPipeSegmentType > m_refIfcPipeSegmentTypeList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcPixelTexture_Map;
        Step::RefLinkedList< IfcPixelTexture > m_refIfcPixelTextureList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcPlacement_Map;
        Step::RefLinkedList< IfcPlacement > m_refIfcPlacementList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcPlanarBox_Map;
        Step::RefLinkedList< IfcPlanarBox > m_refIfcPlanarBoxList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcPlanarExtent_Map;
        Step::RefLinkedList< IfcPlanarExtent > m_refIfcPlanarExtentList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcPlane_Map;
        Step::RefLinkedList< IfcPlane > m_refIfcPlaneList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcPlate_Map;
        Step::RefLinkedList< IfcPlate > m_refIfcPlateList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcPlateType_Map;
        Step::RefLinkedList< IfcPlateType > m_refIfcPlateTypeList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcPoint_Map;
        Step::RefLinkedList< IfcPoint > m_refIfcPointList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcPointOnCurve_Map;
        Step::RefLinkedList< IfcPointOnCurve > m_refIfcPointOnCurveList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcPointOnSurface_Map;
        Step::RefLinkedList< IfcPointOnSurface > m_refIfcPointOnSurfaceList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcPolygonalBoundedHalfSpace_Map;
        Step::RefLinkedList< IfcPolygonalBoundedHalfSpace > m_refIfcPolygonalBoundedHalfSpaceList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcPolyline_Map;
        Step::RefLinkedList< IfcPolyline > m_refIfcPolylineList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcPolyLoop_Map;
        Step::RefLinkedList< IfcPolyLoop > m_refIfcPolyLoopList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcPort_Map;
        Step::RefLinkedList< IfcPort > m_refIfcPortList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcPostalAddress_Map;
        Step::RefLinkedList< IfcPostalAddress > m_refIfcPostalAddressList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcPreDefinedColour_Map;
        Step::RefLinkedList< IfcPreDefinedColour > m_refIfcPreDefinedColourList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcPreDefinedCurveFont_Map;
        Step::RefLinkedList< IfcPreDefinedCurveFont > m_refIfcPreDefinedCurveFontList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcPreDefinedDimensionSymbol_Map;
        Step::RefLinkedList< IfcPreDefinedDimensionSymbol > m_refIfcPreDefinedDimensionSymbolList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcPreDefinedItem_Map;
        Step::RefLinkedList< IfcPreDefinedItem > m_refIfcPreDefinedItemList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcPreDefinedPointMarkerSymbol_Map;
        Step::RefLinkedList< IfcPreDefinedPointMarkerSymbol > m_refIfcPreDefinedPointMarkerSymbolList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcPreDefinedSymbol_Map;
        Step::RefLinkedList< IfcPreDefinedSymbol > m_refIfcPreDefinedSymbolList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcPreDefinedTerminatorSymbol_Map;
        Step::RefLinkedList< IfcPreDefinedTerminatorSymbol > m_refIfcPreDefinedTerminatorSymbolList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcPreDefinedTextFont_Map;
        Step::RefLinkedList< IfcPreDefinedTextFont > m_refIfcPreDefinedTextFontList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcPresentationLayerAssignment_Map;
        Step::RefLinkedList< IfcPresentationLayerAssignment > m_refIfcPresentationLayerAssignmentList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcPresentationLayerWithStyle_Map;
        Step::RefLinkedList< IfcPresentationLayerWithStyle > m_refIfcPresentationLayerWithStyleList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcPresentationStyle_Map;
        Step::RefLinkedList< IfcPresentationStyle > m_refIfcPresentationStyleList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcPresentationStyleAssignment_Map;
        Step::RefLinkedList< IfcPresentationStyleAssignment > m_refIfcPresentationStyleAssignmentList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcProcedure_Map;
        Step::RefLinkedList< IfcProcedure > m_refIfcProcedureList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcProcess_Map;
        Step::RefLinkedList< IfcProcess > m_refIfcProcessList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcProduct_Map;
        Step::RefLinkedList< IfcProduct > m_refIfcProductList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcProductDefinitionShape_Map;
        Step::RefLinkedList< IfcProductDefinitionShape > m_refIfcProductDefinitionShapeList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcProductRepresentation_Map;
        Step::RefLinkedList< IfcProductRepresentation > m_refIfcProductRepresentationList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcProductsOfCombustionProperties_Map;
        Step::RefLinkedList< IfcProductsOfCombustionProperties > m_refIfcProductsOfCombustionPropertiesList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcProfileDef_Map;
        Step::RefLinkedList< IfcProfileDef > m_refIfcProfileDefList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcProfileProperties_Map;
        Step::RefLinkedList< IfcProfileProperties > m_refIfcProfilePropertiesList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcProject_Map;
        Step::RefLinkedList< IfcProject > m_refIfcProjectList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcProjectionCurve_Map;
        Step::RefLinkedList< IfcProjectionCurve > m_refIfcProjectionCurveList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcProjectionElement_Map;
        Step::RefLinkedList< IfcProjectionElement > m_refIfcProjectionElementList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcProjectOrder_Map;
        Step::RefLinkedList< IfcProjectOrder > m_refIfcProjectOrderList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcProjectOrderRecord_Map;
        Step::RefLinkedList< IfcProjectOrderRecord > m_refIfcProjectOrderRecordList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcProperty_Map;
        Step::RefLinkedList< IfcProperty > m_refIfcPropertyList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcPropertyBoundedValue_Map;
        Step::RefLinkedList< IfcPropertyBoundedValue > m_refIfcPropertyBoundedValueList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcPropertyConstraintRelationship_Map;
        Step::RefLinkedList< IfcPropertyConstraintRelationship > m_refIfcPropertyConstraintRelationshipList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcPropertyDefinition_Map;
        Step::RefLinkedList< IfcPropertyDefinition > m_refIfcPropertyDefinitionList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcPropertyDependencyRelationship_Map;
        Step::RefLinkedList< IfcPropertyDependencyRelationship > m_refIfcPropertyDependencyRelationshipList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcPropertyEnumeratedValue_Map;
        Step::RefLinkedList< IfcPropertyEnumeratedValue > m_refIfcPropertyEnumeratedValueList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcPropertyEnumeration_Map;
        Step::RefLinkedList< IfcPropertyEnumeration > m_refIfcPropertyEnumerationList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcPropertyListValue_Map;
        Step::RefLinkedList< IfcPropertyListValue > m_refIfcPropertyListValueList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcPropertyReferenceValue_Map;
        Step::RefLinkedList< IfcPropertyReferenceValue > m_refIfcPropertyReferenceValueList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcPropertySet_Map;
        Step::RefLinkedList< IfcPropertySet > m_refIfcPropertySetList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcPropertySetDefinition_Map;
        Step::RefLinkedList< IfcPropertySetDefinition > m_refIfcPropertySetDefinitionList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcPropertySingleValue_Map;
        Step::RefLinkedList< IfcPropertySingleValue > m_refIfcPropertySingleValueList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcPropertyTableValue_Map;
        Step::RefLinkedList< IfcPropertyTableValue > m_refIfcPropertyTableValueList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcProtectiveDeviceType_Map;
        Step::RefLinkedList< IfcProtectiveDeviceType > m_refIfcProtectiveDeviceTypeList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcProxy_Map;
        Step::RefLinkedList< IfcProxy > m_refIfcProxyList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcPumpType_Map;
        Step::RefLinkedList< IfcPumpType > m_refIfcPumpTypeList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcQuantityArea_Map;
        Step::RefLinkedList< IfcQuantityArea > m_refIfcQuantityAreaList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcQuantityCount_Map;
        Step::RefLinkedList< IfcQuantityCount > m_refIfcQuantityCountList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcQuantityLength_Map;
        Step::RefLinkedList< IfcQuantityLength > m_refIfcQuantityLengthList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcQuantityTime_Map;
        Step::RefLinkedList< IfcQuantityTime > m_refIfcQuantityTimeList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcQuantityVolume_Map;
        Step::RefLinkedList< IfcQuantityVolume > m_refIfcQuantityVolumeList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcQuantityWeight_Map;
        Step::RefLinkedList< IfcQuantityWeight > m_refIfcQuantityWeightList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcRadiusDimension_Map;
        Step::RefLinkedList< IfcRadiusDimension > m_refIfcRadiusDimensionList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcRailing_Map;
        Step::RefLinkedList< IfcRailing > m_refIfcRailingList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcRailingType_Map;
        Step::RefLinkedList< IfcRailingType > m_refIfcRailingTypeList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcRamp_Map;
        Step::RefLinkedList< IfcRamp > m_refIfcRampList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcRampFlight_Map;
        Step::RefLinkedList< IfcRampFlight > m_refIfcRampFlightList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcRampFlightType_Map;
        Step::RefLinkedList< IfcRampFlightType > m_refIfcRampFlightTypeList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcRationalBezierCurve_Map;
        Step::RefLinkedList< IfcRationalBezierCurve > m_refIfcRationalBezierCurveList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcRectangleHollowProfileDef_Map;
        Step::RefLinkedList< IfcRectangleHollowProfileDef > m_refIfcRectangleHollowProfileDefList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcRectangleProfileDef_Map;
        Step::RefLinkedList< IfcRectangleProfileDef > m_refIfcRectangleProfileDefList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcRectangularPyramid_Map;
        Step::RefLinkedList< IfcRectangularPyramid > m_refIfcRectangularPyramidList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcRectangularTrimmedSurface_Map;
        Step::RefLinkedList< IfcRectangularTrimmedSurface > m_refIfcRectangularTrimmedSurfaceList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcReferencesValueDocument_Map;
        Step::RefLinkedList< IfcReferencesValueDocument > m_refIfcReferencesValueDocumentList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcRegularTimeSeries_Map;
        Step::RefLinkedList< IfcRegularTimeSeries > m_refIfcRegularTimeSeriesList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcReinforcementBarProperties_Map;
        Step::RefLinkedList< IfcReinforcementBarProperties > m_refIfcReinforcementBarPropertiesList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcReinforcementDefinitionProperties_Map;
        Step::RefLinkedList< IfcReinforcementDefinitionProperties > m_refIfcReinforcementDefinitionPropertiesList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcReinforcingBar_Map;
        Step::RefLinkedList< IfcReinforcingBar > m_refIfcReinforcingBarList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcReinforcingElement_Map;
        Step::RefLinkedList< IfcReinforcingElement > m_refIfcReinforcingElementList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcReinforcingMesh_Map;
        Step::RefLinkedList< IfcReinforcingMesh > m_refIfcReinforcingMeshList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcRelAggregates_Map;
        Step::RefLinkedList< IfcRelAggregates > m_refIfcRelAggregatesList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcRelAssigns_Map;
        Step::RefLinkedList< IfcRelAssigns > m_refIfcRelAssignsList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcRelAssignsTasks_Map;
        Step::RefLinkedList< IfcRelAssignsTasks > m_refIfcRelAssignsTasksList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcRelAssignsToActor_Map;
        Step::RefLinkedList< IfcRelAssignsToActor > m_refIfcRelAssignsToActorList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcRelAssignsToControl_Map;
        Step::RefLinkedList< IfcRelAssignsToControl > m_refIfcRelAssignsToControlList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcRelAssignsToGroup_Map;
        Step::RefLinkedList< IfcRelAssignsToGroup > m_refIfcRelAssignsToGroupList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcRelAssignsToProcess_Map;
        Step::RefLinkedList< IfcRelAssignsToProcess > m_refIfcRelAssignsToProcessList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcRelAssignsToProduct_Map;
        Step::RefLinkedList< IfcRelAssignsToProduct > m_refIfcRelAssignsToProductList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcRelAssignsToProjectOrder_Map;
        Step::RefLinkedList< IfcRelAssignsToProjectOrder > m_refIfcRelAssignsToProjectOrderList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcRelAssignsToResource_Map;
        Step::RefLinkedList< IfcRelAssignsToResource > m_refIfcRelAssignsToResourceList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcRelAssociates_Map;
        Step::RefLinkedList< IfcRelAssociates > m_refIfcRelAssociatesList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcRelAssociatesAppliedValue_Map;
        Step::RefLinkedList< IfcRelAssociatesAppliedValue > m_refIfcRelAssociatesAppliedValueList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcRelAssociatesApproval_Map;
        Step::RefLinkedList< IfcRelAssociatesApproval > m_refIfcRelAssociatesApprovalList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcRelAssociatesClassification_Map;
        Step::RefLinkedList< IfcRelAssociatesClassification > m_refIfcRelAssociatesClassificationList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcRelAssociatesConstraint_Map;
        Step::RefLinkedList< IfcRelAssociatesConstraint > m_refIfcRelAssociatesConstraintList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcRelAssociatesDocument_Map;
        Step::RefLinkedList< IfcRelAssociatesDocument > m_refIfcRelAssociatesDocumentList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcRelAssociatesLibrary_Map;
        Step::RefLinkedList< IfcRelAssociatesLibrary > m_refIfcRelAssociatesLibraryList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcRelAssociatesMaterial_Map;
        Step::RefLinkedList< IfcRelAssociatesMaterial > m_refIfcRelAssociatesMaterialList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcRelAssociatesProfileProperties_Map;
        Step::RefLinkedList< IfcRelAssociatesProfileProperties > m_refIfcRelAssociatesProfilePropertiesList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcRelationship_Map;
        Step::RefLinkedList< IfcRelationship > m_refIfcRelationshipList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcRelaxation_Map;
        Step::RefLinkedList< IfcRelaxation > m_refIfcRelaxationList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcRelConnects_Map;
        Step::RefLinkedList< IfcRelConnects > m_refIfcRelConnectsList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcRelConnectsElements_Map;
        Step::RefLinkedList< IfcRelConnectsElements > m_refIfcRelConnectsElementsList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcRelConnectsPathElements_Map;
        Step::RefLinkedList< IfcRelConnectsPathElements > m_refIfcRelConnectsPathElementsList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcRelConnectsPorts_Map;
        Step::RefLinkedList< IfcRelConnectsPorts > m_refIfcRelConnectsPortsList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcRelConnectsPortToElement_Map;
        Step::RefLinkedList< IfcRelConnectsPortToElement > m_refIfcRelConnectsPortToElementList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcRelConnectsStructuralActivity_Map;
        Step::RefLinkedList< IfcRelConnectsStructuralActivity > m_refIfcRelConnectsStructuralActivityList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcRelConnectsStructuralElement_Map;
        Step::RefLinkedList< IfcRelConnectsStructuralElement > m_refIfcRelConnectsStructuralElementList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcRelConnectsStructuralMember_Map;
        Step::RefLinkedList< IfcRelConnectsStructuralMember > m_refIfcRelConnectsStructuralMemberList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcRelConnectsWithEccentricity_Map;
        Step::RefLinkedList< IfcRelConnectsWithEccentricity > m_refIfcRelConnectsWithEccentricityList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcRelConnectsWithRealizingElements_Map;
        Step::RefLinkedList< IfcRelConnectsWithRealizingElements > m_refIfcRelConnectsWithRealizingElementsList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcRelContainedInSpatialStructure_Map;
        Step::RefLinkedList< IfcRelContainedInSpatialStructure > m_refIfcRelContainedInSpatialStructureList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcRelCoversBldgElements_Map;
        Step::RefLinkedList< IfcRelCoversBldgElements > m_refIfcRelCoversBldgElementsList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcRelCoversSpaces_Map;
        Step::RefLinkedList< IfcRelCoversSpaces > m_refIfcRelCoversSpacesList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcRelDecomposes_Map;
        Step::RefLinkedList< IfcRelDecomposes > m_refIfcRelDecomposesList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcRelDefines_Map;
        Step::RefLinkedList< IfcRelDefines > m_refIfcRelDefinesList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcRelDefinesByProperties_Map;
        Step::RefLinkedList< IfcRelDefinesByProperties > m_refIfcRelDefinesByPropertiesList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcRelDefinesByType_Map;
        Step::RefLinkedList< IfcRelDefinesByType > m_refIfcRelDefinesByTypeList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcRelFillsElement_Map;
        Step::RefLinkedList< IfcRelFillsElement > m_refIfcRelFillsElementList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcRelFlowControlElements_Map;
        Step::RefLinkedList< IfcRelFlowControlElements > m_refIfcRelFlowControlElementsList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcRelInteractionRequirements_Map;
        Step::RefLinkedList< IfcRelInteractionRequirements > m_refIfcRelInteractionRequirementsList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcRelNests_Map;
        Step::RefLinkedList< IfcRelNests > m_refIfcRelNestsList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcRelOccupiesSpaces_Map;
        Step::RefLinkedList< IfcRelOccupiesSpaces > m_refIfcRelOccupiesSpacesList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcRelOverridesProperties_Map;
        Step::RefLinkedList< IfcRelOverridesProperties > m_refIfcRelOverridesPropertiesList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcRelProjectsElement_Map;
        Step::RefLinkedList< IfcRelProjectsElement > m_refIfcRelProjectsElementList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcRelReferencedInSpatialStructure_Map;
        Step::RefLinkedList< IfcRelReferencedInSpatialStructure > m_refIfcRelReferencedInSpatialStructureList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcRelSchedulesCostItems_Map;
        Step::RefLinkedList< IfcRelSchedulesCostItems > m_refIfcRelSchedulesCostItemsList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcRelSequence_Map;
        Step::RefLinkedList< IfcRelSequence > m_refIfcRelSequenceList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcRelServicesBuildings_Map;
        Step::RefLinkedList< IfcRelServicesBuildings > m_refIfcRelServicesBuildingsList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcRelSpaceBoundary_Map;
        Step::RefLinkedList< IfcRelSpaceBoundary > m_refIfcRelSpaceBoundaryList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcRelVoidsElement_Map;
        Step::RefLinkedList< IfcRelVoidsElement > m_refIfcRelVoidsElementList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcRepresentation_Map;
        Step::RefLinkedList< IfcRepresentation > m_refIfcRepresentationList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcRepresentationContext_Map;
        Step::RefLinkedList< IfcRepresentationContext > m_refIfcRepresentationContextList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcRepresentationItem_Map;
        Step::RefLinkedList< IfcRepresentationItem > m_refIfcRepresentationItemList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcRepresentationMap_Map;
        Step::RefLinkedList< IfcRepresentationMap > m_refIfcRepresentationMapList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcResource_Map;
        Step::RefLinkedList< IfcResource > m_refIfcResourceList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcRevolvedAreaSolid_Map;
        Step::RefLinkedList< IfcRevolvedAreaSolid > m_refIfcRevolvedAreaSolidList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcRibPlateProfileProperties_Map;
        Step::RefLinkedList< IfcRibPlateProfileProperties > m_refIfcRibPlateProfilePropertiesList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcRightCircularCone_Map;
        Step::RefLinkedList< IfcRightCircularCone > m_refIfcRightCircularConeList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcRightCircularCylinder_Map;
        Step::RefLinkedList< IfcRightCircularCylinder > m_refIfcRightCircularCylinderList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcRoof_Map;
        Step::RefLinkedList< IfcRoof > m_refIfcRoofList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcRoot_Map;
        Step::RefLinkedList< IfcRoot > m_refIfcRootList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcRoundedEdgeFeature_Map;
        Step::RefLinkedList< IfcRoundedEdgeFeature > m_refIfcRoundedEdgeFeatureList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcRoundedRectangleProfileDef_Map;
        Step::RefLinkedList< IfcRoundedRectangleProfileDef > m_refIfcRoundedRectangleProfileDefList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcSanitaryTerminalType_Map;
        Step::RefLinkedList< IfcSanitaryTerminalType > m_refIfcSanitaryTerminalTypeList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcScheduleTimeControl_Map;
        Step::RefLinkedList< IfcScheduleTimeControl > m_refIfcScheduleTimeControlList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcSectionedSpine_Map;
        Step::RefLinkedList< IfcSectionedSpine > m_refIfcSectionedSpineList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcSectionProperties_Map;
        Step::RefLinkedList< IfcSectionProperties > m_refIfcSectionPropertiesList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcSectionReinforcementProperties_Map;
        Step::RefLinkedList< IfcSectionReinforcementProperties > m_refIfcSectionReinforcementPropertiesList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcSensorType_Map;
        Step::RefLinkedList< IfcSensorType > m_refIfcSensorTypeList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcServiceLife_Map;
        Step::RefLinkedList< IfcServiceLife > m_refIfcServiceLifeList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcServiceLifeFactor_Map;
        Step::RefLinkedList< IfcServiceLifeFactor > m_refIfcServiceLifeFactorList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcShapeAspect_Map;
        Step::RefLinkedList< IfcShapeAspect > m_refIfcShapeAspectList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcShapeModel_Map;
        Step::RefLinkedList< IfcShapeModel > m_refIfcShapeModelList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcShapeRepresentation_Map;
        Step::RefLinkedList< IfcShapeRepresentation > m_refIfcShapeRepresentationList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcShellBasedSurfaceModel_Map;
        Step::RefLinkedList< IfcShellBasedSurfaceModel > m_refIfcShellBasedSurfaceModelList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcSimpleProperty_Map;
        Step::RefLinkedList< IfcSimpleProperty > m_refIfcSimplePropertyList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcSite_Map;
        Step::RefLinkedList< IfcSite > m_refIfcSiteList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcSIUnit_Map;
        Step::RefLinkedList< IfcSIUnit > m_refIfcSIUnitList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcSlab_Map;
        Step::RefLinkedList< IfcSlab > m_refIfcSlabList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcSlabType_Map;
        Step::RefLinkedList< IfcSlabType > m_refIfcSlabTypeList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcSlippageConnectionCondition_Map;
        Step::RefLinkedList< IfcSlippageConnectionCondition > m_refIfcSlippageConnectionConditionList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcSolidModel_Map;
        Step::RefLinkedList< IfcSolidModel > m_refIfcSolidModelList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcSoundProperties_Map;
        Step::RefLinkedList< IfcSoundProperties > m_refIfcSoundPropertiesList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcSoundValue_Map;
        Step::RefLinkedList< IfcSoundValue > m_refIfcSoundValueList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcSpace_Map;
        Step::RefLinkedList< IfcSpace > m_refIfcSpaceList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcSpaceHeaterType_Map;
        Step::RefLinkedList< IfcSpaceHeaterType > m_refIfcSpaceHeaterTypeList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcSpaceProgram_Map;
        Step::RefLinkedList< IfcSpaceProgram > m_refIfcSpaceProgramList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcSpaceThermalLoadProperties_Map;
        Step::RefLinkedList< IfcSpaceThermalLoadProperties > m_refIfcSpaceThermalLoadPropertiesList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcSpaceType_Map;
        Step::RefLinkedList< IfcSpaceType > m_refIfcSpaceTypeList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcSpatialStructureElement_Map;
        Step::RefLinkedList< IfcSpatialStructureElement > m_refIfcSpatialStructureElementList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcSpatialStructureElementType_Map;
        Step::RefLinkedList< IfcSpatialStructureElementType > m_refIfcSpatialStructureElementTypeList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcSphere_Map;
        Step::RefLinkedList< IfcSphere > m_refIfcSphereList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcStackTerminalType_Map;
        Step::RefLinkedList< IfcStackTerminalType > m_refIfcStackTerminalTypeList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcStair_Map;
        Step::RefLinkedList< IfcStair > m_refIfcStairList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcStairFlight_Map;
        Step::RefLinkedList< IfcStairFlight > m_refIfcStairFlightList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcStairFlightType_Map;
        Step::RefLinkedList< IfcStairFlightType > m_refIfcStairFlightTypeList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcStructuralAction_Map;
        Step::RefLinkedList< IfcStructuralAction > m_refIfcStructuralActionList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcStructuralActivity_Map;
        Step::RefLinkedList< IfcStructuralActivity > m_refIfcStructuralActivityList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcStructuralAnalysisModel_Map;
        Step::RefLinkedList< IfcStructuralAnalysisModel > m_refIfcStructuralAnalysisModelList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcStructuralConnection_Map;
        Step::RefLinkedList< IfcStructuralConnection > m_refIfcStructuralConnectionList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcStructuralConnectionCondition_Map;
        Step::RefLinkedList< IfcStructuralConnectionCondition > m_refIfcStructuralConnectionConditionList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcStructuralCurveConnection_Map;
        Step::RefLinkedList< IfcStructuralCurveConnection > m_refIfcStructuralCurveConnectionList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcStructuralCurveMember_Map;
        Step::RefLinkedList< IfcStructuralCurveMember > m_refIfcStructuralCurveMemberList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcStructuralCurveMemberVarying_Map;
        Step::RefLinkedList< IfcStructuralCurveMemberVarying > m_refIfcStructuralCurveMemberVaryingList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcStructuralItem_Map;
        Step::RefLinkedList< IfcStructuralItem > m_refIfcStructuralItemList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcStructuralLinearAction_Map;
        Step::RefLinkedList< IfcStructuralLinearAction > m_refIfcStructuralLinearActionList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcStructuralLinearActionVarying_Map;
        Step::RefLinkedList< IfcStructuralLinearActionVarying > m_refIfcStructuralLinearActionVaryingList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcStructuralLoad_Map;
        Step::RefLinkedList< IfcStructuralLoad > m_refIfcStructuralLoadList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcStructuralLoadGroup_Map;
        Step::RefLinkedList< IfcStructuralLoadGroup > m_refIfcStructuralLoadGroupList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcStructuralLoadLinearForce_Map;
        Step::RefLinkedList< IfcStructuralLoadLinearForce > m_refIfcStructuralLoadLinearForceList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcStructuralLoadPlanarForce_Map;
        Step::RefLinkedList< IfcStructuralLoadPlanarForce > m_refIfcStructuralLoadPlanarForceList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcStructuralLoadSingleDisplacement_Map;
        Step::RefLinkedList< IfcStructuralLoadSingleDisplacement > m_refIfcStructuralLoadSingleDisplacementList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcStructuralLoadSingleDisplacementDistortion_Map;
        Step::RefLinkedList< IfcStructuralLoadSingleDisplacementDistortion > m_refIfcStructuralLoadSingleDisplacementDistortionList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcStructuralLoadSingleForce_Map;
        Step::RefLinkedList< IfcStructuralLoadSingleForce > m_refIfcStructuralLoadSingleForceList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcStructuralLoadSingleForceWarping_Map;
        Step::RefLinkedList< IfcStructuralLoadSingleForceWarping > m_refIfcStructuralLoadSingleForceWarpingList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcStructuralLoadStatic_Map;
        Step::RefLinkedList< IfcStructuralLoadStatic > m_refIfcStructuralLoadStaticList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcStructuralLoadTemperature_Map;
        Step::RefLinkedList< IfcStructuralLoadTemperature > m_refIfcStructuralLoadTemperatureList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcStructuralMember_Map;
        Step::RefLinkedList< IfcStructuralMember > m_refIfcStructuralMemberList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcStructuralPlanarAction_Map;
        Step::RefLinkedList< IfcStructuralPlanarAction > m_refIfcStructuralPlanarActionList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcStructuralPlanarActionVarying_Map;
        Step::RefLinkedList< IfcStructuralPlanarActionVarying > m_refIfcStructuralPlanarActionVaryingList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcStructuralPointAction_Map;
        Step::RefLinkedList< IfcStructuralPointAction > m_refIfcStructuralPointActionList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcStructuralPointConnection_Map;
        Step::RefLinkedList< IfcStructuralPointConnection > m_refIfcStructuralPointConnectionList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcStructuralPointReaction_Map;
        Step::RefLinkedList< IfcStructuralPointReaction > m_refIfcStructuralPointReactionList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcStructuralProfileProperties_Map;
        Step::RefLinkedList< IfcStructuralProfileProperties > m_refIfcStructuralProfilePropertiesList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcStructuralReaction_Map;
        Step::RefLinkedList< IfcStructuralReaction > m_refIfcStructuralReactionList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcStructuralResultGroup_Map;
        Step::RefLinkedList< IfcStructuralResultGroup > m_refIfcStructuralResultGroupList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcStructuralSteelProfileProperties_Map;
        Step::RefLinkedList< IfcStructuralSteelProfileProperties > m_refIfcStructuralSteelProfilePropertiesList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcStructuralSurfaceConnection_Map;
        Step::RefLinkedList< IfcStructuralSurfaceConnection > m_refIfcStructuralSurfaceConnectionList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcStructuralSurfaceMember_Map;
        Step::RefLinkedList< IfcStructuralSurfaceMember > m_refIfcStructuralSurfaceMemberList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcStructuralSurfaceMemberVarying_Map;
        Step::RefLinkedList< IfcStructuralSurfaceMemberVarying > m_refIfcStructuralSurfaceMemberVaryingList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcStructuredDimensionCallout_Map;
        Step::RefLinkedList< IfcStructuredDimensionCallout > m_refIfcStructuredDimensionCalloutList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcStyledItem_Map;
        Step::RefLinkedList< IfcStyledItem > m_refIfcStyledItemList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcStyledRepresentation_Map;
        Step::RefLinkedList< IfcStyledRepresentation > m_refIfcStyledRepresentationList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcStyleModel_Map;
        Step::RefLinkedList< IfcStyleModel > m_refIfcStyleModelList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcSubContractResource_Map;
        Step::RefLinkedList< IfcSubContractResource > m_refIfcSubContractResourceList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcSubedge_Map;
        Step::RefLinkedList< IfcSubedge > m_refIfcSubedgeList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcSurface_Map;
        Step::RefLinkedList< IfcSurface > m_refIfcSurfaceList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcSurfaceCurveSweptAreaSolid_Map;
        Step::RefLinkedList< IfcSurfaceCurveSweptAreaSolid > m_refIfcSurfaceCurveSweptAreaSolidList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcSurfaceOfLinearExtrusion_Map;
        Step::RefLinkedList< IfcSurfaceOfLinearExtrusion > m_refIfcSurfaceOfLinearExtrusionList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcSurfaceOfRevolution_Map;
        Step::RefLinkedList< IfcSurfaceOfRevolution > m_refIfcSurfaceOfRevolutionList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcSurfaceStyle_Map;
        Step::RefLinkedList< IfcSurfaceStyle > m_refIfcSurfaceStyleList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcSurfaceStyleLighting_Map;
        Step::RefLinkedList< IfcSurfaceStyleLighting > m_refIfcSurfaceStyleLightingList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcSurfaceStyleRefraction_Map;
        Step::RefLinkedList< IfcSurfaceStyleRefraction > m_refIfcSurfaceStyleRefractionList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcSurfaceStyleRendering_Map;
        Step::RefLinkedList< IfcSurfaceStyleRendering > m_refIfcSurfaceStyleRenderingList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcSurfaceStyleShading_Map;
        Step::RefLinkedList< IfcSurfaceStyleShading > m_refIfcSurfaceStyleShadingList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcSurfaceStyleWithTextures_Map;
        Step::RefLinkedList< IfcSurfaceStyleWithTextures > m_refIfcSurfaceStyleWithTexturesList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcSurfaceTexture_Map;
        Step::RefLinkedList< IfcSurfaceTexture > m_refIfcSurfaceTextureList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcSweptAreaSolid_Map;
        Step::RefLinkedList< IfcSweptAreaSolid > m_refIfcSweptAreaSolidList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcSweptDiskSolid_Map;
        Step::RefLinkedList< IfcSweptDiskSolid > m_refIfcSweptDiskSolidList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcSweptSurface_Map;
        Step::RefLinkedList< IfcSweptSurface > m_refIfcSweptSurfaceList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcSwitchingDeviceType_Map;
        Step::RefLinkedList< IfcSwitchingDeviceType > m_refIfcSwitchingDeviceTypeList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcSymbolStyle_Map;
        Step::RefLinkedList< IfcSymbolStyle > m_refIfcSymbolStyleList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcSystem_Map;
        Step::RefLinkedList< IfcSystem > m_refIfcSystemList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcSystemFurnitureElementType_Map;
        Step::RefLinkedList< IfcSystemFurnitureElementType > m_refIfcSystemFurnitureElementTypeList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcTable_Map;
        Step::RefLinkedList< IfcTable > m_refIfcTableList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcTableRow_Map;
        Step::RefLinkedList< IfcTableRow > m_refIfcTableRowList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcTankType_Map;
        Step::RefLinkedList< IfcTankType > m_refIfcTankTypeList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcTask_Map;
        Step::RefLinkedList< IfcTask > m_refIfcTaskList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcTelecomAddress_Map;
        Step::RefLinkedList< IfcTelecomAddress > m_refIfcTelecomAddressList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcTendon_Map;
        Step::RefLinkedList< IfcTendon > m_refIfcTendonList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcTendonAnchor_Map;
        Step::RefLinkedList< IfcTendonAnchor > m_refIfcTendonAnchorList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcTerminatorSymbol_Map;
        Step::RefLinkedList< IfcTerminatorSymbol > m_refIfcTerminatorSymbolList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcTextLiteral_Map;
        Step::RefLinkedList< IfcTextLiteral > m_refIfcTextLiteralList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcTextLiteralWithExtent_Map;
        Step::RefLinkedList< IfcTextLiteralWithExtent > m_refIfcTextLiteralWithExtentList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcTextStyle_Map;
        Step::RefLinkedList< IfcTextStyle > m_refIfcTextStyleList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcTextStyleFontModel_Map;
        Step::RefLinkedList< IfcTextStyleFontModel > m_refIfcTextStyleFontModelList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcTextStyleForDefinedFont_Map;
        Step::RefLinkedList< IfcTextStyleForDefinedFont > m_refIfcTextStyleForDefinedFontList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcTextStyleTextModel_Map;
        Step::RefLinkedList< IfcTextStyleTextModel > m_refIfcTextStyleTextModelList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcTextStyleWithBoxCharacteristics_Map;
        Step::RefLinkedList< IfcTextStyleWithBoxCharacteristics > m_refIfcTextStyleWithBoxCharacteristicsList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcTextureCoordinate_Map;
        Step::RefLinkedList< IfcTextureCoordinate > m_refIfcTextureCoordinateList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcTextureCoordinateGenerator_Map;
        Step::RefLinkedList< IfcTextureCoordinateGenerator > m_refIfcTextureCoordinateGeneratorList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcTextureMap_Map;
        Step::RefLinkedList< IfcTextureMap > m_refIfcTextureMapList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcTextureVertex_Map;
        Step::RefLinkedList< IfcTextureVertex > m_refIfcTextureVertexList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcThermalMaterialProperties_Map;
        Step::RefLinkedList< IfcThermalMaterialProperties > m_refIfcThermalMaterialPropertiesList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcTimeSeries_Map;
        Step::RefLinkedList< IfcTimeSeries > m_refIfcTimeSeriesList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcTimeSeriesReferenceRelationship_Map;
        Step::RefLinkedList< IfcTimeSeriesReferenceRelationship > m_refIfcTimeSeriesReferenceRelationshipList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcTimeSeriesSchedule_Map;
        Step::RefLinkedList< IfcTimeSeriesSchedule > m_refIfcTimeSeriesScheduleList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcTimeSeriesValue_Map;
        Step::RefLinkedList< IfcTimeSeriesValue > m_refIfcTimeSeriesValueList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcTopologicalRepresentationItem_Map;
        Step::RefLinkedList< IfcTopologicalRepresentationItem > m_refIfcTopologicalRepresentationItemList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcTopologyRepresentation_Map;
        Step::RefLinkedList< IfcTopologyRepresentation > m_refIfcTopologyRepresentationList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcTransformerType_Map;
        Step::RefLinkedList< IfcTransformerType > m_refIfcTransformerTypeList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcTransportElement_Map;
        Step::RefLinkedList< IfcTransportElement > m_refIfcTransportElementList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcTransportElementType_Map;
        Step::RefLinkedList< IfcTransportElementType > m_refIfcTransportElementTypeList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcTrapeziumProfileDef_Map;
        Step::RefLinkedList< IfcTrapeziumProfileDef > m_refIfcTrapeziumProfileDefList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcTrimmedCurve_Map;
        Step::RefLinkedList< IfcTrimmedCurve > m_refIfcTrimmedCurveList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcTShapeProfileDef_Map;
        Step::RefLinkedList< IfcTShapeProfileDef > m_refIfcTShapeProfileDefList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcTubeBundleType_Map;
        Step::RefLinkedList< IfcTubeBundleType > m_refIfcTubeBundleTypeList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcTwoDirectionRepeatFactor_Map;
        Step::RefLinkedList< IfcTwoDirectionRepeatFactor > m_refIfcTwoDirectionRepeatFactorList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcTypeObject_Map;
        Step::RefLinkedList< IfcTypeObject > m_refIfcTypeObjectList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcTypeProduct_Map;
        Step::RefLinkedList< IfcTypeProduct > m_refIfcTypeProductList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcUnitaryEquipmentType_Map;
        Step::RefLinkedList< IfcUnitaryEquipmentType > m_refIfcUnitaryEquipmentTypeList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcUnitAssignment_Map;
        Step::RefLinkedList< IfcUnitAssignment > m_refIfcUnitAssignmentList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcUShapeProfileDef_Map;
        Step::RefLinkedList< IfcUShapeProfileDef > m_refIfcUShapeProfileDefList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcValveType_Map;
        Step::RefLinkedList< IfcValveType > m_refIfcValveTypeList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcVector_Map;
        Step::RefLinkedList< IfcVector > m_refIfcVectorList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcVertex_Map;
        Step::RefLinkedList< IfcVertex > m_refIfcVertexList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcVertexBasedTextureMap_Map;
        Step::RefLinkedList< IfcVertexBasedTextureMap > m_refIfcVertexBasedTextureMapList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcVertexLoop_Map;
        Step::RefLinkedList< IfcVertexLoop > m_refIfcVertexLoopList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcVertexPoint_Map;
        Step::RefLinkedList< IfcVertexPoint > m_refIfcVertexPointList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcVibrationIsolatorType_Map;
        Step::RefLinkedList< IfcVibrationIsolatorType > m_refIfcVibrationIsolatorTypeList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcVirtualElement_Map;
        Step::RefLinkedList< IfcVirtualElement > m_refIfcVirtualElementList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcVirtualGridIntersection_Map;
        Step::RefLinkedList< IfcVirtualGridIntersection > m_refIfcVirtualGridIntersectionList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcWall_Map;
        Step::RefLinkedList< IfcWall > m_refIfcWallList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcWallStandardCase_Map;
        Step::RefLinkedList< IfcWallStandardCase > m_refIfcWallStandardCaseList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcWallType_Map;
        Step::RefLinkedList< IfcWallType > m_refIfcWallTypeList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcWasteTerminalType_Map;
        Step::RefLinkedList< IfcWasteTerminalType > m_refIfcWasteTerminalTypeList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcWaterProperties_Map;
        Step::RefLinkedList< IfcWaterProperties > m_refIfcWaterPropertiesList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcWindow_Map;
        Step::RefLinkedList< IfcWindow > m_refIfcWindowList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcWindowLiningProperties_Map;
        Step::RefLinkedList< IfcWindowLiningProperties > m_refIfcWindowLiningPropertiesList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcWindowPanelProperties_Map;
        Step::RefLinkedList< IfcWindowPanelProperties > m_refIfcWindowPanelPropertiesList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcWindowStyle_Map;
        Step::RefLinkedList< IfcWindowStyle > m_refIfcWindowStyleList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcWorkControl_Map;
        Step::RefLinkedList< IfcWorkControl > m_refIfcWorkControlList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcWorkPlan_Map;
        Step::RefLinkedList< IfcWorkPlan > m_refIfcWorkPlanList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcWorkSchedule_Map;
        Step::RefLinkedList< IfcWorkSchedule > m_refIfcWorkScheduleList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcZone_Map;
        Step::RefLinkedList< IfcZone > m_refIfcZoneList;

        std::map<Step::Id, Step::BaseObjectPtr > m_IfcZShapeProfileDef_Map;
        Step::RefLinkedList< IfcZShapeProfileDef > m_refIfcZShapeProfileDefList;

        static Step::BaseEntity *allocateIfc2DCompositeCurve(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static Ifc2DCompositeCurve *cloneIfc2DCompositeCurve(ExpressDataSet *expressDataSet, const Ifc2DCompositeCurve &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcActionRequest(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcActionRequest *cloneIfcActionRequest(ExpressDataSet *expressDataSet, const IfcActionRequest &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcActor(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcActor *cloneIfcActor(ExpressDataSet *expressDataSet, const IfcActor &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcActorRole(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcActorRole *cloneIfcActorRole(ExpressDataSet *expressDataSet, const IfcActorRole &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcActuatorType(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcActuatorType *cloneIfcActuatorType(ExpressDataSet *expressDataSet, const IfcActuatorType &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcAddress(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcAddress *cloneIfcAddress(ExpressDataSet *expressDataSet, const IfcAddress &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcAirTerminalBoxType(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcAirTerminalBoxType *cloneIfcAirTerminalBoxType(ExpressDataSet *expressDataSet, const IfcAirTerminalBoxType &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcAirTerminalType(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcAirTerminalType *cloneIfcAirTerminalType(ExpressDataSet *expressDataSet, const IfcAirTerminalType &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcAirToAirHeatRecoveryType(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcAirToAirHeatRecoveryType *cloneIfcAirToAirHeatRecoveryType(ExpressDataSet *expressDataSet, const IfcAirToAirHeatRecoveryType &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcAlarmType(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcAlarmType *cloneIfcAlarmType(ExpressDataSet *expressDataSet, const IfcAlarmType &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcAngularDimension(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcAngularDimension *cloneIfcAngularDimension(ExpressDataSet *expressDataSet, const IfcAngularDimension &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcAnnotation(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcAnnotation *cloneIfcAnnotation(ExpressDataSet *expressDataSet, const IfcAnnotation &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcAnnotationCurveOccurrence(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcAnnotationCurveOccurrence *cloneIfcAnnotationCurveOccurrence(ExpressDataSet *expressDataSet, const IfcAnnotationCurveOccurrence &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcAnnotationFillArea(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcAnnotationFillArea *cloneIfcAnnotationFillArea(ExpressDataSet *expressDataSet, const IfcAnnotationFillArea &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcAnnotationFillAreaOccurrence(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcAnnotationFillAreaOccurrence *cloneIfcAnnotationFillAreaOccurrence(ExpressDataSet *expressDataSet, const IfcAnnotationFillAreaOccurrence &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcAnnotationOccurrence(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcAnnotationOccurrence *cloneIfcAnnotationOccurrence(ExpressDataSet *expressDataSet, const IfcAnnotationOccurrence &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcAnnotationSurface(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcAnnotationSurface *cloneIfcAnnotationSurface(ExpressDataSet *expressDataSet, const IfcAnnotationSurface &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcAnnotationSurfaceOccurrence(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcAnnotationSurfaceOccurrence *cloneIfcAnnotationSurfaceOccurrence(ExpressDataSet *expressDataSet, const IfcAnnotationSurfaceOccurrence &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcAnnotationSymbolOccurrence(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcAnnotationSymbolOccurrence *cloneIfcAnnotationSymbolOccurrence(ExpressDataSet *expressDataSet, const IfcAnnotationSymbolOccurrence &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcAnnotationTextOccurrence(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcAnnotationTextOccurrence *cloneIfcAnnotationTextOccurrence(ExpressDataSet *expressDataSet, const IfcAnnotationTextOccurrence &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcApplication(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcApplication *cloneIfcApplication(ExpressDataSet *expressDataSet, const IfcApplication &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcAppliedValue(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcAppliedValue *cloneIfcAppliedValue(ExpressDataSet *expressDataSet, const IfcAppliedValue &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcAppliedValueRelationship(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcAppliedValueRelationship *cloneIfcAppliedValueRelationship(ExpressDataSet *expressDataSet, const IfcAppliedValueRelationship &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcApproval(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcApproval *cloneIfcApproval(ExpressDataSet *expressDataSet, const IfcApproval &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcApprovalActorRelationship(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcApprovalActorRelationship *cloneIfcApprovalActorRelationship(ExpressDataSet *expressDataSet, const IfcApprovalActorRelationship &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcApprovalPropertyRelationship(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcApprovalPropertyRelationship *cloneIfcApprovalPropertyRelationship(ExpressDataSet *expressDataSet, const IfcApprovalPropertyRelationship &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcApprovalRelationship(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcApprovalRelationship *cloneIfcApprovalRelationship(ExpressDataSet *expressDataSet, const IfcApprovalRelationship &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcArbitraryClosedProfileDef(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcArbitraryClosedProfileDef *cloneIfcArbitraryClosedProfileDef(ExpressDataSet *expressDataSet, const IfcArbitraryClosedProfileDef &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcArbitraryOpenProfileDef(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcArbitraryOpenProfileDef *cloneIfcArbitraryOpenProfileDef(ExpressDataSet *expressDataSet, const IfcArbitraryOpenProfileDef &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcArbitraryProfileDefWithVoids(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcArbitraryProfileDefWithVoids *cloneIfcArbitraryProfileDefWithVoids(ExpressDataSet *expressDataSet, const IfcArbitraryProfileDefWithVoids &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcAsset(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcAsset *cloneIfcAsset(ExpressDataSet *expressDataSet, const IfcAsset &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcAsymmetricIShapeProfileDef(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcAsymmetricIShapeProfileDef *cloneIfcAsymmetricIShapeProfileDef(ExpressDataSet *expressDataSet, const IfcAsymmetricIShapeProfileDef &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcAxis1Placement(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcAxis1Placement *cloneIfcAxis1Placement(ExpressDataSet *expressDataSet, const IfcAxis1Placement &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcAxis2Placement2D(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcAxis2Placement2D *cloneIfcAxis2Placement2D(ExpressDataSet *expressDataSet, const IfcAxis2Placement2D &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcAxis2Placement3D(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcAxis2Placement3D *cloneIfcAxis2Placement3D(ExpressDataSet *expressDataSet, const IfcAxis2Placement3D &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcBeam(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcBeam *cloneIfcBeam(ExpressDataSet *expressDataSet, const IfcBeam &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcBeamType(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcBeamType *cloneIfcBeamType(ExpressDataSet *expressDataSet, const IfcBeamType &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcBezierCurve(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcBezierCurve *cloneIfcBezierCurve(ExpressDataSet *expressDataSet, const IfcBezierCurve &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcBlobTexture(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcBlobTexture *cloneIfcBlobTexture(ExpressDataSet *expressDataSet, const IfcBlobTexture &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcBlock(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcBlock *cloneIfcBlock(ExpressDataSet *expressDataSet, const IfcBlock &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcBoilerType(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcBoilerType *cloneIfcBoilerType(ExpressDataSet *expressDataSet, const IfcBoilerType &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcBooleanClippingResult(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcBooleanClippingResult *cloneIfcBooleanClippingResult(ExpressDataSet *expressDataSet, const IfcBooleanClippingResult &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcBooleanResult(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcBooleanResult *cloneIfcBooleanResult(ExpressDataSet *expressDataSet, const IfcBooleanResult &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcBoundaryCondition(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcBoundaryCondition *cloneIfcBoundaryCondition(ExpressDataSet *expressDataSet, const IfcBoundaryCondition &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcBoundaryEdgeCondition(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcBoundaryEdgeCondition *cloneIfcBoundaryEdgeCondition(ExpressDataSet *expressDataSet, const IfcBoundaryEdgeCondition &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcBoundaryFaceCondition(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcBoundaryFaceCondition *cloneIfcBoundaryFaceCondition(ExpressDataSet *expressDataSet, const IfcBoundaryFaceCondition &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcBoundaryNodeCondition(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcBoundaryNodeCondition *cloneIfcBoundaryNodeCondition(ExpressDataSet *expressDataSet, const IfcBoundaryNodeCondition &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcBoundaryNodeConditionWarping(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcBoundaryNodeConditionWarping *cloneIfcBoundaryNodeConditionWarping(ExpressDataSet *expressDataSet, const IfcBoundaryNodeConditionWarping &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcBoundedCurve(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcBoundedCurve *cloneIfcBoundedCurve(ExpressDataSet *expressDataSet, const IfcBoundedCurve &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcBoundedSurface(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcBoundedSurface *cloneIfcBoundedSurface(ExpressDataSet *expressDataSet, const IfcBoundedSurface &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcBoundingBox(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcBoundingBox *cloneIfcBoundingBox(ExpressDataSet *expressDataSet, const IfcBoundingBox &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcBoxedHalfSpace(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcBoxedHalfSpace *cloneIfcBoxedHalfSpace(ExpressDataSet *expressDataSet, const IfcBoxedHalfSpace &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcBSplineCurve(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcBSplineCurve *cloneIfcBSplineCurve(ExpressDataSet *expressDataSet, const IfcBSplineCurve &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcBuilding(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcBuilding *cloneIfcBuilding(ExpressDataSet *expressDataSet, const IfcBuilding &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcBuildingElement(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcBuildingElement *cloneIfcBuildingElement(ExpressDataSet *expressDataSet, const IfcBuildingElement &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcBuildingElementComponent(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcBuildingElementComponent *cloneIfcBuildingElementComponent(ExpressDataSet *expressDataSet, const IfcBuildingElementComponent &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcBuildingElementPart(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcBuildingElementPart *cloneIfcBuildingElementPart(ExpressDataSet *expressDataSet, const IfcBuildingElementPart &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcBuildingElementProxy(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcBuildingElementProxy *cloneIfcBuildingElementProxy(ExpressDataSet *expressDataSet, const IfcBuildingElementProxy &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcBuildingElementProxyType(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcBuildingElementProxyType *cloneIfcBuildingElementProxyType(ExpressDataSet *expressDataSet, const IfcBuildingElementProxyType &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcBuildingElementType(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcBuildingElementType *cloneIfcBuildingElementType(ExpressDataSet *expressDataSet, const IfcBuildingElementType &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcBuildingStorey(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcBuildingStorey *cloneIfcBuildingStorey(ExpressDataSet *expressDataSet, const IfcBuildingStorey &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcCableCarrierFittingType(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcCableCarrierFittingType *cloneIfcCableCarrierFittingType(ExpressDataSet *expressDataSet, const IfcCableCarrierFittingType &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcCableCarrierSegmentType(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcCableCarrierSegmentType *cloneIfcCableCarrierSegmentType(ExpressDataSet *expressDataSet, const IfcCableCarrierSegmentType &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcCableSegmentType(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcCableSegmentType *cloneIfcCableSegmentType(ExpressDataSet *expressDataSet, const IfcCableSegmentType &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcCalendarDate(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcCalendarDate *cloneIfcCalendarDate(ExpressDataSet *expressDataSet, const IfcCalendarDate &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcCartesianPoint(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcCartesianPoint *cloneIfcCartesianPoint(ExpressDataSet *expressDataSet, const IfcCartesianPoint &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcCartesianTransformationOperator(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcCartesianTransformationOperator *cloneIfcCartesianTransformationOperator(ExpressDataSet *expressDataSet, const IfcCartesianTransformationOperator &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcCartesianTransformationOperator2D(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcCartesianTransformationOperator2D *cloneIfcCartesianTransformationOperator2D(ExpressDataSet *expressDataSet, const IfcCartesianTransformationOperator2D &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcCartesianTransformationOperator2DnonUniform(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcCartesianTransformationOperator2DnonUniform *cloneIfcCartesianTransformationOperator2DnonUniform(ExpressDataSet *expressDataSet, const IfcCartesianTransformationOperator2DnonUniform &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcCartesianTransformationOperator3D(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcCartesianTransformationOperator3D *cloneIfcCartesianTransformationOperator3D(ExpressDataSet *expressDataSet, const IfcCartesianTransformationOperator3D &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcCartesianTransformationOperator3DnonUniform(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcCartesianTransformationOperator3DnonUniform *cloneIfcCartesianTransformationOperator3DnonUniform(ExpressDataSet *expressDataSet, const IfcCartesianTransformationOperator3DnonUniform &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcCenterLineProfileDef(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcCenterLineProfileDef *cloneIfcCenterLineProfileDef(ExpressDataSet *expressDataSet, const IfcCenterLineProfileDef &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcChamferEdgeFeature(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcChamferEdgeFeature *cloneIfcChamferEdgeFeature(ExpressDataSet *expressDataSet, const IfcChamferEdgeFeature &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcChillerType(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcChillerType *cloneIfcChillerType(ExpressDataSet *expressDataSet, const IfcChillerType &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcCircle(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcCircle *cloneIfcCircle(ExpressDataSet *expressDataSet, const IfcCircle &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcCircleHollowProfileDef(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcCircleHollowProfileDef *cloneIfcCircleHollowProfileDef(ExpressDataSet *expressDataSet, const IfcCircleHollowProfileDef &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcCircleProfileDef(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcCircleProfileDef *cloneIfcCircleProfileDef(ExpressDataSet *expressDataSet, const IfcCircleProfileDef &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcClassification(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcClassification *cloneIfcClassification(ExpressDataSet *expressDataSet, const IfcClassification &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcClassificationItem(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcClassificationItem *cloneIfcClassificationItem(ExpressDataSet *expressDataSet, const IfcClassificationItem &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcClassificationItemRelationship(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcClassificationItemRelationship *cloneIfcClassificationItemRelationship(ExpressDataSet *expressDataSet, const IfcClassificationItemRelationship &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcClassificationNotation(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcClassificationNotation *cloneIfcClassificationNotation(ExpressDataSet *expressDataSet, const IfcClassificationNotation &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcClassificationNotationFacet(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcClassificationNotationFacet *cloneIfcClassificationNotationFacet(ExpressDataSet *expressDataSet, const IfcClassificationNotationFacet &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcClassificationReference(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcClassificationReference *cloneIfcClassificationReference(ExpressDataSet *expressDataSet, const IfcClassificationReference &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcClosedShell(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcClosedShell *cloneIfcClosedShell(ExpressDataSet *expressDataSet, const IfcClosedShell &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcCoilType(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcCoilType *cloneIfcCoilType(ExpressDataSet *expressDataSet, const IfcCoilType &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcColourRgb(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcColourRgb *cloneIfcColourRgb(ExpressDataSet *expressDataSet, const IfcColourRgb &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcColourSpecification(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcColourSpecification *cloneIfcColourSpecification(ExpressDataSet *expressDataSet, const IfcColourSpecification &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcColumn(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcColumn *cloneIfcColumn(ExpressDataSet *expressDataSet, const IfcColumn &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcColumnType(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcColumnType *cloneIfcColumnType(ExpressDataSet *expressDataSet, const IfcColumnType &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcComplexProperty(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcComplexProperty *cloneIfcComplexProperty(ExpressDataSet *expressDataSet, const IfcComplexProperty &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcCompositeCurve(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcCompositeCurve *cloneIfcCompositeCurve(ExpressDataSet *expressDataSet, const IfcCompositeCurve &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcCompositeCurveSegment(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcCompositeCurveSegment *cloneIfcCompositeCurveSegment(ExpressDataSet *expressDataSet, const IfcCompositeCurveSegment &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcCompositeProfileDef(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcCompositeProfileDef *cloneIfcCompositeProfileDef(ExpressDataSet *expressDataSet, const IfcCompositeProfileDef &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcCompressorType(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcCompressorType *cloneIfcCompressorType(ExpressDataSet *expressDataSet, const IfcCompressorType &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcCondenserType(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcCondenserType *cloneIfcCondenserType(ExpressDataSet *expressDataSet, const IfcCondenserType &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcCondition(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcCondition *cloneIfcCondition(ExpressDataSet *expressDataSet, const IfcCondition &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcConditionCriterion(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcConditionCriterion *cloneIfcConditionCriterion(ExpressDataSet *expressDataSet, const IfcConditionCriterion &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcConic(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcConic *cloneIfcConic(ExpressDataSet *expressDataSet, const IfcConic &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcConnectedFaceSet(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcConnectedFaceSet *cloneIfcConnectedFaceSet(ExpressDataSet *expressDataSet, const IfcConnectedFaceSet &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcConnectionCurveGeometry(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcConnectionCurveGeometry *cloneIfcConnectionCurveGeometry(ExpressDataSet *expressDataSet, const IfcConnectionCurveGeometry &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcConnectionGeometry(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcConnectionGeometry *cloneIfcConnectionGeometry(ExpressDataSet *expressDataSet, const IfcConnectionGeometry &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcConnectionPointEccentricity(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcConnectionPointEccentricity *cloneIfcConnectionPointEccentricity(ExpressDataSet *expressDataSet, const IfcConnectionPointEccentricity &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcConnectionPointGeometry(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcConnectionPointGeometry *cloneIfcConnectionPointGeometry(ExpressDataSet *expressDataSet, const IfcConnectionPointGeometry &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcConnectionPortGeometry(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcConnectionPortGeometry *cloneIfcConnectionPortGeometry(ExpressDataSet *expressDataSet, const IfcConnectionPortGeometry &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcConnectionSurfaceGeometry(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcConnectionSurfaceGeometry *cloneIfcConnectionSurfaceGeometry(ExpressDataSet *expressDataSet, const IfcConnectionSurfaceGeometry &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcConstraint(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcConstraint *cloneIfcConstraint(ExpressDataSet *expressDataSet, const IfcConstraint &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcConstraintAggregationRelationship(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcConstraintAggregationRelationship *cloneIfcConstraintAggregationRelationship(ExpressDataSet *expressDataSet, const IfcConstraintAggregationRelationship &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcConstraintClassificationRelationship(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcConstraintClassificationRelationship *cloneIfcConstraintClassificationRelationship(ExpressDataSet *expressDataSet, const IfcConstraintClassificationRelationship &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcConstraintRelationship(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcConstraintRelationship *cloneIfcConstraintRelationship(ExpressDataSet *expressDataSet, const IfcConstraintRelationship &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcConstructionEquipmentResource(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcConstructionEquipmentResource *cloneIfcConstructionEquipmentResource(ExpressDataSet *expressDataSet, const IfcConstructionEquipmentResource &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcConstructionMaterialResource(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcConstructionMaterialResource *cloneIfcConstructionMaterialResource(ExpressDataSet *expressDataSet, const IfcConstructionMaterialResource &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcConstructionProductResource(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcConstructionProductResource *cloneIfcConstructionProductResource(ExpressDataSet *expressDataSet, const IfcConstructionProductResource &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcConstructionResource(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcConstructionResource *cloneIfcConstructionResource(ExpressDataSet *expressDataSet, const IfcConstructionResource &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcContextDependentUnit(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcContextDependentUnit *cloneIfcContextDependentUnit(ExpressDataSet *expressDataSet, const IfcContextDependentUnit &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcControl(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcControl *cloneIfcControl(ExpressDataSet *expressDataSet, const IfcControl &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcControllerType(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcControllerType *cloneIfcControllerType(ExpressDataSet *expressDataSet, const IfcControllerType &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcConversionBasedUnit(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcConversionBasedUnit *cloneIfcConversionBasedUnit(ExpressDataSet *expressDataSet, const IfcConversionBasedUnit &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcCooledBeamType(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcCooledBeamType *cloneIfcCooledBeamType(ExpressDataSet *expressDataSet, const IfcCooledBeamType &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcCoolingTowerType(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcCoolingTowerType *cloneIfcCoolingTowerType(ExpressDataSet *expressDataSet, const IfcCoolingTowerType &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcCoordinatedUniversalTimeOffset(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcCoordinatedUniversalTimeOffset *cloneIfcCoordinatedUniversalTimeOffset(ExpressDataSet *expressDataSet, const IfcCoordinatedUniversalTimeOffset &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcCostItem(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcCostItem *cloneIfcCostItem(ExpressDataSet *expressDataSet, const IfcCostItem &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcCostSchedule(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcCostSchedule *cloneIfcCostSchedule(ExpressDataSet *expressDataSet, const IfcCostSchedule &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcCostValue(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcCostValue *cloneIfcCostValue(ExpressDataSet *expressDataSet, const IfcCostValue &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcCovering(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcCovering *cloneIfcCovering(ExpressDataSet *expressDataSet, const IfcCovering &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcCoveringType(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcCoveringType *cloneIfcCoveringType(ExpressDataSet *expressDataSet, const IfcCoveringType &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcCraneRailAShapeProfileDef(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcCraneRailAShapeProfileDef *cloneIfcCraneRailAShapeProfileDef(ExpressDataSet *expressDataSet, const IfcCraneRailAShapeProfileDef &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcCraneRailFShapeProfileDef(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcCraneRailFShapeProfileDef *cloneIfcCraneRailFShapeProfileDef(ExpressDataSet *expressDataSet, const IfcCraneRailFShapeProfileDef &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcCrewResource(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcCrewResource *cloneIfcCrewResource(ExpressDataSet *expressDataSet, const IfcCrewResource &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcCsgPrimitive3D(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcCsgPrimitive3D *cloneIfcCsgPrimitive3D(ExpressDataSet *expressDataSet, const IfcCsgPrimitive3D &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcCsgSolid(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcCsgSolid *cloneIfcCsgSolid(ExpressDataSet *expressDataSet, const IfcCsgSolid &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcCShapeProfileDef(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcCShapeProfileDef *cloneIfcCShapeProfileDef(ExpressDataSet *expressDataSet, const IfcCShapeProfileDef &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcCurrencyRelationship(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcCurrencyRelationship *cloneIfcCurrencyRelationship(ExpressDataSet *expressDataSet, const IfcCurrencyRelationship &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcCurtainWall(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcCurtainWall *cloneIfcCurtainWall(ExpressDataSet *expressDataSet, const IfcCurtainWall &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcCurtainWallType(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcCurtainWallType *cloneIfcCurtainWallType(ExpressDataSet *expressDataSet, const IfcCurtainWallType &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcCurve(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcCurve *cloneIfcCurve(ExpressDataSet *expressDataSet, const IfcCurve &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcCurveBoundedPlane(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcCurveBoundedPlane *cloneIfcCurveBoundedPlane(ExpressDataSet *expressDataSet, const IfcCurveBoundedPlane &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcCurveStyle(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcCurveStyle *cloneIfcCurveStyle(ExpressDataSet *expressDataSet, const IfcCurveStyle &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcCurveStyleFont(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcCurveStyleFont *cloneIfcCurveStyleFont(ExpressDataSet *expressDataSet, const IfcCurveStyleFont &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcCurveStyleFontAndScaling(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcCurveStyleFontAndScaling *cloneIfcCurveStyleFontAndScaling(ExpressDataSet *expressDataSet, const IfcCurveStyleFontAndScaling &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcCurveStyleFontPattern(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcCurveStyleFontPattern *cloneIfcCurveStyleFontPattern(ExpressDataSet *expressDataSet, const IfcCurveStyleFontPattern &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcDamperType(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcDamperType *cloneIfcDamperType(ExpressDataSet *expressDataSet, const IfcDamperType &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcDateAndTime(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcDateAndTime *cloneIfcDateAndTime(ExpressDataSet *expressDataSet, const IfcDateAndTime &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcDefinedSymbol(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcDefinedSymbol *cloneIfcDefinedSymbol(ExpressDataSet *expressDataSet, const IfcDefinedSymbol &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcDerivedProfileDef(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcDerivedProfileDef *cloneIfcDerivedProfileDef(ExpressDataSet *expressDataSet, const IfcDerivedProfileDef &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcDerivedUnit(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcDerivedUnit *cloneIfcDerivedUnit(ExpressDataSet *expressDataSet, const IfcDerivedUnit &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcDerivedUnitElement(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcDerivedUnitElement *cloneIfcDerivedUnitElement(ExpressDataSet *expressDataSet, const IfcDerivedUnitElement &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcDiameterDimension(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcDiameterDimension *cloneIfcDiameterDimension(ExpressDataSet *expressDataSet, const IfcDiameterDimension &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcDimensionalExponents(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcDimensionalExponents *cloneIfcDimensionalExponents(ExpressDataSet *expressDataSet, const IfcDimensionalExponents &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcDimensionCalloutRelationship(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcDimensionCalloutRelationship *cloneIfcDimensionCalloutRelationship(ExpressDataSet *expressDataSet, const IfcDimensionCalloutRelationship &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcDimensionCurve(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcDimensionCurve *cloneIfcDimensionCurve(ExpressDataSet *expressDataSet, const IfcDimensionCurve &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcDimensionCurveDirectedCallout(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcDimensionCurveDirectedCallout *cloneIfcDimensionCurveDirectedCallout(ExpressDataSet *expressDataSet, const IfcDimensionCurveDirectedCallout &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcDimensionCurveTerminator(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcDimensionCurveTerminator *cloneIfcDimensionCurveTerminator(ExpressDataSet *expressDataSet, const IfcDimensionCurveTerminator &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcDimensionPair(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcDimensionPair *cloneIfcDimensionPair(ExpressDataSet *expressDataSet, const IfcDimensionPair &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcDirection(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcDirection *cloneIfcDirection(ExpressDataSet *expressDataSet, const IfcDirection &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcDiscreteAccessory(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcDiscreteAccessory *cloneIfcDiscreteAccessory(ExpressDataSet *expressDataSet, const IfcDiscreteAccessory &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcDiscreteAccessoryType(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcDiscreteAccessoryType *cloneIfcDiscreteAccessoryType(ExpressDataSet *expressDataSet, const IfcDiscreteAccessoryType &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcDistributionChamberElement(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcDistributionChamberElement *cloneIfcDistributionChamberElement(ExpressDataSet *expressDataSet, const IfcDistributionChamberElement &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcDistributionChamberElementType(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcDistributionChamberElementType *cloneIfcDistributionChamberElementType(ExpressDataSet *expressDataSet, const IfcDistributionChamberElementType &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcDistributionControlElement(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcDistributionControlElement *cloneIfcDistributionControlElement(ExpressDataSet *expressDataSet, const IfcDistributionControlElement &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcDistributionControlElementType(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcDistributionControlElementType *cloneIfcDistributionControlElementType(ExpressDataSet *expressDataSet, const IfcDistributionControlElementType &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcDistributionElement(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcDistributionElement *cloneIfcDistributionElement(ExpressDataSet *expressDataSet, const IfcDistributionElement &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcDistributionElementType(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcDistributionElementType *cloneIfcDistributionElementType(ExpressDataSet *expressDataSet, const IfcDistributionElementType &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcDistributionFlowElement(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcDistributionFlowElement *cloneIfcDistributionFlowElement(ExpressDataSet *expressDataSet, const IfcDistributionFlowElement &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcDistributionFlowElementType(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcDistributionFlowElementType *cloneIfcDistributionFlowElementType(ExpressDataSet *expressDataSet, const IfcDistributionFlowElementType &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcDistributionPort(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcDistributionPort *cloneIfcDistributionPort(ExpressDataSet *expressDataSet, const IfcDistributionPort &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcDocumentElectronicFormat(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcDocumentElectronicFormat *cloneIfcDocumentElectronicFormat(ExpressDataSet *expressDataSet, const IfcDocumentElectronicFormat &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcDocumentInformation(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcDocumentInformation *cloneIfcDocumentInformation(ExpressDataSet *expressDataSet, const IfcDocumentInformation &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcDocumentInformationRelationship(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcDocumentInformationRelationship *cloneIfcDocumentInformationRelationship(ExpressDataSet *expressDataSet, const IfcDocumentInformationRelationship &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcDocumentReference(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcDocumentReference *cloneIfcDocumentReference(ExpressDataSet *expressDataSet, const IfcDocumentReference &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcDoor(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcDoor *cloneIfcDoor(ExpressDataSet *expressDataSet, const IfcDoor &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcDoorLiningProperties(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcDoorLiningProperties *cloneIfcDoorLiningProperties(ExpressDataSet *expressDataSet, const IfcDoorLiningProperties &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcDoorPanelProperties(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcDoorPanelProperties *cloneIfcDoorPanelProperties(ExpressDataSet *expressDataSet, const IfcDoorPanelProperties &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcDoorStyle(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcDoorStyle *cloneIfcDoorStyle(ExpressDataSet *expressDataSet, const IfcDoorStyle &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcDraughtingCallout(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcDraughtingCallout *cloneIfcDraughtingCallout(ExpressDataSet *expressDataSet, const IfcDraughtingCallout &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcDraughtingCalloutRelationship(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcDraughtingCalloutRelationship *cloneIfcDraughtingCalloutRelationship(ExpressDataSet *expressDataSet, const IfcDraughtingCalloutRelationship &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcDraughtingPreDefinedColour(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcDraughtingPreDefinedColour *cloneIfcDraughtingPreDefinedColour(ExpressDataSet *expressDataSet, const IfcDraughtingPreDefinedColour &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcDraughtingPreDefinedCurveFont(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcDraughtingPreDefinedCurveFont *cloneIfcDraughtingPreDefinedCurveFont(ExpressDataSet *expressDataSet, const IfcDraughtingPreDefinedCurveFont &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcDraughtingPreDefinedTextFont(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcDraughtingPreDefinedTextFont *cloneIfcDraughtingPreDefinedTextFont(ExpressDataSet *expressDataSet, const IfcDraughtingPreDefinedTextFont &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcDuctFittingType(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcDuctFittingType *cloneIfcDuctFittingType(ExpressDataSet *expressDataSet, const IfcDuctFittingType &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcDuctSegmentType(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcDuctSegmentType *cloneIfcDuctSegmentType(ExpressDataSet *expressDataSet, const IfcDuctSegmentType &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcDuctSilencerType(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcDuctSilencerType *cloneIfcDuctSilencerType(ExpressDataSet *expressDataSet, const IfcDuctSilencerType &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcEdge(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcEdge *cloneIfcEdge(ExpressDataSet *expressDataSet, const IfcEdge &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcEdgeCurve(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcEdgeCurve *cloneIfcEdgeCurve(ExpressDataSet *expressDataSet, const IfcEdgeCurve &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcEdgeFeature(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcEdgeFeature *cloneIfcEdgeFeature(ExpressDataSet *expressDataSet, const IfcEdgeFeature &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcEdgeLoop(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcEdgeLoop *cloneIfcEdgeLoop(ExpressDataSet *expressDataSet, const IfcEdgeLoop &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcElectricalBaseProperties(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcElectricalBaseProperties *cloneIfcElectricalBaseProperties(ExpressDataSet *expressDataSet, const IfcElectricalBaseProperties &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcElectricalCircuit(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcElectricalCircuit *cloneIfcElectricalCircuit(ExpressDataSet *expressDataSet, const IfcElectricalCircuit &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcElectricalElement(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcElectricalElement *cloneIfcElectricalElement(ExpressDataSet *expressDataSet, const IfcElectricalElement &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcElectricApplianceType(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcElectricApplianceType *cloneIfcElectricApplianceType(ExpressDataSet *expressDataSet, const IfcElectricApplianceType &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcElectricDistributionPoint(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcElectricDistributionPoint *cloneIfcElectricDistributionPoint(ExpressDataSet *expressDataSet, const IfcElectricDistributionPoint &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcElectricFlowStorageDeviceType(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcElectricFlowStorageDeviceType *cloneIfcElectricFlowStorageDeviceType(ExpressDataSet *expressDataSet, const IfcElectricFlowStorageDeviceType &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcElectricGeneratorType(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcElectricGeneratorType *cloneIfcElectricGeneratorType(ExpressDataSet *expressDataSet, const IfcElectricGeneratorType &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcElectricHeaterType(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcElectricHeaterType *cloneIfcElectricHeaterType(ExpressDataSet *expressDataSet, const IfcElectricHeaterType &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcElectricMotorType(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcElectricMotorType *cloneIfcElectricMotorType(ExpressDataSet *expressDataSet, const IfcElectricMotorType &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcElectricTimeControlType(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcElectricTimeControlType *cloneIfcElectricTimeControlType(ExpressDataSet *expressDataSet, const IfcElectricTimeControlType &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcElement(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcElement *cloneIfcElement(ExpressDataSet *expressDataSet, const IfcElement &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcElementarySurface(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcElementarySurface *cloneIfcElementarySurface(ExpressDataSet *expressDataSet, const IfcElementarySurface &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcElementAssembly(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcElementAssembly *cloneIfcElementAssembly(ExpressDataSet *expressDataSet, const IfcElementAssembly &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcElementComponent(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcElementComponent *cloneIfcElementComponent(ExpressDataSet *expressDataSet, const IfcElementComponent &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcElementComponentType(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcElementComponentType *cloneIfcElementComponentType(ExpressDataSet *expressDataSet, const IfcElementComponentType &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcElementQuantity(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcElementQuantity *cloneIfcElementQuantity(ExpressDataSet *expressDataSet, const IfcElementQuantity &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcElementType(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcElementType *cloneIfcElementType(ExpressDataSet *expressDataSet, const IfcElementType &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcEllipse(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcEllipse *cloneIfcEllipse(ExpressDataSet *expressDataSet, const IfcEllipse &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcEllipseProfileDef(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcEllipseProfileDef *cloneIfcEllipseProfileDef(ExpressDataSet *expressDataSet, const IfcEllipseProfileDef &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcEnergyConversionDevice(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcEnergyConversionDevice *cloneIfcEnergyConversionDevice(ExpressDataSet *expressDataSet, const IfcEnergyConversionDevice &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcEnergyConversionDeviceType(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcEnergyConversionDeviceType *cloneIfcEnergyConversionDeviceType(ExpressDataSet *expressDataSet, const IfcEnergyConversionDeviceType &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcEnergyProperties(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcEnergyProperties *cloneIfcEnergyProperties(ExpressDataSet *expressDataSet, const IfcEnergyProperties &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcEnvironmentalImpactValue(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcEnvironmentalImpactValue *cloneIfcEnvironmentalImpactValue(ExpressDataSet *expressDataSet, const IfcEnvironmentalImpactValue &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcEquipmentElement(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcEquipmentElement *cloneIfcEquipmentElement(ExpressDataSet *expressDataSet, const IfcEquipmentElement &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcEquipmentStandard(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcEquipmentStandard *cloneIfcEquipmentStandard(ExpressDataSet *expressDataSet, const IfcEquipmentStandard &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcEvaporativeCoolerType(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcEvaporativeCoolerType *cloneIfcEvaporativeCoolerType(ExpressDataSet *expressDataSet, const IfcEvaporativeCoolerType &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcEvaporatorType(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcEvaporatorType *cloneIfcEvaporatorType(ExpressDataSet *expressDataSet, const IfcEvaporatorType &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcExtendedMaterialProperties(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcExtendedMaterialProperties *cloneIfcExtendedMaterialProperties(ExpressDataSet *expressDataSet, const IfcExtendedMaterialProperties &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcExternallyDefinedHatchStyle(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcExternallyDefinedHatchStyle *cloneIfcExternallyDefinedHatchStyle(ExpressDataSet *expressDataSet, const IfcExternallyDefinedHatchStyle &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcExternallyDefinedSurfaceStyle(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcExternallyDefinedSurfaceStyle *cloneIfcExternallyDefinedSurfaceStyle(ExpressDataSet *expressDataSet, const IfcExternallyDefinedSurfaceStyle &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcExternallyDefinedSymbol(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcExternallyDefinedSymbol *cloneIfcExternallyDefinedSymbol(ExpressDataSet *expressDataSet, const IfcExternallyDefinedSymbol &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcExternallyDefinedTextFont(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcExternallyDefinedTextFont *cloneIfcExternallyDefinedTextFont(ExpressDataSet *expressDataSet, const IfcExternallyDefinedTextFont &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcExternalReference(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcExternalReference *cloneIfcExternalReference(ExpressDataSet *expressDataSet, const IfcExternalReference &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcExtrudedAreaSolid(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcExtrudedAreaSolid *cloneIfcExtrudedAreaSolid(ExpressDataSet *expressDataSet, const IfcExtrudedAreaSolid &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcFace(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcFace *cloneIfcFace(ExpressDataSet *expressDataSet, const IfcFace &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcFaceBasedSurfaceModel(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcFaceBasedSurfaceModel *cloneIfcFaceBasedSurfaceModel(ExpressDataSet *expressDataSet, const IfcFaceBasedSurfaceModel &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcFaceBound(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcFaceBound *cloneIfcFaceBound(ExpressDataSet *expressDataSet, const IfcFaceBound &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcFaceOuterBound(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcFaceOuterBound *cloneIfcFaceOuterBound(ExpressDataSet *expressDataSet, const IfcFaceOuterBound &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcFaceSurface(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcFaceSurface *cloneIfcFaceSurface(ExpressDataSet *expressDataSet, const IfcFaceSurface &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcFacetedBrep(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcFacetedBrep *cloneIfcFacetedBrep(ExpressDataSet *expressDataSet, const IfcFacetedBrep &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcFacetedBrepWithVoids(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcFacetedBrepWithVoids *cloneIfcFacetedBrepWithVoids(ExpressDataSet *expressDataSet, const IfcFacetedBrepWithVoids &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcFailureConnectionCondition(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcFailureConnectionCondition *cloneIfcFailureConnectionCondition(ExpressDataSet *expressDataSet, const IfcFailureConnectionCondition &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcFanType(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcFanType *cloneIfcFanType(ExpressDataSet *expressDataSet, const IfcFanType &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcFastener(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcFastener *cloneIfcFastener(ExpressDataSet *expressDataSet, const IfcFastener &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcFastenerType(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcFastenerType *cloneIfcFastenerType(ExpressDataSet *expressDataSet, const IfcFastenerType &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcFeatureElement(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcFeatureElement *cloneIfcFeatureElement(ExpressDataSet *expressDataSet, const IfcFeatureElement &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcFeatureElementAddition(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcFeatureElementAddition *cloneIfcFeatureElementAddition(ExpressDataSet *expressDataSet, const IfcFeatureElementAddition &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcFeatureElementSubtraction(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcFeatureElementSubtraction *cloneIfcFeatureElementSubtraction(ExpressDataSet *expressDataSet, const IfcFeatureElementSubtraction &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcFillAreaStyle(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcFillAreaStyle *cloneIfcFillAreaStyle(ExpressDataSet *expressDataSet, const IfcFillAreaStyle &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcFillAreaStyleHatching(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcFillAreaStyleHatching *cloneIfcFillAreaStyleHatching(ExpressDataSet *expressDataSet, const IfcFillAreaStyleHatching &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcFillAreaStyleTiles(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcFillAreaStyleTiles *cloneIfcFillAreaStyleTiles(ExpressDataSet *expressDataSet, const IfcFillAreaStyleTiles &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcFillAreaStyleTileSymbolWithStyle(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcFillAreaStyleTileSymbolWithStyle *cloneIfcFillAreaStyleTileSymbolWithStyle(ExpressDataSet *expressDataSet, const IfcFillAreaStyleTileSymbolWithStyle &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcFilterType(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcFilterType *cloneIfcFilterType(ExpressDataSet *expressDataSet, const IfcFilterType &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcFireSuppressionTerminalType(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcFireSuppressionTerminalType *cloneIfcFireSuppressionTerminalType(ExpressDataSet *expressDataSet, const IfcFireSuppressionTerminalType &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcFlowController(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcFlowController *cloneIfcFlowController(ExpressDataSet *expressDataSet, const IfcFlowController &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcFlowControllerType(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcFlowControllerType *cloneIfcFlowControllerType(ExpressDataSet *expressDataSet, const IfcFlowControllerType &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcFlowFitting(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcFlowFitting *cloneIfcFlowFitting(ExpressDataSet *expressDataSet, const IfcFlowFitting &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcFlowFittingType(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcFlowFittingType *cloneIfcFlowFittingType(ExpressDataSet *expressDataSet, const IfcFlowFittingType &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcFlowInstrumentType(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcFlowInstrumentType *cloneIfcFlowInstrumentType(ExpressDataSet *expressDataSet, const IfcFlowInstrumentType &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcFlowMeterType(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcFlowMeterType *cloneIfcFlowMeterType(ExpressDataSet *expressDataSet, const IfcFlowMeterType &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcFlowMovingDevice(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcFlowMovingDevice *cloneIfcFlowMovingDevice(ExpressDataSet *expressDataSet, const IfcFlowMovingDevice &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcFlowMovingDeviceType(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcFlowMovingDeviceType *cloneIfcFlowMovingDeviceType(ExpressDataSet *expressDataSet, const IfcFlowMovingDeviceType &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcFlowSegment(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcFlowSegment *cloneIfcFlowSegment(ExpressDataSet *expressDataSet, const IfcFlowSegment &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcFlowSegmentType(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcFlowSegmentType *cloneIfcFlowSegmentType(ExpressDataSet *expressDataSet, const IfcFlowSegmentType &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcFlowStorageDevice(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcFlowStorageDevice *cloneIfcFlowStorageDevice(ExpressDataSet *expressDataSet, const IfcFlowStorageDevice &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcFlowStorageDeviceType(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcFlowStorageDeviceType *cloneIfcFlowStorageDeviceType(ExpressDataSet *expressDataSet, const IfcFlowStorageDeviceType &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcFlowTerminal(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcFlowTerminal *cloneIfcFlowTerminal(ExpressDataSet *expressDataSet, const IfcFlowTerminal &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcFlowTerminalType(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcFlowTerminalType *cloneIfcFlowTerminalType(ExpressDataSet *expressDataSet, const IfcFlowTerminalType &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcFlowTreatmentDevice(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcFlowTreatmentDevice *cloneIfcFlowTreatmentDevice(ExpressDataSet *expressDataSet, const IfcFlowTreatmentDevice &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcFlowTreatmentDeviceType(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcFlowTreatmentDeviceType *cloneIfcFlowTreatmentDeviceType(ExpressDataSet *expressDataSet, const IfcFlowTreatmentDeviceType &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcFluidFlowProperties(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcFluidFlowProperties *cloneIfcFluidFlowProperties(ExpressDataSet *expressDataSet, const IfcFluidFlowProperties &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcFooting(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcFooting *cloneIfcFooting(ExpressDataSet *expressDataSet, const IfcFooting &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcFuelProperties(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcFuelProperties *cloneIfcFuelProperties(ExpressDataSet *expressDataSet, const IfcFuelProperties &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcFurnishingElement(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcFurnishingElement *cloneIfcFurnishingElement(ExpressDataSet *expressDataSet, const IfcFurnishingElement &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcFurnishingElementType(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcFurnishingElementType *cloneIfcFurnishingElementType(ExpressDataSet *expressDataSet, const IfcFurnishingElementType &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcFurnitureStandard(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcFurnitureStandard *cloneIfcFurnitureStandard(ExpressDataSet *expressDataSet, const IfcFurnitureStandard &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcFurnitureType(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcFurnitureType *cloneIfcFurnitureType(ExpressDataSet *expressDataSet, const IfcFurnitureType &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcGasTerminalType(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcGasTerminalType *cloneIfcGasTerminalType(ExpressDataSet *expressDataSet, const IfcGasTerminalType &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcGeneralMaterialProperties(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcGeneralMaterialProperties *cloneIfcGeneralMaterialProperties(ExpressDataSet *expressDataSet, const IfcGeneralMaterialProperties &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcGeneralProfileProperties(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcGeneralProfileProperties *cloneIfcGeneralProfileProperties(ExpressDataSet *expressDataSet, const IfcGeneralProfileProperties &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcGeometricCurveSet(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcGeometricCurveSet *cloneIfcGeometricCurveSet(ExpressDataSet *expressDataSet, const IfcGeometricCurveSet &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcGeometricRepresentationContext(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcGeometricRepresentationContext *cloneIfcGeometricRepresentationContext(ExpressDataSet *expressDataSet, const IfcGeometricRepresentationContext &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcGeometricRepresentationItem(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcGeometricRepresentationItem *cloneIfcGeometricRepresentationItem(ExpressDataSet *expressDataSet, const IfcGeometricRepresentationItem &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcGeometricRepresentationSubContext(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcGeometricRepresentationSubContext *cloneIfcGeometricRepresentationSubContext(ExpressDataSet *expressDataSet, const IfcGeometricRepresentationSubContext &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcGeometricSet(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcGeometricSet *cloneIfcGeometricSet(ExpressDataSet *expressDataSet, const IfcGeometricSet &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcGrid(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcGrid *cloneIfcGrid(ExpressDataSet *expressDataSet, const IfcGrid &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcGridAxis(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcGridAxis *cloneIfcGridAxis(ExpressDataSet *expressDataSet, const IfcGridAxis &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcGridPlacement(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcGridPlacement *cloneIfcGridPlacement(ExpressDataSet *expressDataSet, const IfcGridPlacement &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcGroup(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcGroup *cloneIfcGroup(ExpressDataSet *expressDataSet, const IfcGroup &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcHalfSpaceSolid(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcHalfSpaceSolid *cloneIfcHalfSpaceSolid(ExpressDataSet *expressDataSet, const IfcHalfSpaceSolid &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcHeatExchangerType(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcHeatExchangerType *cloneIfcHeatExchangerType(ExpressDataSet *expressDataSet, const IfcHeatExchangerType &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcHumidifierType(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcHumidifierType *cloneIfcHumidifierType(ExpressDataSet *expressDataSet, const IfcHumidifierType &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcHygroscopicMaterialProperties(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcHygroscopicMaterialProperties *cloneIfcHygroscopicMaterialProperties(ExpressDataSet *expressDataSet, const IfcHygroscopicMaterialProperties &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcImageTexture(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcImageTexture *cloneIfcImageTexture(ExpressDataSet *expressDataSet, const IfcImageTexture &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcInventory(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcInventory *cloneIfcInventory(ExpressDataSet *expressDataSet, const IfcInventory &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcIrregularTimeSeries(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcIrregularTimeSeries *cloneIfcIrregularTimeSeries(ExpressDataSet *expressDataSet, const IfcIrregularTimeSeries &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcIrregularTimeSeriesValue(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcIrregularTimeSeriesValue *cloneIfcIrregularTimeSeriesValue(ExpressDataSet *expressDataSet, const IfcIrregularTimeSeriesValue &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcIShapeProfileDef(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcIShapeProfileDef *cloneIfcIShapeProfileDef(ExpressDataSet *expressDataSet, const IfcIShapeProfileDef &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcJunctionBoxType(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcJunctionBoxType *cloneIfcJunctionBoxType(ExpressDataSet *expressDataSet, const IfcJunctionBoxType &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcLaborResource(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcLaborResource *cloneIfcLaborResource(ExpressDataSet *expressDataSet, const IfcLaborResource &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcLampType(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcLampType *cloneIfcLampType(ExpressDataSet *expressDataSet, const IfcLampType &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcLibraryInformation(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcLibraryInformation *cloneIfcLibraryInformation(ExpressDataSet *expressDataSet, const IfcLibraryInformation &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcLibraryReference(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcLibraryReference *cloneIfcLibraryReference(ExpressDataSet *expressDataSet, const IfcLibraryReference &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcLightDistributionData(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcLightDistributionData *cloneIfcLightDistributionData(ExpressDataSet *expressDataSet, const IfcLightDistributionData &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcLightFixtureType(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcLightFixtureType *cloneIfcLightFixtureType(ExpressDataSet *expressDataSet, const IfcLightFixtureType &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcLightIntensityDistribution(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcLightIntensityDistribution *cloneIfcLightIntensityDistribution(ExpressDataSet *expressDataSet, const IfcLightIntensityDistribution &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcLightSource(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcLightSource *cloneIfcLightSource(ExpressDataSet *expressDataSet, const IfcLightSource &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcLightSourceAmbient(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcLightSourceAmbient *cloneIfcLightSourceAmbient(ExpressDataSet *expressDataSet, const IfcLightSourceAmbient &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcLightSourceDirectional(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcLightSourceDirectional *cloneIfcLightSourceDirectional(ExpressDataSet *expressDataSet, const IfcLightSourceDirectional &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcLightSourceGoniometric(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcLightSourceGoniometric *cloneIfcLightSourceGoniometric(ExpressDataSet *expressDataSet, const IfcLightSourceGoniometric &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcLightSourcePositional(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcLightSourcePositional *cloneIfcLightSourcePositional(ExpressDataSet *expressDataSet, const IfcLightSourcePositional &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcLightSourceSpot(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcLightSourceSpot *cloneIfcLightSourceSpot(ExpressDataSet *expressDataSet, const IfcLightSourceSpot &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcLine(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcLine *cloneIfcLine(ExpressDataSet *expressDataSet, const IfcLine &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcLinearDimension(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcLinearDimension *cloneIfcLinearDimension(ExpressDataSet *expressDataSet, const IfcLinearDimension &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcLocalPlacement(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcLocalPlacement *cloneIfcLocalPlacement(ExpressDataSet *expressDataSet, const IfcLocalPlacement &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcLocalTime(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcLocalTime *cloneIfcLocalTime(ExpressDataSet *expressDataSet, const IfcLocalTime &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcLoop(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcLoop *cloneIfcLoop(ExpressDataSet *expressDataSet, const IfcLoop &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcLShapeProfileDef(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcLShapeProfileDef *cloneIfcLShapeProfileDef(ExpressDataSet *expressDataSet, const IfcLShapeProfileDef &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcManifoldSolidBrep(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcManifoldSolidBrep *cloneIfcManifoldSolidBrep(ExpressDataSet *expressDataSet, const IfcManifoldSolidBrep &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcMappedItem(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcMappedItem *cloneIfcMappedItem(ExpressDataSet *expressDataSet, const IfcMappedItem &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcMaterial(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcMaterial *cloneIfcMaterial(ExpressDataSet *expressDataSet, const IfcMaterial &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcMaterialClassificationRelationship(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcMaterialClassificationRelationship *cloneIfcMaterialClassificationRelationship(ExpressDataSet *expressDataSet, const IfcMaterialClassificationRelationship &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcMaterialDefinitionRepresentation(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcMaterialDefinitionRepresentation *cloneIfcMaterialDefinitionRepresentation(ExpressDataSet *expressDataSet, const IfcMaterialDefinitionRepresentation &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcMaterialLayer(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcMaterialLayer *cloneIfcMaterialLayer(ExpressDataSet *expressDataSet, const IfcMaterialLayer &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcMaterialLayerSet(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcMaterialLayerSet *cloneIfcMaterialLayerSet(ExpressDataSet *expressDataSet, const IfcMaterialLayerSet &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcMaterialLayerSetUsage(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcMaterialLayerSetUsage *cloneIfcMaterialLayerSetUsage(ExpressDataSet *expressDataSet, const IfcMaterialLayerSetUsage &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcMaterialList(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcMaterialList *cloneIfcMaterialList(ExpressDataSet *expressDataSet, const IfcMaterialList &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcMaterialProperties(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcMaterialProperties *cloneIfcMaterialProperties(ExpressDataSet *expressDataSet, const IfcMaterialProperties &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcMeasureWithUnit(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcMeasureWithUnit *cloneIfcMeasureWithUnit(ExpressDataSet *expressDataSet, const IfcMeasureWithUnit &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcMechanicalConcreteMaterialProperties(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcMechanicalConcreteMaterialProperties *cloneIfcMechanicalConcreteMaterialProperties(ExpressDataSet *expressDataSet, const IfcMechanicalConcreteMaterialProperties &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcMechanicalFastener(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcMechanicalFastener *cloneIfcMechanicalFastener(ExpressDataSet *expressDataSet, const IfcMechanicalFastener &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcMechanicalFastenerType(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcMechanicalFastenerType *cloneIfcMechanicalFastenerType(ExpressDataSet *expressDataSet, const IfcMechanicalFastenerType &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcMechanicalMaterialProperties(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcMechanicalMaterialProperties *cloneIfcMechanicalMaterialProperties(ExpressDataSet *expressDataSet, const IfcMechanicalMaterialProperties &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcMechanicalSteelMaterialProperties(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcMechanicalSteelMaterialProperties *cloneIfcMechanicalSteelMaterialProperties(ExpressDataSet *expressDataSet, const IfcMechanicalSteelMaterialProperties &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcMember(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcMember *cloneIfcMember(ExpressDataSet *expressDataSet, const IfcMember &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcMemberType(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcMemberType *cloneIfcMemberType(ExpressDataSet *expressDataSet, const IfcMemberType &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcMetric(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcMetric *cloneIfcMetric(ExpressDataSet *expressDataSet, const IfcMetric &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcMonetaryUnit(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcMonetaryUnit *cloneIfcMonetaryUnit(ExpressDataSet *expressDataSet, const IfcMonetaryUnit &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcMotorConnectionType(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcMotorConnectionType *cloneIfcMotorConnectionType(ExpressDataSet *expressDataSet, const IfcMotorConnectionType &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcMove(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcMove *cloneIfcMove(ExpressDataSet *expressDataSet, const IfcMove &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcNamedUnit(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcNamedUnit *cloneIfcNamedUnit(ExpressDataSet *expressDataSet, const IfcNamedUnit &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcObject(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcObject *cloneIfcObject(ExpressDataSet *expressDataSet, const IfcObject &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcObjectDefinition(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcObjectDefinition *cloneIfcObjectDefinition(ExpressDataSet *expressDataSet, const IfcObjectDefinition &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcObjective(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcObjective *cloneIfcObjective(ExpressDataSet *expressDataSet, const IfcObjective &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcObjectPlacement(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcObjectPlacement *cloneIfcObjectPlacement(ExpressDataSet *expressDataSet, const IfcObjectPlacement &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcOccupant(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcOccupant *cloneIfcOccupant(ExpressDataSet *expressDataSet, const IfcOccupant &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcOffsetCurve2D(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcOffsetCurve2D *cloneIfcOffsetCurve2D(ExpressDataSet *expressDataSet, const IfcOffsetCurve2D &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcOffsetCurve3D(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcOffsetCurve3D *cloneIfcOffsetCurve3D(ExpressDataSet *expressDataSet, const IfcOffsetCurve3D &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcOneDirectionRepeatFactor(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcOneDirectionRepeatFactor *cloneIfcOneDirectionRepeatFactor(ExpressDataSet *expressDataSet, const IfcOneDirectionRepeatFactor &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcOpeningElement(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcOpeningElement *cloneIfcOpeningElement(ExpressDataSet *expressDataSet, const IfcOpeningElement &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcOpenShell(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcOpenShell *cloneIfcOpenShell(ExpressDataSet *expressDataSet, const IfcOpenShell &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcOpticalMaterialProperties(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcOpticalMaterialProperties *cloneIfcOpticalMaterialProperties(ExpressDataSet *expressDataSet, const IfcOpticalMaterialProperties &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcOrderAction(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcOrderAction *cloneIfcOrderAction(ExpressDataSet *expressDataSet, const IfcOrderAction &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcOrganization(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcOrganization *cloneIfcOrganization(ExpressDataSet *expressDataSet, const IfcOrganization &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcOrganizationRelationship(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcOrganizationRelationship *cloneIfcOrganizationRelationship(ExpressDataSet *expressDataSet, const IfcOrganizationRelationship &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcOrientedEdge(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcOrientedEdge *cloneIfcOrientedEdge(ExpressDataSet *expressDataSet, const IfcOrientedEdge &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcOutletType(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcOutletType *cloneIfcOutletType(ExpressDataSet *expressDataSet, const IfcOutletType &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcOwnerHistory(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcOwnerHistory *cloneIfcOwnerHistory(ExpressDataSet *expressDataSet, const IfcOwnerHistory &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcParameterizedProfileDef(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcParameterizedProfileDef *cloneIfcParameterizedProfileDef(ExpressDataSet *expressDataSet, const IfcParameterizedProfileDef &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcPath(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcPath *cloneIfcPath(ExpressDataSet *expressDataSet, const IfcPath &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcPerformanceHistory(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcPerformanceHistory *cloneIfcPerformanceHistory(ExpressDataSet *expressDataSet, const IfcPerformanceHistory &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcPermeableCoveringProperties(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcPermeableCoveringProperties *cloneIfcPermeableCoveringProperties(ExpressDataSet *expressDataSet, const IfcPermeableCoveringProperties &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcPermit(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcPermit *cloneIfcPermit(ExpressDataSet *expressDataSet, const IfcPermit &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcPerson(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcPerson *cloneIfcPerson(ExpressDataSet *expressDataSet, const IfcPerson &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcPersonAndOrganization(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcPersonAndOrganization *cloneIfcPersonAndOrganization(ExpressDataSet *expressDataSet, const IfcPersonAndOrganization &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcPhysicalComplexQuantity(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcPhysicalComplexQuantity *cloneIfcPhysicalComplexQuantity(ExpressDataSet *expressDataSet, const IfcPhysicalComplexQuantity &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcPhysicalQuantity(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcPhysicalQuantity *cloneIfcPhysicalQuantity(ExpressDataSet *expressDataSet, const IfcPhysicalQuantity &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcPhysicalSimpleQuantity(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcPhysicalSimpleQuantity *cloneIfcPhysicalSimpleQuantity(ExpressDataSet *expressDataSet, const IfcPhysicalSimpleQuantity &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcPile(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcPile *cloneIfcPile(ExpressDataSet *expressDataSet, const IfcPile &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcPipeFittingType(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcPipeFittingType *cloneIfcPipeFittingType(ExpressDataSet *expressDataSet, const IfcPipeFittingType &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcPipeSegmentType(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcPipeSegmentType *cloneIfcPipeSegmentType(ExpressDataSet *expressDataSet, const IfcPipeSegmentType &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcPixelTexture(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcPixelTexture *cloneIfcPixelTexture(ExpressDataSet *expressDataSet, const IfcPixelTexture &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcPlacement(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcPlacement *cloneIfcPlacement(ExpressDataSet *expressDataSet, const IfcPlacement &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcPlanarBox(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcPlanarBox *cloneIfcPlanarBox(ExpressDataSet *expressDataSet, const IfcPlanarBox &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcPlanarExtent(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcPlanarExtent *cloneIfcPlanarExtent(ExpressDataSet *expressDataSet, const IfcPlanarExtent &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcPlane(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcPlane *cloneIfcPlane(ExpressDataSet *expressDataSet, const IfcPlane &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcPlate(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcPlate *cloneIfcPlate(ExpressDataSet *expressDataSet, const IfcPlate &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcPlateType(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcPlateType *cloneIfcPlateType(ExpressDataSet *expressDataSet, const IfcPlateType &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcPoint(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcPoint *cloneIfcPoint(ExpressDataSet *expressDataSet, const IfcPoint &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcPointOnCurve(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcPointOnCurve *cloneIfcPointOnCurve(ExpressDataSet *expressDataSet, const IfcPointOnCurve &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcPointOnSurface(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcPointOnSurface *cloneIfcPointOnSurface(ExpressDataSet *expressDataSet, const IfcPointOnSurface &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcPolygonalBoundedHalfSpace(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcPolygonalBoundedHalfSpace *cloneIfcPolygonalBoundedHalfSpace(ExpressDataSet *expressDataSet, const IfcPolygonalBoundedHalfSpace &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcPolyline(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcPolyline *cloneIfcPolyline(ExpressDataSet *expressDataSet, const IfcPolyline &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcPolyLoop(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcPolyLoop *cloneIfcPolyLoop(ExpressDataSet *expressDataSet, const IfcPolyLoop &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcPort(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcPort *cloneIfcPort(ExpressDataSet *expressDataSet, const IfcPort &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcPostalAddress(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcPostalAddress *cloneIfcPostalAddress(ExpressDataSet *expressDataSet, const IfcPostalAddress &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcPreDefinedColour(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcPreDefinedColour *cloneIfcPreDefinedColour(ExpressDataSet *expressDataSet, const IfcPreDefinedColour &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcPreDefinedCurveFont(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcPreDefinedCurveFont *cloneIfcPreDefinedCurveFont(ExpressDataSet *expressDataSet, const IfcPreDefinedCurveFont &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcPreDefinedDimensionSymbol(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcPreDefinedDimensionSymbol *cloneIfcPreDefinedDimensionSymbol(ExpressDataSet *expressDataSet, const IfcPreDefinedDimensionSymbol &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcPreDefinedItem(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcPreDefinedItem *cloneIfcPreDefinedItem(ExpressDataSet *expressDataSet, const IfcPreDefinedItem &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcPreDefinedPointMarkerSymbol(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcPreDefinedPointMarkerSymbol *cloneIfcPreDefinedPointMarkerSymbol(ExpressDataSet *expressDataSet, const IfcPreDefinedPointMarkerSymbol &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcPreDefinedSymbol(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcPreDefinedSymbol *cloneIfcPreDefinedSymbol(ExpressDataSet *expressDataSet, const IfcPreDefinedSymbol &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcPreDefinedTerminatorSymbol(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcPreDefinedTerminatorSymbol *cloneIfcPreDefinedTerminatorSymbol(ExpressDataSet *expressDataSet, const IfcPreDefinedTerminatorSymbol &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcPreDefinedTextFont(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcPreDefinedTextFont *cloneIfcPreDefinedTextFont(ExpressDataSet *expressDataSet, const IfcPreDefinedTextFont &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcPresentationLayerAssignment(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcPresentationLayerAssignment *cloneIfcPresentationLayerAssignment(ExpressDataSet *expressDataSet, const IfcPresentationLayerAssignment &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcPresentationLayerWithStyle(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcPresentationLayerWithStyle *cloneIfcPresentationLayerWithStyle(ExpressDataSet *expressDataSet, const IfcPresentationLayerWithStyle &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcPresentationStyle(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcPresentationStyle *cloneIfcPresentationStyle(ExpressDataSet *expressDataSet, const IfcPresentationStyle &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcPresentationStyleAssignment(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcPresentationStyleAssignment *cloneIfcPresentationStyleAssignment(ExpressDataSet *expressDataSet, const IfcPresentationStyleAssignment &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcProcedure(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcProcedure *cloneIfcProcedure(ExpressDataSet *expressDataSet, const IfcProcedure &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcProcess(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcProcess *cloneIfcProcess(ExpressDataSet *expressDataSet, const IfcProcess &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcProduct(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcProduct *cloneIfcProduct(ExpressDataSet *expressDataSet, const IfcProduct &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcProductDefinitionShape(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcProductDefinitionShape *cloneIfcProductDefinitionShape(ExpressDataSet *expressDataSet, const IfcProductDefinitionShape &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcProductRepresentation(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcProductRepresentation *cloneIfcProductRepresentation(ExpressDataSet *expressDataSet, const IfcProductRepresentation &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcProductsOfCombustionProperties(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcProductsOfCombustionProperties *cloneIfcProductsOfCombustionProperties(ExpressDataSet *expressDataSet, const IfcProductsOfCombustionProperties &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcProfileDef(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcProfileDef *cloneIfcProfileDef(ExpressDataSet *expressDataSet, const IfcProfileDef &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcProfileProperties(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcProfileProperties *cloneIfcProfileProperties(ExpressDataSet *expressDataSet, const IfcProfileProperties &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcProject(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcProject *cloneIfcProject(ExpressDataSet *expressDataSet, const IfcProject &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcProjectionCurve(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcProjectionCurve *cloneIfcProjectionCurve(ExpressDataSet *expressDataSet, const IfcProjectionCurve &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcProjectionElement(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcProjectionElement *cloneIfcProjectionElement(ExpressDataSet *expressDataSet, const IfcProjectionElement &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcProjectOrder(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcProjectOrder *cloneIfcProjectOrder(ExpressDataSet *expressDataSet, const IfcProjectOrder &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcProjectOrderRecord(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcProjectOrderRecord *cloneIfcProjectOrderRecord(ExpressDataSet *expressDataSet, const IfcProjectOrderRecord &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcProperty(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcProperty *cloneIfcProperty(ExpressDataSet *expressDataSet, const IfcProperty &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcPropertyBoundedValue(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcPropertyBoundedValue *cloneIfcPropertyBoundedValue(ExpressDataSet *expressDataSet, const IfcPropertyBoundedValue &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcPropertyConstraintRelationship(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcPropertyConstraintRelationship *cloneIfcPropertyConstraintRelationship(ExpressDataSet *expressDataSet, const IfcPropertyConstraintRelationship &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcPropertyDefinition(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcPropertyDefinition *cloneIfcPropertyDefinition(ExpressDataSet *expressDataSet, const IfcPropertyDefinition &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcPropertyDependencyRelationship(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcPropertyDependencyRelationship *cloneIfcPropertyDependencyRelationship(ExpressDataSet *expressDataSet, const IfcPropertyDependencyRelationship &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcPropertyEnumeratedValue(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcPropertyEnumeratedValue *cloneIfcPropertyEnumeratedValue(ExpressDataSet *expressDataSet, const IfcPropertyEnumeratedValue &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcPropertyEnumeration(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcPropertyEnumeration *cloneIfcPropertyEnumeration(ExpressDataSet *expressDataSet, const IfcPropertyEnumeration &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcPropertyListValue(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcPropertyListValue *cloneIfcPropertyListValue(ExpressDataSet *expressDataSet, const IfcPropertyListValue &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcPropertyReferenceValue(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcPropertyReferenceValue *cloneIfcPropertyReferenceValue(ExpressDataSet *expressDataSet, const IfcPropertyReferenceValue &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcPropertySet(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcPropertySet *cloneIfcPropertySet(ExpressDataSet *expressDataSet, const IfcPropertySet &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcPropertySetDefinition(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcPropertySetDefinition *cloneIfcPropertySetDefinition(ExpressDataSet *expressDataSet, const IfcPropertySetDefinition &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcPropertySingleValue(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcPropertySingleValue *cloneIfcPropertySingleValue(ExpressDataSet *expressDataSet, const IfcPropertySingleValue &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcPropertyTableValue(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcPropertyTableValue *cloneIfcPropertyTableValue(ExpressDataSet *expressDataSet, const IfcPropertyTableValue &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcProtectiveDeviceType(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcProtectiveDeviceType *cloneIfcProtectiveDeviceType(ExpressDataSet *expressDataSet, const IfcProtectiveDeviceType &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcProxy(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcProxy *cloneIfcProxy(ExpressDataSet *expressDataSet, const IfcProxy &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcPumpType(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcPumpType *cloneIfcPumpType(ExpressDataSet *expressDataSet, const IfcPumpType &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcQuantityArea(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcQuantityArea *cloneIfcQuantityArea(ExpressDataSet *expressDataSet, const IfcQuantityArea &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcQuantityCount(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcQuantityCount *cloneIfcQuantityCount(ExpressDataSet *expressDataSet, const IfcQuantityCount &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcQuantityLength(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcQuantityLength *cloneIfcQuantityLength(ExpressDataSet *expressDataSet, const IfcQuantityLength &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcQuantityTime(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcQuantityTime *cloneIfcQuantityTime(ExpressDataSet *expressDataSet, const IfcQuantityTime &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcQuantityVolume(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcQuantityVolume *cloneIfcQuantityVolume(ExpressDataSet *expressDataSet, const IfcQuantityVolume &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcQuantityWeight(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcQuantityWeight *cloneIfcQuantityWeight(ExpressDataSet *expressDataSet, const IfcQuantityWeight &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcRadiusDimension(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcRadiusDimension *cloneIfcRadiusDimension(ExpressDataSet *expressDataSet, const IfcRadiusDimension &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcRailing(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcRailing *cloneIfcRailing(ExpressDataSet *expressDataSet, const IfcRailing &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcRailingType(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcRailingType *cloneIfcRailingType(ExpressDataSet *expressDataSet, const IfcRailingType &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcRamp(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcRamp *cloneIfcRamp(ExpressDataSet *expressDataSet, const IfcRamp &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcRampFlight(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcRampFlight *cloneIfcRampFlight(ExpressDataSet *expressDataSet, const IfcRampFlight &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcRampFlightType(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcRampFlightType *cloneIfcRampFlightType(ExpressDataSet *expressDataSet, const IfcRampFlightType &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcRationalBezierCurve(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcRationalBezierCurve *cloneIfcRationalBezierCurve(ExpressDataSet *expressDataSet, const IfcRationalBezierCurve &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcRectangleHollowProfileDef(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcRectangleHollowProfileDef *cloneIfcRectangleHollowProfileDef(ExpressDataSet *expressDataSet, const IfcRectangleHollowProfileDef &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcRectangleProfileDef(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcRectangleProfileDef *cloneIfcRectangleProfileDef(ExpressDataSet *expressDataSet, const IfcRectangleProfileDef &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcRectangularPyramid(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcRectangularPyramid *cloneIfcRectangularPyramid(ExpressDataSet *expressDataSet, const IfcRectangularPyramid &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcRectangularTrimmedSurface(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcRectangularTrimmedSurface *cloneIfcRectangularTrimmedSurface(ExpressDataSet *expressDataSet, const IfcRectangularTrimmedSurface &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcReferencesValueDocument(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcReferencesValueDocument *cloneIfcReferencesValueDocument(ExpressDataSet *expressDataSet, const IfcReferencesValueDocument &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcRegularTimeSeries(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcRegularTimeSeries *cloneIfcRegularTimeSeries(ExpressDataSet *expressDataSet, const IfcRegularTimeSeries &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcReinforcementBarProperties(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcReinforcementBarProperties *cloneIfcReinforcementBarProperties(ExpressDataSet *expressDataSet, const IfcReinforcementBarProperties &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcReinforcementDefinitionProperties(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcReinforcementDefinitionProperties *cloneIfcReinforcementDefinitionProperties(ExpressDataSet *expressDataSet, const IfcReinforcementDefinitionProperties &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcReinforcingBar(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcReinforcingBar *cloneIfcReinforcingBar(ExpressDataSet *expressDataSet, const IfcReinforcingBar &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcReinforcingElement(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcReinforcingElement *cloneIfcReinforcingElement(ExpressDataSet *expressDataSet, const IfcReinforcingElement &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcReinforcingMesh(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcReinforcingMesh *cloneIfcReinforcingMesh(ExpressDataSet *expressDataSet, const IfcReinforcingMesh &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcRelAggregates(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcRelAggregates *cloneIfcRelAggregates(ExpressDataSet *expressDataSet, const IfcRelAggregates &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcRelAssigns(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcRelAssigns *cloneIfcRelAssigns(ExpressDataSet *expressDataSet, const IfcRelAssigns &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcRelAssignsTasks(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcRelAssignsTasks *cloneIfcRelAssignsTasks(ExpressDataSet *expressDataSet, const IfcRelAssignsTasks &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcRelAssignsToActor(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcRelAssignsToActor *cloneIfcRelAssignsToActor(ExpressDataSet *expressDataSet, const IfcRelAssignsToActor &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcRelAssignsToControl(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcRelAssignsToControl *cloneIfcRelAssignsToControl(ExpressDataSet *expressDataSet, const IfcRelAssignsToControl &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcRelAssignsToGroup(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcRelAssignsToGroup *cloneIfcRelAssignsToGroup(ExpressDataSet *expressDataSet, const IfcRelAssignsToGroup &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcRelAssignsToProcess(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcRelAssignsToProcess *cloneIfcRelAssignsToProcess(ExpressDataSet *expressDataSet, const IfcRelAssignsToProcess &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcRelAssignsToProduct(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcRelAssignsToProduct *cloneIfcRelAssignsToProduct(ExpressDataSet *expressDataSet, const IfcRelAssignsToProduct &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcRelAssignsToProjectOrder(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcRelAssignsToProjectOrder *cloneIfcRelAssignsToProjectOrder(ExpressDataSet *expressDataSet, const IfcRelAssignsToProjectOrder &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcRelAssignsToResource(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcRelAssignsToResource *cloneIfcRelAssignsToResource(ExpressDataSet *expressDataSet, const IfcRelAssignsToResource &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcRelAssociates(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcRelAssociates *cloneIfcRelAssociates(ExpressDataSet *expressDataSet, const IfcRelAssociates &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcRelAssociatesAppliedValue(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcRelAssociatesAppliedValue *cloneIfcRelAssociatesAppliedValue(ExpressDataSet *expressDataSet, const IfcRelAssociatesAppliedValue &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcRelAssociatesApproval(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcRelAssociatesApproval *cloneIfcRelAssociatesApproval(ExpressDataSet *expressDataSet, const IfcRelAssociatesApproval &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcRelAssociatesClassification(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcRelAssociatesClassification *cloneIfcRelAssociatesClassification(ExpressDataSet *expressDataSet, const IfcRelAssociatesClassification &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcRelAssociatesConstraint(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcRelAssociatesConstraint *cloneIfcRelAssociatesConstraint(ExpressDataSet *expressDataSet, const IfcRelAssociatesConstraint &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcRelAssociatesDocument(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcRelAssociatesDocument *cloneIfcRelAssociatesDocument(ExpressDataSet *expressDataSet, const IfcRelAssociatesDocument &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcRelAssociatesLibrary(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcRelAssociatesLibrary *cloneIfcRelAssociatesLibrary(ExpressDataSet *expressDataSet, const IfcRelAssociatesLibrary &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcRelAssociatesMaterial(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcRelAssociatesMaterial *cloneIfcRelAssociatesMaterial(ExpressDataSet *expressDataSet, const IfcRelAssociatesMaterial &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcRelAssociatesProfileProperties(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcRelAssociatesProfileProperties *cloneIfcRelAssociatesProfileProperties(ExpressDataSet *expressDataSet, const IfcRelAssociatesProfileProperties &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcRelationship(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcRelationship *cloneIfcRelationship(ExpressDataSet *expressDataSet, const IfcRelationship &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcRelaxation(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcRelaxation *cloneIfcRelaxation(ExpressDataSet *expressDataSet, const IfcRelaxation &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcRelConnects(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcRelConnects *cloneIfcRelConnects(ExpressDataSet *expressDataSet, const IfcRelConnects &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcRelConnectsElements(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcRelConnectsElements *cloneIfcRelConnectsElements(ExpressDataSet *expressDataSet, const IfcRelConnectsElements &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcRelConnectsPathElements(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcRelConnectsPathElements *cloneIfcRelConnectsPathElements(ExpressDataSet *expressDataSet, const IfcRelConnectsPathElements &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcRelConnectsPorts(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcRelConnectsPorts *cloneIfcRelConnectsPorts(ExpressDataSet *expressDataSet, const IfcRelConnectsPorts &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcRelConnectsPortToElement(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcRelConnectsPortToElement *cloneIfcRelConnectsPortToElement(ExpressDataSet *expressDataSet, const IfcRelConnectsPortToElement &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcRelConnectsStructuralActivity(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcRelConnectsStructuralActivity *cloneIfcRelConnectsStructuralActivity(ExpressDataSet *expressDataSet, const IfcRelConnectsStructuralActivity &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcRelConnectsStructuralElement(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcRelConnectsStructuralElement *cloneIfcRelConnectsStructuralElement(ExpressDataSet *expressDataSet, const IfcRelConnectsStructuralElement &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcRelConnectsStructuralMember(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcRelConnectsStructuralMember *cloneIfcRelConnectsStructuralMember(ExpressDataSet *expressDataSet, const IfcRelConnectsStructuralMember &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcRelConnectsWithEccentricity(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcRelConnectsWithEccentricity *cloneIfcRelConnectsWithEccentricity(ExpressDataSet *expressDataSet, const IfcRelConnectsWithEccentricity &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcRelConnectsWithRealizingElements(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcRelConnectsWithRealizingElements *cloneIfcRelConnectsWithRealizingElements(ExpressDataSet *expressDataSet, const IfcRelConnectsWithRealizingElements &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcRelContainedInSpatialStructure(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcRelContainedInSpatialStructure *cloneIfcRelContainedInSpatialStructure(ExpressDataSet *expressDataSet, const IfcRelContainedInSpatialStructure &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcRelCoversBldgElements(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcRelCoversBldgElements *cloneIfcRelCoversBldgElements(ExpressDataSet *expressDataSet, const IfcRelCoversBldgElements &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcRelCoversSpaces(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcRelCoversSpaces *cloneIfcRelCoversSpaces(ExpressDataSet *expressDataSet, const IfcRelCoversSpaces &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcRelDecomposes(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcRelDecomposes *cloneIfcRelDecomposes(ExpressDataSet *expressDataSet, const IfcRelDecomposes &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcRelDefines(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcRelDefines *cloneIfcRelDefines(ExpressDataSet *expressDataSet, const IfcRelDefines &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcRelDefinesByProperties(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcRelDefinesByProperties *cloneIfcRelDefinesByProperties(ExpressDataSet *expressDataSet, const IfcRelDefinesByProperties &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcRelDefinesByType(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcRelDefinesByType *cloneIfcRelDefinesByType(ExpressDataSet *expressDataSet, const IfcRelDefinesByType &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcRelFillsElement(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcRelFillsElement *cloneIfcRelFillsElement(ExpressDataSet *expressDataSet, const IfcRelFillsElement &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcRelFlowControlElements(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcRelFlowControlElements *cloneIfcRelFlowControlElements(ExpressDataSet *expressDataSet, const IfcRelFlowControlElements &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcRelInteractionRequirements(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcRelInteractionRequirements *cloneIfcRelInteractionRequirements(ExpressDataSet *expressDataSet, const IfcRelInteractionRequirements &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcRelNests(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcRelNests *cloneIfcRelNests(ExpressDataSet *expressDataSet, const IfcRelNests &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcRelOccupiesSpaces(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcRelOccupiesSpaces *cloneIfcRelOccupiesSpaces(ExpressDataSet *expressDataSet, const IfcRelOccupiesSpaces &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcRelOverridesProperties(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcRelOverridesProperties *cloneIfcRelOverridesProperties(ExpressDataSet *expressDataSet, const IfcRelOverridesProperties &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcRelProjectsElement(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcRelProjectsElement *cloneIfcRelProjectsElement(ExpressDataSet *expressDataSet, const IfcRelProjectsElement &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcRelReferencedInSpatialStructure(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcRelReferencedInSpatialStructure *cloneIfcRelReferencedInSpatialStructure(ExpressDataSet *expressDataSet, const IfcRelReferencedInSpatialStructure &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcRelSchedulesCostItems(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcRelSchedulesCostItems *cloneIfcRelSchedulesCostItems(ExpressDataSet *expressDataSet, const IfcRelSchedulesCostItems &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcRelSequence(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcRelSequence *cloneIfcRelSequence(ExpressDataSet *expressDataSet, const IfcRelSequence &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcRelServicesBuildings(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcRelServicesBuildings *cloneIfcRelServicesBuildings(ExpressDataSet *expressDataSet, const IfcRelServicesBuildings &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcRelSpaceBoundary(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcRelSpaceBoundary *cloneIfcRelSpaceBoundary(ExpressDataSet *expressDataSet, const IfcRelSpaceBoundary &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcRelVoidsElement(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcRelVoidsElement *cloneIfcRelVoidsElement(ExpressDataSet *expressDataSet, const IfcRelVoidsElement &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcRepresentation(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcRepresentation *cloneIfcRepresentation(ExpressDataSet *expressDataSet, const IfcRepresentation &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcRepresentationContext(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcRepresentationContext *cloneIfcRepresentationContext(ExpressDataSet *expressDataSet, const IfcRepresentationContext &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcRepresentationItem(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcRepresentationItem *cloneIfcRepresentationItem(ExpressDataSet *expressDataSet, const IfcRepresentationItem &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcRepresentationMap(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcRepresentationMap *cloneIfcRepresentationMap(ExpressDataSet *expressDataSet, const IfcRepresentationMap &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcResource(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcResource *cloneIfcResource(ExpressDataSet *expressDataSet, const IfcResource &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcRevolvedAreaSolid(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcRevolvedAreaSolid *cloneIfcRevolvedAreaSolid(ExpressDataSet *expressDataSet, const IfcRevolvedAreaSolid &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcRibPlateProfileProperties(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcRibPlateProfileProperties *cloneIfcRibPlateProfileProperties(ExpressDataSet *expressDataSet, const IfcRibPlateProfileProperties &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcRightCircularCone(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcRightCircularCone *cloneIfcRightCircularCone(ExpressDataSet *expressDataSet, const IfcRightCircularCone &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcRightCircularCylinder(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcRightCircularCylinder *cloneIfcRightCircularCylinder(ExpressDataSet *expressDataSet, const IfcRightCircularCylinder &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcRoof(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcRoof *cloneIfcRoof(ExpressDataSet *expressDataSet, const IfcRoof &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcRoot(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcRoot *cloneIfcRoot(ExpressDataSet *expressDataSet, const IfcRoot &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcRoundedEdgeFeature(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcRoundedEdgeFeature *cloneIfcRoundedEdgeFeature(ExpressDataSet *expressDataSet, const IfcRoundedEdgeFeature &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcRoundedRectangleProfileDef(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcRoundedRectangleProfileDef *cloneIfcRoundedRectangleProfileDef(ExpressDataSet *expressDataSet, const IfcRoundedRectangleProfileDef &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcSanitaryTerminalType(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcSanitaryTerminalType *cloneIfcSanitaryTerminalType(ExpressDataSet *expressDataSet, const IfcSanitaryTerminalType &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcScheduleTimeControl(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcScheduleTimeControl *cloneIfcScheduleTimeControl(ExpressDataSet *expressDataSet, const IfcScheduleTimeControl &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcSectionedSpine(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcSectionedSpine *cloneIfcSectionedSpine(ExpressDataSet *expressDataSet, const IfcSectionedSpine &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcSectionProperties(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcSectionProperties *cloneIfcSectionProperties(ExpressDataSet *expressDataSet, const IfcSectionProperties &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcSectionReinforcementProperties(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcSectionReinforcementProperties *cloneIfcSectionReinforcementProperties(ExpressDataSet *expressDataSet, const IfcSectionReinforcementProperties &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcSensorType(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcSensorType *cloneIfcSensorType(ExpressDataSet *expressDataSet, const IfcSensorType &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcServiceLife(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcServiceLife *cloneIfcServiceLife(ExpressDataSet *expressDataSet, const IfcServiceLife &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcServiceLifeFactor(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcServiceLifeFactor *cloneIfcServiceLifeFactor(ExpressDataSet *expressDataSet, const IfcServiceLifeFactor &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcShapeAspect(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcShapeAspect *cloneIfcShapeAspect(ExpressDataSet *expressDataSet, const IfcShapeAspect &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcShapeModel(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcShapeModel *cloneIfcShapeModel(ExpressDataSet *expressDataSet, const IfcShapeModel &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcShapeRepresentation(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcShapeRepresentation *cloneIfcShapeRepresentation(ExpressDataSet *expressDataSet, const IfcShapeRepresentation &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcShellBasedSurfaceModel(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcShellBasedSurfaceModel *cloneIfcShellBasedSurfaceModel(ExpressDataSet *expressDataSet, const IfcShellBasedSurfaceModel &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcSimpleProperty(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcSimpleProperty *cloneIfcSimpleProperty(ExpressDataSet *expressDataSet, const IfcSimpleProperty &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcSite(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcSite *cloneIfcSite(ExpressDataSet *expressDataSet, const IfcSite &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcSIUnit(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcSIUnit *cloneIfcSIUnit(ExpressDataSet *expressDataSet, const IfcSIUnit &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcSlab(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcSlab *cloneIfcSlab(ExpressDataSet *expressDataSet, const IfcSlab &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcSlabType(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcSlabType *cloneIfcSlabType(ExpressDataSet *expressDataSet, const IfcSlabType &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcSlippageConnectionCondition(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcSlippageConnectionCondition *cloneIfcSlippageConnectionCondition(ExpressDataSet *expressDataSet, const IfcSlippageConnectionCondition &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcSolidModel(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcSolidModel *cloneIfcSolidModel(ExpressDataSet *expressDataSet, const IfcSolidModel &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcSoundProperties(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcSoundProperties *cloneIfcSoundProperties(ExpressDataSet *expressDataSet, const IfcSoundProperties &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcSoundValue(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcSoundValue *cloneIfcSoundValue(ExpressDataSet *expressDataSet, const IfcSoundValue &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcSpace(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcSpace *cloneIfcSpace(ExpressDataSet *expressDataSet, const IfcSpace &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcSpaceHeaterType(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcSpaceHeaterType *cloneIfcSpaceHeaterType(ExpressDataSet *expressDataSet, const IfcSpaceHeaterType &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcSpaceProgram(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcSpaceProgram *cloneIfcSpaceProgram(ExpressDataSet *expressDataSet, const IfcSpaceProgram &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcSpaceThermalLoadProperties(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcSpaceThermalLoadProperties *cloneIfcSpaceThermalLoadProperties(ExpressDataSet *expressDataSet, const IfcSpaceThermalLoadProperties &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcSpaceType(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcSpaceType *cloneIfcSpaceType(ExpressDataSet *expressDataSet, const IfcSpaceType &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcSpatialStructureElement(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcSpatialStructureElement *cloneIfcSpatialStructureElement(ExpressDataSet *expressDataSet, const IfcSpatialStructureElement &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcSpatialStructureElementType(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcSpatialStructureElementType *cloneIfcSpatialStructureElementType(ExpressDataSet *expressDataSet, const IfcSpatialStructureElementType &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcSphere(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcSphere *cloneIfcSphere(ExpressDataSet *expressDataSet, const IfcSphere &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcStackTerminalType(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcStackTerminalType *cloneIfcStackTerminalType(ExpressDataSet *expressDataSet, const IfcStackTerminalType &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcStair(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcStair *cloneIfcStair(ExpressDataSet *expressDataSet, const IfcStair &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcStairFlight(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcStairFlight *cloneIfcStairFlight(ExpressDataSet *expressDataSet, const IfcStairFlight &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcStairFlightType(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcStairFlightType *cloneIfcStairFlightType(ExpressDataSet *expressDataSet, const IfcStairFlightType &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcStructuralAction(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcStructuralAction *cloneIfcStructuralAction(ExpressDataSet *expressDataSet, const IfcStructuralAction &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcStructuralActivity(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcStructuralActivity *cloneIfcStructuralActivity(ExpressDataSet *expressDataSet, const IfcStructuralActivity &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcStructuralAnalysisModel(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcStructuralAnalysisModel *cloneIfcStructuralAnalysisModel(ExpressDataSet *expressDataSet, const IfcStructuralAnalysisModel &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcStructuralConnection(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcStructuralConnection *cloneIfcStructuralConnection(ExpressDataSet *expressDataSet, const IfcStructuralConnection &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcStructuralConnectionCondition(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcStructuralConnectionCondition *cloneIfcStructuralConnectionCondition(ExpressDataSet *expressDataSet, const IfcStructuralConnectionCondition &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcStructuralCurveConnection(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcStructuralCurveConnection *cloneIfcStructuralCurveConnection(ExpressDataSet *expressDataSet, const IfcStructuralCurveConnection &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcStructuralCurveMember(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcStructuralCurveMember *cloneIfcStructuralCurveMember(ExpressDataSet *expressDataSet, const IfcStructuralCurveMember &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcStructuralCurveMemberVarying(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcStructuralCurveMemberVarying *cloneIfcStructuralCurveMemberVarying(ExpressDataSet *expressDataSet, const IfcStructuralCurveMemberVarying &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcStructuralItem(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcStructuralItem *cloneIfcStructuralItem(ExpressDataSet *expressDataSet, const IfcStructuralItem &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcStructuralLinearAction(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcStructuralLinearAction *cloneIfcStructuralLinearAction(ExpressDataSet *expressDataSet, const IfcStructuralLinearAction &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcStructuralLinearActionVarying(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcStructuralLinearActionVarying *cloneIfcStructuralLinearActionVarying(ExpressDataSet *expressDataSet, const IfcStructuralLinearActionVarying &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcStructuralLoad(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcStructuralLoad *cloneIfcStructuralLoad(ExpressDataSet *expressDataSet, const IfcStructuralLoad &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcStructuralLoadGroup(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcStructuralLoadGroup *cloneIfcStructuralLoadGroup(ExpressDataSet *expressDataSet, const IfcStructuralLoadGroup &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcStructuralLoadLinearForce(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcStructuralLoadLinearForce *cloneIfcStructuralLoadLinearForce(ExpressDataSet *expressDataSet, const IfcStructuralLoadLinearForce &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcStructuralLoadPlanarForce(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcStructuralLoadPlanarForce *cloneIfcStructuralLoadPlanarForce(ExpressDataSet *expressDataSet, const IfcStructuralLoadPlanarForce &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcStructuralLoadSingleDisplacement(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcStructuralLoadSingleDisplacement *cloneIfcStructuralLoadSingleDisplacement(ExpressDataSet *expressDataSet, const IfcStructuralLoadSingleDisplacement &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcStructuralLoadSingleDisplacementDistortion(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcStructuralLoadSingleDisplacementDistortion *cloneIfcStructuralLoadSingleDisplacementDistortion(ExpressDataSet *expressDataSet, const IfcStructuralLoadSingleDisplacementDistortion &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcStructuralLoadSingleForce(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcStructuralLoadSingleForce *cloneIfcStructuralLoadSingleForce(ExpressDataSet *expressDataSet, const IfcStructuralLoadSingleForce &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcStructuralLoadSingleForceWarping(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcStructuralLoadSingleForceWarping *cloneIfcStructuralLoadSingleForceWarping(ExpressDataSet *expressDataSet, const IfcStructuralLoadSingleForceWarping &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcStructuralLoadStatic(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcStructuralLoadStatic *cloneIfcStructuralLoadStatic(ExpressDataSet *expressDataSet, const IfcStructuralLoadStatic &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcStructuralLoadTemperature(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcStructuralLoadTemperature *cloneIfcStructuralLoadTemperature(ExpressDataSet *expressDataSet, const IfcStructuralLoadTemperature &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcStructuralMember(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcStructuralMember *cloneIfcStructuralMember(ExpressDataSet *expressDataSet, const IfcStructuralMember &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcStructuralPlanarAction(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcStructuralPlanarAction *cloneIfcStructuralPlanarAction(ExpressDataSet *expressDataSet, const IfcStructuralPlanarAction &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcStructuralPlanarActionVarying(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcStructuralPlanarActionVarying *cloneIfcStructuralPlanarActionVarying(ExpressDataSet *expressDataSet, const IfcStructuralPlanarActionVarying &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcStructuralPointAction(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcStructuralPointAction *cloneIfcStructuralPointAction(ExpressDataSet *expressDataSet, const IfcStructuralPointAction &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcStructuralPointConnection(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcStructuralPointConnection *cloneIfcStructuralPointConnection(ExpressDataSet *expressDataSet, const IfcStructuralPointConnection &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcStructuralPointReaction(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcStructuralPointReaction *cloneIfcStructuralPointReaction(ExpressDataSet *expressDataSet, const IfcStructuralPointReaction &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcStructuralProfileProperties(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcStructuralProfileProperties *cloneIfcStructuralProfileProperties(ExpressDataSet *expressDataSet, const IfcStructuralProfileProperties &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcStructuralReaction(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcStructuralReaction *cloneIfcStructuralReaction(ExpressDataSet *expressDataSet, const IfcStructuralReaction &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcStructuralResultGroup(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcStructuralResultGroup *cloneIfcStructuralResultGroup(ExpressDataSet *expressDataSet, const IfcStructuralResultGroup &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcStructuralSteelProfileProperties(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcStructuralSteelProfileProperties *cloneIfcStructuralSteelProfileProperties(ExpressDataSet *expressDataSet, const IfcStructuralSteelProfileProperties &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcStructuralSurfaceConnection(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcStructuralSurfaceConnection *cloneIfcStructuralSurfaceConnection(ExpressDataSet *expressDataSet, const IfcStructuralSurfaceConnection &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcStructuralSurfaceMember(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcStructuralSurfaceMember *cloneIfcStructuralSurfaceMember(ExpressDataSet *expressDataSet, const IfcStructuralSurfaceMember &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcStructuralSurfaceMemberVarying(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcStructuralSurfaceMemberVarying *cloneIfcStructuralSurfaceMemberVarying(ExpressDataSet *expressDataSet, const IfcStructuralSurfaceMemberVarying &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcStructuredDimensionCallout(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcStructuredDimensionCallout *cloneIfcStructuredDimensionCallout(ExpressDataSet *expressDataSet, const IfcStructuredDimensionCallout &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcStyledItem(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcStyledItem *cloneIfcStyledItem(ExpressDataSet *expressDataSet, const IfcStyledItem &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcStyledRepresentation(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcStyledRepresentation *cloneIfcStyledRepresentation(ExpressDataSet *expressDataSet, const IfcStyledRepresentation &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcStyleModel(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcStyleModel *cloneIfcStyleModel(ExpressDataSet *expressDataSet, const IfcStyleModel &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcSubContractResource(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcSubContractResource *cloneIfcSubContractResource(ExpressDataSet *expressDataSet, const IfcSubContractResource &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcSubedge(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcSubedge *cloneIfcSubedge(ExpressDataSet *expressDataSet, const IfcSubedge &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcSurface(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcSurface *cloneIfcSurface(ExpressDataSet *expressDataSet, const IfcSurface &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcSurfaceCurveSweptAreaSolid(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcSurfaceCurveSweptAreaSolid *cloneIfcSurfaceCurveSweptAreaSolid(ExpressDataSet *expressDataSet, const IfcSurfaceCurveSweptAreaSolid &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcSurfaceOfLinearExtrusion(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcSurfaceOfLinearExtrusion *cloneIfcSurfaceOfLinearExtrusion(ExpressDataSet *expressDataSet, const IfcSurfaceOfLinearExtrusion &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcSurfaceOfRevolution(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcSurfaceOfRevolution *cloneIfcSurfaceOfRevolution(ExpressDataSet *expressDataSet, const IfcSurfaceOfRevolution &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcSurfaceStyle(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcSurfaceStyle *cloneIfcSurfaceStyle(ExpressDataSet *expressDataSet, const IfcSurfaceStyle &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcSurfaceStyleLighting(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcSurfaceStyleLighting *cloneIfcSurfaceStyleLighting(ExpressDataSet *expressDataSet, const IfcSurfaceStyleLighting &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcSurfaceStyleRefraction(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcSurfaceStyleRefraction *cloneIfcSurfaceStyleRefraction(ExpressDataSet *expressDataSet, const IfcSurfaceStyleRefraction &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcSurfaceStyleRendering(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcSurfaceStyleRendering *cloneIfcSurfaceStyleRendering(ExpressDataSet *expressDataSet, const IfcSurfaceStyleRendering &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcSurfaceStyleShading(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcSurfaceStyleShading *cloneIfcSurfaceStyleShading(ExpressDataSet *expressDataSet, const IfcSurfaceStyleShading &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcSurfaceStyleWithTextures(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcSurfaceStyleWithTextures *cloneIfcSurfaceStyleWithTextures(ExpressDataSet *expressDataSet, const IfcSurfaceStyleWithTextures &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcSurfaceTexture(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcSurfaceTexture *cloneIfcSurfaceTexture(ExpressDataSet *expressDataSet, const IfcSurfaceTexture &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcSweptAreaSolid(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcSweptAreaSolid *cloneIfcSweptAreaSolid(ExpressDataSet *expressDataSet, const IfcSweptAreaSolid &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcSweptDiskSolid(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcSweptDiskSolid *cloneIfcSweptDiskSolid(ExpressDataSet *expressDataSet, const IfcSweptDiskSolid &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcSweptSurface(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcSweptSurface *cloneIfcSweptSurface(ExpressDataSet *expressDataSet, const IfcSweptSurface &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcSwitchingDeviceType(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcSwitchingDeviceType *cloneIfcSwitchingDeviceType(ExpressDataSet *expressDataSet, const IfcSwitchingDeviceType &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcSymbolStyle(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcSymbolStyle *cloneIfcSymbolStyle(ExpressDataSet *expressDataSet, const IfcSymbolStyle &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcSystem(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcSystem *cloneIfcSystem(ExpressDataSet *expressDataSet, const IfcSystem &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcSystemFurnitureElementType(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcSystemFurnitureElementType *cloneIfcSystemFurnitureElementType(ExpressDataSet *expressDataSet, const IfcSystemFurnitureElementType &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcTable(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcTable *cloneIfcTable(ExpressDataSet *expressDataSet, const IfcTable &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcTableRow(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcTableRow *cloneIfcTableRow(ExpressDataSet *expressDataSet, const IfcTableRow &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcTankType(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcTankType *cloneIfcTankType(ExpressDataSet *expressDataSet, const IfcTankType &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcTask(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcTask *cloneIfcTask(ExpressDataSet *expressDataSet, const IfcTask &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcTelecomAddress(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcTelecomAddress *cloneIfcTelecomAddress(ExpressDataSet *expressDataSet, const IfcTelecomAddress &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcTendon(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcTendon *cloneIfcTendon(ExpressDataSet *expressDataSet, const IfcTendon &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcTendonAnchor(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcTendonAnchor *cloneIfcTendonAnchor(ExpressDataSet *expressDataSet, const IfcTendonAnchor &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcTerminatorSymbol(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcTerminatorSymbol *cloneIfcTerminatorSymbol(ExpressDataSet *expressDataSet, const IfcTerminatorSymbol &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcTextLiteral(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcTextLiteral *cloneIfcTextLiteral(ExpressDataSet *expressDataSet, const IfcTextLiteral &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcTextLiteralWithExtent(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcTextLiteralWithExtent *cloneIfcTextLiteralWithExtent(ExpressDataSet *expressDataSet, const IfcTextLiteralWithExtent &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcTextStyle(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcTextStyle *cloneIfcTextStyle(ExpressDataSet *expressDataSet, const IfcTextStyle &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcTextStyleFontModel(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcTextStyleFontModel *cloneIfcTextStyleFontModel(ExpressDataSet *expressDataSet, const IfcTextStyleFontModel &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcTextStyleForDefinedFont(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcTextStyleForDefinedFont *cloneIfcTextStyleForDefinedFont(ExpressDataSet *expressDataSet, const IfcTextStyleForDefinedFont &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcTextStyleTextModel(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcTextStyleTextModel *cloneIfcTextStyleTextModel(ExpressDataSet *expressDataSet, const IfcTextStyleTextModel &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcTextStyleWithBoxCharacteristics(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcTextStyleWithBoxCharacteristics *cloneIfcTextStyleWithBoxCharacteristics(ExpressDataSet *expressDataSet, const IfcTextStyleWithBoxCharacteristics &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcTextureCoordinate(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcTextureCoordinate *cloneIfcTextureCoordinate(ExpressDataSet *expressDataSet, const IfcTextureCoordinate &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcTextureCoordinateGenerator(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcTextureCoordinateGenerator *cloneIfcTextureCoordinateGenerator(ExpressDataSet *expressDataSet, const IfcTextureCoordinateGenerator &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcTextureMap(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcTextureMap *cloneIfcTextureMap(ExpressDataSet *expressDataSet, const IfcTextureMap &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcTextureVertex(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcTextureVertex *cloneIfcTextureVertex(ExpressDataSet *expressDataSet, const IfcTextureVertex &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcThermalMaterialProperties(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcThermalMaterialProperties *cloneIfcThermalMaterialProperties(ExpressDataSet *expressDataSet, const IfcThermalMaterialProperties &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcTimeSeries(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcTimeSeries *cloneIfcTimeSeries(ExpressDataSet *expressDataSet, const IfcTimeSeries &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcTimeSeriesReferenceRelationship(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcTimeSeriesReferenceRelationship *cloneIfcTimeSeriesReferenceRelationship(ExpressDataSet *expressDataSet, const IfcTimeSeriesReferenceRelationship &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcTimeSeriesSchedule(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcTimeSeriesSchedule *cloneIfcTimeSeriesSchedule(ExpressDataSet *expressDataSet, const IfcTimeSeriesSchedule &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcTimeSeriesValue(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcTimeSeriesValue *cloneIfcTimeSeriesValue(ExpressDataSet *expressDataSet, const IfcTimeSeriesValue &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcTopologicalRepresentationItem(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcTopologicalRepresentationItem *cloneIfcTopologicalRepresentationItem(ExpressDataSet *expressDataSet, const IfcTopologicalRepresentationItem &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcTopologyRepresentation(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcTopologyRepresentation *cloneIfcTopologyRepresentation(ExpressDataSet *expressDataSet, const IfcTopologyRepresentation &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcTransformerType(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcTransformerType *cloneIfcTransformerType(ExpressDataSet *expressDataSet, const IfcTransformerType &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcTransportElement(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcTransportElement *cloneIfcTransportElement(ExpressDataSet *expressDataSet, const IfcTransportElement &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcTransportElementType(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcTransportElementType *cloneIfcTransportElementType(ExpressDataSet *expressDataSet, const IfcTransportElementType &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcTrapeziumProfileDef(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcTrapeziumProfileDef *cloneIfcTrapeziumProfileDef(ExpressDataSet *expressDataSet, const IfcTrapeziumProfileDef &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcTrimmedCurve(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcTrimmedCurve *cloneIfcTrimmedCurve(ExpressDataSet *expressDataSet, const IfcTrimmedCurve &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcTShapeProfileDef(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcTShapeProfileDef *cloneIfcTShapeProfileDef(ExpressDataSet *expressDataSet, const IfcTShapeProfileDef &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcTubeBundleType(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcTubeBundleType *cloneIfcTubeBundleType(ExpressDataSet *expressDataSet, const IfcTubeBundleType &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcTwoDirectionRepeatFactor(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcTwoDirectionRepeatFactor *cloneIfcTwoDirectionRepeatFactor(ExpressDataSet *expressDataSet, const IfcTwoDirectionRepeatFactor &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcTypeObject(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcTypeObject *cloneIfcTypeObject(ExpressDataSet *expressDataSet, const IfcTypeObject &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcTypeProduct(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcTypeProduct *cloneIfcTypeProduct(ExpressDataSet *expressDataSet, const IfcTypeProduct &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcUnitaryEquipmentType(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcUnitaryEquipmentType *cloneIfcUnitaryEquipmentType(ExpressDataSet *expressDataSet, const IfcUnitaryEquipmentType &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcUnitAssignment(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcUnitAssignment *cloneIfcUnitAssignment(ExpressDataSet *expressDataSet, const IfcUnitAssignment &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcUShapeProfileDef(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcUShapeProfileDef *cloneIfcUShapeProfileDef(ExpressDataSet *expressDataSet, const IfcUShapeProfileDef &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcValveType(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcValveType *cloneIfcValveType(ExpressDataSet *expressDataSet, const IfcValveType &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcVector(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcVector *cloneIfcVector(ExpressDataSet *expressDataSet, const IfcVector &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcVertex(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcVertex *cloneIfcVertex(ExpressDataSet *expressDataSet, const IfcVertex &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcVertexBasedTextureMap(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcVertexBasedTextureMap *cloneIfcVertexBasedTextureMap(ExpressDataSet *expressDataSet, const IfcVertexBasedTextureMap &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcVertexLoop(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcVertexLoop *cloneIfcVertexLoop(ExpressDataSet *expressDataSet, const IfcVertexLoop &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcVertexPoint(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcVertexPoint *cloneIfcVertexPoint(ExpressDataSet *expressDataSet, const IfcVertexPoint &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcVibrationIsolatorType(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcVibrationIsolatorType *cloneIfcVibrationIsolatorType(ExpressDataSet *expressDataSet, const IfcVibrationIsolatorType &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcVirtualElement(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcVirtualElement *cloneIfcVirtualElement(ExpressDataSet *expressDataSet, const IfcVirtualElement &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcVirtualGridIntersection(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcVirtualGridIntersection *cloneIfcVirtualGridIntersection(ExpressDataSet *expressDataSet, const IfcVirtualGridIntersection &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcWall(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcWall *cloneIfcWall(ExpressDataSet *expressDataSet, const IfcWall &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcWallStandardCase(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcWallStandardCase *cloneIfcWallStandardCase(ExpressDataSet *expressDataSet, const IfcWallStandardCase &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcWallType(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcWallType *cloneIfcWallType(ExpressDataSet *expressDataSet, const IfcWallType &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcWasteTerminalType(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcWasteTerminalType *cloneIfcWasteTerminalType(ExpressDataSet *expressDataSet, const IfcWasteTerminalType &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcWaterProperties(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcWaterProperties *cloneIfcWaterProperties(ExpressDataSet *expressDataSet, const IfcWaterProperties &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcWindow(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcWindow *cloneIfcWindow(ExpressDataSet *expressDataSet, const IfcWindow &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcWindowLiningProperties(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcWindowLiningProperties *cloneIfcWindowLiningProperties(ExpressDataSet *expressDataSet, const IfcWindowLiningProperties &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcWindowPanelProperties(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcWindowPanelProperties *cloneIfcWindowPanelProperties(ExpressDataSet *expressDataSet, const IfcWindowPanelProperties &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcWindowStyle(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcWindowStyle *cloneIfcWindowStyle(ExpressDataSet *expressDataSet, const IfcWindowStyle &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcWorkControl(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcWorkControl *cloneIfcWorkControl(ExpressDataSet *expressDataSet, const IfcWorkControl &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcWorkPlan(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcWorkPlan *cloneIfcWorkPlan(ExpressDataSet *expressDataSet, const IfcWorkPlan &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcWorkSchedule(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcWorkSchedule *cloneIfcWorkSchedule(ExpressDataSet *expressDataSet, const IfcWorkSchedule &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcZone(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcZone *cloneIfcZone(ExpressDataSet *expressDataSet, const IfcZone &obj, const CopyOp &copyop);
        static Step::BaseEntity *allocateIfcZShapeProfileDef(Step::BaseExpressDataSet *expressDataSet, Step::Id id);
        static IfcZShapeProfileDef *cloneIfcZShapeProfileDef(ExpressDataSet *expressDataSet, const IfcZShapeProfileDef &obj, const CopyOp &copyop);
    };
}