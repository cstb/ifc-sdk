
// IFC SDK : IFC2X3 C++ Early Classes
// Copyright (C) 2009-2018 CSTB   
//   
// For further information please contact
//                                       
//         eveBIM-support@cstb.fr        
//   or                                  
//         CSTB DTI/MIC                  
//         290, route des Lucioles       
//         BP 209                        
//         06904 Sophia Antipolis, France
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 2.1 of the License, or (at your option) any later version.
// The full license is in Licence.txt file included with this
// distribution or is available at :
//     http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.


#include <ifc2x3/SPFWriter.h>

#include <ifc2x3/ExpressDataSet.h>
#include <ifc2x3/Ifc2DCompositeCurve.h>
#include <ifc2x3/IfcActionRequest.h>
#include <ifc2x3/IfcActor.h>
#include <ifc2x3/IfcActorRole.h>
#include <ifc2x3/IfcActuatorType.h>
#include <ifc2x3/IfcAddress.h>
#include <ifc2x3/IfcAirTerminalBoxType.h>
#include <ifc2x3/IfcAirTerminalType.h>
#include <ifc2x3/IfcAirToAirHeatRecoveryType.h>
#include <ifc2x3/IfcAlarmType.h>
#include <ifc2x3/IfcAngularDimension.h>
#include <ifc2x3/IfcAnnotation.h>
#include <ifc2x3/IfcAnnotationCurveOccurrence.h>
#include <ifc2x3/IfcAnnotationFillArea.h>
#include <ifc2x3/IfcAnnotationFillAreaOccurrence.h>
#include <ifc2x3/IfcAnnotationOccurrence.h>
#include <ifc2x3/IfcAnnotationSurface.h>
#include <ifc2x3/IfcAnnotationSurfaceOccurrence.h>
#include <ifc2x3/IfcAnnotationSymbolOccurrence.h>
#include <ifc2x3/IfcAnnotationTextOccurrence.h>
#include <ifc2x3/IfcApplication.h>
#include <ifc2x3/IfcAppliedValue.h>
#include <ifc2x3/IfcAppliedValueRelationship.h>
#include <ifc2x3/IfcApproval.h>
#include <ifc2x3/IfcApprovalActorRelationship.h>
#include <ifc2x3/IfcApprovalPropertyRelationship.h>
#include <ifc2x3/IfcApprovalRelationship.h>
#include <ifc2x3/IfcArbitraryClosedProfileDef.h>
#include <ifc2x3/IfcArbitraryOpenProfileDef.h>
#include <ifc2x3/IfcArbitraryProfileDefWithVoids.h>
#include <ifc2x3/IfcAsset.h>
#include <ifc2x3/IfcAsymmetricIShapeProfileDef.h>
#include <ifc2x3/IfcAxis1Placement.h>
#include <ifc2x3/IfcAxis2Placement2D.h>
#include <ifc2x3/IfcAxis2Placement3D.h>
#include <ifc2x3/IfcBeam.h>
#include <ifc2x3/IfcBeamType.h>
#include <ifc2x3/IfcBezierCurve.h>
#include <ifc2x3/IfcBlobTexture.h>
#include <ifc2x3/IfcBlock.h>
#include <ifc2x3/IfcBoilerType.h>
#include <ifc2x3/IfcBooleanClippingResult.h>
#include <ifc2x3/IfcBooleanResult.h>
#include <ifc2x3/IfcBoundaryCondition.h>
#include <ifc2x3/IfcBoundaryEdgeCondition.h>
#include <ifc2x3/IfcBoundaryFaceCondition.h>
#include <ifc2x3/IfcBoundaryNodeCondition.h>
#include <ifc2x3/IfcBoundaryNodeConditionWarping.h>
#include <ifc2x3/IfcBoundedCurve.h>
#include <ifc2x3/IfcBoundedSurface.h>
#include <ifc2x3/IfcBoundingBox.h>
#include <ifc2x3/IfcBoxedHalfSpace.h>
#include <ifc2x3/IfcBSplineCurve.h>
#include <ifc2x3/IfcBuilding.h>
#include <ifc2x3/IfcBuildingElement.h>
#include <ifc2x3/IfcBuildingElementComponent.h>
#include <ifc2x3/IfcBuildingElementPart.h>
#include <ifc2x3/IfcBuildingElementProxy.h>
#include <ifc2x3/IfcBuildingElementProxyType.h>
#include <ifc2x3/IfcBuildingElementType.h>
#include <ifc2x3/IfcBuildingStorey.h>
#include <ifc2x3/IfcCableCarrierFittingType.h>
#include <ifc2x3/IfcCableCarrierSegmentType.h>
#include <ifc2x3/IfcCableSegmentType.h>
#include <ifc2x3/IfcCalendarDate.h>
#include <ifc2x3/IfcCartesianPoint.h>
#include <ifc2x3/IfcCartesianTransformationOperator.h>
#include <ifc2x3/IfcCartesianTransformationOperator2D.h>
#include <ifc2x3/IfcCartesianTransformationOperator2DnonUniform.h>
#include <ifc2x3/IfcCartesianTransformationOperator3D.h>
#include <ifc2x3/IfcCartesianTransformationOperator3DnonUniform.h>
#include <ifc2x3/IfcCenterLineProfileDef.h>
#include <ifc2x3/IfcChamferEdgeFeature.h>
#include <ifc2x3/IfcChillerType.h>
#include <ifc2x3/IfcCircle.h>
#include <ifc2x3/IfcCircleHollowProfileDef.h>
#include <ifc2x3/IfcCircleProfileDef.h>
#include <ifc2x3/IfcClassification.h>
#include <ifc2x3/IfcClassificationItem.h>
#include <ifc2x3/IfcClassificationItemRelationship.h>
#include <ifc2x3/IfcClassificationNotation.h>
#include <ifc2x3/IfcClassificationNotationFacet.h>
#include <ifc2x3/IfcClassificationReference.h>
#include <ifc2x3/IfcClosedShell.h>
#include <ifc2x3/IfcCoilType.h>
#include <ifc2x3/IfcColourRgb.h>
#include <ifc2x3/IfcColourSpecification.h>
#include <ifc2x3/IfcColumn.h>
#include <ifc2x3/IfcColumnType.h>
#include <ifc2x3/IfcComplexProperty.h>
#include <ifc2x3/IfcCompositeCurve.h>
#include <ifc2x3/IfcCompositeCurveSegment.h>
#include <ifc2x3/IfcCompositeProfileDef.h>
#include <ifc2x3/IfcCompressorType.h>
#include <ifc2x3/IfcCondenserType.h>
#include <ifc2x3/IfcCondition.h>
#include <ifc2x3/IfcConditionCriterion.h>
#include <ifc2x3/IfcConic.h>
#include <ifc2x3/IfcConnectedFaceSet.h>
#include <ifc2x3/IfcConnectionCurveGeometry.h>
#include <ifc2x3/IfcConnectionGeometry.h>
#include <ifc2x3/IfcConnectionPointEccentricity.h>
#include <ifc2x3/IfcConnectionPointGeometry.h>
#include <ifc2x3/IfcConnectionPortGeometry.h>
#include <ifc2x3/IfcConnectionSurfaceGeometry.h>
#include <ifc2x3/IfcConstraint.h>
#include <ifc2x3/IfcConstraintAggregationRelationship.h>
#include <ifc2x3/IfcConstraintClassificationRelationship.h>
#include <ifc2x3/IfcConstraintRelationship.h>
#include <ifc2x3/IfcConstructionEquipmentResource.h>
#include <ifc2x3/IfcConstructionMaterialResource.h>
#include <ifc2x3/IfcConstructionProductResource.h>
#include <ifc2x3/IfcConstructionResource.h>
#include <ifc2x3/IfcContextDependentUnit.h>
#include <ifc2x3/IfcControl.h>
#include <ifc2x3/IfcControllerType.h>
#include <ifc2x3/IfcConversionBasedUnit.h>
#include <ifc2x3/IfcCooledBeamType.h>
#include <ifc2x3/IfcCoolingTowerType.h>
#include <ifc2x3/IfcCoordinatedUniversalTimeOffset.h>
#include <ifc2x3/IfcCostItem.h>
#include <ifc2x3/IfcCostSchedule.h>
#include <ifc2x3/IfcCostValue.h>
#include <ifc2x3/IfcCovering.h>
#include <ifc2x3/IfcCoveringType.h>
#include <ifc2x3/IfcCraneRailAShapeProfileDef.h>
#include <ifc2x3/IfcCraneRailFShapeProfileDef.h>
#include <ifc2x3/IfcCrewResource.h>
#include <ifc2x3/IfcCsgPrimitive3D.h>
#include <ifc2x3/IfcCsgSolid.h>
#include <ifc2x3/IfcCShapeProfileDef.h>
#include <ifc2x3/IfcCurrencyRelationship.h>
#include <ifc2x3/IfcCurtainWall.h>
#include <ifc2x3/IfcCurtainWallType.h>
#include <ifc2x3/IfcCurve.h>
#include <ifc2x3/IfcCurveBoundedPlane.h>
#include <ifc2x3/IfcCurveStyle.h>
#include <ifc2x3/IfcCurveStyleFont.h>
#include <ifc2x3/IfcCurveStyleFontAndScaling.h>
#include <ifc2x3/IfcCurveStyleFontPattern.h>
#include <ifc2x3/IfcDamperType.h>
#include <ifc2x3/IfcDateAndTime.h>
#include <ifc2x3/IfcDefinedSymbol.h>
#include <ifc2x3/IfcDerivedProfileDef.h>
#include <ifc2x3/IfcDerivedUnit.h>
#include <ifc2x3/IfcDerivedUnitElement.h>
#include <ifc2x3/IfcDiameterDimension.h>
#include <ifc2x3/IfcDimensionalExponents.h>
#include <ifc2x3/IfcDimensionCalloutRelationship.h>
#include <ifc2x3/IfcDimensionCurve.h>
#include <ifc2x3/IfcDimensionCurveDirectedCallout.h>
#include <ifc2x3/IfcDimensionCurveTerminator.h>
#include <ifc2x3/IfcDimensionPair.h>
#include <ifc2x3/IfcDirection.h>
#include <ifc2x3/IfcDiscreteAccessory.h>
#include <ifc2x3/IfcDiscreteAccessoryType.h>
#include <ifc2x3/IfcDistributionChamberElement.h>
#include <ifc2x3/IfcDistributionChamberElementType.h>
#include <ifc2x3/IfcDistributionControlElement.h>
#include <ifc2x3/IfcDistributionControlElementType.h>
#include <ifc2x3/IfcDistributionElement.h>
#include <ifc2x3/IfcDistributionElementType.h>
#include <ifc2x3/IfcDistributionFlowElement.h>
#include <ifc2x3/IfcDistributionFlowElementType.h>
#include <ifc2x3/IfcDistributionPort.h>
#include <ifc2x3/IfcDocumentElectronicFormat.h>
#include <ifc2x3/IfcDocumentInformation.h>
#include <ifc2x3/IfcDocumentInformationRelationship.h>
#include <ifc2x3/IfcDocumentReference.h>
#include <ifc2x3/IfcDoor.h>
#include <ifc2x3/IfcDoorLiningProperties.h>
#include <ifc2x3/IfcDoorPanelProperties.h>
#include <ifc2x3/IfcDoorStyle.h>
#include <ifc2x3/IfcDraughtingCallout.h>
#include <ifc2x3/IfcDraughtingCalloutRelationship.h>
#include <ifc2x3/IfcDraughtingPreDefinedColour.h>
#include <ifc2x3/IfcDraughtingPreDefinedCurveFont.h>
#include <ifc2x3/IfcDraughtingPreDefinedTextFont.h>
#include <ifc2x3/IfcDuctFittingType.h>
#include <ifc2x3/IfcDuctSegmentType.h>
#include <ifc2x3/IfcDuctSilencerType.h>
#include <ifc2x3/IfcEdge.h>
#include <ifc2x3/IfcEdgeCurve.h>
#include <ifc2x3/IfcEdgeFeature.h>
#include <ifc2x3/IfcEdgeLoop.h>
#include <ifc2x3/IfcElectricalBaseProperties.h>
#include <ifc2x3/IfcElectricalCircuit.h>
#include <ifc2x3/IfcElectricalElement.h>
#include <ifc2x3/IfcElectricApplianceType.h>
#include <ifc2x3/IfcElectricDistributionPoint.h>
#include <ifc2x3/IfcElectricFlowStorageDeviceType.h>
#include <ifc2x3/IfcElectricGeneratorType.h>
#include <ifc2x3/IfcElectricHeaterType.h>
#include <ifc2x3/IfcElectricMotorType.h>
#include <ifc2x3/IfcElectricTimeControlType.h>
#include <ifc2x3/IfcElement.h>
#include <ifc2x3/IfcElementarySurface.h>
#include <ifc2x3/IfcElementAssembly.h>
#include <ifc2x3/IfcElementComponent.h>
#include <ifc2x3/IfcElementComponentType.h>
#include <ifc2x3/IfcElementQuantity.h>
#include <ifc2x3/IfcElementType.h>
#include <ifc2x3/IfcEllipse.h>
#include <ifc2x3/IfcEllipseProfileDef.h>
#include <ifc2x3/IfcEnergyConversionDevice.h>
#include <ifc2x3/IfcEnergyConversionDeviceType.h>
#include <ifc2x3/IfcEnergyProperties.h>
#include <ifc2x3/IfcEnvironmentalImpactValue.h>
#include <ifc2x3/IfcEquipmentElement.h>
#include <ifc2x3/IfcEquipmentStandard.h>
#include <ifc2x3/IfcEvaporativeCoolerType.h>
#include <ifc2x3/IfcEvaporatorType.h>
#include <ifc2x3/IfcExtendedMaterialProperties.h>
#include <ifc2x3/IfcExternallyDefinedHatchStyle.h>
#include <ifc2x3/IfcExternallyDefinedSurfaceStyle.h>
#include <ifc2x3/IfcExternallyDefinedSymbol.h>
#include <ifc2x3/IfcExternallyDefinedTextFont.h>
#include <ifc2x3/IfcExternalReference.h>
#include <ifc2x3/IfcExtrudedAreaSolid.h>
#include <ifc2x3/IfcFace.h>
#include <ifc2x3/IfcFaceBasedSurfaceModel.h>
#include <ifc2x3/IfcFaceBound.h>
#include <ifc2x3/IfcFaceOuterBound.h>
#include <ifc2x3/IfcFaceSurface.h>
#include <ifc2x3/IfcFacetedBrep.h>
#include <ifc2x3/IfcFacetedBrepWithVoids.h>
#include <ifc2x3/IfcFailureConnectionCondition.h>
#include <ifc2x3/IfcFanType.h>
#include <ifc2x3/IfcFastener.h>
#include <ifc2x3/IfcFastenerType.h>
#include <ifc2x3/IfcFeatureElement.h>
#include <ifc2x3/IfcFeatureElementAddition.h>
#include <ifc2x3/IfcFeatureElementSubtraction.h>
#include <ifc2x3/IfcFillAreaStyle.h>
#include <ifc2x3/IfcFillAreaStyleHatching.h>
#include <ifc2x3/IfcFillAreaStyleTiles.h>
#include <ifc2x3/IfcFillAreaStyleTileSymbolWithStyle.h>
#include <ifc2x3/IfcFilterType.h>
#include <ifc2x3/IfcFireSuppressionTerminalType.h>
#include <ifc2x3/IfcFlowController.h>
#include <ifc2x3/IfcFlowControllerType.h>
#include <ifc2x3/IfcFlowFitting.h>
#include <ifc2x3/IfcFlowFittingType.h>
#include <ifc2x3/IfcFlowInstrumentType.h>
#include <ifc2x3/IfcFlowMeterType.h>
#include <ifc2x3/IfcFlowMovingDevice.h>
#include <ifc2x3/IfcFlowMovingDeviceType.h>
#include <ifc2x3/IfcFlowSegment.h>
#include <ifc2x3/IfcFlowSegmentType.h>
#include <ifc2x3/IfcFlowStorageDevice.h>
#include <ifc2x3/IfcFlowStorageDeviceType.h>
#include <ifc2x3/IfcFlowTerminal.h>
#include <ifc2x3/IfcFlowTerminalType.h>
#include <ifc2x3/IfcFlowTreatmentDevice.h>
#include <ifc2x3/IfcFlowTreatmentDeviceType.h>
#include <ifc2x3/IfcFluidFlowProperties.h>
#include <ifc2x3/IfcFooting.h>
#include <ifc2x3/IfcFuelProperties.h>
#include <ifc2x3/IfcFurnishingElement.h>
#include <ifc2x3/IfcFurnishingElementType.h>
#include <ifc2x3/IfcFurnitureStandard.h>
#include <ifc2x3/IfcFurnitureType.h>
#include <ifc2x3/IfcGasTerminalType.h>
#include <ifc2x3/IfcGeneralMaterialProperties.h>
#include <ifc2x3/IfcGeneralProfileProperties.h>
#include <ifc2x3/IfcGeometricCurveSet.h>
#include <ifc2x3/IfcGeometricRepresentationContext.h>
#include <ifc2x3/IfcGeometricRepresentationItem.h>
#include <ifc2x3/IfcGeometricRepresentationSubContext.h>
#include <ifc2x3/IfcGeometricSet.h>
#include <ifc2x3/IfcGrid.h>
#include <ifc2x3/IfcGridAxis.h>
#include <ifc2x3/IfcGridPlacement.h>
#include <ifc2x3/IfcGroup.h>
#include <ifc2x3/IfcHalfSpaceSolid.h>
#include <ifc2x3/IfcHeatExchangerType.h>
#include <ifc2x3/IfcHumidifierType.h>
#include <ifc2x3/IfcHygroscopicMaterialProperties.h>
#include <ifc2x3/IfcImageTexture.h>
#include <ifc2x3/IfcInventory.h>
#include <ifc2x3/IfcIrregularTimeSeries.h>
#include <ifc2x3/IfcIrregularTimeSeriesValue.h>
#include <ifc2x3/IfcIShapeProfileDef.h>
#include <ifc2x3/IfcJunctionBoxType.h>
#include <ifc2x3/IfcLaborResource.h>
#include <ifc2x3/IfcLampType.h>
#include <ifc2x3/IfcLibraryInformation.h>
#include <ifc2x3/IfcLibraryReference.h>
#include <ifc2x3/IfcLightDistributionData.h>
#include <ifc2x3/IfcLightFixtureType.h>
#include <ifc2x3/IfcLightIntensityDistribution.h>
#include <ifc2x3/IfcLightSource.h>
#include <ifc2x3/IfcLightSourceAmbient.h>
#include <ifc2x3/IfcLightSourceDirectional.h>
#include <ifc2x3/IfcLightSourceGoniometric.h>
#include <ifc2x3/IfcLightSourcePositional.h>
#include <ifc2x3/IfcLightSourceSpot.h>
#include <ifc2x3/IfcLine.h>
#include <ifc2x3/IfcLinearDimension.h>
#include <ifc2x3/IfcLocalPlacement.h>
#include <ifc2x3/IfcLocalTime.h>
#include <ifc2x3/IfcLoop.h>
#include <ifc2x3/IfcLShapeProfileDef.h>
#include <ifc2x3/IfcManifoldSolidBrep.h>
#include <ifc2x3/IfcMappedItem.h>
#include <ifc2x3/IfcMaterial.h>
#include <ifc2x3/IfcMaterialClassificationRelationship.h>
#include <ifc2x3/IfcMaterialDefinitionRepresentation.h>
#include <ifc2x3/IfcMaterialLayer.h>
#include <ifc2x3/IfcMaterialLayerSet.h>
#include <ifc2x3/IfcMaterialLayerSetUsage.h>
#include <ifc2x3/IfcMaterialList.h>
#include <ifc2x3/IfcMaterialProperties.h>
#include <ifc2x3/IfcMeasureWithUnit.h>
#include <ifc2x3/IfcMechanicalConcreteMaterialProperties.h>
#include <ifc2x3/IfcMechanicalFastener.h>
#include <ifc2x3/IfcMechanicalFastenerType.h>
#include <ifc2x3/IfcMechanicalMaterialProperties.h>
#include <ifc2x3/IfcMechanicalSteelMaterialProperties.h>
#include <ifc2x3/IfcMember.h>
#include <ifc2x3/IfcMemberType.h>
#include <ifc2x3/IfcMetric.h>
#include <ifc2x3/IfcMonetaryUnit.h>
#include <ifc2x3/IfcMotorConnectionType.h>
#include <ifc2x3/IfcMove.h>
#include <ifc2x3/IfcNamedUnit.h>
#include <ifc2x3/IfcObject.h>
#include <ifc2x3/IfcObjectDefinition.h>
#include <ifc2x3/IfcObjective.h>
#include <ifc2x3/IfcObjectPlacement.h>
#include <ifc2x3/IfcOccupant.h>
#include <ifc2x3/IfcOffsetCurve2D.h>
#include <ifc2x3/IfcOffsetCurve3D.h>
#include <ifc2x3/IfcOneDirectionRepeatFactor.h>
#include <ifc2x3/IfcOpeningElement.h>
#include <ifc2x3/IfcOpenShell.h>
#include <ifc2x3/IfcOpticalMaterialProperties.h>
#include <ifc2x3/IfcOrderAction.h>
#include <ifc2x3/IfcOrganization.h>
#include <ifc2x3/IfcOrganizationRelationship.h>
#include <ifc2x3/IfcOrientedEdge.h>
#include <ifc2x3/IfcOutletType.h>
#include <ifc2x3/IfcOwnerHistory.h>
#include <ifc2x3/IfcParameterizedProfileDef.h>
#include <ifc2x3/IfcPath.h>
#include <ifc2x3/IfcPerformanceHistory.h>
#include <ifc2x3/IfcPermeableCoveringProperties.h>
#include <ifc2x3/IfcPermit.h>
#include <ifc2x3/IfcPerson.h>
#include <ifc2x3/IfcPersonAndOrganization.h>
#include <ifc2x3/IfcPhysicalComplexQuantity.h>
#include <ifc2x3/IfcPhysicalQuantity.h>
#include <ifc2x3/IfcPhysicalSimpleQuantity.h>
#include <ifc2x3/IfcPile.h>
#include <ifc2x3/IfcPipeFittingType.h>
#include <ifc2x3/IfcPipeSegmentType.h>
#include <ifc2x3/IfcPixelTexture.h>
#include <ifc2x3/IfcPlacement.h>
#include <ifc2x3/IfcPlanarBox.h>
#include <ifc2x3/IfcPlanarExtent.h>
#include <ifc2x3/IfcPlane.h>
#include <ifc2x3/IfcPlate.h>
#include <ifc2x3/IfcPlateType.h>
#include <ifc2x3/IfcPoint.h>
#include <ifc2x3/IfcPointOnCurve.h>
#include <ifc2x3/IfcPointOnSurface.h>
#include <ifc2x3/IfcPolygonalBoundedHalfSpace.h>
#include <ifc2x3/IfcPolyline.h>
#include <ifc2x3/IfcPolyLoop.h>
#include <ifc2x3/IfcPort.h>
#include <ifc2x3/IfcPostalAddress.h>
#include <ifc2x3/IfcPreDefinedColour.h>
#include <ifc2x3/IfcPreDefinedCurveFont.h>
#include <ifc2x3/IfcPreDefinedDimensionSymbol.h>
#include <ifc2x3/IfcPreDefinedItem.h>
#include <ifc2x3/IfcPreDefinedPointMarkerSymbol.h>
#include <ifc2x3/IfcPreDefinedSymbol.h>
#include <ifc2x3/IfcPreDefinedTerminatorSymbol.h>
#include <ifc2x3/IfcPreDefinedTextFont.h>
#include <ifc2x3/IfcPresentationLayerAssignment.h>
#include <ifc2x3/IfcPresentationLayerWithStyle.h>
#include <ifc2x3/IfcPresentationStyle.h>
#include <ifc2x3/IfcPresentationStyleAssignment.h>
#include <ifc2x3/IfcProcedure.h>
#include <ifc2x3/IfcProcess.h>
#include <ifc2x3/IfcProduct.h>
#include <ifc2x3/IfcProductDefinitionShape.h>
#include <ifc2x3/IfcProductRepresentation.h>
#include <ifc2x3/IfcProductsOfCombustionProperties.h>
#include <ifc2x3/IfcProfileDef.h>
#include <ifc2x3/IfcProfileProperties.h>
#include <ifc2x3/IfcProject.h>
#include <ifc2x3/IfcProjectionCurve.h>
#include <ifc2x3/IfcProjectionElement.h>
#include <ifc2x3/IfcProjectOrder.h>
#include <ifc2x3/IfcProjectOrderRecord.h>
#include <ifc2x3/IfcProperty.h>
#include <ifc2x3/IfcPropertyBoundedValue.h>
#include <ifc2x3/IfcPropertyConstraintRelationship.h>
#include <ifc2x3/IfcPropertyDefinition.h>
#include <ifc2x3/IfcPropertyDependencyRelationship.h>
#include <ifc2x3/IfcPropertyEnumeratedValue.h>
#include <ifc2x3/IfcPropertyEnumeration.h>
#include <ifc2x3/IfcPropertyListValue.h>
#include <ifc2x3/IfcPropertyReferenceValue.h>
#include <ifc2x3/IfcPropertySet.h>
#include <ifc2x3/IfcPropertySetDefinition.h>
#include <ifc2x3/IfcPropertySingleValue.h>
#include <ifc2x3/IfcPropertyTableValue.h>
#include <ifc2x3/IfcProtectiveDeviceType.h>
#include <ifc2x3/IfcProxy.h>
#include <ifc2x3/IfcPumpType.h>
#include <ifc2x3/IfcQuantityArea.h>
#include <ifc2x3/IfcQuantityCount.h>
#include <ifc2x3/IfcQuantityLength.h>
#include <ifc2x3/IfcQuantityTime.h>
#include <ifc2x3/IfcQuantityVolume.h>
#include <ifc2x3/IfcQuantityWeight.h>
#include <ifc2x3/IfcRadiusDimension.h>
#include <ifc2x3/IfcRailing.h>
#include <ifc2x3/IfcRailingType.h>
#include <ifc2x3/IfcRamp.h>
#include <ifc2x3/IfcRampFlight.h>
#include <ifc2x3/IfcRampFlightType.h>
#include <ifc2x3/IfcRationalBezierCurve.h>
#include <ifc2x3/IfcRectangleHollowProfileDef.h>
#include <ifc2x3/IfcRectangleProfileDef.h>
#include <ifc2x3/IfcRectangularPyramid.h>
#include <ifc2x3/IfcRectangularTrimmedSurface.h>
#include <ifc2x3/IfcReferencesValueDocument.h>
#include <ifc2x3/IfcRegularTimeSeries.h>
#include <ifc2x3/IfcReinforcementBarProperties.h>
#include <ifc2x3/IfcReinforcementDefinitionProperties.h>
#include <ifc2x3/IfcReinforcingBar.h>
#include <ifc2x3/IfcReinforcingElement.h>
#include <ifc2x3/IfcReinforcingMesh.h>
#include <ifc2x3/IfcRelAggregates.h>
#include <ifc2x3/IfcRelAssigns.h>
#include <ifc2x3/IfcRelAssignsTasks.h>
#include <ifc2x3/IfcRelAssignsToActor.h>
#include <ifc2x3/IfcRelAssignsToControl.h>
#include <ifc2x3/IfcRelAssignsToGroup.h>
#include <ifc2x3/IfcRelAssignsToProcess.h>
#include <ifc2x3/IfcRelAssignsToProduct.h>
#include <ifc2x3/IfcRelAssignsToProjectOrder.h>
#include <ifc2x3/IfcRelAssignsToResource.h>
#include <ifc2x3/IfcRelAssociates.h>
#include <ifc2x3/IfcRelAssociatesAppliedValue.h>
#include <ifc2x3/IfcRelAssociatesApproval.h>
#include <ifc2x3/IfcRelAssociatesClassification.h>
#include <ifc2x3/IfcRelAssociatesConstraint.h>
#include <ifc2x3/IfcRelAssociatesDocument.h>
#include <ifc2x3/IfcRelAssociatesLibrary.h>
#include <ifc2x3/IfcRelAssociatesMaterial.h>
#include <ifc2x3/IfcRelAssociatesProfileProperties.h>
#include <ifc2x3/IfcRelationship.h>
#include <ifc2x3/IfcRelaxation.h>
#include <ifc2x3/IfcRelConnects.h>
#include <ifc2x3/IfcRelConnectsElements.h>
#include <ifc2x3/IfcRelConnectsPathElements.h>
#include <ifc2x3/IfcRelConnectsPorts.h>
#include <ifc2x3/IfcRelConnectsPortToElement.h>
#include <ifc2x3/IfcRelConnectsStructuralActivity.h>
#include <ifc2x3/IfcRelConnectsStructuralElement.h>
#include <ifc2x3/IfcRelConnectsStructuralMember.h>
#include <ifc2x3/IfcRelConnectsWithEccentricity.h>
#include <ifc2x3/IfcRelConnectsWithRealizingElements.h>
#include <ifc2x3/IfcRelContainedInSpatialStructure.h>
#include <ifc2x3/IfcRelCoversBldgElements.h>
#include <ifc2x3/IfcRelCoversSpaces.h>
#include <ifc2x3/IfcRelDecomposes.h>
#include <ifc2x3/IfcRelDefines.h>
#include <ifc2x3/IfcRelDefinesByProperties.h>
#include <ifc2x3/IfcRelDefinesByType.h>
#include <ifc2x3/IfcRelFillsElement.h>
#include <ifc2x3/IfcRelFlowControlElements.h>
#include <ifc2x3/IfcRelInteractionRequirements.h>
#include <ifc2x3/IfcRelNests.h>
#include <ifc2x3/IfcRelOccupiesSpaces.h>
#include <ifc2x3/IfcRelOverridesProperties.h>
#include <ifc2x3/IfcRelProjectsElement.h>
#include <ifc2x3/IfcRelReferencedInSpatialStructure.h>
#include <ifc2x3/IfcRelSchedulesCostItems.h>
#include <ifc2x3/IfcRelSequence.h>
#include <ifc2x3/IfcRelServicesBuildings.h>
#include <ifc2x3/IfcRelSpaceBoundary.h>
#include <ifc2x3/IfcRelVoidsElement.h>
#include <ifc2x3/IfcRepresentation.h>
#include <ifc2x3/IfcRepresentationContext.h>
#include <ifc2x3/IfcRepresentationItem.h>
#include <ifc2x3/IfcRepresentationMap.h>
#include <ifc2x3/IfcResource.h>
#include <ifc2x3/IfcRevolvedAreaSolid.h>
#include <ifc2x3/IfcRibPlateProfileProperties.h>
#include <ifc2x3/IfcRightCircularCone.h>
#include <ifc2x3/IfcRightCircularCylinder.h>
#include <ifc2x3/IfcRoof.h>
#include <ifc2x3/IfcRoot.h>
#include <ifc2x3/IfcRoundedEdgeFeature.h>
#include <ifc2x3/IfcRoundedRectangleProfileDef.h>
#include <ifc2x3/IfcSanitaryTerminalType.h>
#include <ifc2x3/IfcScheduleTimeControl.h>
#include <ifc2x3/IfcSectionedSpine.h>
#include <ifc2x3/IfcSectionProperties.h>
#include <ifc2x3/IfcSectionReinforcementProperties.h>
#include <ifc2x3/IfcSensorType.h>
#include <ifc2x3/IfcServiceLife.h>
#include <ifc2x3/IfcServiceLifeFactor.h>
#include <ifc2x3/IfcShapeAspect.h>
#include <ifc2x3/IfcShapeModel.h>
#include <ifc2x3/IfcShapeRepresentation.h>
#include <ifc2x3/IfcShellBasedSurfaceModel.h>
#include <ifc2x3/IfcSimpleProperty.h>
#include <ifc2x3/IfcSite.h>
#include <ifc2x3/IfcSIUnit.h>
#include <ifc2x3/IfcSlab.h>
#include <ifc2x3/IfcSlabType.h>
#include <ifc2x3/IfcSlippageConnectionCondition.h>
#include <ifc2x3/IfcSolidModel.h>
#include <ifc2x3/IfcSoundProperties.h>
#include <ifc2x3/IfcSoundValue.h>
#include <ifc2x3/IfcSpace.h>
#include <ifc2x3/IfcSpaceHeaterType.h>
#include <ifc2x3/IfcSpaceProgram.h>
#include <ifc2x3/IfcSpaceThermalLoadProperties.h>
#include <ifc2x3/IfcSpaceType.h>
#include <ifc2x3/IfcSpatialStructureElement.h>
#include <ifc2x3/IfcSpatialStructureElementType.h>
#include <ifc2x3/IfcSphere.h>
#include <ifc2x3/IfcStackTerminalType.h>
#include <ifc2x3/IfcStair.h>
#include <ifc2x3/IfcStairFlight.h>
#include <ifc2x3/IfcStairFlightType.h>
#include <ifc2x3/IfcStructuralAction.h>
#include <ifc2x3/IfcStructuralActivity.h>
#include <ifc2x3/IfcStructuralAnalysisModel.h>
#include <ifc2x3/IfcStructuralConnection.h>
#include <ifc2x3/IfcStructuralConnectionCondition.h>
#include <ifc2x3/IfcStructuralCurveConnection.h>
#include <ifc2x3/IfcStructuralCurveMember.h>
#include <ifc2x3/IfcStructuralCurveMemberVarying.h>
#include <ifc2x3/IfcStructuralItem.h>
#include <ifc2x3/IfcStructuralLinearAction.h>
#include <ifc2x3/IfcStructuralLinearActionVarying.h>
#include <ifc2x3/IfcStructuralLoad.h>
#include <ifc2x3/IfcStructuralLoadGroup.h>
#include <ifc2x3/IfcStructuralLoadLinearForce.h>
#include <ifc2x3/IfcStructuralLoadPlanarForce.h>
#include <ifc2x3/IfcStructuralLoadSingleDisplacement.h>
#include <ifc2x3/IfcStructuralLoadSingleDisplacementDistortion.h>
#include <ifc2x3/IfcStructuralLoadSingleForce.h>
#include <ifc2x3/IfcStructuralLoadSingleForceWarping.h>
#include <ifc2x3/IfcStructuralLoadStatic.h>
#include <ifc2x3/IfcStructuralLoadTemperature.h>
#include <ifc2x3/IfcStructuralMember.h>
#include <ifc2x3/IfcStructuralPlanarAction.h>
#include <ifc2x3/IfcStructuralPlanarActionVarying.h>
#include <ifc2x3/IfcStructuralPointAction.h>
#include <ifc2x3/IfcStructuralPointConnection.h>
#include <ifc2x3/IfcStructuralPointReaction.h>
#include <ifc2x3/IfcStructuralProfileProperties.h>
#include <ifc2x3/IfcStructuralReaction.h>
#include <ifc2x3/IfcStructuralResultGroup.h>
#include <ifc2x3/IfcStructuralSteelProfileProperties.h>
#include <ifc2x3/IfcStructuralSurfaceConnection.h>
#include <ifc2x3/IfcStructuralSurfaceMember.h>
#include <ifc2x3/IfcStructuralSurfaceMemberVarying.h>
#include <ifc2x3/IfcStructuredDimensionCallout.h>
#include <ifc2x3/IfcStyledItem.h>
#include <ifc2x3/IfcStyledRepresentation.h>
#include <ifc2x3/IfcStyleModel.h>
#include <ifc2x3/IfcSubContractResource.h>
#include <ifc2x3/IfcSubedge.h>
#include <ifc2x3/IfcSurface.h>
#include <ifc2x3/IfcSurfaceCurveSweptAreaSolid.h>
#include <ifc2x3/IfcSurfaceOfLinearExtrusion.h>
#include <ifc2x3/IfcSurfaceOfRevolution.h>
#include <ifc2x3/IfcSurfaceStyle.h>
#include <ifc2x3/IfcSurfaceStyleLighting.h>
#include <ifc2x3/IfcSurfaceStyleRefraction.h>
#include <ifc2x3/IfcSurfaceStyleRendering.h>
#include <ifc2x3/IfcSurfaceStyleShading.h>
#include <ifc2x3/IfcSurfaceStyleWithTextures.h>
#include <ifc2x3/IfcSurfaceTexture.h>
#include <ifc2x3/IfcSweptAreaSolid.h>
#include <ifc2x3/IfcSweptDiskSolid.h>
#include <ifc2x3/IfcSweptSurface.h>
#include <ifc2x3/IfcSwitchingDeviceType.h>
#include <ifc2x3/IfcSymbolStyle.h>
#include <ifc2x3/IfcSystem.h>
#include <ifc2x3/IfcSystemFurnitureElementType.h>
#include <ifc2x3/IfcTable.h>
#include <ifc2x3/IfcTableRow.h>
#include <ifc2x3/IfcTankType.h>
#include <ifc2x3/IfcTask.h>
#include <ifc2x3/IfcTelecomAddress.h>
#include <ifc2x3/IfcTendon.h>
#include <ifc2x3/IfcTendonAnchor.h>
#include <ifc2x3/IfcTerminatorSymbol.h>
#include <ifc2x3/IfcTextLiteral.h>
#include <ifc2x3/IfcTextLiteralWithExtent.h>
#include <ifc2x3/IfcTextStyle.h>
#include <ifc2x3/IfcTextStyleFontModel.h>
#include <ifc2x3/IfcTextStyleForDefinedFont.h>
#include <ifc2x3/IfcTextStyleTextModel.h>
#include <ifc2x3/IfcTextStyleWithBoxCharacteristics.h>
#include <ifc2x3/IfcTextureCoordinate.h>
#include <ifc2x3/IfcTextureCoordinateGenerator.h>
#include <ifc2x3/IfcTextureMap.h>
#include <ifc2x3/IfcTextureVertex.h>
#include <ifc2x3/IfcThermalMaterialProperties.h>
#include <ifc2x3/IfcTimeSeries.h>
#include <ifc2x3/IfcTimeSeriesReferenceRelationship.h>
#include <ifc2x3/IfcTimeSeriesSchedule.h>
#include <ifc2x3/IfcTimeSeriesValue.h>
#include <ifc2x3/IfcTopologicalRepresentationItem.h>
#include <ifc2x3/IfcTopologyRepresentation.h>
#include <ifc2x3/IfcTransformerType.h>
#include <ifc2x3/IfcTransportElement.h>
#include <ifc2x3/IfcTransportElementType.h>
#include <ifc2x3/IfcTrapeziumProfileDef.h>
#include <ifc2x3/IfcTrimmedCurve.h>
#include <ifc2x3/IfcTShapeProfileDef.h>
#include <ifc2x3/IfcTubeBundleType.h>
#include <ifc2x3/IfcTwoDirectionRepeatFactor.h>
#include <ifc2x3/IfcTypeObject.h>
#include <ifc2x3/IfcTypeProduct.h>
#include <ifc2x3/IfcUnitaryEquipmentType.h>
#include <ifc2x3/IfcUnitAssignment.h>
#include <ifc2x3/IfcUShapeProfileDef.h>
#include <ifc2x3/IfcValveType.h>
#include <ifc2x3/IfcVector.h>
#include <ifc2x3/IfcVertex.h>
#include <ifc2x3/IfcVertexBasedTextureMap.h>
#include <ifc2x3/IfcVertexLoop.h>
#include <ifc2x3/IfcVertexPoint.h>
#include <ifc2x3/IfcVibrationIsolatorType.h>
#include <ifc2x3/IfcVirtualElement.h>
#include <ifc2x3/IfcVirtualGridIntersection.h>
#include <ifc2x3/IfcWall.h>
#include <ifc2x3/IfcWallStandardCase.h>
#include <ifc2x3/IfcWallType.h>
#include <ifc2x3/IfcWasteTerminalType.h>
#include <ifc2x3/IfcWaterProperties.h>
#include <ifc2x3/IfcWindow.h>
#include <ifc2x3/IfcWindowLiningProperties.h>
#include <ifc2x3/IfcWindowPanelProperties.h>
#include <ifc2x3/IfcWindowStyle.h>
#include <ifc2x3/IfcWorkControl.h>
#include <ifc2x3/IfcWorkPlan.h>
#include <ifc2x3/IfcWorkSchedule.h>
#include <ifc2x3/IfcZone.h>
#include <ifc2x3/IfcZShapeProfileDef.h>
#include <ifc2x3/IfcActorSelect.h>
#include <ifc2x3/IfcAppliedValueSelect.h>
#include <ifc2x3/IfcAxis2Placement.h>
#include <ifc2x3/IfcBooleanOperand.h>
#include <ifc2x3/IfcCharacterStyleSelect.h>
#include <ifc2x3/IfcClassificationNotationSelect.h>
#include <ifc2x3/IfcColour.h>
#include <ifc2x3/IfcColourOrFactor.h>
#include <ifc2x3/IfcConditionCriterionSelect.h>
#include <ifc2x3/IfcCsgSelect.h>
#include <ifc2x3/IfcCurveFontOrScaledCurveFontSelect.h>
#include <ifc2x3/IfcCurveOrEdgeCurve.h>
#include <ifc2x3/IfcCurveStyleFontSelect.h>
#include <ifc2x3/IfcDateTimeSelect.h>
#include <ifc2x3/IfcDefinedSymbolSelect.h>
#include <ifc2x3/IfcDerivedMeasureValue.h>
#include <ifc2x3/IfcDocumentSelect.h>
#include <ifc2x3/IfcDraughtingCalloutElement.h>
#include <ifc2x3/IfcFillAreaStyleTileShapeSelect.h>
#include <ifc2x3/IfcFillStyleSelect.h>
#include <ifc2x3/IfcGeometricSetSelect.h>
#include <ifc2x3/IfcHatchLineDistanceSelect.h>
#include <ifc2x3/IfcLayeredItem.h>
#include <ifc2x3/IfcLibrarySelect.h>
#include <ifc2x3/IfcLightDistributionDataSourceSelect.h>
#include <ifc2x3/IfcMaterialSelect.h>
#include <ifc2x3/IfcMeasureValue.h>
#include <ifc2x3/IfcMetricValueSelect.h>
#include <ifc2x3/IfcObjectReferenceSelect.h>
#include <ifc2x3/IfcOrientationSelect.h>
#include <ifc2x3/IfcPointOrVertexPoint.h>
#include <ifc2x3/IfcPresentationStyleSelect.h>
#include <ifc2x3/IfcShell.h>
#include <ifc2x3/IfcSimpleValue.h>
#include <ifc2x3/IfcSizeSelect.h>
#include <ifc2x3/IfcSpecularHighlightSelect.h>
#include <ifc2x3/IfcStructuralActivityAssignmentSelect.h>
#include <ifc2x3/IfcSurfaceOrFaceSurface.h>
#include <ifc2x3/IfcSurfaceStyleElementSelect.h>
#include <ifc2x3/IfcSymbolStyleSelect.h>
#include <ifc2x3/IfcTextFontSelect.h>
#include <ifc2x3/IfcTextStyleSelect.h>
#include <ifc2x3/IfcTrimmingSelect.h>
#include <ifc2x3/IfcUnit.h>
#include <ifc2x3/IfcValue.h>
#include <ifc2x3/IfcVectorOrDirection.h>

#include <Step/Aggregation.h>
#include <Step/BaseEntity.h>
#include <Step/String.h>

#include <vector>



using namespace ifc2x3;

SPFWriter::SPFWriter(ExpressDataSet *expressDataSet) : Step::BaseSPFWriter(expressDataSet)
{
}

SPFWriter::~SPFWriter()
{
}

bool SPFWriter::write(std::ostream& filestream)
{
    Step::MapOfEntities &mapOfEntities = m_expressDataSet->getAll();
    Step::MapOfEntities::iterator it_map = mapOfEntities.begin();
    std::vector< Step::BaseEntity * > vectorOfEntities(mapOfEntities.size());
    std::vector< Step::BaseEntity * >::iterator it_vector = vectorOfEntities.begin();

    if (!init(filestream))
    {
        return false;
    }
    writeHeader();
    m_expressDataSet->instantiateAll();
    while (it_map != mapOfEntities.end())
    {
        (*it_vector) = (*it_map).second.get();
        ++it_map;
        ++it_vector;
    }
    std::sort(vectorOfEntities.begin(), vectorOfEntities.end(), Step::keySort);
    if(_callback)
    {
        _callback->setMaximum(vectorOfEntities.size());
    }
    it_vector = vectorOfEntities.begin();
    size_t nb=0;
    while (it_vector != vectorOfEntities.end())
    {
        (*it_vector)->acceptVisitor(this);
        ++it_vector;
        if(_callback)
        {
            // update progress callback
            _callback->setProgress(++nb);
        }
    }
    writeEnder();
    if(_callback)
    {
        // update progress callback
        _callback->setProgress(vectorOfEntities.size());
    }
    return true;
}

bool SPFWriter::visitIfc2DCompositeCurve(Ifc2DCompositeCurve *value)
{
    outputStream() << "#" << value->getKey() << "=IFC2DCOMPOSITECURVE(";
    if (value->testSegments() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getSegments()).size())
            {
                List_IfcCompositeCurveSegment_1_n::iterator it = (value->getSegments()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getSegments()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getSelfIntersect()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getSelfIntersect()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcActionRequest(IfcActionRequest *value)
{
    outputStream() << "#" << value->getKey() << "=IFCACTIONREQUEST(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRequestID()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRequestID()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcActor(IfcActor *value)
{
    outputStream() << "#" << value->getKey() << "=IFCACTOR(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTheActor()))
    {
        outputStream() << "$";
    }
    else
    {
        writeIfcActorSelect(value->getTheActor());
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcActorRole(IfcActorRole *value)
{
    outputStream() << "#" << value->getKey() << "=IFCACTORROLE(";
    if (Step::isUnset(value->getRole()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRole()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getUserDefinedRole()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getUserDefinedRole()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcActuatorType(IfcActuatorType *value)
{
    outputStream() << "#" << value->getKey() << "=IFCACTUATORTYPE(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getApplicableOccurrence()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getApplicableOccurrence()); 
    }
    outputStream() << ",";
    if (value->testHasPropertySets() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getHasPropertySets()).size())
            {
                Set_IfcPropertySetDefinition_1_n::iterator it = (value->getHasPropertySets()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getHasPropertySets()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (value->testRepresentationMaps() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRepresentationMaps()).size())
            {
                List_IfcRepresentationMap_1_n::iterator it = (value->getRepresentationMaps()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRepresentationMaps()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getElementType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getElementType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPredefinedType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPredefinedType()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcAddress(IfcAddress *value)
{
    outputStream() << "#" << value->getKey() << "=IFCADDRESS(";
    if (Step::isUnset(value->getPurpose()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPurpose()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getUserDefinedPurpose()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getUserDefinedPurpose()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcAirTerminalBoxType(IfcAirTerminalBoxType *value)
{
    outputStream() << "#" << value->getKey() << "=IFCAIRTERMINALBOXTYPE(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getApplicableOccurrence()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getApplicableOccurrence()); 
    }
    outputStream() << ",";
    if (value->testHasPropertySets() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getHasPropertySets()).size())
            {
                Set_IfcPropertySetDefinition_1_n::iterator it = (value->getHasPropertySets()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getHasPropertySets()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (value->testRepresentationMaps() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRepresentationMaps()).size())
            {
                List_IfcRepresentationMap_1_n::iterator it = (value->getRepresentationMaps()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRepresentationMaps()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getElementType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getElementType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPredefinedType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPredefinedType()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcAirTerminalType(IfcAirTerminalType *value)
{
    outputStream() << "#" << value->getKey() << "=IFCAIRTERMINALTYPE(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getApplicableOccurrence()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getApplicableOccurrence()); 
    }
    outputStream() << ",";
    if (value->testHasPropertySets() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getHasPropertySets()).size())
            {
                Set_IfcPropertySetDefinition_1_n::iterator it = (value->getHasPropertySets()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getHasPropertySets()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (value->testRepresentationMaps() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRepresentationMaps()).size())
            {
                List_IfcRepresentationMap_1_n::iterator it = (value->getRepresentationMaps()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRepresentationMaps()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getElementType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getElementType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPredefinedType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPredefinedType()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcAirToAirHeatRecoveryType(IfcAirToAirHeatRecoveryType *value)
{
    outputStream() << "#" << value->getKey() << "=IFCAIRTOAIRHEATRECOVERYTYPE(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getApplicableOccurrence()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getApplicableOccurrence()); 
    }
    outputStream() << ",";
    if (value->testHasPropertySets() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getHasPropertySets()).size())
            {
                Set_IfcPropertySetDefinition_1_n::iterator it = (value->getHasPropertySets()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getHasPropertySets()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (value->testRepresentationMaps() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRepresentationMaps()).size())
            {
                List_IfcRepresentationMap_1_n::iterator it = (value->getRepresentationMaps()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRepresentationMaps()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getElementType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getElementType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPredefinedType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPredefinedType()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcAlarmType(IfcAlarmType *value)
{
    outputStream() << "#" << value->getKey() << "=IFCALARMTYPE(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getApplicableOccurrence()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getApplicableOccurrence()); 
    }
    outputStream() << ",";
    if (value->testHasPropertySets() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getHasPropertySets()).size())
            {
                Set_IfcPropertySetDefinition_1_n::iterator it = (value->getHasPropertySets()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getHasPropertySets()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (value->testRepresentationMaps() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRepresentationMaps()).size())
            {
                List_IfcRepresentationMap_1_n::iterator it = (value->getRepresentationMaps()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRepresentationMaps()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getElementType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getElementType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPredefinedType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPredefinedType()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcAngularDimension(IfcAngularDimension *value)
{
    outputStream() << "#" << value->getKey() << "=IFCANGULARDIMENSION(";
    if (value->testContents() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getContents()).size())
            {
                Set_IfcDraughtingCalloutElement_1_n::iterator it = (value->getContents()).begin();
                writeIfcDraughtingCalloutElement((*it).get());
                for (it++; it != (value->getContents()).end(); it++)
                {
                    outputStream() << ",";
                    writeIfcDraughtingCalloutElement((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcAnnotation(IfcAnnotation *value)
{
    outputStream() << "#" << value->getKey() << "=IFCANNOTATION(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectPlacement()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectPlacement()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRepresentation()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRepresentation()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcAnnotationCurveOccurrence(IfcAnnotationCurveOccurrence *value)
{
    outputStream() << "#" << value->getKey() << "=IFCANNOTATIONCURVEOCCURRENCE(";
    if (Step::isUnset(value->getItem()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getItem()); 
    }
    outputStream() << ",";
    if (value->testStyles() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getStyles()).size())
            {
                Set_IfcPresentationStyleAssignment_1_n::iterator it = (value->getStyles()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getStyles()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcAnnotationFillArea(IfcAnnotationFillArea *value)
{
    outputStream() << "#" << value->getKey() << "=IFCANNOTATIONFILLAREA(";
    if (Step::isUnset(value->getOuterBoundary()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOuterBoundary()); 
    }
    outputStream() << ",";
    if (value->testInnerBoundaries() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getInnerBoundaries()).size())
            {
                Set_IfcCurve_1_n::iterator it = (value->getInnerBoundaries()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getInnerBoundaries()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcAnnotationFillAreaOccurrence(IfcAnnotationFillAreaOccurrence *value)
{
    outputStream() << "#" << value->getKey() << "=IFCANNOTATIONFILLAREAOCCURRENCE(";
    if (Step::isUnset(value->getItem()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getItem()); 
    }
    outputStream() << ",";
    if (value->testStyles() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getStyles()).size())
            {
                Set_IfcPresentationStyleAssignment_1_n::iterator it = (value->getStyles()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getStyles()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getFillStyleTarget()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getFillStyleTarget()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getGlobalOrLocal()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalOrLocal()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcAnnotationOccurrence(IfcAnnotationOccurrence *value)
{
    outputStream() << "#" << value->getKey() << "=IFCANNOTATIONOCCURRENCE(";
    if (Step::isUnset(value->getItem()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getItem()); 
    }
    outputStream() << ",";
    if (value->testStyles() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getStyles()).size())
            {
                Set_IfcPresentationStyleAssignment_1_n::iterator it = (value->getStyles()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getStyles()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcAnnotationSurface(IfcAnnotationSurface *value)
{
    outputStream() << "#" << value->getKey() << "=IFCANNOTATIONSURFACE(";
    if (Step::isUnset(value->getItem()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getItem()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTextureCoordinates()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTextureCoordinates()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcAnnotationSurfaceOccurrence(IfcAnnotationSurfaceOccurrence *value)
{
    outputStream() << "#" << value->getKey() << "=IFCANNOTATIONSURFACEOCCURRENCE(";
    if (Step::isUnset(value->getItem()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getItem()); 
    }
    outputStream() << ",";
    if (value->testStyles() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getStyles()).size())
            {
                Set_IfcPresentationStyleAssignment_1_n::iterator it = (value->getStyles()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getStyles()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcAnnotationSymbolOccurrence(IfcAnnotationSymbolOccurrence *value)
{
    outputStream() << "#" << value->getKey() << "=IFCANNOTATIONSYMBOLOCCURRENCE(";
    if (Step::isUnset(value->getItem()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getItem()); 
    }
    outputStream() << ",";
    if (value->testStyles() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getStyles()).size())
            {
                Set_IfcPresentationStyleAssignment_1_n::iterator it = (value->getStyles()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getStyles()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcAnnotationTextOccurrence(IfcAnnotationTextOccurrence *value)
{
    outputStream() << "#" << value->getKey() << "=IFCANNOTATIONTEXTOCCURRENCE(";
    if (Step::isUnset(value->getItem()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getItem()); 
    }
    outputStream() << ",";
    if (value->testStyles() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getStyles()).size())
            {
                Set_IfcPresentationStyleAssignment_1_n::iterator it = (value->getStyles()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getStyles()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcApplication(IfcApplication *value)
{
    outputStream() << "#" << value->getKey() << "=IFCAPPLICATION(";
    if (Step::isUnset(value->getApplicationDeveloper()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getApplicationDeveloper()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getVersion()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getVersion()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getApplicationFullName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getApplicationFullName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getApplicationIdentifier()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getApplicationIdentifier()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcAppliedValue(IfcAppliedValue *value)
{
    outputStream() << "#" << value->getKey() << "=IFCAPPLIEDVALUE(";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getAppliedValue()))
    {
        outputStream() << "$";
    }
    else
    {
        writeIfcAppliedValueSelect(value->getAppliedValue());
    }
    outputStream() << ",";
    if (Step::isUnset(value->getUnitBasis()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getUnitBasis()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getApplicableDate()))
    {
        outputStream() << "$";
    }
    else
    {
        writeIfcDateTimeSelect(value->getApplicableDate());
    }
    outputStream() << ",";
    if (Step::isUnset(value->getFixedUntilDate()))
    {
        outputStream() << "$";
    }
    else
    {
        writeIfcDateTimeSelect(value->getFixedUntilDate());
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcAppliedValueRelationship(IfcAppliedValueRelationship *value)
{
    outputStream() << "#" << value->getKey() << "=IFCAPPLIEDVALUERELATIONSHIP(";
    if (Step::isUnset(value->getComponentOfTotal()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getComponentOfTotal()); 
    }
    outputStream() << ",";
    if (value->testComponents() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getComponents()).size())
            {
                Set_IfcAppliedValue_1_n::iterator it = (value->getComponents()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getComponents()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getArithmeticOperator()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getArithmeticOperator()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcApproval(IfcApproval *value)
{
    outputStream() << "#" << value->getKey() << "=IFCAPPROVAL(";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getApprovalDateTime()))
    {
        outputStream() << "$";
    }
    else
    {
        writeIfcDateTimeSelect(value->getApprovalDateTime());
    }
    outputStream() << ",";
    if (Step::isUnset(value->getApprovalStatus()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getApprovalStatus()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getApprovalLevel()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getApprovalLevel()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getApprovalQualifier()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getApprovalQualifier()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getIdentifier()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getIdentifier()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcApprovalActorRelationship(IfcApprovalActorRelationship *value)
{
    outputStream() << "#" << value->getKey() << "=IFCAPPROVALACTORRELATIONSHIP(";
    if (Step::isUnset(value->getActor()))
    {
        outputStream() << "$";
    }
    else
    {
        writeIfcActorSelect(value->getActor());
    }
    outputStream() << ",";
    if (Step::isUnset(value->getApproval()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getApproval()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRole()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRole()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcApprovalPropertyRelationship(IfcApprovalPropertyRelationship *value)
{
    outputStream() << "#" << value->getKey() << "=IFCAPPROVALPROPERTYRELATIONSHIP(";
    if (value->testApprovedProperties() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getApprovedProperties()).size())
            {
                Set_IfcProperty_1_n::iterator it = (value->getApprovedProperties()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getApprovedProperties()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getApproval()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getApproval()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcApprovalRelationship(IfcApprovalRelationship *value)
{
    outputStream() << "#" << value->getKey() << "=IFCAPPROVALRELATIONSHIP(";
    if (Step::isUnset(value->getRelatedApproval()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRelatedApproval()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRelatingApproval()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRelatingApproval()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcArbitraryClosedProfileDef(IfcArbitraryClosedProfileDef *value)
{
    outputStream() << "#" << value->getKey() << "=IFCARBITRARYCLOSEDPROFILEDEF(";
    if (Step::isUnset(value->getProfileType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getProfileType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getProfileName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getProfileName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOuterCurve()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOuterCurve()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcArbitraryOpenProfileDef(IfcArbitraryOpenProfileDef *value)
{
    outputStream() << "#" << value->getKey() << "=IFCARBITRARYOPENPROFILEDEF(";
    if (Step::isUnset(value->getProfileType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getProfileType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getProfileName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getProfileName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getCurve()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getCurve()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcArbitraryProfileDefWithVoids(IfcArbitraryProfileDefWithVoids *value)
{
    outputStream() << "#" << value->getKey() << "=IFCARBITRARYPROFILEDEFWITHVOIDS(";
    if (Step::isUnset(value->getProfileType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getProfileType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getProfileName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getProfileName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOuterCurve()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOuterCurve()); 
    }
    outputStream() << ",";
    if (value->testInnerCurves() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getInnerCurves()).size())
            {
                Set_IfcCurve_1_n::iterator it = (value->getInnerCurves()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getInnerCurves()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcAsset(IfcAsset *value)
{
    outputStream() << "#" << value->getKey() << "=IFCASSET(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getAssetID()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getAssetID()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOriginalValue()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOriginalValue()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getCurrentValue()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getCurrentValue()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTotalReplacementCost()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTotalReplacementCost()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwner()))
    {
        outputStream() << "$";
    }
    else
    {
        writeIfcActorSelect(value->getOwner());
    }
    outputStream() << ",";
    if (Step::isUnset(value->getUser()))
    {
        outputStream() << "$";
    }
    else
    {
        writeIfcActorSelect(value->getUser());
    }
    outputStream() << ",";
    if (Step::isUnset(value->getResponsiblePerson()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getResponsiblePerson()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getIncorporationDate()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getIncorporationDate()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDepreciatedValue()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDepreciatedValue()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcAsymmetricIShapeProfileDef(IfcAsymmetricIShapeProfileDef *value)
{
    outputStream() << "#" << value->getKey() << "=IFCASYMMETRICISHAPEPROFILEDEF(";
    if (Step::isUnset(value->getProfileType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getProfileType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getProfileName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getProfileName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPosition()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPosition()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOverallWidth()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOverallWidth()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOverallDepth()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOverallDepth()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getWebThickness()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getWebThickness()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getFlangeThickness()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getFlangeThickness()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getFilletRadius()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getFilletRadius()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTopFlangeWidth()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTopFlangeWidth()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTopFlangeThickness()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTopFlangeThickness()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTopFlangeFilletRadius()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTopFlangeFilletRadius()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getCentreOfGravityInY()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getCentreOfGravityInY()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcAxis1Placement(IfcAxis1Placement *value)
{
    outputStream() << "#" << value->getKey() << "=IFCAXIS1PLACEMENT(";
    if (Step::isUnset(value->getLocation()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getLocation()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getAxis()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getAxis()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcAxis2Placement2D(IfcAxis2Placement2D *value)
{
    outputStream() << "#" << value->getKey() << "=IFCAXIS2PLACEMENT2D(";
    if (Step::isUnset(value->getLocation()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getLocation()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRefDirection()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRefDirection()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcAxis2Placement3D(IfcAxis2Placement3D *value)
{
    outputStream() << "#" << value->getKey() << "=IFCAXIS2PLACEMENT3D(";
    if (Step::isUnset(value->getLocation()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getLocation()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getAxis()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getAxis()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRefDirection()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRefDirection()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcBeam(IfcBeam *value)
{
    outputStream() << "#" << value->getKey() << "=IFCBEAM(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectPlacement()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectPlacement()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRepresentation()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRepresentation()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcBeamType(IfcBeamType *value)
{
    outputStream() << "#" << value->getKey() << "=IFCBEAMTYPE(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getApplicableOccurrence()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getApplicableOccurrence()); 
    }
    outputStream() << ",";
    if (value->testHasPropertySets() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getHasPropertySets()).size())
            {
                Set_IfcPropertySetDefinition_1_n::iterator it = (value->getHasPropertySets()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getHasPropertySets()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (value->testRepresentationMaps() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRepresentationMaps()).size())
            {
                List_IfcRepresentationMap_1_n::iterator it = (value->getRepresentationMaps()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRepresentationMaps()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getElementType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getElementType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPredefinedType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPredefinedType()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcBezierCurve(IfcBezierCurve *value)
{
    outputStream() << "#" << value->getKey() << "=IFCBEZIERCURVE(";
    if (Step::isUnset(value->getDegree()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDegree()); 
    }
    outputStream() << ",";
    if (value->testControlPointsList() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getControlPointsList()).size())
            {
                List_IfcCartesianPoint_2_n::iterator it = (value->getControlPointsList()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getControlPointsList()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getCurveForm()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getCurveForm()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getClosedCurve()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getClosedCurve()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getSelfIntersect()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getSelfIntersect()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcBlobTexture(IfcBlobTexture *value)
{
    outputStream() << "#" << value->getKey() << "=IFCBLOBTEXTURE(";
    if (Step::isUnset(value->getRepeatS()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRepeatS()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRepeatT()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRepeatT()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTextureType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTextureType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTextureTransform()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTextureTransform()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRasterFormat()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRasterFormat()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRasterCode()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRasterCode()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcBlock(IfcBlock *value)
{
    outputStream() << "#" << value->getKey() << "=IFCBLOCK(";
    if (Step::isUnset(value->getPosition()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPosition()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getXLength()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getXLength()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getYLength()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getYLength()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getZLength()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getZLength()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcBoilerType(IfcBoilerType *value)
{
    outputStream() << "#" << value->getKey() << "=IFCBOILERTYPE(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getApplicableOccurrence()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getApplicableOccurrence()); 
    }
    outputStream() << ",";
    if (value->testHasPropertySets() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getHasPropertySets()).size())
            {
                Set_IfcPropertySetDefinition_1_n::iterator it = (value->getHasPropertySets()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getHasPropertySets()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (value->testRepresentationMaps() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRepresentationMaps()).size())
            {
                List_IfcRepresentationMap_1_n::iterator it = (value->getRepresentationMaps()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRepresentationMaps()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getElementType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getElementType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPredefinedType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPredefinedType()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcBooleanClippingResult(IfcBooleanClippingResult *value)
{
    outputStream() << "#" << value->getKey() << "=IFCBOOLEANCLIPPINGRESULT(";
    if (Step::isUnset(value->getOperator()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOperator()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getFirstOperand()))
    {
        outputStream() << "$";
    }
    else
    {
        writeIfcBooleanOperand(value->getFirstOperand());
    }
    outputStream() << ",";
    if (Step::isUnset(value->getSecondOperand()))
    {
        outputStream() << "$";
    }
    else
    {
        writeIfcBooleanOperand(value->getSecondOperand());
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcBooleanResult(IfcBooleanResult *value)
{
    outputStream() << "#" << value->getKey() << "=IFCBOOLEANRESULT(";
    if (Step::isUnset(value->getOperator()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOperator()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getFirstOperand()))
    {
        outputStream() << "$";
    }
    else
    {
        writeIfcBooleanOperand(value->getFirstOperand());
    }
    outputStream() << ",";
    if (Step::isUnset(value->getSecondOperand()))
    {
        outputStream() << "$";
    }
    else
    {
        writeIfcBooleanOperand(value->getSecondOperand());
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcBoundaryCondition(IfcBoundaryCondition *value)
{
    outputStream() << "#" << value->getKey() << "=IFCBOUNDARYCONDITION(";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcBoundaryEdgeCondition(IfcBoundaryEdgeCondition *value)
{
    outputStream() << "#" << value->getKey() << "=IFCBOUNDARYEDGECONDITION(";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getLinearStiffnessByLengthX()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getLinearStiffnessByLengthX()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getLinearStiffnessByLengthY()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getLinearStiffnessByLengthY()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getLinearStiffnessByLengthZ()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getLinearStiffnessByLengthZ()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRotationalStiffnessByLengthX()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRotationalStiffnessByLengthX()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRotationalStiffnessByLengthY()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRotationalStiffnessByLengthY()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRotationalStiffnessByLengthZ()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRotationalStiffnessByLengthZ()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcBoundaryFaceCondition(IfcBoundaryFaceCondition *value)
{
    outputStream() << "#" << value->getKey() << "=IFCBOUNDARYFACECONDITION(";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getLinearStiffnessByAreaX()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getLinearStiffnessByAreaX()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getLinearStiffnessByAreaY()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getLinearStiffnessByAreaY()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getLinearStiffnessByAreaZ()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getLinearStiffnessByAreaZ()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcBoundaryNodeCondition(IfcBoundaryNodeCondition *value)
{
    outputStream() << "#" << value->getKey() << "=IFCBOUNDARYNODECONDITION(";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getLinearStiffnessX()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getLinearStiffnessX()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getLinearStiffnessY()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getLinearStiffnessY()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getLinearStiffnessZ()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getLinearStiffnessZ()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRotationalStiffnessX()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRotationalStiffnessX()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRotationalStiffnessY()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRotationalStiffnessY()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRotationalStiffnessZ()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRotationalStiffnessZ()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcBoundaryNodeConditionWarping(IfcBoundaryNodeConditionWarping *value)
{
    outputStream() << "#" << value->getKey() << "=IFCBOUNDARYNODECONDITIONWARPING(";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getLinearStiffnessX()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getLinearStiffnessX()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getLinearStiffnessY()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getLinearStiffnessY()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getLinearStiffnessZ()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getLinearStiffnessZ()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRotationalStiffnessX()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRotationalStiffnessX()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRotationalStiffnessY()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRotationalStiffnessY()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRotationalStiffnessZ()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRotationalStiffnessZ()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getWarpingStiffness()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getWarpingStiffness()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcBoundedCurve(IfcBoundedCurve *value)
{
    outputStream() << "#" << value->getKey() << "=IFCBOUNDEDCURVE(";
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcBoundedSurface(IfcBoundedSurface *value)
{
    outputStream() << "#" << value->getKey() << "=IFCBOUNDEDSURFACE(";
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcBoundingBox(IfcBoundingBox *value)
{
    outputStream() << "#" << value->getKey() << "=IFCBOUNDINGBOX(";
    if (Step::isUnset(value->getCorner()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getCorner()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getXDim()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getXDim()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getYDim()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getYDim()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getZDim()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getZDim()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcBoxedHalfSpace(IfcBoxedHalfSpace *value)
{
    outputStream() << "#" << value->getKey() << "=IFCBOXEDHALFSPACE(";
    if (Step::isUnset(value->getBaseSurface()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getBaseSurface()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getAgreementFlag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getAgreementFlag()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getEnclosure()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getEnclosure()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcBSplineCurve(IfcBSplineCurve *value)
{
    outputStream() << "#" << value->getKey() << "=IFCBSPLINECURVE(";
    if (Step::isUnset(value->getDegree()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDegree()); 
    }
    outputStream() << ",";
    if (value->testControlPointsList() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getControlPointsList()).size())
            {
                List_IfcCartesianPoint_2_n::iterator it = (value->getControlPointsList()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getControlPointsList()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getCurveForm()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getCurveForm()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getClosedCurve()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getClosedCurve()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getSelfIntersect()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getSelfIntersect()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcBuilding(IfcBuilding *value)
{
    outputStream() << "#" << value->getKey() << "=IFCBUILDING(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectPlacement()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectPlacement()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRepresentation()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRepresentation()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getLongName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getLongName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getCompositionType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getCompositionType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getElevationOfRefHeight()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getElevationOfRefHeight()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getElevationOfTerrain()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getElevationOfTerrain()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getBuildingAddress()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getBuildingAddress()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcBuildingElement(IfcBuildingElement *value)
{
    outputStream() << "#" << value->getKey() << "=IFCBUILDINGELEMENT(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectPlacement()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectPlacement()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRepresentation()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRepresentation()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcBuildingElementComponent(IfcBuildingElementComponent *value)
{
    outputStream() << "#" << value->getKey() << "=IFCBUILDINGELEMENTCOMPONENT(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectPlacement()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectPlacement()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRepresentation()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRepresentation()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcBuildingElementPart(IfcBuildingElementPart *value)
{
    outputStream() << "#" << value->getKey() << "=IFCBUILDINGELEMENTPART(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectPlacement()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectPlacement()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRepresentation()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRepresentation()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcBuildingElementProxy(IfcBuildingElementProxy *value)
{
    outputStream() << "#" << value->getKey() << "=IFCBUILDINGELEMENTPROXY(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectPlacement()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectPlacement()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRepresentation()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRepresentation()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getCompositionType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getCompositionType()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcBuildingElementProxyType(IfcBuildingElementProxyType *value)
{
    outputStream() << "#" << value->getKey() << "=IFCBUILDINGELEMENTPROXYTYPE(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getApplicableOccurrence()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getApplicableOccurrence()); 
    }
    outputStream() << ",";
    if (value->testHasPropertySets() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getHasPropertySets()).size())
            {
                Set_IfcPropertySetDefinition_1_n::iterator it = (value->getHasPropertySets()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getHasPropertySets()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (value->testRepresentationMaps() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRepresentationMaps()).size())
            {
                List_IfcRepresentationMap_1_n::iterator it = (value->getRepresentationMaps()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRepresentationMaps()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getElementType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getElementType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPredefinedType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPredefinedType()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcBuildingElementType(IfcBuildingElementType *value)
{
    outputStream() << "#" << value->getKey() << "=IFCBUILDINGELEMENTTYPE(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getApplicableOccurrence()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getApplicableOccurrence()); 
    }
    outputStream() << ",";
    if (value->testHasPropertySets() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getHasPropertySets()).size())
            {
                Set_IfcPropertySetDefinition_1_n::iterator it = (value->getHasPropertySets()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getHasPropertySets()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (value->testRepresentationMaps() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRepresentationMaps()).size())
            {
                List_IfcRepresentationMap_1_n::iterator it = (value->getRepresentationMaps()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRepresentationMaps()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getElementType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getElementType()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcBuildingStorey(IfcBuildingStorey *value)
{
    outputStream() << "#" << value->getKey() << "=IFCBUILDINGSTOREY(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectPlacement()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectPlacement()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRepresentation()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRepresentation()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getLongName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getLongName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getCompositionType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getCompositionType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getElevation()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getElevation()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcCableCarrierFittingType(IfcCableCarrierFittingType *value)
{
    outputStream() << "#" << value->getKey() << "=IFCCABLECARRIERFITTINGTYPE(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getApplicableOccurrence()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getApplicableOccurrence()); 
    }
    outputStream() << ",";
    if (value->testHasPropertySets() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getHasPropertySets()).size())
            {
                Set_IfcPropertySetDefinition_1_n::iterator it = (value->getHasPropertySets()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getHasPropertySets()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (value->testRepresentationMaps() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRepresentationMaps()).size())
            {
                List_IfcRepresentationMap_1_n::iterator it = (value->getRepresentationMaps()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRepresentationMaps()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getElementType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getElementType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPredefinedType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPredefinedType()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcCableCarrierSegmentType(IfcCableCarrierSegmentType *value)
{
    outputStream() << "#" << value->getKey() << "=IFCCABLECARRIERSEGMENTTYPE(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getApplicableOccurrence()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getApplicableOccurrence()); 
    }
    outputStream() << ",";
    if (value->testHasPropertySets() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getHasPropertySets()).size())
            {
                Set_IfcPropertySetDefinition_1_n::iterator it = (value->getHasPropertySets()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getHasPropertySets()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (value->testRepresentationMaps() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRepresentationMaps()).size())
            {
                List_IfcRepresentationMap_1_n::iterator it = (value->getRepresentationMaps()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRepresentationMaps()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getElementType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getElementType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPredefinedType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPredefinedType()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcCableSegmentType(IfcCableSegmentType *value)
{
    outputStream() << "#" << value->getKey() << "=IFCCABLESEGMENTTYPE(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getApplicableOccurrence()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getApplicableOccurrence()); 
    }
    outputStream() << ",";
    if (value->testHasPropertySets() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getHasPropertySets()).size())
            {
                Set_IfcPropertySetDefinition_1_n::iterator it = (value->getHasPropertySets()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getHasPropertySets()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (value->testRepresentationMaps() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRepresentationMaps()).size())
            {
                List_IfcRepresentationMap_1_n::iterator it = (value->getRepresentationMaps()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRepresentationMaps()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getElementType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getElementType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPredefinedType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPredefinedType()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcCalendarDate(IfcCalendarDate *value)
{
    outputStream() << "#" << value->getKey() << "=IFCCALENDARDATE(";
    if (Step::isUnset(value->getDayComponent()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDayComponent()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getMonthComponent()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getMonthComponent()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getYearComponent()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getYearComponent()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcCartesianPoint(IfcCartesianPoint *value)
{
    outputStream() << "#" << value->getKey() << "=IFCCARTESIANPOINT(";
    if (value->testCoordinates() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getCoordinates()).size())
            {
                List_IfcLengthMeasure_1_3::iterator it = (value->getCoordinates()).begin();
                writeAttribute(*it);
                for (it++; it != (value->getCoordinates()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute(*it);
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcCartesianTransformationOperator(IfcCartesianTransformationOperator *value)
{
    outputStream() << "#" << value->getKey() << "=IFCCARTESIANTRANSFORMATIONOPERATOR(";
    if (Step::isUnset(value->getAxis1()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getAxis1()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getAxis2()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getAxis2()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getLocalOrigin()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getLocalOrigin()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getScale()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getScale()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcCartesianTransformationOperator2D(IfcCartesianTransformationOperator2D *value)
{
    outputStream() << "#" << value->getKey() << "=IFCCARTESIANTRANSFORMATIONOPERATOR2D(";
    if (Step::isUnset(value->getAxis1()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getAxis1()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getAxis2()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getAxis2()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getLocalOrigin()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getLocalOrigin()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getScale()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getScale()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcCartesianTransformationOperator2DnonUniform(IfcCartesianTransformationOperator2DnonUniform *value)
{
    outputStream() << "#" << value->getKey() << "=IFCCARTESIANTRANSFORMATIONOPERATOR2DNONUNIFORM(";
    if (Step::isUnset(value->getAxis1()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getAxis1()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getAxis2()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getAxis2()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getLocalOrigin()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getLocalOrigin()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getScale()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getScale()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getScale2()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getScale2()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcCartesianTransformationOperator3D(IfcCartesianTransformationOperator3D *value)
{
    outputStream() << "#" << value->getKey() << "=IFCCARTESIANTRANSFORMATIONOPERATOR3D(";
    if (Step::isUnset(value->getAxis1()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getAxis1()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getAxis2()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getAxis2()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getLocalOrigin()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getLocalOrigin()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getScale()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getScale()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getAxis3()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getAxis3()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcCartesianTransformationOperator3DnonUniform(IfcCartesianTransformationOperator3DnonUniform *value)
{
    outputStream() << "#" << value->getKey() << "=IFCCARTESIANTRANSFORMATIONOPERATOR3DNONUNIFORM(";
    if (Step::isUnset(value->getAxis1()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getAxis1()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getAxis2()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getAxis2()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getLocalOrigin()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getLocalOrigin()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getScale()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getScale()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getAxis3()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getAxis3()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getScale2()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getScale2()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getScale3()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getScale3()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcCenterLineProfileDef(IfcCenterLineProfileDef *value)
{
    outputStream() << "#" << value->getKey() << "=IFCCENTERLINEPROFILEDEF(";
    if (Step::isUnset(value->getProfileType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getProfileType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getProfileName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getProfileName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getCurve()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getCurve()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getThickness()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getThickness()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcChamferEdgeFeature(IfcChamferEdgeFeature *value)
{
    outputStream() << "#" << value->getKey() << "=IFCCHAMFEREDGEFEATURE(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectPlacement()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectPlacement()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRepresentation()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRepresentation()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getFeatureLength()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getFeatureLength()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getWidth()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getWidth()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getHeight()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getHeight()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcChillerType(IfcChillerType *value)
{
    outputStream() << "#" << value->getKey() << "=IFCCHILLERTYPE(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getApplicableOccurrence()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getApplicableOccurrence()); 
    }
    outputStream() << ",";
    if (value->testHasPropertySets() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getHasPropertySets()).size())
            {
                Set_IfcPropertySetDefinition_1_n::iterator it = (value->getHasPropertySets()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getHasPropertySets()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (value->testRepresentationMaps() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRepresentationMaps()).size())
            {
                List_IfcRepresentationMap_1_n::iterator it = (value->getRepresentationMaps()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRepresentationMaps()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getElementType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getElementType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPredefinedType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPredefinedType()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcCircle(IfcCircle *value)
{
    outputStream() << "#" << value->getKey() << "=IFCCIRCLE(";
    if (Step::isUnset(value->getPosition()))
    {
        outputStream() << "$";
    }
    else
    {
        writeIfcAxis2Placement(value->getPosition());
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRadius()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRadius()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcCircleHollowProfileDef(IfcCircleHollowProfileDef *value)
{
    outputStream() << "#" << value->getKey() << "=IFCCIRCLEHOLLOWPROFILEDEF(";
    if (Step::isUnset(value->getProfileType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getProfileType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getProfileName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getProfileName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPosition()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPosition()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRadius()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRadius()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getWallThickness()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getWallThickness()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcCircleProfileDef(IfcCircleProfileDef *value)
{
    outputStream() << "#" << value->getKey() << "=IFCCIRCLEPROFILEDEF(";
    if (Step::isUnset(value->getProfileType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getProfileType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getProfileName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getProfileName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPosition()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPosition()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRadius()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRadius()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcClassification(IfcClassification *value)
{
    outputStream() << "#" << value->getKey() << "=IFCCLASSIFICATION(";
    if (Step::isUnset(value->getSource()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getSource()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getEdition()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getEdition()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getEditionDate()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getEditionDate()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcClassificationItem(IfcClassificationItem *value)
{
    outputStream() << "#" << value->getKey() << "=IFCCLASSIFICATIONITEM(";
    if (Step::isUnset(value->getNotation()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getNotation()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getItemOf()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getItemOf()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTitle()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTitle()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcClassificationItemRelationship(IfcClassificationItemRelationship *value)
{
    outputStream() << "#" << value->getKey() << "=IFCCLASSIFICATIONITEMRELATIONSHIP(";
    if (Step::isUnset(value->getRelatingItem()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRelatingItem()); 
    }
    outputStream() << ",";
    if (value->testRelatedItems() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRelatedItems()).size())
            {
                Set_IfcClassificationItem_1_n::iterator it = (value->getRelatedItems()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRelatedItems()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcClassificationNotation(IfcClassificationNotation *value)
{
    outputStream() << "#" << value->getKey() << "=IFCCLASSIFICATIONNOTATION(";
    if (value->testNotationFacets() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getNotationFacets()).size())
            {
                Set_IfcClassificationNotationFacet_1_n::iterator it = (value->getNotationFacets()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getNotationFacets()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcClassificationNotationFacet(IfcClassificationNotationFacet *value)
{
    outputStream() << "#" << value->getKey() << "=IFCCLASSIFICATIONNOTATIONFACET(";
    if (Step::isUnset(value->getNotationValue()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getNotationValue()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcClassificationReference(IfcClassificationReference *value)
{
    outputStream() << "#" << value->getKey() << "=IFCCLASSIFICATIONREFERENCE(";
    if (Step::isUnset(value->getLocation()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getLocation()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getItemReference()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getItemReference()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getReferencedSource()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getReferencedSource()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcClosedShell(IfcClosedShell *value)
{
    outputStream() << "#" << value->getKey() << "=IFCCLOSEDSHELL(";
    if (value->testCfsFaces() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getCfsFaces()).size())
            {
                Set_IfcFace_1_n::iterator it = (value->getCfsFaces()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getCfsFaces()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcCoilType(IfcCoilType *value)
{
    outputStream() << "#" << value->getKey() << "=IFCCOILTYPE(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getApplicableOccurrence()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getApplicableOccurrence()); 
    }
    outputStream() << ",";
    if (value->testHasPropertySets() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getHasPropertySets()).size())
            {
                Set_IfcPropertySetDefinition_1_n::iterator it = (value->getHasPropertySets()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getHasPropertySets()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (value->testRepresentationMaps() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRepresentationMaps()).size())
            {
                List_IfcRepresentationMap_1_n::iterator it = (value->getRepresentationMaps()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRepresentationMaps()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getElementType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getElementType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPredefinedType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPredefinedType()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcColourRgb(IfcColourRgb *value)
{
    outputStream() << "#" << value->getKey() << "=IFCCOLOURRGB(";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRed()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRed()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getGreen()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGreen()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getBlue()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getBlue()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcColourSpecification(IfcColourSpecification *value)
{
    outputStream() << "#" << value->getKey() << "=IFCCOLOURSPECIFICATION(";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcColumn(IfcColumn *value)
{
    outputStream() << "#" << value->getKey() << "=IFCCOLUMN(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectPlacement()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectPlacement()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRepresentation()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRepresentation()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcColumnType(IfcColumnType *value)
{
    outputStream() << "#" << value->getKey() << "=IFCCOLUMNTYPE(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getApplicableOccurrence()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getApplicableOccurrence()); 
    }
    outputStream() << ",";
    if (value->testHasPropertySets() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getHasPropertySets()).size())
            {
                Set_IfcPropertySetDefinition_1_n::iterator it = (value->getHasPropertySets()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getHasPropertySets()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (value->testRepresentationMaps() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRepresentationMaps()).size())
            {
                List_IfcRepresentationMap_1_n::iterator it = (value->getRepresentationMaps()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRepresentationMaps()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getElementType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getElementType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPredefinedType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPredefinedType()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcComplexProperty(IfcComplexProperty *value)
{
    outputStream() << "#" << value->getKey() << "=IFCCOMPLEXPROPERTY(";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getUsageName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getUsageName()); 
    }
    outputStream() << ",";
    if (value->testHasProperties() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getHasProperties()).size())
            {
                Set_IfcProperty_1_n::iterator it = (value->getHasProperties()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getHasProperties()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcCompositeCurve(IfcCompositeCurve *value)
{
    outputStream() << "#" << value->getKey() << "=IFCCOMPOSITECURVE(";
    if (value->testSegments() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getSegments()).size())
            {
                List_IfcCompositeCurveSegment_1_n::iterator it = (value->getSegments()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getSegments()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getSelfIntersect()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getSelfIntersect()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcCompositeCurveSegment(IfcCompositeCurveSegment *value)
{
    outputStream() << "#" << value->getKey() << "=IFCCOMPOSITECURVESEGMENT(";
    if (Step::isUnset(value->getTransition()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTransition()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getSameSense()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getSameSense()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getParentCurve()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getParentCurve()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcCompositeProfileDef(IfcCompositeProfileDef *value)
{
    outputStream() << "#" << value->getKey() << "=IFCCOMPOSITEPROFILEDEF(";
    if (Step::isUnset(value->getProfileType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getProfileType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getProfileName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getProfileName()); 
    }
    outputStream() << ",";
    if (value->testProfiles() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getProfiles()).size())
            {
                Set_IfcProfileDef_2_n::iterator it = (value->getProfiles()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getProfiles()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getLabel()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getLabel()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcCompressorType(IfcCompressorType *value)
{
    outputStream() << "#" << value->getKey() << "=IFCCOMPRESSORTYPE(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getApplicableOccurrence()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getApplicableOccurrence()); 
    }
    outputStream() << ",";
    if (value->testHasPropertySets() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getHasPropertySets()).size())
            {
                Set_IfcPropertySetDefinition_1_n::iterator it = (value->getHasPropertySets()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getHasPropertySets()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (value->testRepresentationMaps() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRepresentationMaps()).size())
            {
                List_IfcRepresentationMap_1_n::iterator it = (value->getRepresentationMaps()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRepresentationMaps()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getElementType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getElementType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPredefinedType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPredefinedType()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcCondenserType(IfcCondenserType *value)
{
    outputStream() << "#" << value->getKey() << "=IFCCONDENSERTYPE(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getApplicableOccurrence()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getApplicableOccurrence()); 
    }
    outputStream() << ",";
    if (value->testHasPropertySets() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getHasPropertySets()).size())
            {
                Set_IfcPropertySetDefinition_1_n::iterator it = (value->getHasPropertySets()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getHasPropertySets()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (value->testRepresentationMaps() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRepresentationMaps()).size())
            {
                List_IfcRepresentationMap_1_n::iterator it = (value->getRepresentationMaps()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRepresentationMaps()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getElementType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getElementType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPredefinedType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPredefinedType()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcCondition(IfcCondition *value)
{
    outputStream() << "#" << value->getKey() << "=IFCCONDITION(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectType()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcConditionCriterion(IfcConditionCriterion *value)
{
    outputStream() << "#" << value->getKey() << "=IFCCONDITIONCRITERION(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getCriterion()))
    {
        outputStream() << "$";
    }
    else
    {
        writeIfcConditionCriterionSelect(value->getCriterion());
    }
    outputStream() << ",";
    if (Step::isUnset(value->getCriterionDateTime()))
    {
        outputStream() << "$";
    }
    else
    {
        writeIfcDateTimeSelect(value->getCriterionDateTime());
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcConic(IfcConic *value)
{
    outputStream() << "#" << value->getKey() << "=IFCCONIC(";
    if (Step::isUnset(value->getPosition()))
    {
        outputStream() << "$";
    }
    else
    {
        writeIfcAxis2Placement(value->getPosition());
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcConnectedFaceSet(IfcConnectedFaceSet *value)
{
    outputStream() << "#" << value->getKey() << "=IFCCONNECTEDFACESET(";
    if (value->testCfsFaces() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getCfsFaces()).size())
            {
                Set_IfcFace_1_n::iterator it = (value->getCfsFaces()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getCfsFaces()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcConnectionCurveGeometry(IfcConnectionCurveGeometry *value)
{
    outputStream() << "#" << value->getKey() << "=IFCCONNECTIONCURVEGEOMETRY(";
    if (Step::isUnset(value->getCurveOnRelatingElement()))
    {
        outputStream() << "$";
    }
    else
    {
        writeIfcCurveOrEdgeCurve(value->getCurveOnRelatingElement());
    }
    outputStream() << ",";
    if (Step::isUnset(value->getCurveOnRelatedElement()))
    {
        outputStream() << "$";
    }
    else
    {
        writeIfcCurveOrEdgeCurve(value->getCurveOnRelatedElement());
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcConnectionGeometry(IfcConnectionGeometry *value)
{
    outputStream() << "#" << value->getKey() << "=IFCCONNECTIONGEOMETRY(";
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcConnectionPointEccentricity(IfcConnectionPointEccentricity *value)
{
    outputStream() << "#" << value->getKey() << "=IFCCONNECTIONPOINTECCENTRICITY(";
    if (Step::isUnset(value->getPointOnRelatingElement()))
    {
        outputStream() << "$";
    }
    else
    {
        writeIfcPointOrVertexPoint(value->getPointOnRelatingElement());
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPointOnRelatedElement()))
    {
        outputStream() << "$";
    }
    else
    {
        writeIfcPointOrVertexPoint(value->getPointOnRelatedElement());
    }
    outputStream() << ",";
    if (Step::isUnset(value->getEccentricityInX()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getEccentricityInX()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getEccentricityInY()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getEccentricityInY()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getEccentricityInZ()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getEccentricityInZ()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcConnectionPointGeometry(IfcConnectionPointGeometry *value)
{
    outputStream() << "#" << value->getKey() << "=IFCCONNECTIONPOINTGEOMETRY(";
    if (Step::isUnset(value->getPointOnRelatingElement()))
    {
        outputStream() << "$";
    }
    else
    {
        writeIfcPointOrVertexPoint(value->getPointOnRelatingElement());
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPointOnRelatedElement()))
    {
        outputStream() << "$";
    }
    else
    {
        writeIfcPointOrVertexPoint(value->getPointOnRelatedElement());
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcConnectionPortGeometry(IfcConnectionPortGeometry *value)
{
    outputStream() << "#" << value->getKey() << "=IFCCONNECTIONPORTGEOMETRY(";
    if (Step::isUnset(value->getLocationAtRelatingElement()))
    {
        outputStream() << "$";
    }
    else
    {
        writeIfcAxis2Placement(value->getLocationAtRelatingElement());
    }
    outputStream() << ",";
    if (Step::isUnset(value->getLocationAtRelatedElement()))
    {
        outputStream() << "$";
    }
    else
    {
        writeIfcAxis2Placement(value->getLocationAtRelatedElement());
    }
    outputStream() << ",";
    if (Step::isUnset(value->getProfileOfPort()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getProfileOfPort()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcConnectionSurfaceGeometry(IfcConnectionSurfaceGeometry *value)
{
    outputStream() << "#" << value->getKey() << "=IFCCONNECTIONSURFACEGEOMETRY(";
    if (Step::isUnset(value->getSurfaceOnRelatingElement()))
    {
        outputStream() << "$";
    }
    else
    {
        writeIfcSurfaceOrFaceSurface(value->getSurfaceOnRelatingElement());
    }
    outputStream() << ",";
    if (Step::isUnset(value->getSurfaceOnRelatedElement()))
    {
        outputStream() << "$";
    }
    else
    {
        writeIfcSurfaceOrFaceSurface(value->getSurfaceOnRelatedElement());
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcConstraint(IfcConstraint *value)
{
    outputStream() << "#" << value->getKey() << "=IFCCONSTRAINT(";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getConstraintGrade()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getConstraintGrade()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getConstraintSource()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getConstraintSource()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getCreatingActor()))
    {
        outputStream() << "$";
    }
    else
    {
        writeIfcActorSelect(value->getCreatingActor());
    }
    outputStream() << ",";
    if (Step::isUnset(value->getCreationTime()))
    {
        outputStream() << "$";
    }
    else
    {
        writeIfcDateTimeSelect(value->getCreationTime());
    }
    outputStream() << ",";
    if (Step::isUnset(value->getUserDefinedGrade()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getUserDefinedGrade()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcConstraintAggregationRelationship(IfcConstraintAggregationRelationship *value)
{
    outputStream() << "#" << value->getKey() << "=IFCCONSTRAINTAGGREGATIONRELATIONSHIP(";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRelatingConstraint()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRelatingConstraint()); 
    }
    outputStream() << ",";
    if (value->testRelatedConstraints() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRelatedConstraints()).size())
            {
                List_IfcConstraint_1_n::iterator it = (value->getRelatedConstraints()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRelatedConstraints()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getLogicalAggregator()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getLogicalAggregator()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcConstraintClassificationRelationship(IfcConstraintClassificationRelationship *value)
{
    outputStream() << "#" << value->getKey() << "=IFCCONSTRAINTCLASSIFICATIONRELATIONSHIP(";
    if (Step::isUnset(value->getClassifiedConstraint()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getClassifiedConstraint()); 
    }
    outputStream() << ",";
    if (value->testRelatedClassifications() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRelatedClassifications()).size())
            {
                Set_IfcClassificationNotationSelect_1_n::iterator it = (value->getRelatedClassifications()).begin();
                writeIfcClassificationNotationSelect((*it).get());
                for (it++; it != (value->getRelatedClassifications()).end(); it++)
                {
                    outputStream() << ",";
                    writeIfcClassificationNotationSelect((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcConstraintRelationship(IfcConstraintRelationship *value)
{
    outputStream() << "#" << value->getKey() << "=IFCCONSTRAINTRELATIONSHIP(";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRelatingConstraint()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRelatingConstraint()); 
    }
    outputStream() << ",";
    if (value->testRelatedConstraints() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRelatedConstraints()).size())
            {
                Set_IfcConstraint_1_n::iterator it = (value->getRelatedConstraints()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRelatedConstraints()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcConstructionEquipmentResource(IfcConstructionEquipmentResource *value)
{
    outputStream() << "#" << value->getKey() << "=IFCCONSTRUCTIONEQUIPMENTRESOURCE(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getResourceIdentifier()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getResourceIdentifier()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getResourceGroup()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getResourceGroup()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getResourceConsumption()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getResourceConsumption()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getBaseQuantity()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getBaseQuantity()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcConstructionMaterialResource(IfcConstructionMaterialResource *value)
{
    outputStream() << "#" << value->getKey() << "=IFCCONSTRUCTIONMATERIALRESOURCE(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getResourceIdentifier()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getResourceIdentifier()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getResourceGroup()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getResourceGroup()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getResourceConsumption()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getResourceConsumption()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getBaseQuantity()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getBaseQuantity()); 
    }
    outputStream() << ",";
    if (value->testSuppliers() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getSuppliers()).size())
            {
                Set_IfcActorSelect_1_n::iterator it = (value->getSuppliers()).begin();
                writeIfcActorSelect((*it).get());
                for (it++; it != (value->getSuppliers()).end(); it++)
                {
                    outputStream() << ",";
                    writeIfcActorSelect((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getUsageRatio()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getUsageRatio()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcConstructionProductResource(IfcConstructionProductResource *value)
{
    outputStream() << "#" << value->getKey() << "=IFCCONSTRUCTIONPRODUCTRESOURCE(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getResourceIdentifier()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getResourceIdentifier()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getResourceGroup()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getResourceGroup()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getResourceConsumption()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getResourceConsumption()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getBaseQuantity()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getBaseQuantity()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcConstructionResource(IfcConstructionResource *value)
{
    outputStream() << "#" << value->getKey() << "=IFCCONSTRUCTIONRESOURCE(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getResourceIdentifier()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getResourceIdentifier()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getResourceGroup()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getResourceGroup()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getResourceConsumption()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getResourceConsumption()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getBaseQuantity()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getBaseQuantity()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcContextDependentUnit(IfcContextDependentUnit *value)
{
    outputStream() << "#" << value->getKey() << "=IFCCONTEXTDEPENDENTUNIT(";
    if (Step::isUnset(value->getDimensions()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDimensions()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getUnitType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getUnitType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcControl(IfcControl *value)
{
    outputStream() << "#" << value->getKey() << "=IFCCONTROL(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectType()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcControllerType(IfcControllerType *value)
{
    outputStream() << "#" << value->getKey() << "=IFCCONTROLLERTYPE(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getApplicableOccurrence()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getApplicableOccurrence()); 
    }
    outputStream() << ",";
    if (value->testHasPropertySets() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getHasPropertySets()).size())
            {
                Set_IfcPropertySetDefinition_1_n::iterator it = (value->getHasPropertySets()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getHasPropertySets()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (value->testRepresentationMaps() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRepresentationMaps()).size())
            {
                List_IfcRepresentationMap_1_n::iterator it = (value->getRepresentationMaps()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRepresentationMaps()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getElementType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getElementType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPredefinedType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPredefinedType()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcConversionBasedUnit(IfcConversionBasedUnit *value)
{
    outputStream() << "#" << value->getKey() << "=IFCCONVERSIONBASEDUNIT(";
    if (Step::isUnset(value->getDimensions()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDimensions()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getUnitType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getUnitType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getConversionFactor()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getConversionFactor()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcCooledBeamType(IfcCooledBeamType *value)
{
    outputStream() << "#" << value->getKey() << "=IFCCOOLEDBEAMTYPE(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getApplicableOccurrence()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getApplicableOccurrence()); 
    }
    outputStream() << ",";
    if (value->testHasPropertySets() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getHasPropertySets()).size())
            {
                Set_IfcPropertySetDefinition_1_n::iterator it = (value->getHasPropertySets()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getHasPropertySets()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (value->testRepresentationMaps() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRepresentationMaps()).size())
            {
                List_IfcRepresentationMap_1_n::iterator it = (value->getRepresentationMaps()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRepresentationMaps()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getElementType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getElementType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPredefinedType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPredefinedType()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcCoolingTowerType(IfcCoolingTowerType *value)
{
    outputStream() << "#" << value->getKey() << "=IFCCOOLINGTOWERTYPE(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getApplicableOccurrence()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getApplicableOccurrence()); 
    }
    outputStream() << ",";
    if (value->testHasPropertySets() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getHasPropertySets()).size())
            {
                Set_IfcPropertySetDefinition_1_n::iterator it = (value->getHasPropertySets()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getHasPropertySets()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (value->testRepresentationMaps() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRepresentationMaps()).size())
            {
                List_IfcRepresentationMap_1_n::iterator it = (value->getRepresentationMaps()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRepresentationMaps()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getElementType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getElementType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPredefinedType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPredefinedType()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcCoordinatedUniversalTimeOffset(IfcCoordinatedUniversalTimeOffset *value)
{
    outputStream() << "#" << value->getKey() << "=IFCCOORDINATEDUNIVERSALTIMEOFFSET(";
    if (Step::isUnset(value->getHourOffset()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getHourOffset()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getMinuteOffset()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getMinuteOffset()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getSense()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getSense()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcCostItem(IfcCostItem *value)
{
    outputStream() << "#" << value->getKey() << "=IFCCOSTITEM(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectType()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcCostSchedule(IfcCostSchedule *value)
{
    outputStream() << "#" << value->getKey() << "=IFCCOSTSCHEDULE(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getSubmittedBy()))
    {
        outputStream() << "$";
    }
    else
    {
        writeIfcActorSelect(value->getSubmittedBy());
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPreparedBy()))
    {
        outputStream() << "$";
    }
    else
    {
        writeIfcActorSelect(value->getPreparedBy());
    }
    outputStream() << ",";
    if (Step::isUnset(value->getSubmittedOn()))
    {
        outputStream() << "$";
    }
    else
    {
        writeIfcDateTimeSelect(value->getSubmittedOn());
    }
    outputStream() << ",";
    if (Step::isUnset(value->getStatus()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getStatus()); 
    }
    outputStream() << ",";
    if (value->testTargetUsers() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getTargetUsers()).size())
            {
                Set_IfcActorSelect_1_n::iterator it = (value->getTargetUsers()).begin();
                writeIfcActorSelect((*it).get());
                for (it++; it != (value->getTargetUsers()).end(); it++)
                {
                    outputStream() << ",";
                    writeIfcActorSelect((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getUpdateDate()))
    {
        outputStream() << "$";
    }
    else
    {
        writeIfcDateTimeSelect(value->getUpdateDate());
    }
    outputStream() << ",";
    if (Step::isUnset(value->getID()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getID()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPredefinedType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPredefinedType()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcCostValue(IfcCostValue *value)
{
    outputStream() << "#" << value->getKey() << "=IFCCOSTVALUE(";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getAppliedValue()))
    {
        outputStream() << "$";
    }
    else
    {
        writeIfcAppliedValueSelect(value->getAppliedValue());
    }
    outputStream() << ",";
    if (Step::isUnset(value->getUnitBasis()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getUnitBasis()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getApplicableDate()))
    {
        outputStream() << "$";
    }
    else
    {
        writeIfcDateTimeSelect(value->getApplicableDate());
    }
    outputStream() << ",";
    if (Step::isUnset(value->getFixedUntilDate()))
    {
        outputStream() << "$";
    }
    else
    {
        writeIfcDateTimeSelect(value->getFixedUntilDate());
    }
    outputStream() << ",";
    if (Step::isUnset(value->getCostType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getCostType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getCondition()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getCondition()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcCovering(IfcCovering *value)
{
    outputStream() << "#" << value->getKey() << "=IFCCOVERING(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectPlacement()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectPlacement()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRepresentation()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRepresentation()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPredefinedType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPredefinedType()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcCoveringType(IfcCoveringType *value)
{
    outputStream() << "#" << value->getKey() << "=IFCCOVERINGTYPE(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getApplicableOccurrence()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getApplicableOccurrence()); 
    }
    outputStream() << ",";
    if (value->testHasPropertySets() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getHasPropertySets()).size())
            {
                Set_IfcPropertySetDefinition_1_n::iterator it = (value->getHasPropertySets()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getHasPropertySets()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (value->testRepresentationMaps() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRepresentationMaps()).size())
            {
                List_IfcRepresentationMap_1_n::iterator it = (value->getRepresentationMaps()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRepresentationMaps()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getElementType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getElementType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPredefinedType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPredefinedType()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcCraneRailAShapeProfileDef(IfcCraneRailAShapeProfileDef *value)
{
    outputStream() << "#" << value->getKey() << "=IFCCRANERAILASHAPEPROFILEDEF(";
    if (Step::isUnset(value->getProfileType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getProfileType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getProfileName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getProfileName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPosition()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPosition()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOverallHeight()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOverallHeight()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getBaseWidth2()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getBaseWidth2()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRadius()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRadius()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getHeadWidth()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getHeadWidth()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getHeadDepth2()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getHeadDepth2()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getHeadDepth3()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getHeadDepth3()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getWebThickness()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getWebThickness()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getBaseWidth4()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getBaseWidth4()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getBaseDepth1()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getBaseDepth1()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getBaseDepth2()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getBaseDepth2()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getBaseDepth3()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getBaseDepth3()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getCentreOfGravityInY()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getCentreOfGravityInY()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcCraneRailFShapeProfileDef(IfcCraneRailFShapeProfileDef *value)
{
    outputStream() << "#" << value->getKey() << "=IFCCRANERAILFSHAPEPROFILEDEF(";
    if (Step::isUnset(value->getProfileType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getProfileType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getProfileName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getProfileName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPosition()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPosition()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOverallHeight()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOverallHeight()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getHeadWidth()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getHeadWidth()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRadius()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRadius()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getHeadDepth2()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getHeadDepth2()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getHeadDepth3()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getHeadDepth3()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getWebThickness()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getWebThickness()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getBaseDepth1()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getBaseDepth1()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getBaseDepth2()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getBaseDepth2()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getCentreOfGravityInY()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getCentreOfGravityInY()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcCrewResource(IfcCrewResource *value)
{
    outputStream() << "#" << value->getKey() << "=IFCCREWRESOURCE(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getResourceIdentifier()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getResourceIdentifier()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getResourceGroup()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getResourceGroup()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getResourceConsumption()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getResourceConsumption()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getBaseQuantity()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getBaseQuantity()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcCsgPrimitive3D(IfcCsgPrimitive3D *value)
{
    outputStream() << "#" << value->getKey() << "=IFCCSGPRIMITIVE3D(";
    if (Step::isUnset(value->getPosition()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPosition()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcCsgSolid(IfcCsgSolid *value)
{
    outputStream() << "#" << value->getKey() << "=IFCCSGSOLID(";
    if (Step::isUnset(value->getTreeRootExpression()))
    {
        outputStream() << "$";
    }
    else
    {
        writeIfcCsgSelect(value->getTreeRootExpression());
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcCShapeProfileDef(IfcCShapeProfileDef *value)
{
    outputStream() << "#" << value->getKey() << "=IFCCSHAPEPROFILEDEF(";
    if (Step::isUnset(value->getProfileType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getProfileType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getProfileName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getProfileName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPosition()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPosition()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDepth()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDepth()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getWidth()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getWidth()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getWallThickness()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getWallThickness()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getGirth()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGirth()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getInternalFilletRadius()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getInternalFilletRadius()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getCentreOfGravityInX()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getCentreOfGravityInX()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcCurrencyRelationship(IfcCurrencyRelationship *value)
{
    outputStream() << "#" << value->getKey() << "=IFCCURRENCYRELATIONSHIP(";
    if (Step::isUnset(value->getRelatingMonetaryUnit()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRelatingMonetaryUnit()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRelatedMonetaryUnit()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRelatedMonetaryUnit()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getExchangeRate()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getExchangeRate()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRateDateTime()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRateDateTime()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRateSource()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRateSource()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcCurtainWall(IfcCurtainWall *value)
{
    outputStream() << "#" << value->getKey() << "=IFCCURTAINWALL(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectPlacement()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectPlacement()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRepresentation()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRepresentation()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcCurtainWallType(IfcCurtainWallType *value)
{
    outputStream() << "#" << value->getKey() << "=IFCCURTAINWALLTYPE(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getApplicableOccurrence()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getApplicableOccurrence()); 
    }
    outputStream() << ",";
    if (value->testHasPropertySets() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getHasPropertySets()).size())
            {
                Set_IfcPropertySetDefinition_1_n::iterator it = (value->getHasPropertySets()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getHasPropertySets()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (value->testRepresentationMaps() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRepresentationMaps()).size())
            {
                List_IfcRepresentationMap_1_n::iterator it = (value->getRepresentationMaps()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRepresentationMaps()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getElementType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getElementType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPredefinedType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPredefinedType()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcCurve(IfcCurve *value)
{
    outputStream() << "#" << value->getKey() << "=IFCCURVE(";
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcCurveBoundedPlane(IfcCurveBoundedPlane *value)
{
    outputStream() << "#" << value->getKey() << "=IFCCURVEBOUNDEDPLANE(";
    if (Step::isUnset(value->getBasisSurface()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getBasisSurface()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOuterBoundary()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOuterBoundary()); 
    }
    outputStream() << ",";
    if (value->testInnerBoundaries() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getInnerBoundaries()).size())
            {
                Set_IfcCurve_0_n::iterator it = (value->getInnerBoundaries()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getInnerBoundaries()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcCurveStyle(IfcCurveStyle *value)
{
    outputStream() << "#" << value->getKey() << "=IFCCURVESTYLE(";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getCurveFont()))
    {
        outputStream() << "$";
    }
    else
    {
        writeIfcCurveFontOrScaledCurveFontSelect(value->getCurveFont());
    }
    outputStream() << ",";
    if (Step::isUnset(value->getCurveWidth()))
    {
        outputStream() << "$";
    }
    else
    {
        writeIfcSizeSelect(value->getCurveWidth());
    }
    outputStream() << ",";
    if (Step::isUnset(value->getCurveColour()))
    {
        outputStream() << "$";
    }
    else
    {
        writeIfcColour(value->getCurveColour());
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcCurveStyleFont(IfcCurveStyleFont *value)
{
    outputStream() << "#" << value->getKey() << "=IFCCURVESTYLEFONT(";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (value->testPatternList() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getPatternList()).size())
            {
                List_IfcCurveStyleFontPattern_1_n::iterator it = (value->getPatternList()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getPatternList()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcCurveStyleFontAndScaling(IfcCurveStyleFontAndScaling *value)
{
    outputStream() << "#" << value->getKey() << "=IFCCURVESTYLEFONTANDSCALING(";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getCurveFont()))
    {
        outputStream() << "$";
    }
    else
    {
        writeIfcCurveStyleFontSelect(value->getCurveFont());
    }
    outputStream() << ",";
    if (Step::isUnset(value->getCurveFontScaling()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getCurveFontScaling()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcCurveStyleFontPattern(IfcCurveStyleFontPattern *value)
{
    outputStream() << "#" << value->getKey() << "=IFCCURVESTYLEFONTPATTERN(";
    if (Step::isUnset(value->getVisibleSegmentLength()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getVisibleSegmentLength()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getInvisibleSegmentLength()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getInvisibleSegmentLength()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcDamperType(IfcDamperType *value)
{
    outputStream() << "#" << value->getKey() << "=IFCDAMPERTYPE(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getApplicableOccurrence()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getApplicableOccurrence()); 
    }
    outputStream() << ",";
    if (value->testHasPropertySets() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getHasPropertySets()).size())
            {
                Set_IfcPropertySetDefinition_1_n::iterator it = (value->getHasPropertySets()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getHasPropertySets()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (value->testRepresentationMaps() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRepresentationMaps()).size())
            {
                List_IfcRepresentationMap_1_n::iterator it = (value->getRepresentationMaps()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRepresentationMaps()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getElementType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getElementType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPredefinedType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPredefinedType()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcDateAndTime(IfcDateAndTime *value)
{
    outputStream() << "#" << value->getKey() << "=IFCDATEANDTIME(";
    if (Step::isUnset(value->getDateComponent()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDateComponent()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTimeComponent()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTimeComponent()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcDefinedSymbol(IfcDefinedSymbol *value)
{
    outputStream() << "#" << value->getKey() << "=IFCDEFINEDSYMBOL(";
    if (Step::isUnset(value->getDefinition()))
    {
        outputStream() << "$";
    }
    else
    {
        writeIfcDefinedSymbolSelect(value->getDefinition());
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTarget()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTarget()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcDerivedProfileDef(IfcDerivedProfileDef *value)
{
    outputStream() << "#" << value->getKey() << "=IFCDERIVEDPROFILEDEF(";
    if (Step::isUnset(value->getProfileType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getProfileType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getProfileName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getProfileName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getParentProfile()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getParentProfile()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOperator()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOperator()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getLabel()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getLabel()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcDerivedUnit(IfcDerivedUnit *value)
{
    outputStream() << "#" << value->getKey() << "=IFCDERIVEDUNIT(";
    if (value->testElements() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getElements()).size())
            {
                Set_IfcDerivedUnitElement_1_n::iterator it = (value->getElements()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getElements()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getUnitType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getUnitType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getUserDefinedType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getUserDefinedType()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcDerivedUnitElement(IfcDerivedUnitElement *value)
{
    outputStream() << "#" << value->getKey() << "=IFCDERIVEDUNITELEMENT(";
    if (Step::isUnset(value->getUnit()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getUnit()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getExponent()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getExponent()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcDiameterDimension(IfcDiameterDimension *value)
{
    outputStream() << "#" << value->getKey() << "=IFCDIAMETERDIMENSION(";
    if (value->testContents() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getContents()).size())
            {
                Set_IfcDraughtingCalloutElement_1_n::iterator it = (value->getContents()).begin();
                writeIfcDraughtingCalloutElement((*it).get());
                for (it++; it != (value->getContents()).end(); it++)
                {
                    outputStream() << ",";
                    writeIfcDraughtingCalloutElement((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcDimensionalExponents(IfcDimensionalExponents *value)
{
    outputStream() << "#" << value->getKey() << "=IFCDIMENSIONALEXPONENTS(";
    if (Step::isUnset(value->getLengthExponent()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getLengthExponent()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getMassExponent()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getMassExponent()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTimeExponent()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTimeExponent()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getElectricCurrentExponent()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getElectricCurrentExponent()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getThermodynamicTemperatureExponent()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getThermodynamicTemperatureExponent()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getAmountOfSubstanceExponent()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getAmountOfSubstanceExponent()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getLuminousIntensityExponent()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getLuminousIntensityExponent()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcDimensionCalloutRelationship(IfcDimensionCalloutRelationship *value)
{
    outputStream() << "#" << value->getKey() << "=IFCDIMENSIONCALLOUTRELATIONSHIP(";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRelatingDraughtingCallout()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRelatingDraughtingCallout()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRelatedDraughtingCallout()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRelatedDraughtingCallout()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcDimensionCurve(IfcDimensionCurve *value)
{
    outputStream() << "#" << value->getKey() << "=IFCDIMENSIONCURVE(";
    if (Step::isUnset(value->getItem()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getItem()); 
    }
    outputStream() << ",";
    if (value->testStyles() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getStyles()).size())
            {
                Set_IfcPresentationStyleAssignment_1_n::iterator it = (value->getStyles()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getStyles()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcDimensionCurveDirectedCallout(IfcDimensionCurveDirectedCallout *value)
{
    outputStream() << "#" << value->getKey() << "=IFCDIMENSIONCURVEDIRECTEDCALLOUT(";
    if (value->testContents() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getContents()).size())
            {
                Set_IfcDraughtingCalloutElement_1_n::iterator it = (value->getContents()).begin();
                writeIfcDraughtingCalloutElement((*it).get());
                for (it++; it != (value->getContents()).end(); it++)
                {
                    outputStream() << ",";
                    writeIfcDraughtingCalloutElement((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcDimensionCurveTerminator(IfcDimensionCurveTerminator *value)
{
    outputStream() << "#" << value->getKey() << "=IFCDIMENSIONCURVETERMINATOR(";
    if (Step::isUnset(value->getItem()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getItem()); 
    }
    outputStream() << ",";
    if (value->testStyles() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getStyles()).size())
            {
                Set_IfcPresentationStyleAssignment_1_n::iterator it = (value->getStyles()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getStyles()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getAnnotatedCurve()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getAnnotatedCurve()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRole()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRole()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcDimensionPair(IfcDimensionPair *value)
{
    outputStream() << "#" << value->getKey() << "=IFCDIMENSIONPAIR(";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRelatingDraughtingCallout()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRelatingDraughtingCallout()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRelatedDraughtingCallout()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRelatedDraughtingCallout()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcDirection(IfcDirection *value)
{
    outputStream() << "#" << value->getKey() << "=IFCDIRECTION(";
    if (value->testDirectionRatios() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getDirectionRatios()).size())
            {
                List_Real_2_3::iterator it = (value->getDirectionRatios()).begin();
                writeAttribute(*it);
                for (it++; it != (value->getDirectionRatios()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute(*it);
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcDiscreteAccessory(IfcDiscreteAccessory *value)
{
    outputStream() << "#" << value->getKey() << "=IFCDISCRETEACCESSORY(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectPlacement()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectPlacement()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRepresentation()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRepresentation()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcDiscreteAccessoryType(IfcDiscreteAccessoryType *value)
{
    outputStream() << "#" << value->getKey() << "=IFCDISCRETEACCESSORYTYPE(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getApplicableOccurrence()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getApplicableOccurrence()); 
    }
    outputStream() << ",";
    if (value->testHasPropertySets() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getHasPropertySets()).size())
            {
                Set_IfcPropertySetDefinition_1_n::iterator it = (value->getHasPropertySets()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getHasPropertySets()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (value->testRepresentationMaps() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRepresentationMaps()).size())
            {
                List_IfcRepresentationMap_1_n::iterator it = (value->getRepresentationMaps()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRepresentationMaps()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getElementType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getElementType()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcDistributionChamberElement(IfcDistributionChamberElement *value)
{
    outputStream() << "#" << value->getKey() << "=IFCDISTRIBUTIONCHAMBERELEMENT(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectPlacement()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectPlacement()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRepresentation()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRepresentation()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcDistributionChamberElementType(IfcDistributionChamberElementType *value)
{
    outputStream() << "#" << value->getKey() << "=IFCDISTRIBUTIONCHAMBERELEMENTTYPE(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getApplicableOccurrence()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getApplicableOccurrence()); 
    }
    outputStream() << ",";
    if (value->testHasPropertySets() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getHasPropertySets()).size())
            {
                Set_IfcPropertySetDefinition_1_n::iterator it = (value->getHasPropertySets()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getHasPropertySets()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (value->testRepresentationMaps() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRepresentationMaps()).size())
            {
                List_IfcRepresentationMap_1_n::iterator it = (value->getRepresentationMaps()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRepresentationMaps()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getElementType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getElementType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPredefinedType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPredefinedType()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcDistributionControlElement(IfcDistributionControlElement *value)
{
    outputStream() << "#" << value->getKey() << "=IFCDISTRIBUTIONCONTROLELEMENT(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectPlacement()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectPlacement()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRepresentation()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRepresentation()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getControlElementId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getControlElementId()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcDistributionControlElementType(IfcDistributionControlElementType *value)
{
    outputStream() << "#" << value->getKey() << "=IFCDISTRIBUTIONCONTROLELEMENTTYPE(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getApplicableOccurrence()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getApplicableOccurrence()); 
    }
    outputStream() << ",";
    if (value->testHasPropertySets() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getHasPropertySets()).size())
            {
                Set_IfcPropertySetDefinition_1_n::iterator it = (value->getHasPropertySets()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getHasPropertySets()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (value->testRepresentationMaps() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRepresentationMaps()).size())
            {
                List_IfcRepresentationMap_1_n::iterator it = (value->getRepresentationMaps()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRepresentationMaps()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getElementType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getElementType()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcDistributionElement(IfcDistributionElement *value)
{
    outputStream() << "#" << value->getKey() << "=IFCDISTRIBUTIONELEMENT(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectPlacement()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectPlacement()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRepresentation()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRepresentation()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcDistributionElementType(IfcDistributionElementType *value)
{
    outputStream() << "#" << value->getKey() << "=IFCDISTRIBUTIONELEMENTTYPE(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getApplicableOccurrence()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getApplicableOccurrence()); 
    }
    outputStream() << ",";
    if (value->testHasPropertySets() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getHasPropertySets()).size())
            {
                Set_IfcPropertySetDefinition_1_n::iterator it = (value->getHasPropertySets()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getHasPropertySets()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (value->testRepresentationMaps() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRepresentationMaps()).size())
            {
                List_IfcRepresentationMap_1_n::iterator it = (value->getRepresentationMaps()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRepresentationMaps()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getElementType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getElementType()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcDistributionFlowElement(IfcDistributionFlowElement *value)
{
    outputStream() << "#" << value->getKey() << "=IFCDISTRIBUTIONFLOWELEMENT(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectPlacement()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectPlacement()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRepresentation()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRepresentation()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcDistributionFlowElementType(IfcDistributionFlowElementType *value)
{
    outputStream() << "#" << value->getKey() << "=IFCDISTRIBUTIONFLOWELEMENTTYPE(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getApplicableOccurrence()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getApplicableOccurrence()); 
    }
    outputStream() << ",";
    if (value->testHasPropertySets() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getHasPropertySets()).size())
            {
                Set_IfcPropertySetDefinition_1_n::iterator it = (value->getHasPropertySets()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getHasPropertySets()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (value->testRepresentationMaps() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRepresentationMaps()).size())
            {
                List_IfcRepresentationMap_1_n::iterator it = (value->getRepresentationMaps()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRepresentationMaps()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getElementType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getElementType()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcDistributionPort(IfcDistributionPort *value)
{
    outputStream() << "#" << value->getKey() << "=IFCDISTRIBUTIONPORT(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectPlacement()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectPlacement()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRepresentation()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRepresentation()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getFlowDirection()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getFlowDirection()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcDocumentElectronicFormat(IfcDocumentElectronicFormat *value)
{
    outputStream() << "#" << value->getKey() << "=IFCDOCUMENTELECTRONICFORMAT(";
    if (Step::isUnset(value->getFileExtension()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getFileExtension()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getMimeContentType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getMimeContentType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getMimeSubtype()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getMimeSubtype()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcDocumentInformation(IfcDocumentInformation *value)
{
    outputStream() << "#" << value->getKey() << "=IFCDOCUMENTINFORMATION(";
    if (Step::isUnset(value->getDocumentId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDocumentId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (value->testDocumentReferences() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getDocumentReferences()).size())
            {
                Set_IfcDocumentReference_1_n::iterator it = (value->getDocumentReferences()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getDocumentReferences()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPurpose()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPurpose()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getIntendedUse()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getIntendedUse()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getScope()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getScope()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRevision()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRevision()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDocumentOwner()))
    {
        outputStream() << "$";
    }
    else
    {
        writeIfcActorSelect(value->getDocumentOwner());
    }
    outputStream() << ",";
    if (value->testEditors() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getEditors()).size())
            {
                Set_IfcActorSelect_1_n::iterator it = (value->getEditors()).begin();
                writeIfcActorSelect((*it).get());
                for (it++; it != (value->getEditors()).end(); it++)
                {
                    outputStream() << ",";
                    writeIfcActorSelect((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getCreationTime()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getCreationTime()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getLastRevisionTime()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getLastRevisionTime()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getElectronicFormat()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getElectronicFormat()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getValidFrom()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getValidFrom()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getValidUntil()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getValidUntil()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getConfidentiality()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getConfidentiality()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getStatus()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getStatus()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcDocumentInformationRelationship(IfcDocumentInformationRelationship *value)
{
    outputStream() << "#" << value->getKey() << "=IFCDOCUMENTINFORMATIONRELATIONSHIP(";
    if (Step::isUnset(value->getRelatingDocument()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRelatingDocument()); 
    }
    outputStream() << ",";
    if (value->testRelatedDocuments() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRelatedDocuments()).size())
            {
                Set_IfcDocumentInformation_1_n::iterator it = (value->getRelatedDocuments()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRelatedDocuments()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRelationshipType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRelationshipType()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcDocumentReference(IfcDocumentReference *value)
{
    outputStream() << "#" << value->getKey() << "=IFCDOCUMENTREFERENCE(";
    if (Step::isUnset(value->getLocation()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getLocation()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getItemReference()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getItemReference()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcDoor(IfcDoor *value)
{
    outputStream() << "#" << value->getKey() << "=IFCDOOR(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectPlacement()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectPlacement()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRepresentation()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRepresentation()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOverallHeight()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOverallHeight()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOverallWidth()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOverallWidth()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcDoorLiningProperties(IfcDoorLiningProperties *value)
{
    outputStream() << "#" << value->getKey() << "=IFCDOORLININGPROPERTIES(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getLiningDepth()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getLiningDepth()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getLiningThickness()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getLiningThickness()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getThresholdDepth()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getThresholdDepth()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getThresholdThickness()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getThresholdThickness()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTransomThickness()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTransomThickness()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTransomOffset()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTransomOffset()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getLiningOffset()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getLiningOffset()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getThresholdOffset()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getThresholdOffset()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getCasingThickness()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getCasingThickness()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getCasingDepth()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getCasingDepth()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getShapeAspectStyle()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getShapeAspectStyle()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcDoorPanelProperties(IfcDoorPanelProperties *value)
{
    outputStream() << "#" << value->getKey() << "=IFCDOORPANELPROPERTIES(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPanelDepth()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPanelDepth()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPanelOperation()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPanelOperation()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPanelWidth()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPanelWidth()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPanelPosition()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPanelPosition()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getShapeAspectStyle()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getShapeAspectStyle()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcDoorStyle(IfcDoorStyle *value)
{
    outputStream() << "#" << value->getKey() << "=IFCDOORSTYLE(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getApplicableOccurrence()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getApplicableOccurrence()); 
    }
    outputStream() << ",";
    if (value->testHasPropertySets() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getHasPropertySets()).size())
            {
                Set_IfcPropertySetDefinition_1_n::iterator it = (value->getHasPropertySets()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getHasPropertySets()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (value->testRepresentationMaps() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRepresentationMaps()).size())
            {
                List_IfcRepresentationMap_1_n::iterator it = (value->getRepresentationMaps()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRepresentationMaps()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOperationType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOperationType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getConstructionType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getConstructionType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getParameterTakesPrecedence()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getParameterTakesPrecedence()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getSizeable()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getSizeable()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcDraughtingCallout(IfcDraughtingCallout *value)
{
    outputStream() << "#" << value->getKey() << "=IFCDRAUGHTINGCALLOUT(";
    if (value->testContents() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getContents()).size())
            {
                Set_IfcDraughtingCalloutElement_1_n::iterator it = (value->getContents()).begin();
                writeIfcDraughtingCalloutElement((*it).get());
                for (it++; it != (value->getContents()).end(); it++)
                {
                    outputStream() << ",";
                    writeIfcDraughtingCalloutElement((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcDraughtingCalloutRelationship(IfcDraughtingCalloutRelationship *value)
{
    outputStream() << "#" << value->getKey() << "=IFCDRAUGHTINGCALLOUTRELATIONSHIP(";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRelatingDraughtingCallout()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRelatingDraughtingCallout()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRelatedDraughtingCallout()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRelatedDraughtingCallout()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcDraughtingPreDefinedColour(IfcDraughtingPreDefinedColour *value)
{
    outputStream() << "#" << value->getKey() << "=IFCDRAUGHTINGPREDEFINEDCOLOUR(";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcDraughtingPreDefinedCurveFont(IfcDraughtingPreDefinedCurveFont *value)
{
    outputStream() << "#" << value->getKey() << "=IFCDRAUGHTINGPREDEFINEDCURVEFONT(";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcDraughtingPreDefinedTextFont(IfcDraughtingPreDefinedTextFont *value)
{
    outputStream() << "#" << value->getKey() << "=IFCDRAUGHTINGPREDEFINEDTEXTFONT(";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcDuctFittingType(IfcDuctFittingType *value)
{
    outputStream() << "#" << value->getKey() << "=IFCDUCTFITTINGTYPE(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getApplicableOccurrence()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getApplicableOccurrence()); 
    }
    outputStream() << ",";
    if (value->testHasPropertySets() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getHasPropertySets()).size())
            {
                Set_IfcPropertySetDefinition_1_n::iterator it = (value->getHasPropertySets()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getHasPropertySets()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (value->testRepresentationMaps() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRepresentationMaps()).size())
            {
                List_IfcRepresentationMap_1_n::iterator it = (value->getRepresentationMaps()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRepresentationMaps()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getElementType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getElementType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPredefinedType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPredefinedType()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcDuctSegmentType(IfcDuctSegmentType *value)
{
    outputStream() << "#" << value->getKey() << "=IFCDUCTSEGMENTTYPE(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getApplicableOccurrence()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getApplicableOccurrence()); 
    }
    outputStream() << ",";
    if (value->testHasPropertySets() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getHasPropertySets()).size())
            {
                Set_IfcPropertySetDefinition_1_n::iterator it = (value->getHasPropertySets()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getHasPropertySets()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (value->testRepresentationMaps() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRepresentationMaps()).size())
            {
                List_IfcRepresentationMap_1_n::iterator it = (value->getRepresentationMaps()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRepresentationMaps()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getElementType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getElementType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPredefinedType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPredefinedType()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcDuctSilencerType(IfcDuctSilencerType *value)
{
    outputStream() << "#" << value->getKey() << "=IFCDUCTSILENCERTYPE(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getApplicableOccurrence()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getApplicableOccurrence()); 
    }
    outputStream() << ",";
    if (value->testHasPropertySets() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getHasPropertySets()).size())
            {
                Set_IfcPropertySetDefinition_1_n::iterator it = (value->getHasPropertySets()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getHasPropertySets()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (value->testRepresentationMaps() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRepresentationMaps()).size())
            {
                List_IfcRepresentationMap_1_n::iterator it = (value->getRepresentationMaps()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRepresentationMaps()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getElementType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getElementType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPredefinedType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPredefinedType()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcEdge(IfcEdge *value)
{
    outputStream() << "#" << value->getKey() << "=IFCEDGE(";
    if (Step::isUnset(value->getEdgeStart()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getEdgeStart()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getEdgeEnd()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getEdgeEnd()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcEdgeCurve(IfcEdgeCurve *value)
{
    outputStream() << "#" << value->getKey() << "=IFCEDGECURVE(";
    if (Step::isUnset(value->getEdgeStart()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getEdgeStart()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getEdgeEnd()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getEdgeEnd()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getEdgeGeometry()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getEdgeGeometry()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getSameSense()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getSameSense()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcEdgeFeature(IfcEdgeFeature *value)
{
    outputStream() << "#" << value->getKey() << "=IFCEDGEFEATURE(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectPlacement()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectPlacement()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRepresentation()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRepresentation()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getFeatureLength()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getFeatureLength()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcEdgeLoop(IfcEdgeLoop *value)
{
    outputStream() << "#" << value->getKey() << "=IFCEDGELOOP(";
    if (value->testEdgeList() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getEdgeList()).size())
            {
                List_IfcOrientedEdge_1_n::iterator it = (value->getEdgeList()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getEdgeList()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcElectricalBaseProperties(IfcElectricalBaseProperties *value)
{
    outputStream() << "#" << value->getKey() << "=IFCELECTRICALBASEPROPERTIES(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getEnergySequence()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getEnergySequence()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getUserDefinedEnergySequence()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getUserDefinedEnergySequence()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getElectricCurrentType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getElectricCurrentType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getInputVoltage()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getInputVoltage()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getInputFrequency()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getInputFrequency()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getFullLoadCurrent()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getFullLoadCurrent()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getMinimumCircuitCurrent()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getMinimumCircuitCurrent()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getMaximumPowerInput()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getMaximumPowerInput()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRatedPowerInput()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRatedPowerInput()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getInputPhase()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getInputPhase()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcElectricalCircuit(IfcElectricalCircuit *value)
{
    outputStream() << "#" << value->getKey() << "=IFCELECTRICALCIRCUIT(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectType()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcElectricalElement(IfcElectricalElement *value)
{
    outputStream() << "#" << value->getKey() << "=IFCELECTRICALELEMENT(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectPlacement()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectPlacement()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRepresentation()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRepresentation()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcElectricApplianceType(IfcElectricApplianceType *value)
{
    outputStream() << "#" << value->getKey() << "=IFCELECTRICAPPLIANCETYPE(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getApplicableOccurrence()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getApplicableOccurrence()); 
    }
    outputStream() << ",";
    if (value->testHasPropertySets() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getHasPropertySets()).size())
            {
                Set_IfcPropertySetDefinition_1_n::iterator it = (value->getHasPropertySets()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getHasPropertySets()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (value->testRepresentationMaps() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRepresentationMaps()).size())
            {
                List_IfcRepresentationMap_1_n::iterator it = (value->getRepresentationMaps()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRepresentationMaps()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getElementType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getElementType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPredefinedType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPredefinedType()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcElectricDistributionPoint(IfcElectricDistributionPoint *value)
{
    outputStream() << "#" << value->getKey() << "=IFCELECTRICDISTRIBUTIONPOINT(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectPlacement()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectPlacement()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRepresentation()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRepresentation()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDistributionPointFunction()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDistributionPointFunction()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getUserDefinedFunction()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getUserDefinedFunction()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcElectricFlowStorageDeviceType(IfcElectricFlowStorageDeviceType *value)
{
    outputStream() << "#" << value->getKey() << "=IFCELECTRICFLOWSTORAGEDEVICETYPE(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getApplicableOccurrence()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getApplicableOccurrence()); 
    }
    outputStream() << ",";
    if (value->testHasPropertySets() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getHasPropertySets()).size())
            {
                Set_IfcPropertySetDefinition_1_n::iterator it = (value->getHasPropertySets()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getHasPropertySets()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (value->testRepresentationMaps() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRepresentationMaps()).size())
            {
                List_IfcRepresentationMap_1_n::iterator it = (value->getRepresentationMaps()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRepresentationMaps()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getElementType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getElementType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPredefinedType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPredefinedType()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcElectricGeneratorType(IfcElectricGeneratorType *value)
{
    outputStream() << "#" << value->getKey() << "=IFCELECTRICGENERATORTYPE(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getApplicableOccurrence()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getApplicableOccurrence()); 
    }
    outputStream() << ",";
    if (value->testHasPropertySets() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getHasPropertySets()).size())
            {
                Set_IfcPropertySetDefinition_1_n::iterator it = (value->getHasPropertySets()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getHasPropertySets()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (value->testRepresentationMaps() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRepresentationMaps()).size())
            {
                List_IfcRepresentationMap_1_n::iterator it = (value->getRepresentationMaps()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRepresentationMaps()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getElementType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getElementType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPredefinedType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPredefinedType()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcElectricHeaterType(IfcElectricHeaterType *value)
{
    outputStream() << "#" << value->getKey() << "=IFCELECTRICHEATERTYPE(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getApplicableOccurrence()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getApplicableOccurrence()); 
    }
    outputStream() << ",";
    if (value->testHasPropertySets() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getHasPropertySets()).size())
            {
                Set_IfcPropertySetDefinition_1_n::iterator it = (value->getHasPropertySets()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getHasPropertySets()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (value->testRepresentationMaps() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRepresentationMaps()).size())
            {
                List_IfcRepresentationMap_1_n::iterator it = (value->getRepresentationMaps()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRepresentationMaps()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getElementType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getElementType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPredefinedType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPredefinedType()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcElectricMotorType(IfcElectricMotorType *value)
{
    outputStream() << "#" << value->getKey() << "=IFCELECTRICMOTORTYPE(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getApplicableOccurrence()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getApplicableOccurrence()); 
    }
    outputStream() << ",";
    if (value->testHasPropertySets() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getHasPropertySets()).size())
            {
                Set_IfcPropertySetDefinition_1_n::iterator it = (value->getHasPropertySets()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getHasPropertySets()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (value->testRepresentationMaps() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRepresentationMaps()).size())
            {
                List_IfcRepresentationMap_1_n::iterator it = (value->getRepresentationMaps()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRepresentationMaps()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getElementType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getElementType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPredefinedType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPredefinedType()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcElectricTimeControlType(IfcElectricTimeControlType *value)
{
    outputStream() << "#" << value->getKey() << "=IFCELECTRICTIMECONTROLTYPE(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getApplicableOccurrence()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getApplicableOccurrence()); 
    }
    outputStream() << ",";
    if (value->testHasPropertySets() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getHasPropertySets()).size())
            {
                Set_IfcPropertySetDefinition_1_n::iterator it = (value->getHasPropertySets()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getHasPropertySets()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (value->testRepresentationMaps() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRepresentationMaps()).size())
            {
                List_IfcRepresentationMap_1_n::iterator it = (value->getRepresentationMaps()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRepresentationMaps()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getElementType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getElementType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPredefinedType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPredefinedType()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcElement(IfcElement *value)
{
    outputStream() << "#" << value->getKey() << "=IFCELEMENT(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectPlacement()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectPlacement()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRepresentation()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRepresentation()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcElementarySurface(IfcElementarySurface *value)
{
    outputStream() << "#" << value->getKey() << "=IFCELEMENTARYSURFACE(";
    if (Step::isUnset(value->getPosition()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPosition()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcElementAssembly(IfcElementAssembly *value)
{
    outputStream() << "#" << value->getKey() << "=IFCELEMENTASSEMBLY(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectPlacement()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectPlacement()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRepresentation()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRepresentation()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getAssemblyPlace()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getAssemblyPlace()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPredefinedType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPredefinedType()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcElementComponent(IfcElementComponent *value)
{
    outputStream() << "#" << value->getKey() << "=IFCELEMENTCOMPONENT(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectPlacement()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectPlacement()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRepresentation()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRepresentation()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcElementComponentType(IfcElementComponentType *value)
{
    outputStream() << "#" << value->getKey() << "=IFCELEMENTCOMPONENTTYPE(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getApplicableOccurrence()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getApplicableOccurrence()); 
    }
    outputStream() << ",";
    if (value->testHasPropertySets() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getHasPropertySets()).size())
            {
                Set_IfcPropertySetDefinition_1_n::iterator it = (value->getHasPropertySets()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getHasPropertySets()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (value->testRepresentationMaps() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRepresentationMaps()).size())
            {
                List_IfcRepresentationMap_1_n::iterator it = (value->getRepresentationMaps()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRepresentationMaps()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getElementType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getElementType()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcElementQuantity(IfcElementQuantity *value)
{
    outputStream() << "#" << value->getKey() << "=IFCELEMENTQUANTITY(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getMethodOfMeasurement()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getMethodOfMeasurement()); 
    }
    outputStream() << ",";
    if (value->testQuantities() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getQuantities()).size())
            {
                Set_IfcPhysicalQuantity_1_n::iterator it = (value->getQuantities()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getQuantities()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcElementType(IfcElementType *value)
{
    outputStream() << "#" << value->getKey() << "=IFCELEMENTTYPE(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getApplicableOccurrence()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getApplicableOccurrence()); 
    }
    outputStream() << ",";
    if (value->testHasPropertySets() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getHasPropertySets()).size())
            {
                Set_IfcPropertySetDefinition_1_n::iterator it = (value->getHasPropertySets()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getHasPropertySets()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (value->testRepresentationMaps() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRepresentationMaps()).size())
            {
                List_IfcRepresentationMap_1_n::iterator it = (value->getRepresentationMaps()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRepresentationMaps()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getElementType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getElementType()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcEllipse(IfcEllipse *value)
{
    outputStream() << "#" << value->getKey() << "=IFCELLIPSE(";
    if (Step::isUnset(value->getPosition()))
    {
        outputStream() << "$";
    }
    else
    {
        writeIfcAxis2Placement(value->getPosition());
    }
    outputStream() << ",";
    if (Step::isUnset(value->getSemiAxis1()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getSemiAxis1()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getSemiAxis2()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getSemiAxis2()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcEllipseProfileDef(IfcEllipseProfileDef *value)
{
    outputStream() << "#" << value->getKey() << "=IFCELLIPSEPROFILEDEF(";
    if (Step::isUnset(value->getProfileType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getProfileType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getProfileName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getProfileName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPosition()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPosition()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getSemiAxis1()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getSemiAxis1()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getSemiAxis2()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getSemiAxis2()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcEnergyConversionDevice(IfcEnergyConversionDevice *value)
{
    outputStream() << "#" << value->getKey() << "=IFCENERGYCONVERSIONDEVICE(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectPlacement()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectPlacement()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRepresentation()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRepresentation()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcEnergyConversionDeviceType(IfcEnergyConversionDeviceType *value)
{
    outputStream() << "#" << value->getKey() << "=IFCENERGYCONVERSIONDEVICETYPE(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getApplicableOccurrence()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getApplicableOccurrence()); 
    }
    outputStream() << ",";
    if (value->testHasPropertySets() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getHasPropertySets()).size())
            {
                Set_IfcPropertySetDefinition_1_n::iterator it = (value->getHasPropertySets()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getHasPropertySets()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (value->testRepresentationMaps() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRepresentationMaps()).size())
            {
                List_IfcRepresentationMap_1_n::iterator it = (value->getRepresentationMaps()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRepresentationMaps()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getElementType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getElementType()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcEnergyProperties(IfcEnergyProperties *value)
{
    outputStream() << "#" << value->getKey() << "=IFCENERGYPROPERTIES(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getEnergySequence()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getEnergySequence()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getUserDefinedEnergySequence()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getUserDefinedEnergySequence()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcEnvironmentalImpactValue(IfcEnvironmentalImpactValue *value)
{
    outputStream() << "#" << value->getKey() << "=IFCENVIRONMENTALIMPACTVALUE(";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getAppliedValue()))
    {
        outputStream() << "$";
    }
    else
    {
        writeIfcAppliedValueSelect(value->getAppliedValue());
    }
    outputStream() << ",";
    if (Step::isUnset(value->getUnitBasis()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getUnitBasis()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getApplicableDate()))
    {
        outputStream() << "$";
    }
    else
    {
        writeIfcDateTimeSelect(value->getApplicableDate());
    }
    outputStream() << ",";
    if (Step::isUnset(value->getFixedUntilDate()))
    {
        outputStream() << "$";
    }
    else
    {
        writeIfcDateTimeSelect(value->getFixedUntilDate());
    }
    outputStream() << ",";
    if (Step::isUnset(value->getImpactType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getImpactType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getCategory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getCategory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getUserDefinedCategory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getUserDefinedCategory()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcEquipmentElement(IfcEquipmentElement *value)
{
    outputStream() << "#" << value->getKey() << "=IFCEQUIPMENTELEMENT(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectPlacement()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectPlacement()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRepresentation()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRepresentation()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcEquipmentStandard(IfcEquipmentStandard *value)
{
    outputStream() << "#" << value->getKey() << "=IFCEQUIPMENTSTANDARD(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectType()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcEvaporativeCoolerType(IfcEvaporativeCoolerType *value)
{
    outputStream() << "#" << value->getKey() << "=IFCEVAPORATIVECOOLERTYPE(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getApplicableOccurrence()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getApplicableOccurrence()); 
    }
    outputStream() << ",";
    if (value->testHasPropertySets() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getHasPropertySets()).size())
            {
                Set_IfcPropertySetDefinition_1_n::iterator it = (value->getHasPropertySets()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getHasPropertySets()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (value->testRepresentationMaps() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRepresentationMaps()).size())
            {
                List_IfcRepresentationMap_1_n::iterator it = (value->getRepresentationMaps()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRepresentationMaps()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getElementType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getElementType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPredefinedType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPredefinedType()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcEvaporatorType(IfcEvaporatorType *value)
{
    outputStream() << "#" << value->getKey() << "=IFCEVAPORATORTYPE(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getApplicableOccurrence()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getApplicableOccurrence()); 
    }
    outputStream() << ",";
    if (value->testHasPropertySets() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getHasPropertySets()).size())
            {
                Set_IfcPropertySetDefinition_1_n::iterator it = (value->getHasPropertySets()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getHasPropertySets()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (value->testRepresentationMaps() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRepresentationMaps()).size())
            {
                List_IfcRepresentationMap_1_n::iterator it = (value->getRepresentationMaps()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRepresentationMaps()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getElementType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getElementType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPredefinedType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPredefinedType()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcExtendedMaterialProperties(IfcExtendedMaterialProperties *value)
{
    outputStream() << "#" << value->getKey() << "=IFCEXTENDEDMATERIALPROPERTIES(";
    if (Step::isUnset(value->getMaterial()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getMaterial()); 
    }
    outputStream() << ",";
    if (value->testExtendedProperties() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getExtendedProperties()).size())
            {
                Set_IfcProperty_1_n::iterator it = (value->getExtendedProperties()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getExtendedProperties()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcExternallyDefinedHatchStyle(IfcExternallyDefinedHatchStyle *value)
{
    outputStream() << "#" << value->getKey() << "=IFCEXTERNALLYDEFINEDHATCHSTYLE(";
    if (Step::isUnset(value->getLocation()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getLocation()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getItemReference()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getItemReference()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcExternallyDefinedSurfaceStyle(IfcExternallyDefinedSurfaceStyle *value)
{
    outputStream() << "#" << value->getKey() << "=IFCEXTERNALLYDEFINEDSURFACESTYLE(";
    if (Step::isUnset(value->getLocation()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getLocation()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getItemReference()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getItemReference()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcExternallyDefinedSymbol(IfcExternallyDefinedSymbol *value)
{
    outputStream() << "#" << value->getKey() << "=IFCEXTERNALLYDEFINEDSYMBOL(";
    if (Step::isUnset(value->getLocation()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getLocation()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getItemReference()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getItemReference()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcExternallyDefinedTextFont(IfcExternallyDefinedTextFont *value)
{
    outputStream() << "#" << value->getKey() << "=IFCEXTERNALLYDEFINEDTEXTFONT(";
    if (Step::isUnset(value->getLocation()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getLocation()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getItemReference()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getItemReference()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcExternalReference(IfcExternalReference *value)
{
    outputStream() << "#" << value->getKey() << "=IFCEXTERNALREFERENCE(";
    if (Step::isUnset(value->getLocation()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getLocation()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getItemReference()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getItemReference()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcExtrudedAreaSolid(IfcExtrudedAreaSolid *value)
{
    outputStream() << "#" << value->getKey() << "=IFCEXTRUDEDAREASOLID(";
    if (Step::isUnset(value->getSweptArea()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getSweptArea()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPosition()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPosition()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getExtrudedDirection()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getExtrudedDirection()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDepth()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDepth()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcFace(IfcFace *value)
{
    outputStream() << "#" << value->getKey() << "=IFCFACE(";
    if (value->testBounds() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getBounds()).size())
            {
                Set_IfcFaceBound_1_n::iterator it = (value->getBounds()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getBounds()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcFaceBasedSurfaceModel(IfcFaceBasedSurfaceModel *value)
{
    outputStream() << "#" << value->getKey() << "=IFCFACEBASEDSURFACEMODEL(";
    if (value->testFbsmFaces() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getFbsmFaces()).size())
            {
                Set_IfcConnectedFaceSet_1_n::iterator it = (value->getFbsmFaces()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getFbsmFaces()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcFaceBound(IfcFaceBound *value)
{
    outputStream() << "#" << value->getKey() << "=IFCFACEBOUND(";
    if (Step::isUnset(value->getBound()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getBound()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOrientation()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOrientation()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcFaceOuterBound(IfcFaceOuterBound *value)
{
    outputStream() << "#" << value->getKey() << "=IFCFACEOUTERBOUND(";
    if (Step::isUnset(value->getBound()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getBound()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOrientation()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOrientation()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcFaceSurface(IfcFaceSurface *value)
{
    outputStream() << "#" << value->getKey() << "=IFCFACESURFACE(";
    if (value->testBounds() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getBounds()).size())
            {
                Set_IfcFaceBound_1_n::iterator it = (value->getBounds()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getBounds()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getFaceSurface()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getFaceSurface()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getSameSense()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getSameSense()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcFacetedBrep(IfcFacetedBrep *value)
{
    outputStream() << "#" << value->getKey() << "=IFCFACETEDBREP(";
    if (Step::isUnset(value->getOuter()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOuter()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcFacetedBrepWithVoids(IfcFacetedBrepWithVoids *value)
{
    outputStream() << "#" << value->getKey() << "=IFCFACETEDBREPWITHVOIDS(";
    if (Step::isUnset(value->getOuter()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOuter()); 
    }
    outputStream() << ",";
    if (value->testVoids() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getVoids()).size())
            {
                Set_IfcClosedShell_1_n::iterator it = (value->getVoids()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getVoids()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcFailureConnectionCondition(IfcFailureConnectionCondition *value)
{
    outputStream() << "#" << value->getKey() << "=IFCFAILURECONNECTIONCONDITION(";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTensionFailureX()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTensionFailureX()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTensionFailureY()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTensionFailureY()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTensionFailureZ()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTensionFailureZ()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getCompressionFailureX()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getCompressionFailureX()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getCompressionFailureY()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getCompressionFailureY()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getCompressionFailureZ()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getCompressionFailureZ()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcFanType(IfcFanType *value)
{
    outputStream() << "#" << value->getKey() << "=IFCFANTYPE(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getApplicableOccurrence()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getApplicableOccurrence()); 
    }
    outputStream() << ",";
    if (value->testHasPropertySets() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getHasPropertySets()).size())
            {
                Set_IfcPropertySetDefinition_1_n::iterator it = (value->getHasPropertySets()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getHasPropertySets()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (value->testRepresentationMaps() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRepresentationMaps()).size())
            {
                List_IfcRepresentationMap_1_n::iterator it = (value->getRepresentationMaps()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRepresentationMaps()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getElementType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getElementType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPredefinedType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPredefinedType()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcFastener(IfcFastener *value)
{
    outputStream() << "#" << value->getKey() << "=IFCFASTENER(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectPlacement()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectPlacement()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRepresentation()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRepresentation()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcFastenerType(IfcFastenerType *value)
{
    outputStream() << "#" << value->getKey() << "=IFCFASTENERTYPE(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getApplicableOccurrence()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getApplicableOccurrence()); 
    }
    outputStream() << ",";
    if (value->testHasPropertySets() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getHasPropertySets()).size())
            {
                Set_IfcPropertySetDefinition_1_n::iterator it = (value->getHasPropertySets()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getHasPropertySets()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (value->testRepresentationMaps() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRepresentationMaps()).size())
            {
                List_IfcRepresentationMap_1_n::iterator it = (value->getRepresentationMaps()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRepresentationMaps()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getElementType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getElementType()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcFeatureElement(IfcFeatureElement *value)
{
    outputStream() << "#" << value->getKey() << "=IFCFEATUREELEMENT(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectPlacement()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectPlacement()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRepresentation()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRepresentation()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcFeatureElementAddition(IfcFeatureElementAddition *value)
{
    outputStream() << "#" << value->getKey() << "=IFCFEATUREELEMENTADDITION(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectPlacement()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectPlacement()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRepresentation()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRepresentation()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcFeatureElementSubtraction(IfcFeatureElementSubtraction *value)
{
    outputStream() << "#" << value->getKey() << "=IFCFEATUREELEMENTSUBTRACTION(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectPlacement()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectPlacement()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRepresentation()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRepresentation()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcFillAreaStyle(IfcFillAreaStyle *value)
{
    outputStream() << "#" << value->getKey() << "=IFCFILLAREASTYLE(";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (value->testFillStyles() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getFillStyles()).size())
            {
                Set_IfcFillStyleSelect_1_n::iterator it = (value->getFillStyles()).begin();
                writeIfcFillStyleSelect((*it).get());
                for (it++; it != (value->getFillStyles()).end(); it++)
                {
                    outputStream() << ",";
                    writeIfcFillStyleSelect((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcFillAreaStyleHatching(IfcFillAreaStyleHatching *value)
{
    outputStream() << "#" << value->getKey() << "=IFCFILLAREASTYLEHATCHING(";
    if (Step::isUnset(value->getHatchLineAppearance()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getHatchLineAppearance()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getStartOfNextHatchLine()))
    {
        outputStream() << "$";
    }
    else
    {
        writeIfcHatchLineDistanceSelect(value->getStartOfNextHatchLine());
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPointOfReferenceHatchLine()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPointOfReferenceHatchLine()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPatternStart()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPatternStart()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getHatchLineAngle()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getHatchLineAngle()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcFillAreaStyleTiles(IfcFillAreaStyleTiles *value)
{
    outputStream() << "#" << value->getKey() << "=IFCFILLAREASTYLETILES(";
    if (Step::isUnset(value->getTilingPattern()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTilingPattern()); 
    }
    outputStream() << ",";
    if (value->testTiles() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getTiles()).size())
            {
                Set_IfcFillAreaStyleTileShapeSelect_1_n::iterator it = (value->getTiles()).begin();
                writeIfcFillAreaStyleTileShapeSelect((*it).get());
                for (it++; it != (value->getTiles()).end(); it++)
                {
                    outputStream() << ",";
                    writeIfcFillAreaStyleTileShapeSelect((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTilingScale()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTilingScale()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcFillAreaStyleTileSymbolWithStyle(IfcFillAreaStyleTileSymbolWithStyle *value)
{
    outputStream() << "#" << value->getKey() << "=IFCFILLAREASTYLETILESYMBOLWITHSTYLE(";
    if (Step::isUnset(value->getSymbol()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getSymbol()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcFilterType(IfcFilterType *value)
{
    outputStream() << "#" << value->getKey() << "=IFCFILTERTYPE(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getApplicableOccurrence()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getApplicableOccurrence()); 
    }
    outputStream() << ",";
    if (value->testHasPropertySets() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getHasPropertySets()).size())
            {
                Set_IfcPropertySetDefinition_1_n::iterator it = (value->getHasPropertySets()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getHasPropertySets()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (value->testRepresentationMaps() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRepresentationMaps()).size())
            {
                List_IfcRepresentationMap_1_n::iterator it = (value->getRepresentationMaps()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRepresentationMaps()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getElementType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getElementType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPredefinedType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPredefinedType()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcFireSuppressionTerminalType(IfcFireSuppressionTerminalType *value)
{
    outputStream() << "#" << value->getKey() << "=IFCFIRESUPPRESSIONTERMINALTYPE(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getApplicableOccurrence()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getApplicableOccurrence()); 
    }
    outputStream() << ",";
    if (value->testHasPropertySets() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getHasPropertySets()).size())
            {
                Set_IfcPropertySetDefinition_1_n::iterator it = (value->getHasPropertySets()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getHasPropertySets()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (value->testRepresentationMaps() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRepresentationMaps()).size())
            {
                List_IfcRepresentationMap_1_n::iterator it = (value->getRepresentationMaps()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRepresentationMaps()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getElementType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getElementType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPredefinedType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPredefinedType()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcFlowController(IfcFlowController *value)
{
    outputStream() << "#" << value->getKey() << "=IFCFLOWCONTROLLER(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectPlacement()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectPlacement()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRepresentation()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRepresentation()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcFlowControllerType(IfcFlowControllerType *value)
{
    outputStream() << "#" << value->getKey() << "=IFCFLOWCONTROLLERTYPE(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getApplicableOccurrence()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getApplicableOccurrence()); 
    }
    outputStream() << ",";
    if (value->testHasPropertySets() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getHasPropertySets()).size())
            {
                Set_IfcPropertySetDefinition_1_n::iterator it = (value->getHasPropertySets()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getHasPropertySets()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (value->testRepresentationMaps() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRepresentationMaps()).size())
            {
                List_IfcRepresentationMap_1_n::iterator it = (value->getRepresentationMaps()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRepresentationMaps()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getElementType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getElementType()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcFlowFitting(IfcFlowFitting *value)
{
    outputStream() << "#" << value->getKey() << "=IFCFLOWFITTING(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectPlacement()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectPlacement()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRepresentation()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRepresentation()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcFlowFittingType(IfcFlowFittingType *value)
{
    outputStream() << "#" << value->getKey() << "=IFCFLOWFITTINGTYPE(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getApplicableOccurrence()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getApplicableOccurrence()); 
    }
    outputStream() << ",";
    if (value->testHasPropertySets() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getHasPropertySets()).size())
            {
                Set_IfcPropertySetDefinition_1_n::iterator it = (value->getHasPropertySets()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getHasPropertySets()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (value->testRepresentationMaps() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRepresentationMaps()).size())
            {
                List_IfcRepresentationMap_1_n::iterator it = (value->getRepresentationMaps()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRepresentationMaps()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getElementType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getElementType()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcFlowInstrumentType(IfcFlowInstrumentType *value)
{
    outputStream() << "#" << value->getKey() << "=IFCFLOWINSTRUMENTTYPE(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getApplicableOccurrence()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getApplicableOccurrence()); 
    }
    outputStream() << ",";
    if (value->testHasPropertySets() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getHasPropertySets()).size())
            {
                Set_IfcPropertySetDefinition_1_n::iterator it = (value->getHasPropertySets()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getHasPropertySets()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (value->testRepresentationMaps() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRepresentationMaps()).size())
            {
                List_IfcRepresentationMap_1_n::iterator it = (value->getRepresentationMaps()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRepresentationMaps()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getElementType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getElementType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPredefinedType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPredefinedType()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcFlowMeterType(IfcFlowMeterType *value)
{
    outputStream() << "#" << value->getKey() << "=IFCFLOWMETERTYPE(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getApplicableOccurrence()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getApplicableOccurrence()); 
    }
    outputStream() << ",";
    if (value->testHasPropertySets() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getHasPropertySets()).size())
            {
                Set_IfcPropertySetDefinition_1_n::iterator it = (value->getHasPropertySets()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getHasPropertySets()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (value->testRepresentationMaps() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRepresentationMaps()).size())
            {
                List_IfcRepresentationMap_1_n::iterator it = (value->getRepresentationMaps()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRepresentationMaps()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getElementType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getElementType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPredefinedType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPredefinedType()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcFlowMovingDevice(IfcFlowMovingDevice *value)
{
    outputStream() << "#" << value->getKey() << "=IFCFLOWMOVINGDEVICE(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectPlacement()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectPlacement()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRepresentation()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRepresentation()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcFlowMovingDeviceType(IfcFlowMovingDeviceType *value)
{
    outputStream() << "#" << value->getKey() << "=IFCFLOWMOVINGDEVICETYPE(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getApplicableOccurrence()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getApplicableOccurrence()); 
    }
    outputStream() << ",";
    if (value->testHasPropertySets() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getHasPropertySets()).size())
            {
                Set_IfcPropertySetDefinition_1_n::iterator it = (value->getHasPropertySets()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getHasPropertySets()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (value->testRepresentationMaps() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRepresentationMaps()).size())
            {
                List_IfcRepresentationMap_1_n::iterator it = (value->getRepresentationMaps()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRepresentationMaps()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getElementType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getElementType()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcFlowSegment(IfcFlowSegment *value)
{
    outputStream() << "#" << value->getKey() << "=IFCFLOWSEGMENT(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectPlacement()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectPlacement()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRepresentation()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRepresentation()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcFlowSegmentType(IfcFlowSegmentType *value)
{
    outputStream() << "#" << value->getKey() << "=IFCFLOWSEGMENTTYPE(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getApplicableOccurrence()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getApplicableOccurrence()); 
    }
    outputStream() << ",";
    if (value->testHasPropertySets() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getHasPropertySets()).size())
            {
                Set_IfcPropertySetDefinition_1_n::iterator it = (value->getHasPropertySets()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getHasPropertySets()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (value->testRepresentationMaps() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRepresentationMaps()).size())
            {
                List_IfcRepresentationMap_1_n::iterator it = (value->getRepresentationMaps()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRepresentationMaps()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getElementType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getElementType()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcFlowStorageDevice(IfcFlowStorageDevice *value)
{
    outputStream() << "#" << value->getKey() << "=IFCFLOWSTORAGEDEVICE(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectPlacement()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectPlacement()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRepresentation()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRepresentation()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcFlowStorageDeviceType(IfcFlowStorageDeviceType *value)
{
    outputStream() << "#" << value->getKey() << "=IFCFLOWSTORAGEDEVICETYPE(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getApplicableOccurrence()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getApplicableOccurrence()); 
    }
    outputStream() << ",";
    if (value->testHasPropertySets() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getHasPropertySets()).size())
            {
                Set_IfcPropertySetDefinition_1_n::iterator it = (value->getHasPropertySets()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getHasPropertySets()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (value->testRepresentationMaps() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRepresentationMaps()).size())
            {
                List_IfcRepresentationMap_1_n::iterator it = (value->getRepresentationMaps()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRepresentationMaps()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getElementType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getElementType()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcFlowTerminal(IfcFlowTerminal *value)
{
    outputStream() << "#" << value->getKey() << "=IFCFLOWTERMINAL(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectPlacement()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectPlacement()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRepresentation()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRepresentation()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcFlowTerminalType(IfcFlowTerminalType *value)
{
    outputStream() << "#" << value->getKey() << "=IFCFLOWTERMINALTYPE(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getApplicableOccurrence()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getApplicableOccurrence()); 
    }
    outputStream() << ",";
    if (value->testHasPropertySets() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getHasPropertySets()).size())
            {
                Set_IfcPropertySetDefinition_1_n::iterator it = (value->getHasPropertySets()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getHasPropertySets()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (value->testRepresentationMaps() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRepresentationMaps()).size())
            {
                List_IfcRepresentationMap_1_n::iterator it = (value->getRepresentationMaps()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRepresentationMaps()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getElementType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getElementType()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcFlowTreatmentDevice(IfcFlowTreatmentDevice *value)
{
    outputStream() << "#" << value->getKey() << "=IFCFLOWTREATMENTDEVICE(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectPlacement()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectPlacement()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRepresentation()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRepresentation()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcFlowTreatmentDeviceType(IfcFlowTreatmentDeviceType *value)
{
    outputStream() << "#" << value->getKey() << "=IFCFLOWTREATMENTDEVICETYPE(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getApplicableOccurrence()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getApplicableOccurrence()); 
    }
    outputStream() << ",";
    if (value->testHasPropertySets() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getHasPropertySets()).size())
            {
                Set_IfcPropertySetDefinition_1_n::iterator it = (value->getHasPropertySets()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getHasPropertySets()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (value->testRepresentationMaps() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRepresentationMaps()).size())
            {
                List_IfcRepresentationMap_1_n::iterator it = (value->getRepresentationMaps()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRepresentationMaps()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getElementType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getElementType()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcFluidFlowProperties(IfcFluidFlowProperties *value)
{
    outputStream() << "#" << value->getKey() << "=IFCFLUIDFLOWPROPERTIES(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPropertySource()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPropertySource()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getFlowConditionTimeSeries()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getFlowConditionTimeSeries()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getVelocityTimeSeries()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getVelocityTimeSeries()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getFlowrateTimeSeries()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getFlowrateTimeSeries()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getFluid()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getFluid()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPressureTimeSeries()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPressureTimeSeries()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getUserDefinedPropertySource()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getUserDefinedPropertySource()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTemperatureSingleValue()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTemperatureSingleValue()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getWetBulbTemperatureSingleValue()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getWetBulbTemperatureSingleValue()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getWetBulbTemperatureTimeSeries()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getWetBulbTemperatureTimeSeries()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTemperatureTimeSeries()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTemperatureTimeSeries()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getFlowrateSingleValue()))
    {
        outputStream() << "$";
    }
    else
    {
        writeIfcDerivedMeasureValue(value->getFlowrateSingleValue());
    }
    outputStream() << ",";
    if (Step::isUnset(value->getFlowConditionSingleValue()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getFlowConditionSingleValue()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getVelocitySingleValue()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getVelocitySingleValue()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPressureSingleValue()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPressureSingleValue()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcFooting(IfcFooting *value)
{
    outputStream() << "#" << value->getKey() << "=IFCFOOTING(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectPlacement()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectPlacement()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRepresentation()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRepresentation()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPredefinedType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPredefinedType()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcFuelProperties(IfcFuelProperties *value)
{
    outputStream() << "#" << value->getKey() << "=IFCFUELPROPERTIES(";
    if (Step::isUnset(value->getMaterial()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getMaterial()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getCombustionTemperature()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getCombustionTemperature()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getCarbonContent()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getCarbonContent()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getLowerHeatingValue()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getLowerHeatingValue()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getHigherHeatingValue()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getHigherHeatingValue()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcFurnishingElement(IfcFurnishingElement *value)
{
    outputStream() << "#" << value->getKey() << "=IFCFURNISHINGELEMENT(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectPlacement()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectPlacement()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRepresentation()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRepresentation()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcFurnishingElementType(IfcFurnishingElementType *value)
{
    outputStream() << "#" << value->getKey() << "=IFCFURNISHINGELEMENTTYPE(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getApplicableOccurrence()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getApplicableOccurrence()); 
    }
    outputStream() << ",";
    if (value->testHasPropertySets() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getHasPropertySets()).size())
            {
                Set_IfcPropertySetDefinition_1_n::iterator it = (value->getHasPropertySets()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getHasPropertySets()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (value->testRepresentationMaps() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRepresentationMaps()).size())
            {
                List_IfcRepresentationMap_1_n::iterator it = (value->getRepresentationMaps()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRepresentationMaps()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getElementType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getElementType()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcFurnitureStandard(IfcFurnitureStandard *value)
{
    outputStream() << "#" << value->getKey() << "=IFCFURNITURESTANDARD(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectType()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcFurnitureType(IfcFurnitureType *value)
{
    outputStream() << "#" << value->getKey() << "=IFCFURNITURETYPE(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getApplicableOccurrence()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getApplicableOccurrence()); 
    }
    outputStream() << ",";
    if (value->testHasPropertySets() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getHasPropertySets()).size())
            {
                Set_IfcPropertySetDefinition_1_n::iterator it = (value->getHasPropertySets()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getHasPropertySets()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (value->testRepresentationMaps() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRepresentationMaps()).size())
            {
                List_IfcRepresentationMap_1_n::iterator it = (value->getRepresentationMaps()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRepresentationMaps()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getElementType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getElementType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getAssemblyPlace()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getAssemblyPlace()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcGasTerminalType(IfcGasTerminalType *value)
{
    outputStream() << "#" << value->getKey() << "=IFCGASTERMINALTYPE(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getApplicableOccurrence()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getApplicableOccurrence()); 
    }
    outputStream() << ",";
    if (value->testHasPropertySets() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getHasPropertySets()).size())
            {
                Set_IfcPropertySetDefinition_1_n::iterator it = (value->getHasPropertySets()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getHasPropertySets()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (value->testRepresentationMaps() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRepresentationMaps()).size())
            {
                List_IfcRepresentationMap_1_n::iterator it = (value->getRepresentationMaps()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRepresentationMaps()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getElementType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getElementType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPredefinedType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPredefinedType()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcGeneralMaterialProperties(IfcGeneralMaterialProperties *value)
{
    outputStream() << "#" << value->getKey() << "=IFCGENERALMATERIALPROPERTIES(";
    if (Step::isUnset(value->getMaterial()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getMaterial()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getMolecularWeight()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getMolecularWeight()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPorosity()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPorosity()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getMassDensity()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getMassDensity()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcGeneralProfileProperties(IfcGeneralProfileProperties *value)
{
    outputStream() << "#" << value->getKey() << "=IFCGENERALPROFILEPROPERTIES(";
    if (Step::isUnset(value->getProfileName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getProfileName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getProfileDefinition()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getProfileDefinition()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPhysicalWeight()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPhysicalWeight()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPerimeter()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPerimeter()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getMinimumPlateThickness()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getMinimumPlateThickness()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getMaximumPlateThickness()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getMaximumPlateThickness()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getCrossSectionArea()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getCrossSectionArea()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcGeometricCurveSet(IfcGeometricCurveSet *value)
{
    outputStream() << "#" << value->getKey() << "=IFCGEOMETRICCURVESET(";
    if (value->testElements() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getElements()).size())
            {
                Set_IfcGeometricSetSelect_1_n::iterator it = (value->getElements()).begin();
                writeIfcGeometricSetSelect((*it).get());
                for (it++; it != (value->getElements()).end(); it++)
                {
                    outputStream() << ",";
                    writeIfcGeometricSetSelect((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcGeometricRepresentationContext(IfcGeometricRepresentationContext *value)
{
    outputStream() << "#" << value->getKey() << "=IFCGEOMETRICREPRESENTATIONCONTEXT(";
    if (Step::isUnset(value->getContextIdentifier()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getContextIdentifier()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getContextType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getContextType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getCoordinateSpaceDimension()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getCoordinateSpaceDimension()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPrecision()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPrecision()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getWorldCoordinateSystem()))
    {
        outputStream() << "$";
    }
    else
    {
        writeIfcAxis2Placement(value->getWorldCoordinateSystem());
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTrueNorth()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTrueNorth()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcGeometricRepresentationItem(IfcGeometricRepresentationItem *value)
{
    outputStream() << "#" << value->getKey() << "=IFCGEOMETRICREPRESENTATIONITEM(";
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcGeometricRepresentationSubContext(IfcGeometricRepresentationSubContext *value)
{
    outputStream() << "#" << value->getKey() << "=IFCGEOMETRICREPRESENTATIONSUBCONTEXT(";
    if (Step::isUnset(value->getContextIdentifier()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getContextIdentifier()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getContextType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getContextType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getCoordinateSpaceDimension()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getCoordinateSpaceDimension()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPrecision()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPrecision()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getWorldCoordinateSystem()))
    {
        outputStream() << "$";
    }
    else
    {
        writeIfcAxis2Placement(value->getWorldCoordinateSystem());
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTrueNorth()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTrueNorth()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getParentContext()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getParentContext()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTargetScale()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTargetScale()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTargetView()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTargetView()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getUserDefinedTargetView()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getUserDefinedTargetView()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcGeometricSet(IfcGeometricSet *value)
{
    outputStream() << "#" << value->getKey() << "=IFCGEOMETRICSET(";
    if (value->testElements() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getElements()).size())
            {
                Set_IfcGeometricSetSelect_1_n::iterator it = (value->getElements()).begin();
                writeIfcGeometricSetSelect((*it).get());
                for (it++; it != (value->getElements()).end(); it++)
                {
                    outputStream() << ",";
                    writeIfcGeometricSetSelect((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcGrid(IfcGrid *value)
{
    outputStream() << "#" << value->getKey() << "=IFCGRID(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectPlacement()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectPlacement()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRepresentation()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRepresentation()); 
    }
    outputStream() << ",";
    if (value->testUAxes() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getUAxes()).size())
            {
                List_IfcGridAxis_1_n::iterator it = (value->getUAxes()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getUAxes()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (value->testVAxes() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getVAxes()).size())
            {
                List_IfcGridAxis_1_n::iterator it = (value->getVAxes()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getVAxes()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (value->testWAxes() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getWAxes()).size())
            {
                List_IfcGridAxis_1_n::iterator it = (value->getWAxes()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getWAxes()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcGridAxis(IfcGridAxis *value)
{
    outputStream() << "#" << value->getKey() << "=IFCGRIDAXIS(";
    if (Step::isUnset(value->getAxisTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getAxisTag()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getAxisCurve()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getAxisCurve()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getSameSense()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getSameSense()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcGridPlacement(IfcGridPlacement *value)
{
    outputStream() << "#" << value->getKey() << "=IFCGRIDPLACEMENT(";
    if (Step::isUnset(value->getPlacementLocation()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPlacementLocation()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPlacementRefDirection()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPlacementRefDirection()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcGroup(IfcGroup *value)
{
    outputStream() << "#" << value->getKey() << "=IFCGROUP(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectType()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcHalfSpaceSolid(IfcHalfSpaceSolid *value)
{
    outputStream() << "#" << value->getKey() << "=IFCHALFSPACESOLID(";
    if (Step::isUnset(value->getBaseSurface()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getBaseSurface()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getAgreementFlag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getAgreementFlag()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcHeatExchangerType(IfcHeatExchangerType *value)
{
    outputStream() << "#" << value->getKey() << "=IFCHEATEXCHANGERTYPE(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getApplicableOccurrence()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getApplicableOccurrence()); 
    }
    outputStream() << ",";
    if (value->testHasPropertySets() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getHasPropertySets()).size())
            {
                Set_IfcPropertySetDefinition_1_n::iterator it = (value->getHasPropertySets()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getHasPropertySets()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (value->testRepresentationMaps() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRepresentationMaps()).size())
            {
                List_IfcRepresentationMap_1_n::iterator it = (value->getRepresentationMaps()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRepresentationMaps()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getElementType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getElementType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPredefinedType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPredefinedType()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcHumidifierType(IfcHumidifierType *value)
{
    outputStream() << "#" << value->getKey() << "=IFCHUMIDIFIERTYPE(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getApplicableOccurrence()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getApplicableOccurrence()); 
    }
    outputStream() << ",";
    if (value->testHasPropertySets() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getHasPropertySets()).size())
            {
                Set_IfcPropertySetDefinition_1_n::iterator it = (value->getHasPropertySets()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getHasPropertySets()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (value->testRepresentationMaps() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRepresentationMaps()).size())
            {
                List_IfcRepresentationMap_1_n::iterator it = (value->getRepresentationMaps()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRepresentationMaps()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getElementType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getElementType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPredefinedType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPredefinedType()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcHygroscopicMaterialProperties(IfcHygroscopicMaterialProperties *value)
{
    outputStream() << "#" << value->getKey() << "=IFCHYGROSCOPICMATERIALPROPERTIES(";
    if (Step::isUnset(value->getMaterial()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getMaterial()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getUpperVaporResistanceFactor()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getUpperVaporResistanceFactor()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getLowerVaporResistanceFactor()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getLowerVaporResistanceFactor()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getIsothermalMoistureCapacity()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getIsothermalMoistureCapacity()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getVaporPermeability()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getVaporPermeability()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getMoistureDiffusivity()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getMoistureDiffusivity()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcImageTexture(IfcImageTexture *value)
{
    outputStream() << "#" << value->getKey() << "=IFCIMAGETEXTURE(";
    if (Step::isUnset(value->getRepeatS()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRepeatS()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRepeatT()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRepeatT()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTextureType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTextureType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTextureTransform()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTextureTransform()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getUrlReference()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getUrlReference()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcInventory(IfcInventory *value)
{
    outputStream() << "#" << value->getKey() << "=IFCINVENTORY(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getInventoryType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getInventoryType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getJurisdiction()))
    {
        outputStream() << "$";
    }
    else
    {
        writeIfcActorSelect(value->getJurisdiction());
    }
    outputStream() << ",";
    if (value->testResponsiblePersons() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getResponsiblePersons()).size())
            {
                Set_IfcPerson_1_n::iterator it = (value->getResponsiblePersons()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getResponsiblePersons()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getLastUpdateDate()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getLastUpdateDate()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getCurrentValue()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getCurrentValue()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOriginalValue()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOriginalValue()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcIrregularTimeSeries(IfcIrregularTimeSeries *value)
{
    outputStream() << "#" << value->getKey() << "=IFCIRREGULARTIMESERIES(";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getStartTime()))
    {
        outputStream() << "$";
    }
    else
    {
        writeIfcDateTimeSelect(value->getStartTime());
    }
    outputStream() << ",";
    if (Step::isUnset(value->getEndTime()))
    {
        outputStream() << "$";
    }
    else
    {
        writeIfcDateTimeSelect(value->getEndTime());
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTimeSeriesDataType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTimeSeriesDataType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDataOrigin()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDataOrigin()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getUserDefinedDataOrigin()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getUserDefinedDataOrigin()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getUnit()))
    {
        outputStream() << "$";
    }
    else
    {
        writeIfcUnit(value->getUnit());
    }
    outputStream() << ",";
    if (value->testValues() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getValues()).size())
            {
                List_IfcIrregularTimeSeriesValue_1_n::iterator it = (value->getValues()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getValues()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcIrregularTimeSeriesValue(IfcIrregularTimeSeriesValue *value)
{
    outputStream() << "#" << value->getKey() << "=IFCIRREGULARTIMESERIESVALUE(";
    if (Step::isUnset(value->getTimeStamp()))
    {
        outputStream() << "$";
    }
    else
    {
        writeIfcDateTimeSelect(value->getTimeStamp());
    }
    outputStream() << ",";
    if (value->testListValues() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getListValues()).size())
            {
                List_IfcValue_1_n::iterator it = (value->getListValues()).begin();
                writeIfcValue((*it).get());
                for (it++; it != (value->getListValues()).end(); it++)
                {
                    outputStream() << ",";
                    writeIfcValue((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcIShapeProfileDef(IfcIShapeProfileDef *value)
{
    outputStream() << "#" << value->getKey() << "=IFCISHAPEPROFILEDEF(";
    if (Step::isUnset(value->getProfileType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getProfileType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getProfileName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getProfileName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPosition()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPosition()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOverallWidth()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOverallWidth()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOverallDepth()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOverallDepth()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getWebThickness()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getWebThickness()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getFlangeThickness()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getFlangeThickness()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getFilletRadius()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getFilletRadius()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcJunctionBoxType(IfcJunctionBoxType *value)
{
    outputStream() << "#" << value->getKey() << "=IFCJUNCTIONBOXTYPE(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getApplicableOccurrence()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getApplicableOccurrence()); 
    }
    outputStream() << ",";
    if (value->testHasPropertySets() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getHasPropertySets()).size())
            {
                Set_IfcPropertySetDefinition_1_n::iterator it = (value->getHasPropertySets()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getHasPropertySets()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (value->testRepresentationMaps() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRepresentationMaps()).size())
            {
                List_IfcRepresentationMap_1_n::iterator it = (value->getRepresentationMaps()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRepresentationMaps()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getElementType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getElementType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPredefinedType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPredefinedType()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcLaborResource(IfcLaborResource *value)
{
    outputStream() << "#" << value->getKey() << "=IFCLABORRESOURCE(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getResourceIdentifier()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getResourceIdentifier()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getResourceGroup()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getResourceGroup()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getResourceConsumption()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getResourceConsumption()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getBaseQuantity()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getBaseQuantity()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getSkillSet()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getSkillSet()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcLampType(IfcLampType *value)
{
    outputStream() << "#" << value->getKey() << "=IFCLAMPTYPE(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getApplicableOccurrence()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getApplicableOccurrence()); 
    }
    outputStream() << ",";
    if (value->testHasPropertySets() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getHasPropertySets()).size())
            {
                Set_IfcPropertySetDefinition_1_n::iterator it = (value->getHasPropertySets()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getHasPropertySets()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (value->testRepresentationMaps() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRepresentationMaps()).size())
            {
                List_IfcRepresentationMap_1_n::iterator it = (value->getRepresentationMaps()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRepresentationMaps()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getElementType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getElementType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPredefinedType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPredefinedType()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcLibraryInformation(IfcLibraryInformation *value)
{
    outputStream() << "#" << value->getKey() << "=IFCLIBRARYINFORMATION(";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getVersion()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getVersion()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPublisher()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPublisher()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getVersionDate()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getVersionDate()); 
    }
    outputStream() << ",";
    if (value->testLibraryReference() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getLibraryReference()).size())
            {
                Set_IfcLibraryReference_1_n::iterator it = (value->getLibraryReference()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getLibraryReference()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcLibraryReference(IfcLibraryReference *value)
{
    outputStream() << "#" << value->getKey() << "=IFCLIBRARYREFERENCE(";
    if (Step::isUnset(value->getLocation()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getLocation()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getItemReference()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getItemReference()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcLightDistributionData(IfcLightDistributionData *value)
{
    outputStream() << "#" << value->getKey() << "=IFCLIGHTDISTRIBUTIONDATA(";
    if (Step::isUnset(value->getMainPlaneAngle()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getMainPlaneAngle()); 
    }
    outputStream() << ",";
    if (value->testSecondaryPlaneAngle() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getSecondaryPlaneAngle()).size())
            {
                List_IfcPlaneAngleMeasure_1_n::iterator it = (value->getSecondaryPlaneAngle()).begin();
                writeAttribute(*it);
                for (it++; it != (value->getSecondaryPlaneAngle()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute(*it);
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (value->testLuminousIntensity() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getLuminousIntensity()).size())
            {
                List_IfcLuminousIntensityDistributionMeasure_1_n::iterator it = (value->getLuminousIntensity()).begin();
                writeAttribute(*it);
                for (it++; it != (value->getLuminousIntensity()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute(*it);
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcLightFixtureType(IfcLightFixtureType *value)
{
    outputStream() << "#" << value->getKey() << "=IFCLIGHTFIXTURETYPE(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getApplicableOccurrence()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getApplicableOccurrence()); 
    }
    outputStream() << ",";
    if (value->testHasPropertySets() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getHasPropertySets()).size())
            {
                Set_IfcPropertySetDefinition_1_n::iterator it = (value->getHasPropertySets()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getHasPropertySets()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (value->testRepresentationMaps() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRepresentationMaps()).size())
            {
                List_IfcRepresentationMap_1_n::iterator it = (value->getRepresentationMaps()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRepresentationMaps()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getElementType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getElementType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPredefinedType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPredefinedType()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcLightIntensityDistribution(IfcLightIntensityDistribution *value)
{
    outputStream() << "#" << value->getKey() << "=IFCLIGHTINTENSITYDISTRIBUTION(";
    if (Step::isUnset(value->getLightDistributionCurve()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getLightDistributionCurve()); 
    }
    outputStream() << ",";
    if (value->testDistributionData() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getDistributionData()).size())
            {
                List_IfcLightDistributionData_1_n::iterator it = (value->getDistributionData()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getDistributionData()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcLightSource(IfcLightSource *value)
{
    outputStream() << "#" << value->getKey() << "=IFCLIGHTSOURCE(";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getLightColour()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getLightColour()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getAmbientIntensity()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getAmbientIntensity()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getIntensity()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getIntensity()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcLightSourceAmbient(IfcLightSourceAmbient *value)
{
    outputStream() << "#" << value->getKey() << "=IFCLIGHTSOURCEAMBIENT(";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getLightColour()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getLightColour()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getAmbientIntensity()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getAmbientIntensity()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getIntensity()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getIntensity()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcLightSourceDirectional(IfcLightSourceDirectional *value)
{
    outputStream() << "#" << value->getKey() << "=IFCLIGHTSOURCEDIRECTIONAL(";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getLightColour()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getLightColour()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getAmbientIntensity()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getAmbientIntensity()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getIntensity()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getIntensity()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOrientation()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOrientation()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcLightSourceGoniometric(IfcLightSourceGoniometric *value)
{
    outputStream() << "#" << value->getKey() << "=IFCLIGHTSOURCEGONIOMETRIC(";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getLightColour()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getLightColour()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getAmbientIntensity()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getAmbientIntensity()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getIntensity()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getIntensity()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPosition()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPosition()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getColourAppearance()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getColourAppearance()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getColourTemperature()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getColourTemperature()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getLuminousFlux()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getLuminousFlux()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getLightEmissionSource()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getLightEmissionSource()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getLightDistributionDataSource()))
    {
        outputStream() << "$";
    }
    else
    {
        writeIfcLightDistributionDataSourceSelect(value->getLightDistributionDataSource());
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcLightSourcePositional(IfcLightSourcePositional *value)
{
    outputStream() << "#" << value->getKey() << "=IFCLIGHTSOURCEPOSITIONAL(";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getLightColour()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getLightColour()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getAmbientIntensity()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getAmbientIntensity()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getIntensity()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getIntensity()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPosition()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPosition()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRadius()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRadius()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getConstantAttenuation()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getConstantAttenuation()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDistanceAttenuation()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDistanceAttenuation()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getQuadricAttenuation()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getQuadricAttenuation()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcLightSourceSpot(IfcLightSourceSpot *value)
{
    outputStream() << "#" << value->getKey() << "=IFCLIGHTSOURCESPOT(";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getLightColour()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getLightColour()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getAmbientIntensity()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getAmbientIntensity()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getIntensity()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getIntensity()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPosition()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPosition()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRadius()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRadius()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getConstantAttenuation()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getConstantAttenuation()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDistanceAttenuation()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDistanceAttenuation()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getQuadricAttenuation()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getQuadricAttenuation()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOrientation()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOrientation()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getConcentrationExponent()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getConcentrationExponent()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getSpreadAngle()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getSpreadAngle()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getBeamWidthAngle()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getBeamWidthAngle()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcLine(IfcLine *value)
{
    outputStream() << "#" << value->getKey() << "=IFCLINE(";
    if (Step::isUnset(value->getPnt()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPnt()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDir()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDir()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcLinearDimension(IfcLinearDimension *value)
{
    outputStream() << "#" << value->getKey() << "=IFCLINEARDIMENSION(";
    if (value->testContents() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getContents()).size())
            {
                Set_IfcDraughtingCalloutElement_1_n::iterator it = (value->getContents()).begin();
                writeIfcDraughtingCalloutElement((*it).get());
                for (it++; it != (value->getContents()).end(); it++)
                {
                    outputStream() << ",";
                    writeIfcDraughtingCalloutElement((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcLocalPlacement(IfcLocalPlacement *value)
{
    outputStream() << "#" << value->getKey() << "=IFCLOCALPLACEMENT(";
    if (Step::isUnset(value->getPlacementRelTo()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPlacementRelTo()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRelativePlacement()))
    {
        outputStream() << "$";
    }
    else
    {
        writeIfcAxis2Placement(value->getRelativePlacement());
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcLocalTime(IfcLocalTime *value)
{
    outputStream() << "#" << value->getKey() << "=IFCLOCALTIME(";
    if (Step::isUnset(value->getHourComponent()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getHourComponent()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getMinuteComponent()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getMinuteComponent()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getSecondComponent()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getSecondComponent()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getZone()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getZone()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDaylightSavingOffset()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDaylightSavingOffset()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcLoop(IfcLoop *value)
{
    outputStream() << "#" << value->getKey() << "=IFCLOOP(";
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcLShapeProfileDef(IfcLShapeProfileDef *value)
{
    outputStream() << "#" << value->getKey() << "=IFCLSHAPEPROFILEDEF(";
    if (Step::isUnset(value->getProfileType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getProfileType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getProfileName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getProfileName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPosition()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPosition()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDepth()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDepth()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getWidth()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getWidth()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getThickness()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getThickness()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getFilletRadius()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getFilletRadius()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getEdgeRadius()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getEdgeRadius()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getLegSlope()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getLegSlope()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getCentreOfGravityInX()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getCentreOfGravityInX()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getCentreOfGravityInY()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getCentreOfGravityInY()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcManifoldSolidBrep(IfcManifoldSolidBrep *value)
{
    outputStream() << "#" << value->getKey() << "=IFCMANIFOLDSOLIDBREP(";
    if (Step::isUnset(value->getOuter()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOuter()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcMappedItem(IfcMappedItem *value)
{
    outputStream() << "#" << value->getKey() << "=IFCMAPPEDITEM(";
    if (Step::isUnset(value->getMappingSource()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getMappingSource()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getMappingTarget()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getMappingTarget()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcMaterial(IfcMaterial *value)
{
    outputStream() << "#" << value->getKey() << "=IFCMATERIAL(";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcMaterialClassificationRelationship(IfcMaterialClassificationRelationship *value)
{
    outputStream() << "#" << value->getKey() << "=IFCMATERIALCLASSIFICATIONRELATIONSHIP(";
    if (value->testMaterialClassifications() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getMaterialClassifications()).size())
            {
                Set_IfcClassificationNotationSelect_1_n::iterator it = (value->getMaterialClassifications()).begin();
                writeIfcClassificationNotationSelect((*it).get());
                for (it++; it != (value->getMaterialClassifications()).end(); it++)
                {
                    outputStream() << ",";
                    writeIfcClassificationNotationSelect((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getClassifiedMaterial()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getClassifiedMaterial()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcMaterialDefinitionRepresentation(IfcMaterialDefinitionRepresentation *value)
{
    outputStream() << "#" << value->getKey() << "=IFCMATERIALDEFINITIONREPRESENTATION(";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (value->testRepresentations() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRepresentations()).size())
            {
                List_IfcRepresentation_1_n::iterator it = (value->getRepresentations()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRepresentations()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRepresentedMaterial()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRepresentedMaterial()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcMaterialLayer(IfcMaterialLayer *value)
{
    outputStream() << "#" << value->getKey() << "=IFCMATERIALLAYER(";
    if (Step::isUnset(value->getMaterial()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getMaterial()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getLayerThickness()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getLayerThickness()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getIsVentilated()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getIsVentilated()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcMaterialLayerSet(IfcMaterialLayerSet *value)
{
    outputStream() << "#" << value->getKey() << "=IFCMATERIALLAYERSET(";
    if (value->testMaterialLayers() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getMaterialLayers()).size())
            {
                List_IfcMaterialLayer_1_n::iterator it = (value->getMaterialLayers()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getMaterialLayers()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getLayerSetName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getLayerSetName()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcMaterialLayerSetUsage(IfcMaterialLayerSetUsage *value)
{
    outputStream() << "#" << value->getKey() << "=IFCMATERIALLAYERSETUSAGE(";
    if (Step::isUnset(value->getForLayerSet()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getForLayerSet()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getLayerSetDirection()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getLayerSetDirection()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDirectionSense()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDirectionSense()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOffsetFromReferenceLine()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOffsetFromReferenceLine()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcMaterialList(IfcMaterialList *value)
{
    outputStream() << "#" << value->getKey() << "=IFCMATERIALLIST(";
    if (value->testMaterials() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getMaterials()).size())
            {
                List_IfcMaterial_1_n::iterator it = (value->getMaterials()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getMaterials()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcMaterialProperties(IfcMaterialProperties *value)
{
    outputStream() << "#" << value->getKey() << "=IFCMATERIALPROPERTIES(";
    if (Step::isUnset(value->getMaterial()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getMaterial()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcMeasureWithUnit(IfcMeasureWithUnit *value)
{
    outputStream() << "#" << value->getKey() << "=IFCMEASUREWITHUNIT(";
    if (Step::isUnset(value->getValueComponent()))
    {
        outputStream() << "$";
    }
    else
    {
        writeIfcValue(value->getValueComponent());
    }
    outputStream() << ",";
    if (Step::isUnset(value->getUnitComponent()))
    {
        outputStream() << "$";
    }
    else
    {
        writeIfcUnit(value->getUnitComponent());
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcMechanicalConcreteMaterialProperties(IfcMechanicalConcreteMaterialProperties *value)
{
    outputStream() << "#" << value->getKey() << "=IFCMECHANICALCONCRETEMATERIALPROPERTIES(";
    if (Step::isUnset(value->getMaterial()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getMaterial()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDynamicViscosity()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDynamicViscosity()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getYoungModulus()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getYoungModulus()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getShearModulus()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getShearModulus()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPoissonRatio()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPoissonRatio()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getThermalExpansionCoefficient()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getThermalExpansionCoefficient()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getCompressiveStrength()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getCompressiveStrength()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getMaxAggregateSize()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getMaxAggregateSize()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getAdmixturesDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getAdmixturesDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getWorkability()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getWorkability()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getProtectivePoreRatio()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getProtectivePoreRatio()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getWaterImpermeability()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getWaterImpermeability()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcMechanicalFastener(IfcMechanicalFastener *value)
{
    outputStream() << "#" << value->getKey() << "=IFCMECHANICALFASTENER(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectPlacement()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectPlacement()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRepresentation()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRepresentation()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getNominalDiameter()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getNominalDiameter()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getNominalLength()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getNominalLength()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcMechanicalFastenerType(IfcMechanicalFastenerType *value)
{
    outputStream() << "#" << value->getKey() << "=IFCMECHANICALFASTENERTYPE(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getApplicableOccurrence()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getApplicableOccurrence()); 
    }
    outputStream() << ",";
    if (value->testHasPropertySets() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getHasPropertySets()).size())
            {
                Set_IfcPropertySetDefinition_1_n::iterator it = (value->getHasPropertySets()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getHasPropertySets()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (value->testRepresentationMaps() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRepresentationMaps()).size())
            {
                List_IfcRepresentationMap_1_n::iterator it = (value->getRepresentationMaps()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRepresentationMaps()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getElementType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getElementType()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcMechanicalMaterialProperties(IfcMechanicalMaterialProperties *value)
{
    outputStream() << "#" << value->getKey() << "=IFCMECHANICALMATERIALPROPERTIES(";
    if (Step::isUnset(value->getMaterial()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getMaterial()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDynamicViscosity()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDynamicViscosity()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getYoungModulus()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getYoungModulus()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getShearModulus()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getShearModulus()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPoissonRatio()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPoissonRatio()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getThermalExpansionCoefficient()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getThermalExpansionCoefficient()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcMechanicalSteelMaterialProperties(IfcMechanicalSteelMaterialProperties *value)
{
    outputStream() << "#" << value->getKey() << "=IFCMECHANICALSTEELMATERIALPROPERTIES(";
    if (Step::isUnset(value->getMaterial()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getMaterial()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDynamicViscosity()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDynamicViscosity()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getYoungModulus()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getYoungModulus()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getShearModulus()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getShearModulus()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPoissonRatio()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPoissonRatio()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getThermalExpansionCoefficient()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getThermalExpansionCoefficient()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getYieldStress()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getYieldStress()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getUltimateStress()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getUltimateStress()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getUltimateStrain()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getUltimateStrain()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getHardeningModule()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getHardeningModule()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getProportionalStress()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getProportionalStress()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPlasticStrain()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPlasticStrain()); 
    }
    outputStream() << ",";
    if (value->testRelaxations() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRelaxations()).size())
            {
                Set_IfcRelaxation_1_n::iterator it = (value->getRelaxations()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRelaxations()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcMember(IfcMember *value)
{
    outputStream() << "#" << value->getKey() << "=IFCMEMBER(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectPlacement()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectPlacement()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRepresentation()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRepresentation()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcMemberType(IfcMemberType *value)
{
    outputStream() << "#" << value->getKey() << "=IFCMEMBERTYPE(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getApplicableOccurrence()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getApplicableOccurrence()); 
    }
    outputStream() << ",";
    if (value->testHasPropertySets() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getHasPropertySets()).size())
            {
                Set_IfcPropertySetDefinition_1_n::iterator it = (value->getHasPropertySets()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getHasPropertySets()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (value->testRepresentationMaps() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRepresentationMaps()).size())
            {
                List_IfcRepresentationMap_1_n::iterator it = (value->getRepresentationMaps()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRepresentationMaps()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getElementType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getElementType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPredefinedType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPredefinedType()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcMetric(IfcMetric *value)
{
    outputStream() << "#" << value->getKey() << "=IFCMETRIC(";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getConstraintGrade()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getConstraintGrade()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getConstraintSource()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getConstraintSource()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getCreatingActor()))
    {
        outputStream() << "$";
    }
    else
    {
        writeIfcActorSelect(value->getCreatingActor());
    }
    outputStream() << ",";
    if (Step::isUnset(value->getCreationTime()))
    {
        outputStream() << "$";
    }
    else
    {
        writeIfcDateTimeSelect(value->getCreationTime());
    }
    outputStream() << ",";
    if (Step::isUnset(value->getUserDefinedGrade()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getUserDefinedGrade()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getBenchmark()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getBenchmark()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getValueSource()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getValueSource()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDataValue()))
    {
        outputStream() << "$";
    }
    else
    {
        writeIfcMetricValueSelect(value->getDataValue());
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcMonetaryUnit(IfcMonetaryUnit *value)
{
    outputStream() << "#" << value->getKey() << "=IFCMONETARYUNIT(";
    if (Step::isUnset(value->getCurrency()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getCurrency()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcMotorConnectionType(IfcMotorConnectionType *value)
{
    outputStream() << "#" << value->getKey() << "=IFCMOTORCONNECTIONTYPE(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getApplicableOccurrence()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getApplicableOccurrence()); 
    }
    outputStream() << ",";
    if (value->testHasPropertySets() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getHasPropertySets()).size())
            {
                Set_IfcPropertySetDefinition_1_n::iterator it = (value->getHasPropertySets()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getHasPropertySets()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (value->testRepresentationMaps() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRepresentationMaps()).size())
            {
                List_IfcRepresentationMap_1_n::iterator it = (value->getRepresentationMaps()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRepresentationMaps()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getElementType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getElementType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPredefinedType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPredefinedType()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcMove(IfcMove *value)
{
    outputStream() << "#" << value->getKey() << "=IFCMOVE(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTaskId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTaskId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getStatus()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getStatus()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getWorkMethod()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getWorkMethod()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getIsMilestone()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getIsMilestone()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPriority()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPriority()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getMoveFrom()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getMoveFrom()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getMoveTo()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getMoveTo()); 
    }
    outputStream() << ",";
    if (value->testPunchList() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getPunchList()).size())
            {
                List_IfcText_1_n::iterator it = (value->getPunchList()).begin();
                writeAttribute(*it);
                for (it++; it != (value->getPunchList()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute(*it);
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcNamedUnit(IfcNamedUnit *value)
{
    outputStream() << "#" << value->getKey() << "=IFCNAMEDUNIT(";
    if (Step::isUnset(value->getDimensions()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDimensions()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getUnitType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getUnitType()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcObject(IfcObject *value)
{
    outputStream() << "#" << value->getKey() << "=IFCOBJECT(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectType()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcObjectDefinition(IfcObjectDefinition *value)
{
    outputStream() << "#" << value->getKey() << "=IFCOBJECTDEFINITION(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcObjective(IfcObjective *value)
{
    outputStream() << "#" << value->getKey() << "=IFCOBJECTIVE(";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getConstraintGrade()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getConstraintGrade()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getConstraintSource()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getConstraintSource()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getCreatingActor()))
    {
        outputStream() << "$";
    }
    else
    {
        writeIfcActorSelect(value->getCreatingActor());
    }
    outputStream() << ",";
    if (Step::isUnset(value->getCreationTime()))
    {
        outputStream() << "$";
    }
    else
    {
        writeIfcDateTimeSelect(value->getCreationTime());
    }
    outputStream() << ",";
    if (Step::isUnset(value->getUserDefinedGrade()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getUserDefinedGrade()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getBenchmarkValues()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getBenchmarkValues()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getResultValues()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getResultValues()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectiveQualifier()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectiveQualifier()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getUserDefinedQualifier()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getUserDefinedQualifier()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcObjectPlacement(IfcObjectPlacement *value)
{
    outputStream() << "#" << value->getKey() << "=IFCOBJECTPLACEMENT(";
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcOccupant(IfcOccupant *value)
{
    outputStream() << "#" << value->getKey() << "=IFCOCCUPANT(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTheActor()))
    {
        outputStream() << "$";
    }
    else
    {
        writeIfcActorSelect(value->getTheActor());
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPredefinedType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPredefinedType()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcOffsetCurve2D(IfcOffsetCurve2D *value)
{
    outputStream() << "#" << value->getKey() << "=IFCOFFSETCURVE2D(";
    if (Step::isUnset(value->getBasisCurve()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getBasisCurve()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDistance()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDistance()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getSelfIntersect()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getSelfIntersect()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcOffsetCurve3D(IfcOffsetCurve3D *value)
{
    outputStream() << "#" << value->getKey() << "=IFCOFFSETCURVE3D(";
    if (Step::isUnset(value->getBasisCurve()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getBasisCurve()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDistance()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDistance()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getSelfIntersect()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getSelfIntersect()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRefDirection()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRefDirection()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcOneDirectionRepeatFactor(IfcOneDirectionRepeatFactor *value)
{
    outputStream() << "#" << value->getKey() << "=IFCONEDIRECTIONREPEATFACTOR(";
    if (Step::isUnset(value->getRepeatFactor()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRepeatFactor()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcOpeningElement(IfcOpeningElement *value)
{
    outputStream() << "#" << value->getKey() << "=IFCOPENINGELEMENT(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectPlacement()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectPlacement()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRepresentation()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRepresentation()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcOpenShell(IfcOpenShell *value)
{
    outputStream() << "#" << value->getKey() << "=IFCOPENSHELL(";
    if (value->testCfsFaces() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getCfsFaces()).size())
            {
                Set_IfcFace_1_n::iterator it = (value->getCfsFaces()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getCfsFaces()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcOpticalMaterialProperties(IfcOpticalMaterialProperties *value)
{
    outputStream() << "#" << value->getKey() << "=IFCOPTICALMATERIALPROPERTIES(";
    if (Step::isUnset(value->getMaterial()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getMaterial()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getVisibleTransmittance()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getVisibleTransmittance()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getSolarTransmittance()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getSolarTransmittance()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getThermalIrTransmittance()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getThermalIrTransmittance()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getThermalIrEmissivityBack()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getThermalIrEmissivityBack()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getThermalIrEmissivityFront()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getThermalIrEmissivityFront()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getVisibleReflectanceBack()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getVisibleReflectanceBack()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getVisibleReflectanceFront()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getVisibleReflectanceFront()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getSolarReflectanceFront()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getSolarReflectanceFront()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getSolarReflectanceBack()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getSolarReflectanceBack()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcOrderAction(IfcOrderAction *value)
{
    outputStream() << "#" << value->getKey() << "=IFCORDERACTION(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTaskId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTaskId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getStatus()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getStatus()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getWorkMethod()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getWorkMethod()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getIsMilestone()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getIsMilestone()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPriority()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPriority()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getActionID()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getActionID()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcOrganization(IfcOrganization *value)
{
    outputStream() << "#" << value->getKey() << "=IFCORGANIZATION(";
    if (Step::isUnset(value->getId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (value->testRoles() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRoles()).size())
            {
                List_IfcActorRole_1_n::iterator it = (value->getRoles()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRoles()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (value->testAddresses() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getAddresses()).size())
            {
                List_IfcAddress_1_n::iterator it = (value->getAddresses()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getAddresses()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcOrganizationRelationship(IfcOrganizationRelationship *value)
{
    outputStream() << "#" << value->getKey() << "=IFCORGANIZATIONRELATIONSHIP(";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRelatingOrganization()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRelatingOrganization()); 
    }
    outputStream() << ",";
    if (value->testRelatedOrganizations() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRelatedOrganizations()).size())
            {
                Set_IfcOrganization_1_n::iterator it = (value->getRelatedOrganizations()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRelatedOrganizations()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcOrientedEdge(IfcOrientedEdge *value)
{
    outputStream() << "#" << value->getKey() << "=IFCORIENTEDEDGE(";
    if (Step::isUnset(value->getEdgeStart()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getEdgeStart()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getEdgeEnd()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getEdgeEnd()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getEdgeElement()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getEdgeElement()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOrientation()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOrientation()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcOutletType(IfcOutletType *value)
{
    outputStream() << "#" << value->getKey() << "=IFCOUTLETTYPE(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getApplicableOccurrence()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getApplicableOccurrence()); 
    }
    outputStream() << ",";
    if (value->testHasPropertySets() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getHasPropertySets()).size())
            {
                Set_IfcPropertySetDefinition_1_n::iterator it = (value->getHasPropertySets()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getHasPropertySets()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (value->testRepresentationMaps() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRepresentationMaps()).size())
            {
                List_IfcRepresentationMap_1_n::iterator it = (value->getRepresentationMaps()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRepresentationMaps()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getElementType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getElementType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPredefinedType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPredefinedType()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcOwnerHistory(IfcOwnerHistory *value)
{
    outputStream() << "#" << value->getKey() << "=IFCOWNERHISTORY(";
    if (Step::isUnset(value->getOwningUser()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwningUser()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwningApplication()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwningApplication()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getState()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getState()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getChangeAction()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getChangeAction()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getLastModifiedDate()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getLastModifiedDate()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getLastModifyingUser()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getLastModifyingUser()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getLastModifyingApplication()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getLastModifyingApplication()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getCreationDate()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getCreationDate()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcParameterizedProfileDef(IfcParameterizedProfileDef *value)
{
    outputStream() << "#" << value->getKey() << "=IFCPARAMETERIZEDPROFILEDEF(";
    if (Step::isUnset(value->getProfileType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getProfileType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getProfileName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getProfileName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPosition()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPosition()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcPath(IfcPath *value)
{
    outputStream() << "#" << value->getKey() << "=IFCPATH(";
    if (value->testEdgeList() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getEdgeList()).size())
            {
                List_IfcOrientedEdge_1_n::iterator it = (value->getEdgeList()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getEdgeList()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcPerformanceHistory(IfcPerformanceHistory *value)
{
    outputStream() << "#" << value->getKey() << "=IFCPERFORMANCEHISTORY(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getLifeCyclePhase()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getLifeCyclePhase()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcPermeableCoveringProperties(IfcPermeableCoveringProperties *value)
{
    outputStream() << "#" << value->getKey() << "=IFCPERMEABLECOVERINGPROPERTIES(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOperationType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOperationType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPanelPosition()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPanelPosition()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getFrameDepth()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getFrameDepth()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getFrameThickness()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getFrameThickness()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getShapeAspectStyle()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getShapeAspectStyle()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcPermit(IfcPermit *value)
{
    outputStream() << "#" << value->getKey() << "=IFCPERMIT(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPermitID()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPermitID()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcPerson(IfcPerson *value)
{
    outputStream() << "#" << value->getKey() << "=IFCPERSON(";
    if (Step::isUnset(value->getId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getFamilyName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getFamilyName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getGivenName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGivenName()); 
    }
    outputStream() << ",";
    if (value->testMiddleNames() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getMiddleNames()).size())
            {
                List_IfcLabel_1_n::iterator it = (value->getMiddleNames()).begin();
                writeAttribute(*it);
                for (it++; it != (value->getMiddleNames()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute(*it);
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (value->testPrefixTitles() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getPrefixTitles()).size())
            {
                List_IfcLabel_1_n::iterator it = (value->getPrefixTitles()).begin();
                writeAttribute(*it);
                for (it++; it != (value->getPrefixTitles()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute(*it);
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (value->testSuffixTitles() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getSuffixTitles()).size())
            {
                List_IfcLabel_1_n::iterator it = (value->getSuffixTitles()).begin();
                writeAttribute(*it);
                for (it++; it != (value->getSuffixTitles()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute(*it);
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (value->testRoles() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRoles()).size())
            {
                List_IfcActorRole_1_n::iterator it = (value->getRoles()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRoles()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (value->testAddresses() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getAddresses()).size())
            {
                List_IfcAddress_1_n::iterator it = (value->getAddresses()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getAddresses()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcPersonAndOrganization(IfcPersonAndOrganization *value)
{
    outputStream() << "#" << value->getKey() << "=IFCPERSONANDORGANIZATION(";
    if (Step::isUnset(value->getThePerson()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getThePerson()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTheOrganization()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTheOrganization()); 
    }
    outputStream() << ",";
    if (value->testRoles() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRoles()).size())
            {
                List_IfcActorRole_1_n::iterator it = (value->getRoles()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRoles()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcPhysicalComplexQuantity(IfcPhysicalComplexQuantity *value)
{
    outputStream() << "#" << value->getKey() << "=IFCPHYSICALCOMPLEXQUANTITY(";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (value->testHasQuantities() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getHasQuantities()).size())
            {
                Set_IfcPhysicalQuantity_1_n::iterator it = (value->getHasQuantities()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getHasQuantities()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDiscrimination()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDiscrimination()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getQuality()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getQuality()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getUsage()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getUsage()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcPhysicalQuantity(IfcPhysicalQuantity *value)
{
    outputStream() << "#" << value->getKey() << "=IFCPHYSICALQUANTITY(";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcPhysicalSimpleQuantity(IfcPhysicalSimpleQuantity *value)
{
    outputStream() << "#" << value->getKey() << "=IFCPHYSICALSIMPLEQUANTITY(";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getUnit()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getUnit()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcPile(IfcPile *value)
{
    outputStream() << "#" << value->getKey() << "=IFCPILE(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectPlacement()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectPlacement()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRepresentation()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRepresentation()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPredefinedType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPredefinedType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getConstructionType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getConstructionType()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcPipeFittingType(IfcPipeFittingType *value)
{
    outputStream() << "#" << value->getKey() << "=IFCPIPEFITTINGTYPE(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getApplicableOccurrence()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getApplicableOccurrence()); 
    }
    outputStream() << ",";
    if (value->testHasPropertySets() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getHasPropertySets()).size())
            {
                Set_IfcPropertySetDefinition_1_n::iterator it = (value->getHasPropertySets()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getHasPropertySets()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (value->testRepresentationMaps() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRepresentationMaps()).size())
            {
                List_IfcRepresentationMap_1_n::iterator it = (value->getRepresentationMaps()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRepresentationMaps()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getElementType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getElementType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPredefinedType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPredefinedType()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcPipeSegmentType(IfcPipeSegmentType *value)
{
    outputStream() << "#" << value->getKey() << "=IFCPIPESEGMENTTYPE(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getApplicableOccurrence()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getApplicableOccurrence()); 
    }
    outputStream() << ",";
    if (value->testHasPropertySets() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getHasPropertySets()).size())
            {
                Set_IfcPropertySetDefinition_1_n::iterator it = (value->getHasPropertySets()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getHasPropertySets()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (value->testRepresentationMaps() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRepresentationMaps()).size())
            {
                List_IfcRepresentationMap_1_n::iterator it = (value->getRepresentationMaps()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRepresentationMaps()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getElementType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getElementType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPredefinedType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPredefinedType()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcPixelTexture(IfcPixelTexture *value)
{
    outputStream() << "#" << value->getKey() << "=IFCPIXELTEXTURE(";
    if (Step::isUnset(value->getRepeatS()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRepeatS()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRepeatT()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRepeatT()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTextureType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTextureType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTextureTransform()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTextureTransform()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getWidth()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getWidth()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getHeight()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getHeight()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getColourComponents()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getColourComponents()); 
    }
    outputStream() << ",";
    if (value->testPixel() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getPixel()).size())
            {
                List_Binary_32__1_n::iterator it = (value->getPixel()).begin();
                writeAttribute(*it);
                for (it++; it != (value->getPixel()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute(*it);
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcPlacement(IfcPlacement *value)
{
    outputStream() << "#" << value->getKey() << "=IFCPLACEMENT(";
    if (Step::isUnset(value->getLocation()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getLocation()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcPlanarBox(IfcPlanarBox *value)
{
    outputStream() << "#" << value->getKey() << "=IFCPLANARBOX(";
    if (Step::isUnset(value->getSizeInX()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getSizeInX()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getSizeInY()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getSizeInY()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPlacement()))
    {
        outputStream() << "$";
    }
    else
    {
        writeIfcAxis2Placement(value->getPlacement());
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcPlanarExtent(IfcPlanarExtent *value)
{
    outputStream() << "#" << value->getKey() << "=IFCPLANAREXTENT(";
    if (Step::isUnset(value->getSizeInX()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getSizeInX()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getSizeInY()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getSizeInY()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcPlane(IfcPlane *value)
{
    outputStream() << "#" << value->getKey() << "=IFCPLANE(";
    if (Step::isUnset(value->getPosition()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPosition()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcPlate(IfcPlate *value)
{
    outputStream() << "#" << value->getKey() << "=IFCPLATE(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectPlacement()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectPlacement()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRepresentation()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRepresentation()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcPlateType(IfcPlateType *value)
{
    outputStream() << "#" << value->getKey() << "=IFCPLATETYPE(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getApplicableOccurrence()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getApplicableOccurrence()); 
    }
    outputStream() << ",";
    if (value->testHasPropertySets() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getHasPropertySets()).size())
            {
                Set_IfcPropertySetDefinition_1_n::iterator it = (value->getHasPropertySets()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getHasPropertySets()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (value->testRepresentationMaps() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRepresentationMaps()).size())
            {
                List_IfcRepresentationMap_1_n::iterator it = (value->getRepresentationMaps()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRepresentationMaps()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getElementType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getElementType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPredefinedType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPredefinedType()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcPoint(IfcPoint *value)
{
    outputStream() << "#" << value->getKey() << "=IFCPOINT(";
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcPointOnCurve(IfcPointOnCurve *value)
{
    outputStream() << "#" << value->getKey() << "=IFCPOINTONCURVE(";
    if (Step::isUnset(value->getBasisCurve()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getBasisCurve()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPointParameter()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPointParameter()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcPointOnSurface(IfcPointOnSurface *value)
{
    outputStream() << "#" << value->getKey() << "=IFCPOINTONSURFACE(";
    if (Step::isUnset(value->getBasisSurface()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getBasisSurface()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPointParameterU()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPointParameterU()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPointParameterV()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPointParameterV()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcPolygonalBoundedHalfSpace(IfcPolygonalBoundedHalfSpace *value)
{
    outputStream() << "#" << value->getKey() << "=IFCPOLYGONALBOUNDEDHALFSPACE(";
    if (Step::isUnset(value->getBaseSurface()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getBaseSurface()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getAgreementFlag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getAgreementFlag()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPosition()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPosition()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPolygonalBoundary()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPolygonalBoundary()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcPolyline(IfcPolyline *value)
{
    outputStream() << "#" << value->getKey() << "=IFCPOLYLINE(";
    if (value->testPoints() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getPoints()).size())
            {
                List_IfcCartesianPoint_2_n::iterator it = (value->getPoints()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getPoints()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcPolyLoop(IfcPolyLoop *value)
{
    outputStream() << "#" << value->getKey() << "=IFCPOLYLOOP(";
    if (value->testPolygon() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getPolygon()).size())
            {
                List_IfcCartesianPoint_3_n::iterator it = (value->getPolygon()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getPolygon()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcPort(IfcPort *value)
{
    outputStream() << "#" << value->getKey() << "=IFCPORT(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectPlacement()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectPlacement()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRepresentation()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRepresentation()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcPostalAddress(IfcPostalAddress *value)
{
    outputStream() << "#" << value->getKey() << "=IFCPOSTALADDRESS(";
    if (Step::isUnset(value->getPurpose()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPurpose()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getUserDefinedPurpose()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getUserDefinedPurpose()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getInternalLocation()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getInternalLocation()); 
    }
    outputStream() << ",";
    if (value->testAddressLines() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getAddressLines()).size())
            {
                List_IfcLabel_1_n::iterator it = (value->getAddressLines()).begin();
                writeAttribute(*it);
                for (it++; it != (value->getAddressLines()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute(*it);
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPostalBox()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPostalBox()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTown()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTown()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRegion()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRegion()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPostalCode()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPostalCode()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getCountry()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getCountry()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcPreDefinedColour(IfcPreDefinedColour *value)
{
    outputStream() << "#" << value->getKey() << "=IFCPREDEFINEDCOLOUR(";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcPreDefinedCurveFont(IfcPreDefinedCurveFont *value)
{
    outputStream() << "#" << value->getKey() << "=IFCPREDEFINEDCURVEFONT(";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcPreDefinedDimensionSymbol(IfcPreDefinedDimensionSymbol *value)
{
    outputStream() << "#" << value->getKey() << "=IFCPREDEFINEDDIMENSIONSYMBOL(";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcPreDefinedItem(IfcPreDefinedItem *value)
{
    outputStream() << "#" << value->getKey() << "=IFCPREDEFINEDITEM(";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcPreDefinedPointMarkerSymbol(IfcPreDefinedPointMarkerSymbol *value)
{
    outputStream() << "#" << value->getKey() << "=IFCPREDEFINEDPOINTMARKERSYMBOL(";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcPreDefinedSymbol(IfcPreDefinedSymbol *value)
{
    outputStream() << "#" << value->getKey() << "=IFCPREDEFINEDSYMBOL(";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcPreDefinedTerminatorSymbol(IfcPreDefinedTerminatorSymbol *value)
{
    outputStream() << "#" << value->getKey() << "=IFCPREDEFINEDTERMINATORSYMBOL(";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcPreDefinedTextFont(IfcPreDefinedTextFont *value)
{
    outputStream() << "#" << value->getKey() << "=IFCPREDEFINEDTEXTFONT(";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcPresentationLayerAssignment(IfcPresentationLayerAssignment *value)
{
    outputStream() << "#" << value->getKey() << "=IFCPRESENTATIONLAYERASSIGNMENT(";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (value->testAssignedItems() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getAssignedItems()).size())
            {
                Set_IfcLayeredItem_1_n::iterator it = (value->getAssignedItems()).begin();
                writeIfcLayeredItem((*it).get());
                for (it++; it != (value->getAssignedItems()).end(); it++)
                {
                    outputStream() << ",";
                    writeIfcLayeredItem((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getIdentifier()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getIdentifier()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcPresentationLayerWithStyle(IfcPresentationLayerWithStyle *value)
{
    outputStream() << "#" << value->getKey() << "=IFCPRESENTATIONLAYERWITHSTYLE(";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (value->testAssignedItems() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getAssignedItems()).size())
            {
                Set_IfcLayeredItem_1_n::iterator it = (value->getAssignedItems()).begin();
                writeIfcLayeredItem((*it).get());
                for (it++; it != (value->getAssignedItems()).end(); it++)
                {
                    outputStream() << ",";
                    writeIfcLayeredItem((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getIdentifier()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getIdentifier()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getLayerOn()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getLayerOn()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getLayerFrozen()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getLayerFrozen()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getLayerBlocked()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getLayerBlocked()); 
    }
    outputStream() << ",";
    if (value->testLayerStyles() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getLayerStyles()).size())
            {
                Set_IfcPresentationStyleSelect_0_n::iterator it = (value->getLayerStyles()).begin();
                writeIfcPresentationStyleSelect((*it).get());
                for (it++; it != (value->getLayerStyles()).end(); it++)
                {
                    outputStream() << ",";
                    writeIfcPresentationStyleSelect((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcPresentationStyle(IfcPresentationStyle *value)
{
    outputStream() << "#" << value->getKey() << "=IFCPRESENTATIONSTYLE(";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcPresentationStyleAssignment(IfcPresentationStyleAssignment *value)
{
    outputStream() << "#" << value->getKey() << "=IFCPRESENTATIONSTYLEASSIGNMENT(";
    if (value->testStyles() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getStyles()).size())
            {
                Set_IfcPresentationStyleSelect_1_n::iterator it = (value->getStyles()).begin();
                writeIfcPresentationStyleSelect((*it).get());
                for (it++; it != (value->getStyles()).end(); it++)
                {
                    outputStream() << ",";
                    writeIfcPresentationStyleSelect((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcProcedure(IfcProcedure *value)
{
    outputStream() << "#" << value->getKey() << "=IFCPROCEDURE(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getProcedureID()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getProcedureID()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getProcedureType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getProcedureType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getUserDefinedProcedureType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getUserDefinedProcedureType()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcProcess(IfcProcess *value)
{
    outputStream() << "#" << value->getKey() << "=IFCPROCESS(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectType()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcProduct(IfcProduct *value)
{
    outputStream() << "#" << value->getKey() << "=IFCPRODUCT(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectPlacement()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectPlacement()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRepresentation()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRepresentation()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcProductDefinitionShape(IfcProductDefinitionShape *value)
{
    outputStream() << "#" << value->getKey() << "=IFCPRODUCTDEFINITIONSHAPE(";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (value->testRepresentations() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRepresentations()).size())
            {
                List_IfcRepresentation_1_n::iterator it = (value->getRepresentations()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRepresentations()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcProductRepresentation(IfcProductRepresentation *value)
{
    outputStream() << "#" << value->getKey() << "=IFCPRODUCTREPRESENTATION(";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (value->testRepresentations() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRepresentations()).size())
            {
                List_IfcRepresentation_1_n::iterator it = (value->getRepresentations()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRepresentations()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcProductsOfCombustionProperties(IfcProductsOfCombustionProperties *value)
{
    outputStream() << "#" << value->getKey() << "=IFCPRODUCTSOFCOMBUSTIONPROPERTIES(";
    if (Step::isUnset(value->getMaterial()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getMaterial()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getSpecificHeatCapacity()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getSpecificHeatCapacity()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getN20Content()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getN20Content()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getCOContent()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getCOContent()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getCO2Content()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getCO2Content()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcProfileDef(IfcProfileDef *value)
{
    outputStream() << "#" << value->getKey() << "=IFCPROFILEDEF(";
    if (Step::isUnset(value->getProfileType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getProfileType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getProfileName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getProfileName()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcProfileProperties(IfcProfileProperties *value)
{
    outputStream() << "#" << value->getKey() << "=IFCPROFILEPROPERTIES(";
    if (Step::isUnset(value->getProfileName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getProfileName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getProfileDefinition()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getProfileDefinition()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcProject(IfcProject *value)
{
    outputStream() << "#" << value->getKey() << "=IFCPROJECT(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getLongName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getLongName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPhase()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPhase()); 
    }
    outputStream() << ",";
    if (value->testRepresentationContexts() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRepresentationContexts()).size())
            {
                Set_IfcRepresentationContext_1_n::iterator it = (value->getRepresentationContexts()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRepresentationContexts()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getUnitsInContext()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getUnitsInContext()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcProjectionCurve(IfcProjectionCurve *value)
{
    outputStream() << "#" << value->getKey() << "=IFCPROJECTIONCURVE(";
    if (Step::isUnset(value->getItem()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getItem()); 
    }
    outputStream() << ",";
    if (value->testStyles() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getStyles()).size())
            {
                Set_IfcPresentationStyleAssignment_1_n::iterator it = (value->getStyles()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getStyles()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcProjectionElement(IfcProjectionElement *value)
{
    outputStream() << "#" << value->getKey() << "=IFCPROJECTIONELEMENT(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectPlacement()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectPlacement()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRepresentation()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRepresentation()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcProjectOrder(IfcProjectOrder *value)
{
    outputStream() << "#" << value->getKey() << "=IFCPROJECTORDER(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getID()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getID()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPredefinedType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPredefinedType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getStatus()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getStatus()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcProjectOrderRecord(IfcProjectOrderRecord *value)
{
    outputStream() << "#" << value->getKey() << "=IFCPROJECTORDERRECORD(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectType()); 
    }
    outputStream() << ",";
    if (value->testRecords() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRecords()).size())
            {
                List_IfcRelAssignsToProjectOrder_1_n::iterator it = (value->getRecords()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRecords()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPredefinedType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPredefinedType()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcProperty(IfcProperty *value)
{
    outputStream() << "#" << value->getKey() << "=IFCPROPERTY(";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcPropertyBoundedValue(IfcPropertyBoundedValue *value)
{
    outputStream() << "#" << value->getKey() << "=IFCPROPERTYBOUNDEDVALUE(";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getUpperBoundValue()))
    {
        outputStream() << "$";
    }
    else
    {
        writeIfcValue(value->getUpperBoundValue());
    }
    outputStream() << ",";
    if (Step::isUnset(value->getLowerBoundValue()))
    {
        outputStream() << "$";
    }
    else
    {
        writeIfcValue(value->getLowerBoundValue());
    }
    outputStream() << ",";
    if (Step::isUnset(value->getUnit()))
    {
        outputStream() << "$";
    }
    else
    {
        writeIfcUnit(value->getUnit());
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcPropertyConstraintRelationship(IfcPropertyConstraintRelationship *value)
{
    outputStream() << "#" << value->getKey() << "=IFCPROPERTYCONSTRAINTRELATIONSHIP(";
    if (Step::isUnset(value->getRelatingConstraint()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRelatingConstraint()); 
    }
    outputStream() << ",";
    if (value->testRelatedProperties() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRelatedProperties()).size())
            {
                Set_IfcProperty_1_n::iterator it = (value->getRelatedProperties()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRelatedProperties()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcPropertyDefinition(IfcPropertyDefinition *value)
{
    outputStream() << "#" << value->getKey() << "=IFCPROPERTYDEFINITION(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcPropertyDependencyRelationship(IfcPropertyDependencyRelationship *value)
{
    outputStream() << "#" << value->getKey() << "=IFCPROPERTYDEPENDENCYRELATIONSHIP(";
    if (Step::isUnset(value->getDependingProperty()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDependingProperty()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDependantProperty()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDependantProperty()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getExpression()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getExpression()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcPropertyEnumeratedValue(IfcPropertyEnumeratedValue *value)
{
    outputStream() << "#" << value->getKey() << "=IFCPROPERTYENUMERATEDVALUE(";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (value->testEnumerationValues() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getEnumerationValues()).size())
            {
                List_IfcValue_1_n::iterator it = (value->getEnumerationValues()).begin();
                writeIfcValue((*it).get());
                for (it++; it != (value->getEnumerationValues()).end(); it++)
                {
                    outputStream() << ",";
                    writeIfcValue((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getEnumerationReference()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getEnumerationReference()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcPropertyEnumeration(IfcPropertyEnumeration *value)
{
    outputStream() << "#" << value->getKey() << "=IFCPROPERTYENUMERATION(";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (value->testEnumerationValues() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getEnumerationValues()).size())
            {
                List_IfcValue_1_n::iterator it = (value->getEnumerationValues()).begin();
                writeIfcValue((*it).get());
                for (it++; it != (value->getEnumerationValues()).end(); it++)
                {
                    outputStream() << ",";
                    writeIfcValue((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getUnit()))
    {
        outputStream() << "$";
    }
    else
    {
        writeIfcUnit(value->getUnit());
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcPropertyListValue(IfcPropertyListValue *value)
{
    outputStream() << "#" << value->getKey() << "=IFCPROPERTYLISTVALUE(";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (value->testListValues() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getListValues()).size())
            {
                List_IfcValue_1_n::iterator it = (value->getListValues()).begin();
                writeIfcValue((*it).get());
                for (it++; it != (value->getListValues()).end(); it++)
                {
                    outputStream() << ",";
                    writeIfcValue((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getUnit()))
    {
        outputStream() << "$";
    }
    else
    {
        writeIfcUnit(value->getUnit());
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcPropertyReferenceValue(IfcPropertyReferenceValue *value)
{
    outputStream() << "#" << value->getKey() << "=IFCPROPERTYREFERENCEVALUE(";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getUsageName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getUsageName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPropertyReference()))
    {
        outputStream() << "$";
    }
    else
    {
        writeIfcObjectReferenceSelect(value->getPropertyReference());
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcPropertySet(IfcPropertySet *value)
{
    outputStream() << "#" << value->getKey() << "=IFCPROPERTYSET(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (value->testHasProperties() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getHasProperties()).size())
            {
                Set_IfcProperty_1_n::iterator it = (value->getHasProperties()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getHasProperties()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcPropertySetDefinition(IfcPropertySetDefinition *value)
{
    outputStream() << "#" << value->getKey() << "=IFCPROPERTYSETDEFINITION(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcPropertySingleValue(IfcPropertySingleValue *value)
{
    outputStream() << "#" << value->getKey() << "=IFCPROPERTYSINGLEVALUE(";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getNominalValue()))
    {
        outputStream() << "$";
    }
    else
    {
        writeIfcValue(value->getNominalValue());
    }
    outputStream() << ",";
    if (Step::isUnset(value->getUnit()))
    {
        outputStream() << "$";
    }
    else
    {
        writeIfcUnit(value->getUnit());
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcPropertyTableValue(IfcPropertyTableValue *value)
{
    outputStream() << "#" << value->getKey() << "=IFCPROPERTYTABLEVALUE(";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (value->testDefiningValues() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getDefiningValues()).size())
            {
                List_IfcValue_1_n::iterator it = (value->getDefiningValues()).begin();
                writeIfcValue((*it).get());
                for (it++; it != (value->getDefiningValues()).end(); it++)
                {
                    outputStream() << ",";
                    writeIfcValue((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (value->testDefinedValues() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getDefinedValues()).size())
            {
                List_IfcValue_1_n::iterator it = (value->getDefinedValues()).begin();
                writeIfcValue((*it).get());
                for (it++; it != (value->getDefinedValues()).end(); it++)
                {
                    outputStream() << ",";
                    writeIfcValue((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getExpression()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getExpression()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDefiningUnit()))
    {
        outputStream() << "$";
    }
    else
    {
        writeIfcUnit(value->getDefiningUnit());
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDefinedUnit()))
    {
        outputStream() << "$";
    }
    else
    {
        writeIfcUnit(value->getDefinedUnit());
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcProtectiveDeviceType(IfcProtectiveDeviceType *value)
{
    outputStream() << "#" << value->getKey() << "=IFCPROTECTIVEDEVICETYPE(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getApplicableOccurrence()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getApplicableOccurrence()); 
    }
    outputStream() << ",";
    if (value->testHasPropertySets() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getHasPropertySets()).size())
            {
                Set_IfcPropertySetDefinition_1_n::iterator it = (value->getHasPropertySets()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getHasPropertySets()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (value->testRepresentationMaps() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRepresentationMaps()).size())
            {
                List_IfcRepresentationMap_1_n::iterator it = (value->getRepresentationMaps()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRepresentationMaps()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getElementType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getElementType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPredefinedType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPredefinedType()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcProxy(IfcProxy *value)
{
    outputStream() << "#" << value->getKey() << "=IFCPROXY(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectPlacement()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectPlacement()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRepresentation()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRepresentation()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getProxyType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getProxyType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcPumpType(IfcPumpType *value)
{
    outputStream() << "#" << value->getKey() << "=IFCPUMPTYPE(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getApplicableOccurrence()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getApplicableOccurrence()); 
    }
    outputStream() << ",";
    if (value->testHasPropertySets() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getHasPropertySets()).size())
            {
                Set_IfcPropertySetDefinition_1_n::iterator it = (value->getHasPropertySets()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getHasPropertySets()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (value->testRepresentationMaps() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRepresentationMaps()).size())
            {
                List_IfcRepresentationMap_1_n::iterator it = (value->getRepresentationMaps()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRepresentationMaps()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getElementType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getElementType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPredefinedType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPredefinedType()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcQuantityArea(IfcQuantityArea *value)
{
    outputStream() << "#" << value->getKey() << "=IFCQUANTITYAREA(";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getUnit()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getUnit()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getAreaValue()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getAreaValue()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcQuantityCount(IfcQuantityCount *value)
{
    outputStream() << "#" << value->getKey() << "=IFCQUANTITYCOUNT(";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getUnit()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getUnit()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getCountValue()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getCountValue()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcQuantityLength(IfcQuantityLength *value)
{
    outputStream() << "#" << value->getKey() << "=IFCQUANTITYLENGTH(";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getUnit()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getUnit()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getLengthValue()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getLengthValue()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcQuantityTime(IfcQuantityTime *value)
{
    outputStream() << "#" << value->getKey() << "=IFCQUANTITYTIME(";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getUnit()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getUnit()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTimeValue()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTimeValue()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcQuantityVolume(IfcQuantityVolume *value)
{
    outputStream() << "#" << value->getKey() << "=IFCQUANTITYVOLUME(";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getUnit()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getUnit()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getVolumeValue()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getVolumeValue()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcQuantityWeight(IfcQuantityWeight *value)
{
    outputStream() << "#" << value->getKey() << "=IFCQUANTITYWEIGHT(";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getUnit()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getUnit()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getWeightValue()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getWeightValue()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcRadiusDimension(IfcRadiusDimension *value)
{
    outputStream() << "#" << value->getKey() << "=IFCRADIUSDIMENSION(";
    if (value->testContents() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getContents()).size())
            {
                Set_IfcDraughtingCalloutElement_1_n::iterator it = (value->getContents()).begin();
                writeIfcDraughtingCalloutElement((*it).get());
                for (it++; it != (value->getContents()).end(); it++)
                {
                    outputStream() << ",";
                    writeIfcDraughtingCalloutElement((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcRailing(IfcRailing *value)
{
    outputStream() << "#" << value->getKey() << "=IFCRAILING(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectPlacement()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectPlacement()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRepresentation()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRepresentation()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPredefinedType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPredefinedType()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcRailingType(IfcRailingType *value)
{
    outputStream() << "#" << value->getKey() << "=IFCRAILINGTYPE(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getApplicableOccurrence()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getApplicableOccurrence()); 
    }
    outputStream() << ",";
    if (value->testHasPropertySets() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getHasPropertySets()).size())
            {
                Set_IfcPropertySetDefinition_1_n::iterator it = (value->getHasPropertySets()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getHasPropertySets()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (value->testRepresentationMaps() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRepresentationMaps()).size())
            {
                List_IfcRepresentationMap_1_n::iterator it = (value->getRepresentationMaps()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRepresentationMaps()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getElementType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getElementType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPredefinedType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPredefinedType()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcRamp(IfcRamp *value)
{
    outputStream() << "#" << value->getKey() << "=IFCRAMP(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectPlacement()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectPlacement()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRepresentation()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRepresentation()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getShapeType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getShapeType()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcRampFlight(IfcRampFlight *value)
{
    outputStream() << "#" << value->getKey() << "=IFCRAMPFLIGHT(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectPlacement()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectPlacement()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRepresentation()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRepresentation()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcRampFlightType(IfcRampFlightType *value)
{
    outputStream() << "#" << value->getKey() << "=IFCRAMPFLIGHTTYPE(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getApplicableOccurrence()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getApplicableOccurrence()); 
    }
    outputStream() << ",";
    if (value->testHasPropertySets() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getHasPropertySets()).size())
            {
                Set_IfcPropertySetDefinition_1_n::iterator it = (value->getHasPropertySets()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getHasPropertySets()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (value->testRepresentationMaps() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRepresentationMaps()).size())
            {
                List_IfcRepresentationMap_1_n::iterator it = (value->getRepresentationMaps()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRepresentationMaps()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getElementType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getElementType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPredefinedType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPredefinedType()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcRationalBezierCurve(IfcRationalBezierCurve *value)
{
    outputStream() << "#" << value->getKey() << "=IFCRATIONALBEZIERCURVE(";
    if (Step::isUnset(value->getDegree()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDegree()); 
    }
    outputStream() << ",";
    if (value->testControlPointsList() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getControlPointsList()).size())
            {
                List_IfcCartesianPoint_2_n::iterator it = (value->getControlPointsList()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getControlPointsList()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getCurveForm()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getCurveForm()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getClosedCurve()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getClosedCurve()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getSelfIntersect()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getSelfIntersect()); 
    }
    outputStream() << ",";
    if (value->testWeightsData() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getWeightsData()).size())
            {
                List_Real_2_n::iterator it = (value->getWeightsData()).begin();
                writeAttribute(*it);
                for (it++; it != (value->getWeightsData()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute(*it);
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcRectangleHollowProfileDef(IfcRectangleHollowProfileDef *value)
{
    outputStream() << "#" << value->getKey() << "=IFCRECTANGLEHOLLOWPROFILEDEF(";
    if (Step::isUnset(value->getProfileType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getProfileType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getProfileName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getProfileName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPosition()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPosition()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getXDim()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getXDim()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getYDim()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getYDim()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getWallThickness()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getWallThickness()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getInnerFilletRadius()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getInnerFilletRadius()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOuterFilletRadius()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOuterFilletRadius()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcRectangleProfileDef(IfcRectangleProfileDef *value)
{
    outputStream() << "#" << value->getKey() << "=IFCRECTANGLEPROFILEDEF(";
    if (Step::isUnset(value->getProfileType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getProfileType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getProfileName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getProfileName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPosition()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPosition()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getXDim()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getXDim()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getYDim()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getYDim()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcRectangularPyramid(IfcRectangularPyramid *value)
{
    outputStream() << "#" << value->getKey() << "=IFCRECTANGULARPYRAMID(";
    if (Step::isUnset(value->getPosition()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPosition()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getXLength()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getXLength()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getYLength()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getYLength()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getHeight()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getHeight()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcRectangularTrimmedSurface(IfcRectangularTrimmedSurface *value)
{
    outputStream() << "#" << value->getKey() << "=IFCRECTANGULARTRIMMEDSURFACE(";
    if (Step::isUnset(value->getBasisSurface()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getBasisSurface()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getU1()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getU1()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getV1()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getV1()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getU2()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getU2()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getV2()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getV2()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getUsense()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getUsense()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getVsense()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getVsense()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcReferencesValueDocument(IfcReferencesValueDocument *value)
{
    outputStream() << "#" << value->getKey() << "=IFCREFERENCESVALUEDOCUMENT(";
    if (Step::isUnset(value->getReferencedDocument()))
    {
        outputStream() << "$";
    }
    else
    {
        writeIfcDocumentSelect(value->getReferencedDocument());
    }
    outputStream() << ",";
    if (value->testReferencingValues() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getReferencingValues()).size())
            {
                Set_IfcAppliedValue_1_n::iterator it = (value->getReferencingValues()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getReferencingValues()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcRegularTimeSeries(IfcRegularTimeSeries *value)
{
    outputStream() << "#" << value->getKey() << "=IFCREGULARTIMESERIES(";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getStartTime()))
    {
        outputStream() << "$";
    }
    else
    {
        writeIfcDateTimeSelect(value->getStartTime());
    }
    outputStream() << ",";
    if (Step::isUnset(value->getEndTime()))
    {
        outputStream() << "$";
    }
    else
    {
        writeIfcDateTimeSelect(value->getEndTime());
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTimeSeriesDataType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTimeSeriesDataType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDataOrigin()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDataOrigin()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getUserDefinedDataOrigin()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getUserDefinedDataOrigin()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getUnit()))
    {
        outputStream() << "$";
    }
    else
    {
        writeIfcUnit(value->getUnit());
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTimeStep()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTimeStep()); 
    }
    outputStream() << ",";
    if (value->testValues() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getValues()).size())
            {
                List_IfcTimeSeriesValue_1_n::iterator it = (value->getValues()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getValues()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcReinforcementBarProperties(IfcReinforcementBarProperties *value)
{
    outputStream() << "#" << value->getKey() << "=IFCREINFORCEMENTBARPROPERTIES(";
    if (Step::isUnset(value->getTotalCrossSectionArea()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTotalCrossSectionArea()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getSteelGrade()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getSteelGrade()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getBarSurface()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getBarSurface()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getEffectiveDepth()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getEffectiveDepth()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getNominalBarDiameter()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getNominalBarDiameter()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getBarCount()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getBarCount()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcReinforcementDefinitionProperties(IfcReinforcementDefinitionProperties *value)
{
    outputStream() << "#" << value->getKey() << "=IFCREINFORCEMENTDEFINITIONPROPERTIES(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDefinitionType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDefinitionType()); 
    }
    outputStream() << ",";
    if (value->testReinforcementSectionDefinitions() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getReinforcementSectionDefinitions()).size())
            {
                List_IfcSectionReinforcementProperties_1_n::iterator it = (value->getReinforcementSectionDefinitions()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getReinforcementSectionDefinitions()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcReinforcingBar(IfcReinforcingBar *value)
{
    outputStream() << "#" << value->getKey() << "=IFCREINFORCINGBAR(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectPlacement()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectPlacement()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRepresentation()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRepresentation()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getSteelGrade()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getSteelGrade()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getNominalDiameter()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getNominalDiameter()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getCrossSectionArea()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getCrossSectionArea()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getBarLength()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getBarLength()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getBarRole()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getBarRole()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getBarSurface()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getBarSurface()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcReinforcingElement(IfcReinforcingElement *value)
{
    outputStream() << "#" << value->getKey() << "=IFCREINFORCINGELEMENT(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectPlacement()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectPlacement()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRepresentation()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRepresentation()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getSteelGrade()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getSteelGrade()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcReinforcingMesh(IfcReinforcingMesh *value)
{
    outputStream() << "#" << value->getKey() << "=IFCREINFORCINGMESH(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectPlacement()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectPlacement()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRepresentation()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRepresentation()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getSteelGrade()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getSteelGrade()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getMeshLength()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getMeshLength()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getMeshWidth()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getMeshWidth()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getLongitudinalBarNominalDiameter()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getLongitudinalBarNominalDiameter()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTransverseBarNominalDiameter()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTransverseBarNominalDiameter()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getLongitudinalBarCrossSectionArea()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getLongitudinalBarCrossSectionArea()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTransverseBarCrossSectionArea()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTransverseBarCrossSectionArea()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getLongitudinalBarSpacing()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getLongitudinalBarSpacing()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTransverseBarSpacing()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTransverseBarSpacing()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcRelAggregates(IfcRelAggregates *value)
{
    outputStream() << "#" << value->getKey() << "=IFCRELAGGREGATES(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRelatingObject()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRelatingObject()); 
    }
    outputStream() << ",";
    if (value->testRelatedObjects() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRelatedObjects()).size())
            {
                Set_IfcObjectDefinition_1_n::iterator it = (value->getRelatedObjects()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRelatedObjects()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcRelAssigns(IfcRelAssigns *value)
{
    outputStream() << "#" << value->getKey() << "=IFCRELASSIGNS(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (value->testRelatedObjects() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRelatedObjects()).size())
            {
                Set_IfcObjectDefinition_1_n::iterator it = (value->getRelatedObjects()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRelatedObjects()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRelatedObjectsType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRelatedObjectsType()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcRelAssignsTasks(IfcRelAssignsTasks *value)
{
    outputStream() << "#" << value->getKey() << "=IFCRELASSIGNSTASKS(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (value->testRelatedObjects() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRelatedObjects()).size())
            {
                Set_IfcObjectDefinition_1_n::iterator it = (value->getRelatedObjects()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRelatedObjects()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRelatedObjectsType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRelatedObjectsType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRelatingControl()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRelatingControl()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTimeForTask()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTimeForTask()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcRelAssignsToActor(IfcRelAssignsToActor *value)
{
    outputStream() << "#" << value->getKey() << "=IFCRELASSIGNSTOACTOR(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (value->testRelatedObjects() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRelatedObjects()).size())
            {
                Set_IfcObjectDefinition_1_n::iterator it = (value->getRelatedObjects()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRelatedObjects()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRelatedObjectsType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRelatedObjectsType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRelatingActor()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRelatingActor()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getActingRole()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getActingRole()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcRelAssignsToControl(IfcRelAssignsToControl *value)
{
    outputStream() << "#" << value->getKey() << "=IFCRELASSIGNSTOCONTROL(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (value->testRelatedObjects() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRelatedObjects()).size())
            {
                Set_IfcObjectDefinition_1_n::iterator it = (value->getRelatedObjects()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRelatedObjects()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRelatedObjectsType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRelatedObjectsType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRelatingControl()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRelatingControl()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcRelAssignsToGroup(IfcRelAssignsToGroup *value)
{
    outputStream() << "#" << value->getKey() << "=IFCRELASSIGNSTOGROUP(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (value->testRelatedObjects() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRelatedObjects()).size())
            {
                Set_IfcObjectDefinition_1_n::iterator it = (value->getRelatedObjects()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRelatedObjects()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRelatedObjectsType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRelatedObjectsType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRelatingGroup()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRelatingGroup()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcRelAssignsToProcess(IfcRelAssignsToProcess *value)
{
    outputStream() << "#" << value->getKey() << "=IFCRELASSIGNSTOPROCESS(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (value->testRelatedObjects() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRelatedObjects()).size())
            {
                Set_IfcObjectDefinition_1_n::iterator it = (value->getRelatedObjects()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRelatedObjects()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRelatedObjectsType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRelatedObjectsType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRelatingProcess()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRelatingProcess()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getQuantityInProcess()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getQuantityInProcess()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcRelAssignsToProduct(IfcRelAssignsToProduct *value)
{
    outputStream() << "#" << value->getKey() << "=IFCRELASSIGNSTOPRODUCT(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (value->testRelatedObjects() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRelatedObjects()).size())
            {
                Set_IfcObjectDefinition_1_n::iterator it = (value->getRelatedObjects()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRelatedObjects()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRelatedObjectsType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRelatedObjectsType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRelatingProduct()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRelatingProduct()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcRelAssignsToProjectOrder(IfcRelAssignsToProjectOrder *value)
{
    outputStream() << "#" << value->getKey() << "=IFCRELASSIGNSTOPROJECTORDER(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (value->testRelatedObjects() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRelatedObjects()).size())
            {
                Set_IfcObjectDefinition_1_n::iterator it = (value->getRelatedObjects()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRelatedObjects()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRelatedObjectsType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRelatedObjectsType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRelatingControl()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRelatingControl()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcRelAssignsToResource(IfcRelAssignsToResource *value)
{
    outputStream() << "#" << value->getKey() << "=IFCRELASSIGNSTORESOURCE(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (value->testRelatedObjects() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRelatedObjects()).size())
            {
                Set_IfcObjectDefinition_1_n::iterator it = (value->getRelatedObjects()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRelatedObjects()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRelatedObjectsType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRelatedObjectsType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRelatingResource()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRelatingResource()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcRelAssociates(IfcRelAssociates *value)
{
    outputStream() << "#" << value->getKey() << "=IFCRELASSOCIATES(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (value->testRelatedObjects() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRelatedObjects()).size())
            {
                Set_IfcRoot_1_n::iterator it = (value->getRelatedObjects()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRelatedObjects()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcRelAssociatesAppliedValue(IfcRelAssociatesAppliedValue *value)
{
    outputStream() << "#" << value->getKey() << "=IFCRELASSOCIATESAPPLIEDVALUE(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (value->testRelatedObjects() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRelatedObjects()).size())
            {
                Set_IfcRoot_1_n::iterator it = (value->getRelatedObjects()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRelatedObjects()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRelatingAppliedValue()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRelatingAppliedValue()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcRelAssociatesApproval(IfcRelAssociatesApproval *value)
{
    outputStream() << "#" << value->getKey() << "=IFCRELASSOCIATESAPPROVAL(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (value->testRelatedObjects() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRelatedObjects()).size())
            {
                Set_IfcRoot_1_n::iterator it = (value->getRelatedObjects()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRelatedObjects()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRelatingApproval()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRelatingApproval()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcRelAssociatesClassification(IfcRelAssociatesClassification *value)
{
    outputStream() << "#" << value->getKey() << "=IFCRELASSOCIATESCLASSIFICATION(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (value->testRelatedObjects() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRelatedObjects()).size())
            {
                Set_IfcRoot_1_n::iterator it = (value->getRelatedObjects()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRelatedObjects()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRelatingClassification()))
    {
        outputStream() << "$";
    }
    else
    {
        writeIfcClassificationNotationSelect(value->getRelatingClassification());
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcRelAssociatesConstraint(IfcRelAssociatesConstraint *value)
{
    outputStream() << "#" << value->getKey() << "=IFCRELASSOCIATESCONSTRAINT(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (value->testRelatedObjects() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRelatedObjects()).size())
            {
                Set_IfcRoot_1_n::iterator it = (value->getRelatedObjects()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRelatedObjects()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getIntent()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getIntent()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRelatingConstraint()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRelatingConstraint()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcRelAssociatesDocument(IfcRelAssociatesDocument *value)
{
    outputStream() << "#" << value->getKey() << "=IFCRELASSOCIATESDOCUMENT(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (value->testRelatedObjects() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRelatedObjects()).size())
            {
                Set_IfcRoot_1_n::iterator it = (value->getRelatedObjects()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRelatedObjects()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRelatingDocument()))
    {
        outputStream() << "$";
    }
    else
    {
        writeIfcDocumentSelect(value->getRelatingDocument());
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcRelAssociatesLibrary(IfcRelAssociatesLibrary *value)
{
    outputStream() << "#" << value->getKey() << "=IFCRELASSOCIATESLIBRARY(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (value->testRelatedObjects() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRelatedObjects()).size())
            {
                Set_IfcRoot_1_n::iterator it = (value->getRelatedObjects()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRelatedObjects()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRelatingLibrary()))
    {
        outputStream() << "$";
    }
    else
    {
        writeIfcLibrarySelect(value->getRelatingLibrary());
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcRelAssociatesMaterial(IfcRelAssociatesMaterial *value)
{
    outputStream() << "#" << value->getKey() << "=IFCRELASSOCIATESMATERIAL(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (value->testRelatedObjects() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRelatedObjects()).size())
            {
                Set_IfcRoot_1_n::iterator it = (value->getRelatedObjects()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRelatedObjects()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRelatingMaterial()))
    {
        outputStream() << "$";
    }
    else
    {
        writeIfcMaterialSelect(value->getRelatingMaterial());
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcRelAssociatesProfileProperties(IfcRelAssociatesProfileProperties *value)
{
    outputStream() << "#" << value->getKey() << "=IFCRELASSOCIATESPROFILEPROPERTIES(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (value->testRelatedObjects() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRelatedObjects()).size())
            {
                Set_IfcRoot_1_n::iterator it = (value->getRelatedObjects()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRelatedObjects()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRelatingProfileProperties()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRelatingProfileProperties()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getProfileSectionLocation()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getProfileSectionLocation()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getProfileOrientation()))
    {
        outputStream() << "$";
    }
    else
    {
        writeIfcOrientationSelect(value->getProfileOrientation());
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcRelationship(IfcRelationship *value)
{
    outputStream() << "#" << value->getKey() << "=IFCRELATIONSHIP(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcRelaxation(IfcRelaxation *value)
{
    outputStream() << "#" << value->getKey() << "=IFCRELAXATION(";
    if (Step::isUnset(value->getRelaxationValue()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRelaxationValue()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getInitialStress()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getInitialStress()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcRelConnects(IfcRelConnects *value)
{
    outputStream() << "#" << value->getKey() << "=IFCRELCONNECTS(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcRelConnectsElements(IfcRelConnectsElements *value)
{
    outputStream() << "#" << value->getKey() << "=IFCRELCONNECTSELEMENTS(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getConnectionGeometry()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getConnectionGeometry()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRelatingElement()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRelatingElement()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRelatedElement()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRelatedElement()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcRelConnectsPathElements(IfcRelConnectsPathElements *value)
{
    outputStream() << "#" << value->getKey() << "=IFCRELCONNECTSPATHELEMENTS(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getConnectionGeometry()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getConnectionGeometry()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRelatingElement()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRelatingElement()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRelatedElement()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRelatedElement()); 
    }
    outputStream() << ",";
    if (value->testRelatingPriorities() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRelatingPriorities()).size())
            {
                List_Integer_0_n::iterator it = (value->getRelatingPriorities()).begin();
                writeAttribute(*it);
                for (it++; it != (value->getRelatingPriorities()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute(*it);
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (value->testRelatedPriorities() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRelatedPriorities()).size())
            {
                List_Integer_0_n::iterator it = (value->getRelatedPriorities()).begin();
                writeAttribute(*it);
                for (it++; it != (value->getRelatedPriorities()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute(*it);
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRelatedConnectionType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRelatedConnectionType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRelatingConnectionType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRelatingConnectionType()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcRelConnectsPorts(IfcRelConnectsPorts *value)
{
    outputStream() << "#" << value->getKey() << "=IFCRELCONNECTSPORTS(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRelatingPort()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRelatingPort()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRelatedPort()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRelatedPort()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRealizingElement()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRealizingElement()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcRelConnectsPortToElement(IfcRelConnectsPortToElement *value)
{
    outputStream() << "#" << value->getKey() << "=IFCRELCONNECTSPORTTOELEMENT(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRelatingPort()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRelatingPort()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRelatedElement()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRelatedElement()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcRelConnectsStructuralActivity(IfcRelConnectsStructuralActivity *value)
{
    outputStream() << "#" << value->getKey() << "=IFCRELCONNECTSSTRUCTURALACTIVITY(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRelatingElement()))
    {
        outputStream() << "$";
    }
    else
    {
        writeIfcStructuralActivityAssignmentSelect(value->getRelatingElement());
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRelatedStructuralActivity()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRelatedStructuralActivity()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcRelConnectsStructuralElement(IfcRelConnectsStructuralElement *value)
{
    outputStream() << "#" << value->getKey() << "=IFCRELCONNECTSSTRUCTURALELEMENT(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRelatingElement()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRelatingElement()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRelatedStructuralMember()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRelatedStructuralMember()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcRelConnectsStructuralMember(IfcRelConnectsStructuralMember *value)
{
    outputStream() << "#" << value->getKey() << "=IFCRELCONNECTSSTRUCTURALMEMBER(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRelatingStructuralMember()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRelatingStructuralMember()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRelatedStructuralConnection()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRelatedStructuralConnection()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getAppliedCondition()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getAppliedCondition()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getAdditionalConditions()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getAdditionalConditions()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getSupportedLength()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getSupportedLength()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getConditionCoordinateSystem()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getConditionCoordinateSystem()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcRelConnectsWithEccentricity(IfcRelConnectsWithEccentricity *value)
{
    outputStream() << "#" << value->getKey() << "=IFCRELCONNECTSWITHECCENTRICITY(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRelatingStructuralMember()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRelatingStructuralMember()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRelatedStructuralConnection()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRelatedStructuralConnection()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getAppliedCondition()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getAppliedCondition()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getAdditionalConditions()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getAdditionalConditions()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getSupportedLength()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getSupportedLength()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getConditionCoordinateSystem()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getConditionCoordinateSystem()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getConnectionConstraint()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getConnectionConstraint()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcRelConnectsWithRealizingElements(IfcRelConnectsWithRealizingElements *value)
{
    outputStream() << "#" << value->getKey() << "=IFCRELCONNECTSWITHREALIZINGELEMENTS(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getConnectionGeometry()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getConnectionGeometry()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRelatingElement()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRelatingElement()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRelatedElement()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRelatedElement()); 
    }
    outputStream() << ",";
    if (value->testRealizingElements() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRealizingElements()).size())
            {
                Set_IfcElement_1_n::iterator it = (value->getRealizingElements()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRealizingElements()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getConnectionType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getConnectionType()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcRelContainedInSpatialStructure(IfcRelContainedInSpatialStructure *value)
{
    outputStream() << "#" << value->getKey() << "=IFCRELCONTAINEDINSPATIALSTRUCTURE(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (value->testRelatedElements() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRelatedElements()).size())
            {
                Set_IfcProduct_1_n::iterator it = (value->getRelatedElements()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRelatedElements()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRelatingStructure()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRelatingStructure()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcRelCoversBldgElements(IfcRelCoversBldgElements *value)
{
    outputStream() << "#" << value->getKey() << "=IFCRELCOVERSBLDGELEMENTS(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRelatingBuildingElement()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRelatingBuildingElement()); 
    }
    outputStream() << ",";
    if (value->testRelatedCoverings() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRelatedCoverings()).size())
            {
                Set_IfcCovering_1_n::iterator it = (value->getRelatedCoverings()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRelatedCoverings()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcRelCoversSpaces(IfcRelCoversSpaces *value)
{
    outputStream() << "#" << value->getKey() << "=IFCRELCOVERSSPACES(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRelatedSpace()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRelatedSpace()); 
    }
    outputStream() << ",";
    if (value->testRelatedCoverings() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRelatedCoverings()).size())
            {
                Set_IfcCovering_1_n::iterator it = (value->getRelatedCoverings()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRelatedCoverings()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcRelDecomposes(IfcRelDecomposes *value)
{
    outputStream() << "#" << value->getKey() << "=IFCRELDECOMPOSES(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRelatingObject()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRelatingObject()); 
    }
    outputStream() << ",";
    if (value->testRelatedObjects() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRelatedObjects()).size())
            {
                Set_IfcObjectDefinition_1_n::iterator it = (value->getRelatedObjects()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRelatedObjects()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcRelDefines(IfcRelDefines *value)
{
    outputStream() << "#" << value->getKey() << "=IFCRELDEFINES(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (value->testRelatedObjects() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRelatedObjects()).size())
            {
                Set_IfcObject_1_n::iterator it = (value->getRelatedObjects()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRelatedObjects()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcRelDefinesByProperties(IfcRelDefinesByProperties *value)
{
    outputStream() << "#" << value->getKey() << "=IFCRELDEFINESBYPROPERTIES(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (value->testRelatedObjects() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRelatedObjects()).size())
            {
                Set_IfcObject_1_n::iterator it = (value->getRelatedObjects()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRelatedObjects()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRelatingPropertyDefinition()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRelatingPropertyDefinition()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcRelDefinesByType(IfcRelDefinesByType *value)
{
    outputStream() << "#" << value->getKey() << "=IFCRELDEFINESBYTYPE(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (value->testRelatedObjects() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRelatedObjects()).size())
            {
                Set_IfcObject_1_n::iterator it = (value->getRelatedObjects()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRelatedObjects()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRelatingType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRelatingType()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcRelFillsElement(IfcRelFillsElement *value)
{
    outputStream() << "#" << value->getKey() << "=IFCRELFILLSELEMENT(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRelatingOpeningElement()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRelatingOpeningElement()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRelatedBuildingElement()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRelatedBuildingElement()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcRelFlowControlElements(IfcRelFlowControlElements *value)
{
    outputStream() << "#" << value->getKey() << "=IFCRELFLOWCONTROLELEMENTS(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (value->testRelatedControlElements() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRelatedControlElements()).size())
            {
                Set_IfcDistributionControlElement_1_n::iterator it = (value->getRelatedControlElements()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRelatedControlElements()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRelatingFlowElement()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRelatingFlowElement()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcRelInteractionRequirements(IfcRelInteractionRequirements *value)
{
    outputStream() << "#" << value->getKey() << "=IFCRELINTERACTIONREQUIREMENTS(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDailyInteraction()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDailyInteraction()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getImportanceRating()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getImportanceRating()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getLocationOfInteraction()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getLocationOfInteraction()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRelatedSpaceProgram()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRelatedSpaceProgram()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRelatingSpaceProgram()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRelatingSpaceProgram()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcRelNests(IfcRelNests *value)
{
    outputStream() << "#" << value->getKey() << "=IFCRELNESTS(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRelatingObject()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRelatingObject()); 
    }
    outputStream() << ",";
    if (value->testRelatedObjects() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRelatedObjects()).size())
            {
                Set_IfcObjectDefinition_1_n::iterator it = (value->getRelatedObjects()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRelatedObjects()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcRelOccupiesSpaces(IfcRelOccupiesSpaces *value)
{
    outputStream() << "#" << value->getKey() << "=IFCRELOCCUPIESSPACES(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (value->testRelatedObjects() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRelatedObjects()).size())
            {
                Set_IfcObjectDefinition_1_n::iterator it = (value->getRelatedObjects()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRelatedObjects()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRelatedObjectsType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRelatedObjectsType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRelatingActor()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRelatingActor()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getActingRole()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getActingRole()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcRelOverridesProperties(IfcRelOverridesProperties *value)
{
    outputStream() << "#" << value->getKey() << "=IFCRELOVERRIDESPROPERTIES(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (value->testRelatedObjects() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRelatedObjects()).size())
            {
                Set_IfcObject_1_n::iterator it = (value->getRelatedObjects()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRelatedObjects()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRelatingPropertyDefinition()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRelatingPropertyDefinition()); 
    }
    outputStream() << ",";
    if (value->testOverridingProperties() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getOverridingProperties()).size())
            {
                Set_IfcProperty_1_n::iterator it = (value->getOverridingProperties()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getOverridingProperties()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcRelProjectsElement(IfcRelProjectsElement *value)
{
    outputStream() << "#" << value->getKey() << "=IFCRELPROJECTSELEMENT(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRelatingElement()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRelatingElement()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRelatedFeatureElement()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRelatedFeatureElement()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcRelReferencedInSpatialStructure(IfcRelReferencedInSpatialStructure *value)
{
    outputStream() << "#" << value->getKey() << "=IFCRELREFERENCEDINSPATIALSTRUCTURE(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (value->testRelatedElements() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRelatedElements()).size())
            {
                Set_IfcProduct_1_n::iterator it = (value->getRelatedElements()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRelatedElements()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRelatingStructure()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRelatingStructure()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcRelSchedulesCostItems(IfcRelSchedulesCostItems *value)
{
    outputStream() << "#" << value->getKey() << "=IFCRELSCHEDULESCOSTITEMS(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (value->testRelatedObjects() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRelatedObjects()).size())
            {
                Set_IfcObjectDefinition_1_n::iterator it = (value->getRelatedObjects()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRelatedObjects()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRelatedObjectsType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRelatedObjectsType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRelatingControl()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRelatingControl()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcRelSequence(IfcRelSequence *value)
{
    outputStream() << "#" << value->getKey() << "=IFCRELSEQUENCE(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRelatingProcess()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRelatingProcess()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRelatedProcess()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRelatedProcess()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTimeLag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTimeLag()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getSequenceType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getSequenceType()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcRelServicesBuildings(IfcRelServicesBuildings *value)
{
    outputStream() << "#" << value->getKey() << "=IFCRELSERVICESBUILDINGS(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRelatingSystem()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRelatingSystem()); 
    }
    outputStream() << ",";
    if (value->testRelatedBuildings() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRelatedBuildings()).size())
            {
                Set_IfcSpatialStructureElement_1_n::iterator it = (value->getRelatedBuildings()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRelatedBuildings()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcRelSpaceBoundary(IfcRelSpaceBoundary *value)
{
    outputStream() << "#" << value->getKey() << "=IFCRELSPACEBOUNDARY(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRelatingSpace()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRelatingSpace()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRelatedBuildingElement()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRelatedBuildingElement()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getConnectionGeometry()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getConnectionGeometry()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPhysicalOrVirtualBoundary()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPhysicalOrVirtualBoundary()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getInternalOrExternalBoundary()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getInternalOrExternalBoundary()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcRelVoidsElement(IfcRelVoidsElement *value)
{
    outputStream() << "#" << value->getKey() << "=IFCRELVOIDSELEMENT(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRelatingBuildingElement()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRelatingBuildingElement()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRelatedOpeningElement()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRelatedOpeningElement()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcRepresentation(IfcRepresentation *value)
{
    outputStream() << "#" << value->getKey() << "=IFCREPRESENTATION(";
    if (Step::isUnset(value->getContextOfItems()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getContextOfItems()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRepresentationIdentifier()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRepresentationIdentifier()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRepresentationType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRepresentationType()); 
    }
    outputStream() << ",";
    if (value->testItems() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getItems()).size())
            {
                Set_IfcRepresentationItem_1_n::iterator it = (value->getItems()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getItems()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcRepresentationContext(IfcRepresentationContext *value)
{
    outputStream() << "#" << value->getKey() << "=IFCREPRESENTATIONCONTEXT(";
    if (Step::isUnset(value->getContextIdentifier()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getContextIdentifier()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getContextType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getContextType()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcRepresentationItem(IfcRepresentationItem *value)
{
    outputStream() << "#" << value->getKey() << "=IFCREPRESENTATIONITEM(";
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcRepresentationMap(IfcRepresentationMap *value)
{
    outputStream() << "#" << value->getKey() << "=IFCREPRESENTATIONMAP(";
    if (Step::isUnset(value->getMappingOrigin()))
    {
        outputStream() << "$";
    }
    else
    {
        writeIfcAxis2Placement(value->getMappingOrigin());
    }
    outputStream() << ",";
    if (Step::isUnset(value->getMappedRepresentation()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getMappedRepresentation()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcResource(IfcResource *value)
{
    outputStream() << "#" << value->getKey() << "=IFCRESOURCE(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectType()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcRevolvedAreaSolid(IfcRevolvedAreaSolid *value)
{
    outputStream() << "#" << value->getKey() << "=IFCREVOLVEDAREASOLID(";
    if (Step::isUnset(value->getSweptArea()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getSweptArea()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPosition()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPosition()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getAxis()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getAxis()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getAngle()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getAngle()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcRibPlateProfileProperties(IfcRibPlateProfileProperties *value)
{
    outputStream() << "#" << value->getKey() << "=IFCRIBPLATEPROFILEPROPERTIES(";
    if (Step::isUnset(value->getProfileName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getProfileName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getProfileDefinition()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getProfileDefinition()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getThickness()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getThickness()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRibHeight()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRibHeight()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRibWidth()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRibWidth()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRibSpacing()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRibSpacing()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDirection()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDirection()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcRightCircularCone(IfcRightCircularCone *value)
{
    outputStream() << "#" << value->getKey() << "=IFCRIGHTCIRCULARCONE(";
    if (Step::isUnset(value->getPosition()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPosition()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getHeight()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getHeight()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getBottomRadius()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getBottomRadius()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcRightCircularCylinder(IfcRightCircularCylinder *value)
{
    outputStream() << "#" << value->getKey() << "=IFCRIGHTCIRCULARCYLINDER(";
    if (Step::isUnset(value->getPosition()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPosition()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getHeight()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getHeight()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRadius()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRadius()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcRoof(IfcRoof *value)
{
    outputStream() << "#" << value->getKey() << "=IFCROOF(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectPlacement()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectPlacement()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRepresentation()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRepresentation()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getShapeType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getShapeType()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcRoot(IfcRoot *value)
{
    outputStream() << "#" << value->getKey() << "=IFCROOT(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcRoundedEdgeFeature(IfcRoundedEdgeFeature *value)
{
    outputStream() << "#" << value->getKey() << "=IFCROUNDEDEDGEFEATURE(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectPlacement()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectPlacement()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRepresentation()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRepresentation()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getFeatureLength()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getFeatureLength()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRadius()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRadius()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcRoundedRectangleProfileDef(IfcRoundedRectangleProfileDef *value)
{
    outputStream() << "#" << value->getKey() << "=IFCROUNDEDRECTANGLEPROFILEDEF(";
    if (Step::isUnset(value->getProfileType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getProfileType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getProfileName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getProfileName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPosition()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPosition()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getXDim()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getXDim()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getYDim()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getYDim()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRoundingRadius()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRoundingRadius()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcSanitaryTerminalType(IfcSanitaryTerminalType *value)
{
    outputStream() << "#" << value->getKey() << "=IFCSANITARYTERMINALTYPE(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getApplicableOccurrence()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getApplicableOccurrence()); 
    }
    outputStream() << ",";
    if (value->testHasPropertySets() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getHasPropertySets()).size())
            {
                Set_IfcPropertySetDefinition_1_n::iterator it = (value->getHasPropertySets()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getHasPropertySets()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (value->testRepresentationMaps() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRepresentationMaps()).size())
            {
                List_IfcRepresentationMap_1_n::iterator it = (value->getRepresentationMaps()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRepresentationMaps()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getElementType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getElementType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPredefinedType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPredefinedType()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcScheduleTimeControl(IfcScheduleTimeControl *value)
{
    outputStream() << "#" << value->getKey() << "=IFCSCHEDULETIMECONTROL(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getActualStart()))
    {
        outputStream() << "$";
    }
    else
    {
        writeIfcDateTimeSelect(value->getActualStart());
    }
    outputStream() << ",";
    if (Step::isUnset(value->getEarlyStart()))
    {
        outputStream() << "$";
    }
    else
    {
        writeIfcDateTimeSelect(value->getEarlyStart());
    }
    outputStream() << ",";
    if (Step::isUnset(value->getLateStart()))
    {
        outputStream() << "$";
    }
    else
    {
        writeIfcDateTimeSelect(value->getLateStart());
    }
    outputStream() << ",";
    if (Step::isUnset(value->getScheduleStart()))
    {
        outputStream() << "$";
    }
    else
    {
        writeIfcDateTimeSelect(value->getScheduleStart());
    }
    outputStream() << ",";
    if (Step::isUnset(value->getActualFinish()))
    {
        outputStream() << "$";
    }
    else
    {
        writeIfcDateTimeSelect(value->getActualFinish());
    }
    outputStream() << ",";
    if (Step::isUnset(value->getEarlyFinish()))
    {
        outputStream() << "$";
    }
    else
    {
        writeIfcDateTimeSelect(value->getEarlyFinish());
    }
    outputStream() << ",";
    if (Step::isUnset(value->getLateFinish()))
    {
        outputStream() << "$";
    }
    else
    {
        writeIfcDateTimeSelect(value->getLateFinish());
    }
    outputStream() << ",";
    if (Step::isUnset(value->getScheduleFinish()))
    {
        outputStream() << "$";
    }
    else
    {
        writeIfcDateTimeSelect(value->getScheduleFinish());
    }
    outputStream() << ",";
    if (Step::isUnset(value->getScheduleDuration()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getScheduleDuration()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getActualDuration()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getActualDuration()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRemainingTime()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRemainingTime()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getFreeFloat()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getFreeFloat()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTotalFloat()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTotalFloat()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getIsCritical()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getIsCritical()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getStatusTime()))
    {
        outputStream() << "$";
    }
    else
    {
        writeIfcDateTimeSelect(value->getStatusTime());
    }
    outputStream() << ",";
    if (Step::isUnset(value->getStartFloat()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getStartFloat()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getFinishFloat()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getFinishFloat()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getCompletion()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getCompletion()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcSectionedSpine(IfcSectionedSpine *value)
{
    outputStream() << "#" << value->getKey() << "=IFCSECTIONEDSPINE(";
    if (Step::isUnset(value->getSpineCurve()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getSpineCurve()); 
    }
    outputStream() << ",";
    if (value->testCrossSections() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getCrossSections()).size())
            {
                List_IfcProfileDef_2_n::iterator it = (value->getCrossSections()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getCrossSections()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (value->testCrossSectionPositions() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getCrossSectionPositions()).size())
            {
                List_IfcAxis2Placement3D_2_n::iterator it = (value->getCrossSectionPositions()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getCrossSectionPositions()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcSectionProperties(IfcSectionProperties *value)
{
    outputStream() << "#" << value->getKey() << "=IFCSECTIONPROPERTIES(";
    if (Step::isUnset(value->getSectionType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getSectionType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getStartProfile()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getStartProfile()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getEndProfile()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getEndProfile()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcSectionReinforcementProperties(IfcSectionReinforcementProperties *value)
{
    outputStream() << "#" << value->getKey() << "=IFCSECTIONREINFORCEMENTPROPERTIES(";
    if (Step::isUnset(value->getLongitudinalStartPosition()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getLongitudinalStartPosition()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getLongitudinalEndPosition()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getLongitudinalEndPosition()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTransversePosition()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTransversePosition()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getReinforcementRole()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getReinforcementRole()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getSectionDefinition()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getSectionDefinition()); 
    }
    outputStream() << ",";
    if (value->testCrossSectionReinforcementDefinitions() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getCrossSectionReinforcementDefinitions()).size())
            {
                Set_IfcReinforcementBarProperties_1_n::iterator it = (value->getCrossSectionReinforcementDefinitions()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getCrossSectionReinforcementDefinitions()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcSensorType(IfcSensorType *value)
{
    outputStream() << "#" << value->getKey() << "=IFCSENSORTYPE(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getApplicableOccurrence()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getApplicableOccurrence()); 
    }
    outputStream() << ",";
    if (value->testHasPropertySets() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getHasPropertySets()).size())
            {
                Set_IfcPropertySetDefinition_1_n::iterator it = (value->getHasPropertySets()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getHasPropertySets()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (value->testRepresentationMaps() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRepresentationMaps()).size())
            {
                List_IfcRepresentationMap_1_n::iterator it = (value->getRepresentationMaps()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRepresentationMaps()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getElementType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getElementType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPredefinedType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPredefinedType()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcServiceLife(IfcServiceLife *value)
{
    outputStream() << "#" << value->getKey() << "=IFCSERVICELIFE(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getServiceLifeType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getServiceLifeType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getServiceLifeDuration()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getServiceLifeDuration()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcServiceLifeFactor(IfcServiceLifeFactor *value)
{
    outputStream() << "#" << value->getKey() << "=IFCSERVICELIFEFACTOR(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPredefinedType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPredefinedType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getUpperValue()))
    {
        outputStream() << "$";
    }
    else
    {
        writeIfcMeasureValue(value->getUpperValue());
    }
    outputStream() << ",";
    if (Step::isUnset(value->getMostUsedValue()))
    {
        outputStream() << "$";
    }
    else
    {
        writeIfcMeasureValue(value->getMostUsedValue());
    }
    outputStream() << ",";
    if (Step::isUnset(value->getLowerValue()))
    {
        outputStream() << "$";
    }
    else
    {
        writeIfcMeasureValue(value->getLowerValue());
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcShapeAspect(IfcShapeAspect *value)
{
    outputStream() << "#" << value->getKey() << "=IFCSHAPEASPECT(";
    if (value->testShapeRepresentations() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getShapeRepresentations()).size())
            {
                List_IfcShapeModel_1_n::iterator it = (value->getShapeRepresentations()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getShapeRepresentations()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getProductDefinitional()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getProductDefinitional()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPartOfProductDefinitionShape()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPartOfProductDefinitionShape()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcShapeModel(IfcShapeModel *value)
{
    outputStream() << "#" << value->getKey() << "=IFCSHAPEMODEL(";
    if (Step::isUnset(value->getContextOfItems()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getContextOfItems()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRepresentationIdentifier()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRepresentationIdentifier()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRepresentationType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRepresentationType()); 
    }
    outputStream() << ",";
    if (value->testItems() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getItems()).size())
            {
                Set_IfcRepresentationItem_1_n::iterator it = (value->getItems()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getItems()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcShapeRepresentation(IfcShapeRepresentation *value)
{
    outputStream() << "#" << value->getKey() << "=IFCSHAPEREPRESENTATION(";
    if (Step::isUnset(value->getContextOfItems()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getContextOfItems()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRepresentationIdentifier()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRepresentationIdentifier()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRepresentationType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRepresentationType()); 
    }
    outputStream() << ",";
    if (value->testItems() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getItems()).size())
            {
                Set_IfcRepresentationItem_1_n::iterator it = (value->getItems()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getItems()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcShellBasedSurfaceModel(IfcShellBasedSurfaceModel *value)
{
    outputStream() << "#" << value->getKey() << "=IFCSHELLBASEDSURFACEMODEL(";
    if (value->testSbsmBoundary() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getSbsmBoundary()).size())
            {
                Set_IfcShell_1_n::iterator it = (value->getSbsmBoundary()).begin();
                writeIfcShell((*it).get());
                for (it++; it != (value->getSbsmBoundary()).end(); it++)
                {
                    outputStream() << ",";
                    writeIfcShell((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcSimpleProperty(IfcSimpleProperty *value)
{
    outputStream() << "#" << value->getKey() << "=IFCSIMPLEPROPERTY(";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcSite(IfcSite *value)
{
    outputStream() << "#" << value->getKey() << "=IFCSITE(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectPlacement()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectPlacement()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRepresentation()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRepresentation()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getLongName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getLongName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getCompositionType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getCompositionType()); 
    }
    outputStream() << ",";
    if (value->testRefLatitude() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRefLatitude()).size())
            {
                IfcCompoundPlaneAngleMeasure::iterator it = (value->getRefLatitude()).begin();
                writeAttribute(*it);
                for (it++; it != (value->getRefLatitude()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute(*it);
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (value->testRefLongitude() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRefLongitude()).size())
            {
                IfcCompoundPlaneAngleMeasure::iterator it = (value->getRefLongitude()).begin();
                writeAttribute(*it);
                for (it++; it != (value->getRefLongitude()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute(*it);
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRefElevation()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRefElevation()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getLandTitleNumber()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getLandTitleNumber()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getSiteAddress()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getSiteAddress()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcSIUnit(IfcSIUnit *value)
{
    outputStream() << "#" << value->getKey() << "=IFCSIUNIT(";
    if (Step::isUnset(value->getDimensions()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDimensions()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getUnitType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getUnitType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPrefix()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPrefix()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcSlab(IfcSlab *value)
{
    outputStream() << "#" << value->getKey() << "=IFCSLAB(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectPlacement()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectPlacement()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRepresentation()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRepresentation()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPredefinedType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPredefinedType()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcSlabType(IfcSlabType *value)
{
    outputStream() << "#" << value->getKey() << "=IFCSLABTYPE(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getApplicableOccurrence()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getApplicableOccurrence()); 
    }
    outputStream() << ",";
    if (value->testHasPropertySets() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getHasPropertySets()).size())
            {
                Set_IfcPropertySetDefinition_1_n::iterator it = (value->getHasPropertySets()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getHasPropertySets()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (value->testRepresentationMaps() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRepresentationMaps()).size())
            {
                List_IfcRepresentationMap_1_n::iterator it = (value->getRepresentationMaps()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRepresentationMaps()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getElementType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getElementType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPredefinedType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPredefinedType()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcSlippageConnectionCondition(IfcSlippageConnectionCondition *value)
{
    outputStream() << "#" << value->getKey() << "=IFCSLIPPAGECONNECTIONCONDITION(";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getSlippageX()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getSlippageX()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getSlippageY()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getSlippageY()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getSlippageZ()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getSlippageZ()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcSolidModel(IfcSolidModel *value)
{
    outputStream() << "#" << value->getKey() << "=IFCSOLIDMODEL(";
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcSoundProperties(IfcSoundProperties *value)
{
    outputStream() << "#" << value->getKey() << "=IFCSOUNDPROPERTIES(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getIsAttenuating()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getIsAttenuating()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getSoundScale()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getSoundScale()); 
    }
    outputStream() << ",";
    if (value->testSoundValues() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getSoundValues()).size())
            {
                List_IfcSoundValue_1_8::iterator it = (value->getSoundValues()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getSoundValues()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcSoundValue(IfcSoundValue *value)
{
    outputStream() << "#" << value->getKey() << "=IFCSOUNDVALUE(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getSoundLevelTimeSeries()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getSoundLevelTimeSeries()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getFrequency()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getFrequency()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getSoundLevelSingleValue()))
    {
        outputStream() << "$";
    }
    else
    {
        writeIfcDerivedMeasureValue(value->getSoundLevelSingleValue());
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcSpace(IfcSpace *value)
{
    outputStream() << "#" << value->getKey() << "=IFCSPACE(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectPlacement()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectPlacement()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRepresentation()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRepresentation()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getLongName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getLongName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getCompositionType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getCompositionType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getInteriorOrExteriorSpace()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getInteriorOrExteriorSpace()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getElevationWithFlooring()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getElevationWithFlooring()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcSpaceHeaterType(IfcSpaceHeaterType *value)
{
    outputStream() << "#" << value->getKey() << "=IFCSPACEHEATERTYPE(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getApplicableOccurrence()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getApplicableOccurrence()); 
    }
    outputStream() << ",";
    if (value->testHasPropertySets() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getHasPropertySets()).size())
            {
                Set_IfcPropertySetDefinition_1_n::iterator it = (value->getHasPropertySets()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getHasPropertySets()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (value->testRepresentationMaps() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRepresentationMaps()).size())
            {
                List_IfcRepresentationMap_1_n::iterator it = (value->getRepresentationMaps()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRepresentationMaps()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getElementType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getElementType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPredefinedType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPredefinedType()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcSpaceProgram(IfcSpaceProgram *value)
{
    outputStream() << "#" << value->getKey() << "=IFCSPACEPROGRAM(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getSpaceProgramIdentifier()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getSpaceProgramIdentifier()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getMaxRequiredArea()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getMaxRequiredArea()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getMinRequiredArea()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getMinRequiredArea()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRequestedLocation()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRequestedLocation()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getStandardRequiredArea()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getStandardRequiredArea()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcSpaceThermalLoadProperties(IfcSpaceThermalLoadProperties *value)
{
    outputStream() << "#" << value->getKey() << "=IFCSPACETHERMALLOADPROPERTIES(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getApplicableValueRatio()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getApplicableValueRatio()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getThermalLoadSource()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getThermalLoadSource()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPropertySource()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPropertySource()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getSourceDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getSourceDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getMaximumValue()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getMaximumValue()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getMinimumValue()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getMinimumValue()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getThermalLoadTimeSeriesValues()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getThermalLoadTimeSeriesValues()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getUserDefinedThermalLoadSource()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getUserDefinedThermalLoadSource()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getUserDefinedPropertySource()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getUserDefinedPropertySource()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getThermalLoadType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getThermalLoadType()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcSpaceType(IfcSpaceType *value)
{
    outputStream() << "#" << value->getKey() << "=IFCSPACETYPE(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getApplicableOccurrence()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getApplicableOccurrence()); 
    }
    outputStream() << ",";
    if (value->testHasPropertySets() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getHasPropertySets()).size())
            {
                Set_IfcPropertySetDefinition_1_n::iterator it = (value->getHasPropertySets()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getHasPropertySets()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (value->testRepresentationMaps() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRepresentationMaps()).size())
            {
                List_IfcRepresentationMap_1_n::iterator it = (value->getRepresentationMaps()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRepresentationMaps()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getElementType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getElementType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPredefinedType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPredefinedType()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcSpatialStructureElement(IfcSpatialStructureElement *value)
{
    outputStream() << "#" << value->getKey() << "=IFCSPATIALSTRUCTUREELEMENT(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectPlacement()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectPlacement()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRepresentation()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRepresentation()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getLongName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getLongName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getCompositionType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getCompositionType()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcSpatialStructureElementType(IfcSpatialStructureElementType *value)
{
    outputStream() << "#" << value->getKey() << "=IFCSPATIALSTRUCTUREELEMENTTYPE(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getApplicableOccurrence()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getApplicableOccurrence()); 
    }
    outputStream() << ",";
    if (value->testHasPropertySets() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getHasPropertySets()).size())
            {
                Set_IfcPropertySetDefinition_1_n::iterator it = (value->getHasPropertySets()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getHasPropertySets()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (value->testRepresentationMaps() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRepresentationMaps()).size())
            {
                List_IfcRepresentationMap_1_n::iterator it = (value->getRepresentationMaps()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRepresentationMaps()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getElementType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getElementType()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcSphere(IfcSphere *value)
{
    outputStream() << "#" << value->getKey() << "=IFCSPHERE(";
    if (Step::isUnset(value->getPosition()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPosition()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRadius()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRadius()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcStackTerminalType(IfcStackTerminalType *value)
{
    outputStream() << "#" << value->getKey() << "=IFCSTACKTERMINALTYPE(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getApplicableOccurrence()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getApplicableOccurrence()); 
    }
    outputStream() << ",";
    if (value->testHasPropertySets() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getHasPropertySets()).size())
            {
                Set_IfcPropertySetDefinition_1_n::iterator it = (value->getHasPropertySets()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getHasPropertySets()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (value->testRepresentationMaps() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRepresentationMaps()).size())
            {
                List_IfcRepresentationMap_1_n::iterator it = (value->getRepresentationMaps()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRepresentationMaps()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getElementType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getElementType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPredefinedType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPredefinedType()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcStair(IfcStair *value)
{
    outputStream() << "#" << value->getKey() << "=IFCSTAIR(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectPlacement()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectPlacement()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRepresentation()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRepresentation()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getShapeType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getShapeType()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcStairFlight(IfcStairFlight *value)
{
    outputStream() << "#" << value->getKey() << "=IFCSTAIRFLIGHT(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectPlacement()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectPlacement()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRepresentation()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRepresentation()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getNumberOfRiser()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getNumberOfRiser()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getNumberOfTreads()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getNumberOfTreads()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRiserHeight()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRiserHeight()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTreadLength()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTreadLength()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcStairFlightType(IfcStairFlightType *value)
{
    outputStream() << "#" << value->getKey() << "=IFCSTAIRFLIGHTTYPE(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getApplicableOccurrence()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getApplicableOccurrence()); 
    }
    outputStream() << ",";
    if (value->testHasPropertySets() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getHasPropertySets()).size())
            {
                Set_IfcPropertySetDefinition_1_n::iterator it = (value->getHasPropertySets()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getHasPropertySets()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (value->testRepresentationMaps() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRepresentationMaps()).size())
            {
                List_IfcRepresentationMap_1_n::iterator it = (value->getRepresentationMaps()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRepresentationMaps()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getElementType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getElementType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPredefinedType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPredefinedType()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcStructuralAction(IfcStructuralAction *value)
{
    outputStream() << "#" << value->getKey() << "=IFCSTRUCTURALACTION(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectPlacement()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectPlacement()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRepresentation()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRepresentation()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getAppliedLoad()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getAppliedLoad()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getGlobalOrLocal()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalOrLocal()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDestabilizingLoad()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDestabilizingLoad()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getCausedBy()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getCausedBy()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcStructuralActivity(IfcStructuralActivity *value)
{
    outputStream() << "#" << value->getKey() << "=IFCSTRUCTURALACTIVITY(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectPlacement()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectPlacement()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRepresentation()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRepresentation()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getAppliedLoad()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getAppliedLoad()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getGlobalOrLocal()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalOrLocal()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcStructuralAnalysisModel(IfcStructuralAnalysisModel *value)
{
    outputStream() << "#" << value->getKey() << "=IFCSTRUCTURALANALYSISMODEL(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPredefinedType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPredefinedType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOrientationOf2DPlane()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOrientationOf2DPlane()); 
    }
    outputStream() << ",";
    if (value->testLoadedBy() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getLoadedBy()).size())
            {
                Set_IfcStructuralLoadGroup_1_n::iterator it = (value->getLoadedBy()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getLoadedBy()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (value->testHasResults() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getHasResults()).size())
            {
                Set_IfcStructuralResultGroup_1_n::iterator it = (value->getHasResults()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getHasResults()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcStructuralConnection(IfcStructuralConnection *value)
{
    outputStream() << "#" << value->getKey() << "=IFCSTRUCTURALCONNECTION(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectPlacement()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectPlacement()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRepresentation()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRepresentation()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getAppliedCondition()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getAppliedCondition()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcStructuralConnectionCondition(IfcStructuralConnectionCondition *value)
{
    outputStream() << "#" << value->getKey() << "=IFCSTRUCTURALCONNECTIONCONDITION(";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcStructuralCurveConnection(IfcStructuralCurveConnection *value)
{
    outputStream() << "#" << value->getKey() << "=IFCSTRUCTURALCURVECONNECTION(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectPlacement()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectPlacement()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRepresentation()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRepresentation()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getAppliedCondition()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getAppliedCondition()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcStructuralCurveMember(IfcStructuralCurveMember *value)
{
    outputStream() << "#" << value->getKey() << "=IFCSTRUCTURALCURVEMEMBER(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectPlacement()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectPlacement()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRepresentation()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRepresentation()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPredefinedType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPredefinedType()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcStructuralCurveMemberVarying(IfcStructuralCurveMemberVarying *value)
{
    outputStream() << "#" << value->getKey() << "=IFCSTRUCTURALCURVEMEMBERVARYING(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectPlacement()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectPlacement()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRepresentation()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRepresentation()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPredefinedType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPredefinedType()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcStructuralItem(IfcStructuralItem *value)
{
    outputStream() << "#" << value->getKey() << "=IFCSTRUCTURALITEM(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectPlacement()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectPlacement()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRepresentation()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRepresentation()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcStructuralLinearAction(IfcStructuralLinearAction *value)
{
    outputStream() << "#" << value->getKey() << "=IFCSTRUCTURALLINEARACTION(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectPlacement()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectPlacement()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRepresentation()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRepresentation()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getAppliedLoad()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getAppliedLoad()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getGlobalOrLocal()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalOrLocal()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDestabilizingLoad()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDestabilizingLoad()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getCausedBy()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getCausedBy()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getProjectedOrTrue()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getProjectedOrTrue()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcStructuralLinearActionVarying(IfcStructuralLinearActionVarying *value)
{
    outputStream() << "#" << value->getKey() << "=IFCSTRUCTURALLINEARACTIONVARYING(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectPlacement()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectPlacement()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRepresentation()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRepresentation()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getAppliedLoad()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getAppliedLoad()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getGlobalOrLocal()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalOrLocal()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDestabilizingLoad()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDestabilizingLoad()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getCausedBy()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getCausedBy()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getProjectedOrTrue()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getProjectedOrTrue()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getVaryingAppliedLoadLocation()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getVaryingAppliedLoadLocation()); 
    }
    outputStream() << ",";
    if (value->testSubsequentAppliedLoads() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getSubsequentAppliedLoads()).size())
            {
                List_IfcStructuralLoad_1_n::iterator it = (value->getSubsequentAppliedLoads()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getSubsequentAppliedLoads()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcStructuralLoad(IfcStructuralLoad *value)
{
    outputStream() << "#" << value->getKey() << "=IFCSTRUCTURALLOAD(";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcStructuralLoadGroup(IfcStructuralLoadGroup *value)
{
    outputStream() << "#" << value->getKey() << "=IFCSTRUCTURALLOADGROUP(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPredefinedType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPredefinedType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getActionType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getActionType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getActionSource()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getActionSource()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getCoefficient()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getCoefficient()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPurpose()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPurpose()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcStructuralLoadLinearForce(IfcStructuralLoadLinearForce *value)
{
    outputStream() << "#" << value->getKey() << "=IFCSTRUCTURALLOADLINEARFORCE(";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getLinearForceX()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getLinearForceX()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getLinearForceY()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getLinearForceY()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getLinearForceZ()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getLinearForceZ()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getLinearMomentX()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getLinearMomentX()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getLinearMomentY()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getLinearMomentY()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getLinearMomentZ()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getLinearMomentZ()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcStructuralLoadPlanarForce(IfcStructuralLoadPlanarForce *value)
{
    outputStream() << "#" << value->getKey() << "=IFCSTRUCTURALLOADPLANARFORCE(";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPlanarForceX()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPlanarForceX()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPlanarForceY()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPlanarForceY()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPlanarForceZ()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPlanarForceZ()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcStructuralLoadSingleDisplacement(IfcStructuralLoadSingleDisplacement *value)
{
    outputStream() << "#" << value->getKey() << "=IFCSTRUCTURALLOADSINGLEDISPLACEMENT(";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDisplacementX()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDisplacementX()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDisplacementY()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDisplacementY()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDisplacementZ()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDisplacementZ()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRotationalDisplacementRX()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRotationalDisplacementRX()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRotationalDisplacementRY()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRotationalDisplacementRY()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRotationalDisplacementRZ()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRotationalDisplacementRZ()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcStructuralLoadSingleDisplacementDistortion(IfcStructuralLoadSingleDisplacementDistortion *value)
{
    outputStream() << "#" << value->getKey() << "=IFCSTRUCTURALLOADSINGLEDISPLACEMENTDISTORTION(";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDisplacementX()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDisplacementX()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDisplacementY()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDisplacementY()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDisplacementZ()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDisplacementZ()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRotationalDisplacementRX()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRotationalDisplacementRX()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRotationalDisplacementRY()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRotationalDisplacementRY()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRotationalDisplacementRZ()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRotationalDisplacementRZ()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDistortion()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDistortion()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcStructuralLoadSingleForce(IfcStructuralLoadSingleForce *value)
{
    outputStream() << "#" << value->getKey() << "=IFCSTRUCTURALLOADSINGLEFORCE(";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getForceX()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getForceX()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getForceY()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getForceY()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getForceZ()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getForceZ()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getMomentX()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getMomentX()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getMomentY()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getMomentY()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getMomentZ()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getMomentZ()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcStructuralLoadSingleForceWarping(IfcStructuralLoadSingleForceWarping *value)
{
    outputStream() << "#" << value->getKey() << "=IFCSTRUCTURALLOADSINGLEFORCEWARPING(";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getForceX()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getForceX()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getForceY()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getForceY()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getForceZ()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getForceZ()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getMomentX()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getMomentX()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getMomentY()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getMomentY()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getMomentZ()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getMomentZ()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getWarpingMoment()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getWarpingMoment()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcStructuralLoadStatic(IfcStructuralLoadStatic *value)
{
    outputStream() << "#" << value->getKey() << "=IFCSTRUCTURALLOADSTATIC(";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcStructuralLoadTemperature(IfcStructuralLoadTemperature *value)
{
    outputStream() << "#" << value->getKey() << "=IFCSTRUCTURALLOADTEMPERATURE(";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDeltaT_Constant()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDeltaT_Constant()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDeltaT_Y()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDeltaT_Y()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDeltaT_Z()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDeltaT_Z()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcStructuralMember(IfcStructuralMember *value)
{
    outputStream() << "#" << value->getKey() << "=IFCSTRUCTURALMEMBER(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectPlacement()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectPlacement()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRepresentation()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRepresentation()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcStructuralPlanarAction(IfcStructuralPlanarAction *value)
{
    outputStream() << "#" << value->getKey() << "=IFCSTRUCTURALPLANARACTION(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectPlacement()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectPlacement()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRepresentation()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRepresentation()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getAppliedLoad()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getAppliedLoad()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getGlobalOrLocal()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalOrLocal()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDestabilizingLoad()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDestabilizingLoad()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getCausedBy()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getCausedBy()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getProjectedOrTrue()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getProjectedOrTrue()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcStructuralPlanarActionVarying(IfcStructuralPlanarActionVarying *value)
{
    outputStream() << "#" << value->getKey() << "=IFCSTRUCTURALPLANARACTIONVARYING(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectPlacement()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectPlacement()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRepresentation()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRepresentation()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getAppliedLoad()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getAppliedLoad()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getGlobalOrLocal()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalOrLocal()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDestabilizingLoad()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDestabilizingLoad()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getCausedBy()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getCausedBy()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getProjectedOrTrue()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getProjectedOrTrue()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getVaryingAppliedLoadLocation()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getVaryingAppliedLoadLocation()); 
    }
    outputStream() << ",";
    if (value->testSubsequentAppliedLoads() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getSubsequentAppliedLoads()).size())
            {
                List_IfcStructuralLoad_2_n::iterator it = (value->getSubsequentAppliedLoads()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getSubsequentAppliedLoads()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcStructuralPointAction(IfcStructuralPointAction *value)
{
    outputStream() << "#" << value->getKey() << "=IFCSTRUCTURALPOINTACTION(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectPlacement()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectPlacement()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRepresentation()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRepresentation()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getAppliedLoad()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getAppliedLoad()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getGlobalOrLocal()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalOrLocal()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDestabilizingLoad()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDestabilizingLoad()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getCausedBy()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getCausedBy()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcStructuralPointConnection(IfcStructuralPointConnection *value)
{
    outputStream() << "#" << value->getKey() << "=IFCSTRUCTURALPOINTCONNECTION(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectPlacement()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectPlacement()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRepresentation()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRepresentation()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getAppliedCondition()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getAppliedCondition()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcStructuralPointReaction(IfcStructuralPointReaction *value)
{
    outputStream() << "#" << value->getKey() << "=IFCSTRUCTURALPOINTREACTION(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectPlacement()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectPlacement()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRepresentation()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRepresentation()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getAppliedLoad()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getAppliedLoad()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getGlobalOrLocal()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalOrLocal()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcStructuralProfileProperties(IfcStructuralProfileProperties *value)
{
    outputStream() << "#" << value->getKey() << "=IFCSTRUCTURALPROFILEPROPERTIES(";
    if (Step::isUnset(value->getProfileName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getProfileName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getProfileDefinition()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getProfileDefinition()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPhysicalWeight()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPhysicalWeight()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPerimeter()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPerimeter()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getMinimumPlateThickness()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getMinimumPlateThickness()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getMaximumPlateThickness()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getMaximumPlateThickness()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getCrossSectionArea()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getCrossSectionArea()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTorsionalConstantX()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTorsionalConstantX()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getMomentOfInertiaYZ()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getMomentOfInertiaYZ()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getMomentOfInertiaY()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getMomentOfInertiaY()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getMomentOfInertiaZ()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getMomentOfInertiaZ()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getWarpingConstant()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getWarpingConstant()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getShearCentreZ()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getShearCentreZ()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getShearCentreY()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getShearCentreY()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getShearDeformationAreaZ()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getShearDeformationAreaZ()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getShearDeformationAreaY()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getShearDeformationAreaY()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getMaximumSectionModulusY()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getMaximumSectionModulusY()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getMinimumSectionModulusY()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getMinimumSectionModulusY()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getMaximumSectionModulusZ()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getMaximumSectionModulusZ()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getMinimumSectionModulusZ()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getMinimumSectionModulusZ()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTorsionalSectionModulus()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTorsionalSectionModulus()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getCentreOfGravityInX()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getCentreOfGravityInX()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getCentreOfGravityInY()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getCentreOfGravityInY()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcStructuralReaction(IfcStructuralReaction *value)
{
    outputStream() << "#" << value->getKey() << "=IFCSTRUCTURALREACTION(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectPlacement()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectPlacement()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRepresentation()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRepresentation()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getAppliedLoad()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getAppliedLoad()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getGlobalOrLocal()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalOrLocal()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcStructuralResultGroup(IfcStructuralResultGroup *value)
{
    outputStream() << "#" << value->getKey() << "=IFCSTRUCTURALRESULTGROUP(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTheoryType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTheoryType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getResultForLoadGroup()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getResultForLoadGroup()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getIsLinear()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getIsLinear()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcStructuralSteelProfileProperties(IfcStructuralSteelProfileProperties *value)
{
    outputStream() << "#" << value->getKey() << "=IFCSTRUCTURALSTEELPROFILEPROPERTIES(";
    if (Step::isUnset(value->getProfileName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getProfileName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getProfileDefinition()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getProfileDefinition()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPhysicalWeight()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPhysicalWeight()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPerimeter()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPerimeter()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getMinimumPlateThickness()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getMinimumPlateThickness()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getMaximumPlateThickness()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getMaximumPlateThickness()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getCrossSectionArea()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getCrossSectionArea()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTorsionalConstantX()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTorsionalConstantX()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getMomentOfInertiaYZ()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getMomentOfInertiaYZ()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getMomentOfInertiaY()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getMomentOfInertiaY()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getMomentOfInertiaZ()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getMomentOfInertiaZ()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getWarpingConstant()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getWarpingConstant()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getShearCentreZ()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getShearCentreZ()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getShearCentreY()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getShearCentreY()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getShearDeformationAreaZ()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getShearDeformationAreaZ()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getShearDeformationAreaY()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getShearDeformationAreaY()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getMaximumSectionModulusY()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getMaximumSectionModulusY()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getMinimumSectionModulusY()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getMinimumSectionModulusY()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getMaximumSectionModulusZ()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getMaximumSectionModulusZ()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getMinimumSectionModulusZ()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getMinimumSectionModulusZ()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTorsionalSectionModulus()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTorsionalSectionModulus()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getCentreOfGravityInX()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getCentreOfGravityInX()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getCentreOfGravityInY()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getCentreOfGravityInY()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getShearAreaZ()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getShearAreaZ()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getShearAreaY()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getShearAreaY()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPlasticShapeFactorY()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPlasticShapeFactorY()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPlasticShapeFactorZ()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPlasticShapeFactorZ()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcStructuralSurfaceConnection(IfcStructuralSurfaceConnection *value)
{
    outputStream() << "#" << value->getKey() << "=IFCSTRUCTURALSURFACECONNECTION(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectPlacement()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectPlacement()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRepresentation()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRepresentation()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getAppliedCondition()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getAppliedCondition()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcStructuralSurfaceMember(IfcStructuralSurfaceMember *value)
{
    outputStream() << "#" << value->getKey() << "=IFCSTRUCTURALSURFACEMEMBER(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectPlacement()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectPlacement()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRepresentation()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRepresentation()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPredefinedType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPredefinedType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getThickness()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getThickness()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcStructuralSurfaceMemberVarying(IfcStructuralSurfaceMemberVarying *value)
{
    outputStream() << "#" << value->getKey() << "=IFCSTRUCTURALSURFACEMEMBERVARYING(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectPlacement()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectPlacement()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRepresentation()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRepresentation()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPredefinedType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPredefinedType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getThickness()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getThickness()); 
    }
    outputStream() << ",";
    if (value->testSubsequentThickness() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getSubsequentThickness()).size())
            {
                List_IfcPositiveLengthMeasure_2_n::iterator it = (value->getSubsequentThickness()).begin();
                writeAttribute(*it);
                for (it++; it != (value->getSubsequentThickness()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute(*it);
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getVaryingThicknessLocation()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getVaryingThicknessLocation()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcStructuredDimensionCallout(IfcStructuredDimensionCallout *value)
{
    outputStream() << "#" << value->getKey() << "=IFCSTRUCTUREDDIMENSIONCALLOUT(";
    if (value->testContents() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getContents()).size())
            {
                Set_IfcDraughtingCalloutElement_1_n::iterator it = (value->getContents()).begin();
                writeIfcDraughtingCalloutElement((*it).get());
                for (it++; it != (value->getContents()).end(); it++)
                {
                    outputStream() << ",";
                    writeIfcDraughtingCalloutElement((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcStyledItem(IfcStyledItem *value)
{
    outputStream() << "#" << value->getKey() << "=IFCSTYLEDITEM(";
    if (Step::isUnset(value->getItem()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getItem()); 
    }
    outputStream() << ",";
    if (value->testStyles() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getStyles()).size())
            {
                Set_IfcPresentationStyleAssignment_1_n::iterator it = (value->getStyles()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getStyles()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcStyledRepresentation(IfcStyledRepresentation *value)
{
    outputStream() << "#" << value->getKey() << "=IFCSTYLEDREPRESENTATION(";
    if (Step::isUnset(value->getContextOfItems()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getContextOfItems()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRepresentationIdentifier()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRepresentationIdentifier()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRepresentationType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRepresentationType()); 
    }
    outputStream() << ",";
    if (value->testItems() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getItems()).size())
            {
                Set_IfcRepresentationItem_1_n::iterator it = (value->getItems()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getItems()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcStyleModel(IfcStyleModel *value)
{
    outputStream() << "#" << value->getKey() << "=IFCSTYLEMODEL(";
    if (Step::isUnset(value->getContextOfItems()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getContextOfItems()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRepresentationIdentifier()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRepresentationIdentifier()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRepresentationType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRepresentationType()); 
    }
    outputStream() << ",";
    if (value->testItems() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getItems()).size())
            {
                Set_IfcRepresentationItem_1_n::iterator it = (value->getItems()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getItems()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcSubContractResource(IfcSubContractResource *value)
{
    outputStream() << "#" << value->getKey() << "=IFCSUBCONTRACTRESOURCE(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getResourceIdentifier()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getResourceIdentifier()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getResourceGroup()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getResourceGroup()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getResourceConsumption()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getResourceConsumption()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getBaseQuantity()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getBaseQuantity()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getSubContractor()))
    {
        outputStream() << "$";
    }
    else
    {
        writeIfcActorSelect(value->getSubContractor());
    }
    outputStream() << ",";
    if (Step::isUnset(value->getJobDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getJobDescription()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcSubedge(IfcSubedge *value)
{
    outputStream() << "#" << value->getKey() << "=IFCSUBEDGE(";
    if (Step::isUnset(value->getEdgeStart()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getEdgeStart()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getEdgeEnd()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getEdgeEnd()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getParentEdge()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getParentEdge()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcSurface(IfcSurface *value)
{
    outputStream() << "#" << value->getKey() << "=IFCSURFACE(";
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcSurfaceCurveSweptAreaSolid(IfcSurfaceCurveSweptAreaSolid *value)
{
    outputStream() << "#" << value->getKey() << "=IFCSURFACECURVESWEPTAREASOLID(";
    if (Step::isUnset(value->getSweptArea()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getSweptArea()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPosition()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPosition()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDirectrix()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDirectrix()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getStartParam()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getStartParam()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getEndParam()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getEndParam()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getReferenceSurface()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getReferenceSurface()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcSurfaceOfLinearExtrusion(IfcSurfaceOfLinearExtrusion *value)
{
    outputStream() << "#" << value->getKey() << "=IFCSURFACEOFLINEAREXTRUSION(";
    if (Step::isUnset(value->getSweptCurve()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getSweptCurve()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPosition()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPosition()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getExtrudedDirection()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getExtrudedDirection()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDepth()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDepth()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcSurfaceOfRevolution(IfcSurfaceOfRevolution *value)
{
    outputStream() << "#" << value->getKey() << "=IFCSURFACEOFREVOLUTION(";
    if (Step::isUnset(value->getSweptCurve()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getSweptCurve()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPosition()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPosition()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getAxisPosition()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getAxisPosition()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcSurfaceStyle(IfcSurfaceStyle *value)
{
    outputStream() << "#" << value->getKey() << "=IFCSURFACESTYLE(";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getSide()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getSide()); 
    }
    outputStream() << ",";
    if (value->testStyles() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getStyles()).size())
            {
                Set_IfcSurfaceStyleElementSelect_1_5::iterator it = (value->getStyles()).begin();
                writeIfcSurfaceStyleElementSelect((*it).get());
                for (it++; it != (value->getStyles()).end(); it++)
                {
                    outputStream() << ",";
                    writeIfcSurfaceStyleElementSelect((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcSurfaceStyleLighting(IfcSurfaceStyleLighting *value)
{
    outputStream() << "#" << value->getKey() << "=IFCSURFACESTYLELIGHTING(";
    if (Step::isUnset(value->getDiffuseTransmissionColour()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDiffuseTransmissionColour()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDiffuseReflectionColour()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDiffuseReflectionColour()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTransmissionColour()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTransmissionColour()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getReflectanceColour()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getReflectanceColour()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcSurfaceStyleRefraction(IfcSurfaceStyleRefraction *value)
{
    outputStream() << "#" << value->getKey() << "=IFCSURFACESTYLEREFRACTION(";
    if (Step::isUnset(value->getRefractionIndex()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRefractionIndex()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDispersionFactor()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDispersionFactor()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcSurfaceStyleRendering(IfcSurfaceStyleRendering *value)
{
    outputStream() << "#" << value->getKey() << "=IFCSURFACESTYLERENDERING(";
    if (Step::isUnset(value->getSurfaceColour()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getSurfaceColour()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTransparency()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTransparency()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDiffuseColour()))
    {
        outputStream() << "$";
    }
    else
    {
        writeIfcColourOrFactor(value->getDiffuseColour());
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTransmissionColour()))
    {
        outputStream() << "$";
    }
    else
    {
        writeIfcColourOrFactor(value->getTransmissionColour());
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDiffuseTransmissionColour()))
    {
        outputStream() << "$";
    }
    else
    {
        writeIfcColourOrFactor(value->getDiffuseTransmissionColour());
    }
    outputStream() << ",";
    if (Step::isUnset(value->getReflectionColour()))
    {
        outputStream() << "$";
    }
    else
    {
        writeIfcColourOrFactor(value->getReflectionColour());
    }
    outputStream() << ",";
    if (Step::isUnset(value->getSpecularColour()))
    {
        outputStream() << "$";
    }
    else
    {
        writeIfcColourOrFactor(value->getSpecularColour());
    }
    outputStream() << ",";
    if (Step::isUnset(value->getSpecularHighlight()))
    {
        outputStream() << "$";
    }
    else
    {
        writeIfcSpecularHighlightSelect(value->getSpecularHighlight());
    }
    outputStream() << ",";
    if (Step::isUnset(value->getReflectanceMethod()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getReflectanceMethod()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcSurfaceStyleShading(IfcSurfaceStyleShading *value)
{
    outputStream() << "#" << value->getKey() << "=IFCSURFACESTYLESHADING(";
    if (Step::isUnset(value->getSurfaceColour()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getSurfaceColour()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcSurfaceStyleWithTextures(IfcSurfaceStyleWithTextures *value)
{
    outputStream() << "#" << value->getKey() << "=IFCSURFACESTYLEWITHTEXTURES(";
    if (value->testTextures() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getTextures()).size())
            {
                List_IfcSurfaceTexture_1_n::iterator it = (value->getTextures()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getTextures()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcSurfaceTexture(IfcSurfaceTexture *value)
{
    outputStream() << "#" << value->getKey() << "=IFCSURFACETEXTURE(";
    if (Step::isUnset(value->getRepeatS()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRepeatS()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRepeatT()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRepeatT()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTextureType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTextureType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTextureTransform()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTextureTransform()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcSweptAreaSolid(IfcSweptAreaSolid *value)
{
    outputStream() << "#" << value->getKey() << "=IFCSWEPTAREASOLID(";
    if (Step::isUnset(value->getSweptArea()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getSweptArea()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPosition()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPosition()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcSweptDiskSolid(IfcSweptDiskSolid *value)
{
    outputStream() << "#" << value->getKey() << "=IFCSWEPTDISKSOLID(";
    if (Step::isUnset(value->getDirectrix()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDirectrix()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRadius()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRadius()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getInnerRadius()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getInnerRadius()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getStartParam()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getStartParam()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getEndParam()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getEndParam()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcSweptSurface(IfcSweptSurface *value)
{
    outputStream() << "#" << value->getKey() << "=IFCSWEPTSURFACE(";
    if (Step::isUnset(value->getSweptCurve()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getSweptCurve()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPosition()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPosition()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcSwitchingDeviceType(IfcSwitchingDeviceType *value)
{
    outputStream() << "#" << value->getKey() << "=IFCSWITCHINGDEVICETYPE(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getApplicableOccurrence()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getApplicableOccurrence()); 
    }
    outputStream() << ",";
    if (value->testHasPropertySets() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getHasPropertySets()).size())
            {
                Set_IfcPropertySetDefinition_1_n::iterator it = (value->getHasPropertySets()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getHasPropertySets()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (value->testRepresentationMaps() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRepresentationMaps()).size())
            {
                List_IfcRepresentationMap_1_n::iterator it = (value->getRepresentationMaps()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRepresentationMaps()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getElementType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getElementType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPredefinedType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPredefinedType()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcSymbolStyle(IfcSymbolStyle *value)
{
    outputStream() << "#" << value->getKey() << "=IFCSYMBOLSTYLE(";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getStyleOfSymbol()))
    {
        outputStream() << "$";
    }
    else
    {
        writeIfcSymbolStyleSelect(value->getStyleOfSymbol());
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcSystem(IfcSystem *value)
{
    outputStream() << "#" << value->getKey() << "=IFCSYSTEM(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectType()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcSystemFurnitureElementType(IfcSystemFurnitureElementType *value)
{
    outputStream() << "#" << value->getKey() << "=IFCSYSTEMFURNITUREELEMENTTYPE(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getApplicableOccurrence()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getApplicableOccurrence()); 
    }
    outputStream() << ",";
    if (value->testHasPropertySets() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getHasPropertySets()).size())
            {
                Set_IfcPropertySetDefinition_1_n::iterator it = (value->getHasPropertySets()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getHasPropertySets()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (value->testRepresentationMaps() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRepresentationMaps()).size())
            {
                List_IfcRepresentationMap_1_n::iterator it = (value->getRepresentationMaps()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRepresentationMaps()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getElementType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getElementType()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcTable(IfcTable *value)
{
    outputStream() << "#" << value->getKey() << "=IFCTABLE(";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (value->testRows() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRows()).size())
            {
                List_IfcTableRow_1_n::iterator it = (value->getRows()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRows()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcTableRow(IfcTableRow *value)
{
    outputStream() << "#" << value->getKey() << "=IFCTABLEROW(";
    if (value->testRowCells() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRowCells()).size())
            {
                List_IfcValue_1_n::iterator it = (value->getRowCells()).begin();
                writeIfcValue((*it).get());
                for (it++; it != (value->getRowCells()).end(); it++)
                {
                    outputStream() << ",";
                    writeIfcValue((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getIsHeading()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getIsHeading()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcTankType(IfcTankType *value)
{
    outputStream() << "#" << value->getKey() << "=IFCTANKTYPE(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getApplicableOccurrence()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getApplicableOccurrence()); 
    }
    outputStream() << ",";
    if (value->testHasPropertySets() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getHasPropertySets()).size())
            {
                Set_IfcPropertySetDefinition_1_n::iterator it = (value->getHasPropertySets()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getHasPropertySets()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (value->testRepresentationMaps() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRepresentationMaps()).size())
            {
                List_IfcRepresentationMap_1_n::iterator it = (value->getRepresentationMaps()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRepresentationMaps()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getElementType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getElementType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPredefinedType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPredefinedType()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcTask(IfcTask *value)
{
    outputStream() << "#" << value->getKey() << "=IFCTASK(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTaskId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTaskId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getStatus()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getStatus()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getWorkMethod()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getWorkMethod()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getIsMilestone()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getIsMilestone()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPriority()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPriority()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcTelecomAddress(IfcTelecomAddress *value)
{
    outputStream() << "#" << value->getKey() << "=IFCTELECOMADDRESS(";
    if (Step::isUnset(value->getPurpose()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPurpose()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getUserDefinedPurpose()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getUserDefinedPurpose()); 
    }
    outputStream() << ",";
    if (value->testTelephoneNumbers() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getTelephoneNumbers()).size())
            {
                List_IfcLabel_1_n::iterator it = (value->getTelephoneNumbers()).begin();
                writeAttribute(*it);
                for (it++; it != (value->getTelephoneNumbers()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute(*it);
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (value->testFacsimileNumbers() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getFacsimileNumbers()).size())
            {
                List_IfcLabel_1_n::iterator it = (value->getFacsimileNumbers()).begin();
                writeAttribute(*it);
                for (it++; it != (value->getFacsimileNumbers()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute(*it);
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPagerNumber()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPagerNumber()); 
    }
    outputStream() << ",";
    if (value->testElectronicMailAddresses() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getElectronicMailAddresses()).size())
            {
                List_IfcLabel_1_n::iterator it = (value->getElectronicMailAddresses()).begin();
                writeAttribute(*it);
                for (it++; it != (value->getElectronicMailAddresses()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute(*it);
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getWWWHomePageURL()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getWWWHomePageURL()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcTendon(IfcTendon *value)
{
    outputStream() << "#" << value->getKey() << "=IFCTENDON(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectPlacement()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectPlacement()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRepresentation()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRepresentation()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getSteelGrade()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getSteelGrade()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPredefinedType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPredefinedType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getNominalDiameter()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getNominalDiameter()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getCrossSectionArea()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getCrossSectionArea()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTensionForce()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTensionForce()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPreStress()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPreStress()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getFrictionCoefficient()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getFrictionCoefficient()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getAnchorageSlip()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getAnchorageSlip()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getMinCurvatureRadius()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getMinCurvatureRadius()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcTendonAnchor(IfcTendonAnchor *value)
{
    outputStream() << "#" << value->getKey() << "=IFCTENDONANCHOR(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectPlacement()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectPlacement()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRepresentation()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRepresentation()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getSteelGrade()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getSteelGrade()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcTerminatorSymbol(IfcTerminatorSymbol *value)
{
    outputStream() << "#" << value->getKey() << "=IFCTERMINATORSYMBOL(";
    if (Step::isUnset(value->getItem()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getItem()); 
    }
    outputStream() << ",";
    if (value->testStyles() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getStyles()).size())
            {
                Set_IfcPresentationStyleAssignment_1_n::iterator it = (value->getStyles()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getStyles()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getAnnotatedCurve()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getAnnotatedCurve()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcTextLiteral(IfcTextLiteral *value)
{
    outputStream() << "#" << value->getKey() << "=IFCTEXTLITERAL(";
    if (Step::isUnset(value->getLiteral()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getLiteral()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPlacement()))
    {
        outputStream() << "$";
    }
    else
    {
        writeIfcAxis2Placement(value->getPlacement());
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPath()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPath()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcTextLiteralWithExtent(IfcTextLiteralWithExtent *value)
{
    outputStream() << "#" << value->getKey() << "=IFCTEXTLITERALWITHEXTENT(";
    if (Step::isUnset(value->getLiteral()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getLiteral()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPlacement()))
    {
        outputStream() << "$";
    }
    else
    {
        writeIfcAxis2Placement(value->getPlacement());
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPath()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPath()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getExtent()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getExtent()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getBoxAlignment()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getBoxAlignment()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcTextStyle(IfcTextStyle *value)
{
    outputStream() << "#" << value->getKey() << "=IFCTEXTSTYLE(";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTextCharacterAppearance()))
    {
        outputStream() << "$";
    }
    else
    {
        writeIfcCharacterStyleSelect(value->getTextCharacterAppearance());
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTextStyle()))
    {
        outputStream() << "$";
    }
    else
    {
        writeIfcTextStyleSelect(value->getTextStyle());
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTextFontStyle()))
    {
        outputStream() << "$";
    }
    else
    {
        writeIfcTextFontSelect(value->getTextFontStyle());
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcTextStyleFontModel(IfcTextStyleFontModel *value)
{
    outputStream() << "#" << value->getKey() << "=IFCTEXTSTYLEFONTMODEL(";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (value->testFontFamily() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getFontFamily()).size())
            {
                List_IfcTextFontName_1_n::iterator it = (value->getFontFamily()).begin();
                writeAttribute(*it);
                for (it++; it != (value->getFontFamily()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute(*it);
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getFontStyle()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getFontStyle()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getFontVariant()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getFontVariant()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getFontWeight()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getFontWeight()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getFontSize()))
    {
        outputStream() << "$";
    }
    else
    {
        writeIfcSizeSelect(value->getFontSize());
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcTextStyleForDefinedFont(IfcTextStyleForDefinedFont *value)
{
    outputStream() << "#" << value->getKey() << "=IFCTEXTSTYLEFORDEFINEDFONT(";
    if (Step::isUnset(value->getColour()))
    {
        outputStream() << "$";
    }
    else
    {
        writeIfcColour(value->getColour());
    }
    outputStream() << ",";
    if (Step::isUnset(value->getBackgroundColour()))
    {
        outputStream() << "$";
    }
    else
    {
        writeIfcColour(value->getBackgroundColour());
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcTextStyleTextModel(IfcTextStyleTextModel *value)
{
    outputStream() << "#" << value->getKey() << "=IFCTEXTSTYLETEXTMODEL(";
    if (Step::isUnset(value->getTextIndent()))
    {
        outputStream() << "$";
    }
    else
    {
        writeIfcSizeSelect(value->getTextIndent());
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTextAlign()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTextAlign()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTextDecoration()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTextDecoration()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getLetterSpacing()))
    {
        outputStream() << "$";
    }
    else
    {
        writeIfcSizeSelect(value->getLetterSpacing());
    }
    outputStream() << ",";
    if (Step::isUnset(value->getWordSpacing()))
    {
        outputStream() << "$";
    }
    else
    {
        writeIfcSizeSelect(value->getWordSpacing());
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTextTransform()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTextTransform()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getLineHeight()))
    {
        outputStream() << "$";
    }
    else
    {
        writeIfcSizeSelect(value->getLineHeight());
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcTextStyleWithBoxCharacteristics(IfcTextStyleWithBoxCharacteristics *value)
{
    outputStream() << "#" << value->getKey() << "=IFCTEXTSTYLEWITHBOXCHARACTERISTICS(";
    if (Step::isUnset(value->getBoxHeight()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getBoxHeight()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getBoxWidth()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getBoxWidth()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getBoxSlantAngle()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getBoxSlantAngle()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getBoxRotateAngle()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getBoxRotateAngle()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getCharacterSpacing()))
    {
        outputStream() << "$";
    }
    else
    {
        writeIfcSizeSelect(value->getCharacterSpacing());
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcTextureCoordinate(IfcTextureCoordinate *value)
{
    outputStream() << "#" << value->getKey() << "=IFCTEXTURECOORDINATE(";
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcTextureCoordinateGenerator(IfcTextureCoordinateGenerator *value)
{
    outputStream() << "#" << value->getKey() << "=IFCTEXTURECOORDINATEGENERATOR(";
    if (Step::isUnset(value->getMode()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getMode()); 
    }
    outputStream() << ",";
    if (value->testParameter() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getParameter()).size())
            {
                List_IfcSimpleValue_1_n::iterator it = (value->getParameter()).begin();
                writeIfcSimpleValue((*it).get());
                for (it++; it != (value->getParameter()).end(); it++)
                {
                    outputStream() << ",";
                    writeIfcSimpleValue((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcTextureMap(IfcTextureMap *value)
{
    outputStream() << "#" << value->getKey() << "=IFCTEXTUREMAP(";
    if (value->testTextureMaps() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getTextureMaps()).size())
            {
                Set_IfcVertexBasedTextureMap_1_n::iterator it = (value->getTextureMaps()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getTextureMaps()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcTextureVertex(IfcTextureVertex *value)
{
    outputStream() << "#" << value->getKey() << "=IFCTEXTUREVERTEX(";
    if (value->testCoordinates() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getCoordinates()).size())
            {
                List_IfcParameterValue_2_2::iterator it = (value->getCoordinates()).begin();
                writeAttribute(*it);
                for (it++; it != (value->getCoordinates()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute(*it);
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcThermalMaterialProperties(IfcThermalMaterialProperties *value)
{
    outputStream() << "#" << value->getKey() << "=IFCTHERMALMATERIALPROPERTIES(";
    if (Step::isUnset(value->getMaterial()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getMaterial()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getSpecificHeatCapacity()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getSpecificHeatCapacity()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getBoilingPoint()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getBoilingPoint()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getFreezingPoint()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getFreezingPoint()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getThermalConductivity()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getThermalConductivity()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcTimeSeries(IfcTimeSeries *value)
{
    outputStream() << "#" << value->getKey() << "=IFCTIMESERIES(";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getStartTime()))
    {
        outputStream() << "$";
    }
    else
    {
        writeIfcDateTimeSelect(value->getStartTime());
    }
    outputStream() << ",";
    if (Step::isUnset(value->getEndTime()))
    {
        outputStream() << "$";
    }
    else
    {
        writeIfcDateTimeSelect(value->getEndTime());
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTimeSeriesDataType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTimeSeriesDataType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDataOrigin()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDataOrigin()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getUserDefinedDataOrigin()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getUserDefinedDataOrigin()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getUnit()))
    {
        outputStream() << "$";
    }
    else
    {
        writeIfcUnit(value->getUnit());
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcTimeSeriesReferenceRelationship(IfcTimeSeriesReferenceRelationship *value)
{
    outputStream() << "#" << value->getKey() << "=IFCTIMESERIESREFERENCERELATIONSHIP(";
    if (Step::isUnset(value->getReferencedTimeSeries()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getReferencedTimeSeries()); 
    }
    outputStream() << ",";
    if (value->testTimeSeriesReferences() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getTimeSeriesReferences()).size())
            {
                Set_IfcDocumentSelect_1_n::iterator it = (value->getTimeSeriesReferences()).begin();
                writeIfcDocumentSelect((*it).get());
                for (it++; it != (value->getTimeSeriesReferences()).end(); it++)
                {
                    outputStream() << ",";
                    writeIfcDocumentSelect((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcTimeSeriesSchedule(IfcTimeSeriesSchedule *value)
{
    outputStream() << "#" << value->getKey() << "=IFCTIMESERIESSCHEDULE(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectType()); 
    }
    outputStream() << ",";
    if (value->testApplicableDates() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getApplicableDates()).size())
            {
                List_IfcDateTimeSelect_1_n::iterator it = (value->getApplicableDates()).begin();
                writeIfcDateTimeSelect((*it).get());
                for (it++; it != (value->getApplicableDates()).end(); it++)
                {
                    outputStream() << ",";
                    writeIfcDateTimeSelect((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTimeSeriesScheduleType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTimeSeriesScheduleType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTimeSeries()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTimeSeries()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcTimeSeriesValue(IfcTimeSeriesValue *value)
{
    outputStream() << "#" << value->getKey() << "=IFCTIMESERIESVALUE(";
    if (value->testListValues() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getListValues()).size())
            {
                List_IfcValue_1_n::iterator it = (value->getListValues()).begin();
                writeIfcValue((*it).get());
                for (it++; it != (value->getListValues()).end(); it++)
                {
                    outputStream() << ",";
                    writeIfcValue((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcTopologicalRepresentationItem(IfcTopologicalRepresentationItem *value)
{
    outputStream() << "#" << value->getKey() << "=IFCTOPOLOGICALREPRESENTATIONITEM(";
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcTopologyRepresentation(IfcTopologyRepresentation *value)
{
    outputStream() << "#" << value->getKey() << "=IFCTOPOLOGYREPRESENTATION(";
    if (Step::isUnset(value->getContextOfItems()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getContextOfItems()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRepresentationIdentifier()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRepresentationIdentifier()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRepresentationType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRepresentationType()); 
    }
    outputStream() << ",";
    if (value->testItems() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getItems()).size())
            {
                Set_IfcRepresentationItem_1_n::iterator it = (value->getItems()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getItems()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcTransformerType(IfcTransformerType *value)
{
    outputStream() << "#" << value->getKey() << "=IFCTRANSFORMERTYPE(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getApplicableOccurrence()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getApplicableOccurrence()); 
    }
    outputStream() << ",";
    if (value->testHasPropertySets() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getHasPropertySets()).size())
            {
                Set_IfcPropertySetDefinition_1_n::iterator it = (value->getHasPropertySets()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getHasPropertySets()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (value->testRepresentationMaps() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRepresentationMaps()).size())
            {
                List_IfcRepresentationMap_1_n::iterator it = (value->getRepresentationMaps()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRepresentationMaps()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getElementType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getElementType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPredefinedType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPredefinedType()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcTransportElement(IfcTransportElement *value)
{
    outputStream() << "#" << value->getKey() << "=IFCTRANSPORTELEMENT(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectPlacement()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectPlacement()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRepresentation()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRepresentation()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOperationType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOperationType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getCapacityByWeight()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getCapacityByWeight()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getCapacityByNumber()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getCapacityByNumber()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcTransportElementType(IfcTransportElementType *value)
{
    outputStream() << "#" << value->getKey() << "=IFCTRANSPORTELEMENTTYPE(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getApplicableOccurrence()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getApplicableOccurrence()); 
    }
    outputStream() << ",";
    if (value->testHasPropertySets() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getHasPropertySets()).size())
            {
                Set_IfcPropertySetDefinition_1_n::iterator it = (value->getHasPropertySets()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getHasPropertySets()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (value->testRepresentationMaps() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRepresentationMaps()).size())
            {
                List_IfcRepresentationMap_1_n::iterator it = (value->getRepresentationMaps()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRepresentationMaps()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getElementType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getElementType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPredefinedType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPredefinedType()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcTrapeziumProfileDef(IfcTrapeziumProfileDef *value)
{
    outputStream() << "#" << value->getKey() << "=IFCTRAPEZIUMPROFILEDEF(";
    if (Step::isUnset(value->getProfileType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getProfileType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getProfileName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getProfileName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPosition()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPosition()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getBottomXDim()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getBottomXDim()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTopXDim()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTopXDim()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getYDim()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getYDim()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTopXOffset()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTopXOffset()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcTrimmedCurve(IfcTrimmedCurve *value)
{
    outputStream() << "#" << value->getKey() << "=IFCTRIMMEDCURVE(";
    if (Step::isUnset(value->getBasisCurve()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getBasisCurve()); 
    }
    outputStream() << ",";
    if (value->testTrim1() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getTrim1()).size())
            {
                Set_IfcTrimmingSelect_1_2::iterator it = (value->getTrim1()).begin();
                writeIfcTrimmingSelect((*it).get());
                for (it++; it != (value->getTrim1()).end(); it++)
                {
                    outputStream() << ",";
                    writeIfcTrimmingSelect((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (value->testTrim2() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getTrim2()).size())
            {
                Set_IfcTrimmingSelect_1_2::iterator it = (value->getTrim2()).begin();
                writeIfcTrimmingSelect((*it).get());
                for (it++; it != (value->getTrim2()).end(); it++)
                {
                    outputStream() << ",";
                    writeIfcTrimmingSelect((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getSenseAgreement()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getSenseAgreement()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getMasterRepresentation()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getMasterRepresentation()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcTShapeProfileDef(IfcTShapeProfileDef *value)
{
    outputStream() << "#" << value->getKey() << "=IFCTSHAPEPROFILEDEF(";
    if (Step::isUnset(value->getProfileType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getProfileType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getProfileName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getProfileName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPosition()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPosition()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDepth()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDepth()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getFlangeWidth()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getFlangeWidth()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getWebThickness()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getWebThickness()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getFlangeThickness()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getFlangeThickness()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getFilletRadius()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getFilletRadius()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getFlangeEdgeRadius()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getFlangeEdgeRadius()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getWebEdgeRadius()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getWebEdgeRadius()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getWebSlope()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getWebSlope()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getFlangeSlope()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getFlangeSlope()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getCentreOfGravityInY()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getCentreOfGravityInY()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcTubeBundleType(IfcTubeBundleType *value)
{
    outputStream() << "#" << value->getKey() << "=IFCTUBEBUNDLETYPE(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getApplicableOccurrence()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getApplicableOccurrence()); 
    }
    outputStream() << ",";
    if (value->testHasPropertySets() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getHasPropertySets()).size())
            {
                Set_IfcPropertySetDefinition_1_n::iterator it = (value->getHasPropertySets()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getHasPropertySets()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (value->testRepresentationMaps() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRepresentationMaps()).size())
            {
                List_IfcRepresentationMap_1_n::iterator it = (value->getRepresentationMaps()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRepresentationMaps()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getElementType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getElementType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPredefinedType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPredefinedType()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcTwoDirectionRepeatFactor(IfcTwoDirectionRepeatFactor *value)
{
    outputStream() << "#" << value->getKey() << "=IFCTWODIRECTIONREPEATFACTOR(";
    if (Step::isUnset(value->getRepeatFactor()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRepeatFactor()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getSecondRepeatFactor()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getSecondRepeatFactor()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcTypeObject(IfcTypeObject *value)
{
    outputStream() << "#" << value->getKey() << "=IFCTYPEOBJECT(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getApplicableOccurrence()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getApplicableOccurrence()); 
    }
    outputStream() << ",";
    if (value->testHasPropertySets() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getHasPropertySets()).size())
            {
                Set_IfcPropertySetDefinition_1_n::iterator it = (value->getHasPropertySets()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getHasPropertySets()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcTypeProduct(IfcTypeProduct *value)
{
    outputStream() << "#" << value->getKey() << "=IFCTYPEPRODUCT(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getApplicableOccurrence()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getApplicableOccurrence()); 
    }
    outputStream() << ",";
    if (value->testHasPropertySets() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getHasPropertySets()).size())
            {
                Set_IfcPropertySetDefinition_1_n::iterator it = (value->getHasPropertySets()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getHasPropertySets()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (value->testRepresentationMaps() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRepresentationMaps()).size())
            {
                List_IfcRepresentationMap_1_n::iterator it = (value->getRepresentationMaps()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRepresentationMaps()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcUnitaryEquipmentType(IfcUnitaryEquipmentType *value)
{
    outputStream() << "#" << value->getKey() << "=IFCUNITARYEQUIPMENTTYPE(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getApplicableOccurrence()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getApplicableOccurrence()); 
    }
    outputStream() << ",";
    if (value->testHasPropertySets() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getHasPropertySets()).size())
            {
                Set_IfcPropertySetDefinition_1_n::iterator it = (value->getHasPropertySets()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getHasPropertySets()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (value->testRepresentationMaps() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRepresentationMaps()).size())
            {
                List_IfcRepresentationMap_1_n::iterator it = (value->getRepresentationMaps()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRepresentationMaps()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getElementType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getElementType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPredefinedType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPredefinedType()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcUnitAssignment(IfcUnitAssignment *value)
{
    outputStream() << "#" << value->getKey() << "=IFCUNITASSIGNMENT(";
    if (value->testUnits() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getUnits()).size())
            {
                Set_IfcUnit_1_n::iterator it = (value->getUnits()).begin();
                writeIfcUnit((*it).get());
                for (it++; it != (value->getUnits()).end(); it++)
                {
                    outputStream() << ",";
                    writeIfcUnit((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcUShapeProfileDef(IfcUShapeProfileDef *value)
{
    outputStream() << "#" << value->getKey() << "=IFCUSHAPEPROFILEDEF(";
    if (Step::isUnset(value->getProfileType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getProfileType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getProfileName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getProfileName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPosition()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPosition()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDepth()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDepth()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getFlangeWidth()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getFlangeWidth()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getWebThickness()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getWebThickness()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getFlangeThickness()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getFlangeThickness()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getFilletRadius()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getFilletRadius()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getEdgeRadius()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getEdgeRadius()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getFlangeSlope()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getFlangeSlope()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getCentreOfGravityInX()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getCentreOfGravityInX()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcValveType(IfcValveType *value)
{
    outputStream() << "#" << value->getKey() << "=IFCVALVETYPE(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getApplicableOccurrence()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getApplicableOccurrence()); 
    }
    outputStream() << ",";
    if (value->testHasPropertySets() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getHasPropertySets()).size())
            {
                Set_IfcPropertySetDefinition_1_n::iterator it = (value->getHasPropertySets()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getHasPropertySets()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (value->testRepresentationMaps() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRepresentationMaps()).size())
            {
                List_IfcRepresentationMap_1_n::iterator it = (value->getRepresentationMaps()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRepresentationMaps()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getElementType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getElementType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPredefinedType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPredefinedType()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcVector(IfcVector *value)
{
    outputStream() << "#" << value->getKey() << "=IFCVECTOR(";
    if (Step::isUnset(value->getOrientation()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOrientation()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getMagnitude()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getMagnitude()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcVertex(IfcVertex *value)
{
    outputStream() << "#" << value->getKey() << "=IFCVERTEX(";
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcVertexBasedTextureMap(IfcVertexBasedTextureMap *value)
{
    outputStream() << "#" << value->getKey() << "=IFCVERTEXBASEDTEXTUREMAP(";
    if (value->testTextureVertices() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getTextureVertices()).size())
            {
                List_IfcTextureVertex_3_n::iterator it = (value->getTextureVertices()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getTextureVertices()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (value->testTexturePoints() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getTexturePoints()).size())
            {
                List_IfcCartesianPoint_3_n::iterator it = (value->getTexturePoints()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getTexturePoints()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcVertexLoop(IfcVertexLoop *value)
{
    outputStream() << "#" << value->getKey() << "=IFCVERTEXLOOP(";
    if (Step::isUnset(value->getLoopVertex()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getLoopVertex()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcVertexPoint(IfcVertexPoint *value)
{
    outputStream() << "#" << value->getKey() << "=IFCVERTEXPOINT(";
    if (Step::isUnset(value->getVertexGeometry()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getVertexGeometry()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcVibrationIsolatorType(IfcVibrationIsolatorType *value)
{
    outputStream() << "#" << value->getKey() << "=IFCVIBRATIONISOLATORTYPE(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getApplicableOccurrence()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getApplicableOccurrence()); 
    }
    outputStream() << ",";
    if (value->testHasPropertySets() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getHasPropertySets()).size())
            {
                Set_IfcPropertySetDefinition_1_n::iterator it = (value->getHasPropertySets()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getHasPropertySets()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (value->testRepresentationMaps() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRepresentationMaps()).size())
            {
                List_IfcRepresentationMap_1_n::iterator it = (value->getRepresentationMaps()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRepresentationMaps()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getElementType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getElementType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPredefinedType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPredefinedType()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcVirtualElement(IfcVirtualElement *value)
{
    outputStream() << "#" << value->getKey() << "=IFCVIRTUALELEMENT(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectPlacement()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectPlacement()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRepresentation()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRepresentation()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcVirtualGridIntersection(IfcVirtualGridIntersection *value)
{
    outputStream() << "#" << value->getKey() << "=IFCVIRTUALGRIDINTERSECTION(";
    if (value->testIntersectingAxes() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getIntersectingAxes()).size())
            {
                List_IfcGridAxis_2_2::iterator it = (value->getIntersectingAxes()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getIntersectingAxes()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (value->testOffsetDistances() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getOffsetDistances()).size())
            {
                List_IfcLengthMeasure_2_3::iterator it = (value->getOffsetDistances()).begin();
                writeAttribute(*it);
                for (it++; it != (value->getOffsetDistances()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute(*it);
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcWall(IfcWall *value)
{
    outputStream() << "#" << value->getKey() << "=IFCWALL(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectPlacement()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectPlacement()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRepresentation()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRepresentation()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcWallStandardCase(IfcWallStandardCase *value)
{
    outputStream() << "#" << value->getKey() << "=IFCWALLSTANDARDCASE(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectPlacement()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectPlacement()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRepresentation()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRepresentation()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcWallType(IfcWallType *value)
{
    outputStream() << "#" << value->getKey() << "=IFCWALLTYPE(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getApplicableOccurrence()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getApplicableOccurrence()); 
    }
    outputStream() << ",";
    if (value->testHasPropertySets() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getHasPropertySets()).size())
            {
                Set_IfcPropertySetDefinition_1_n::iterator it = (value->getHasPropertySets()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getHasPropertySets()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (value->testRepresentationMaps() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRepresentationMaps()).size())
            {
                List_IfcRepresentationMap_1_n::iterator it = (value->getRepresentationMaps()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRepresentationMaps()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getElementType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getElementType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPredefinedType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPredefinedType()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcWasteTerminalType(IfcWasteTerminalType *value)
{
    outputStream() << "#" << value->getKey() << "=IFCWASTETERMINALTYPE(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getApplicableOccurrence()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getApplicableOccurrence()); 
    }
    outputStream() << ",";
    if (value->testHasPropertySets() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getHasPropertySets()).size())
            {
                Set_IfcPropertySetDefinition_1_n::iterator it = (value->getHasPropertySets()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getHasPropertySets()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (value->testRepresentationMaps() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRepresentationMaps()).size())
            {
                List_IfcRepresentationMap_1_n::iterator it = (value->getRepresentationMaps()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRepresentationMaps()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getElementType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getElementType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPredefinedType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPredefinedType()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcWaterProperties(IfcWaterProperties *value)
{
    outputStream() << "#" << value->getKey() << "=IFCWATERPROPERTIES(";
    if (Step::isUnset(value->getMaterial()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getMaterial()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getIsPotable()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getIsPotable()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getHardness()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getHardness()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getAlkalinityConcentration()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getAlkalinityConcentration()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getAcidityConcentration()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getAcidityConcentration()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getImpuritiesContent()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getImpuritiesContent()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPHLevel()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPHLevel()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDissolvedSolidsContent()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDissolvedSolidsContent()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcWindow(IfcWindow *value)
{
    outputStream() << "#" << value->getKey() << "=IFCWINDOW(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectPlacement()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectPlacement()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getRepresentation()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getRepresentation()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOverallHeight()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOverallHeight()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOverallWidth()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOverallWidth()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcWindowLiningProperties(IfcWindowLiningProperties *value)
{
    outputStream() << "#" << value->getKey() << "=IFCWINDOWLININGPROPERTIES(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getLiningDepth()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getLiningDepth()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getLiningThickness()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getLiningThickness()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTransomThickness()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTransomThickness()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getMullionThickness()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getMullionThickness()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getFirstTransomOffset()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getFirstTransomOffset()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getSecondTransomOffset()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getSecondTransomOffset()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getFirstMullionOffset()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getFirstMullionOffset()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getSecondMullionOffset()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getSecondMullionOffset()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getShapeAspectStyle()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getShapeAspectStyle()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcWindowPanelProperties(IfcWindowPanelProperties *value)
{
    outputStream() << "#" << value->getKey() << "=IFCWINDOWPANELPROPERTIES(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOperationType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOperationType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPanelPosition()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPanelPosition()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getFrameDepth()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getFrameDepth()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getFrameThickness()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getFrameThickness()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getShapeAspectStyle()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getShapeAspectStyle()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcWindowStyle(IfcWindowStyle *value)
{
    outputStream() << "#" << value->getKey() << "=IFCWINDOWSTYLE(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getApplicableOccurrence()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getApplicableOccurrence()); 
    }
    outputStream() << ",";
    if (value->testHasPropertySets() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getHasPropertySets()).size())
            {
                Set_IfcPropertySetDefinition_1_n::iterator it = (value->getHasPropertySets()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getHasPropertySets()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (value->testRepresentationMaps() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getRepresentationMaps()).size())
            {
                List_IfcRepresentationMap_1_n::iterator it = (value->getRepresentationMaps()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getRepresentationMaps()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTag()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTag()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getConstructionType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getConstructionType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOperationType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOperationType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getParameterTakesPrecedence()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getParameterTakesPrecedence()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getSizeable()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getSizeable()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcWorkControl(IfcWorkControl *value)
{
    outputStream() << "#" << value->getKey() << "=IFCWORKCONTROL(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getIdentifier()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getIdentifier()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getCreationDate()))
    {
        outputStream() << "$";
    }
    else
    {
        writeIfcDateTimeSelect(value->getCreationDate());
    }
    outputStream() << ",";
    if (value->testCreators() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getCreators()).size())
            {
                Set_IfcPerson_1_n::iterator it = (value->getCreators()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getCreators()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPurpose()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPurpose()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDuration()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDuration()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTotalFloat()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTotalFloat()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getStartTime()))
    {
        outputStream() << "$";
    }
    else
    {
        writeIfcDateTimeSelect(value->getStartTime());
    }
    outputStream() << ",";
    if (Step::isUnset(value->getFinishTime()))
    {
        outputStream() << "$";
    }
    else
    {
        writeIfcDateTimeSelect(value->getFinishTime());
    }
    outputStream() << ",";
    if (Step::isUnset(value->getWorkControlType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getWorkControlType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getUserDefinedControlType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getUserDefinedControlType()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcWorkPlan(IfcWorkPlan *value)
{
    outputStream() << "#" << value->getKey() << "=IFCWORKPLAN(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getIdentifier()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getIdentifier()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getCreationDate()))
    {
        outputStream() << "$";
    }
    else
    {
        writeIfcDateTimeSelect(value->getCreationDate());
    }
    outputStream() << ",";
    if (value->testCreators() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getCreators()).size())
            {
                Set_IfcPerson_1_n::iterator it = (value->getCreators()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getCreators()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPurpose()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPurpose()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDuration()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDuration()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTotalFloat()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTotalFloat()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getStartTime()))
    {
        outputStream() << "$";
    }
    else
    {
        writeIfcDateTimeSelect(value->getStartTime());
    }
    outputStream() << ",";
    if (Step::isUnset(value->getFinishTime()))
    {
        outputStream() << "$";
    }
    else
    {
        writeIfcDateTimeSelect(value->getFinishTime());
    }
    outputStream() << ",";
    if (Step::isUnset(value->getWorkControlType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getWorkControlType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getUserDefinedControlType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getUserDefinedControlType()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcWorkSchedule(IfcWorkSchedule *value)
{
    outputStream() << "#" << value->getKey() << "=IFCWORKSCHEDULE(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getIdentifier()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getIdentifier()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getCreationDate()))
    {
        outputStream() << "$";
    }
    else
    {
        writeIfcDateTimeSelect(value->getCreationDate());
    }
    outputStream() << ",";
    if (value->testCreators() == false)
    {
        outputStream() << "$";
    }
    else
    {
        outputStream() << "(";
        {
            if ((value->getCreators()).size())
            {
                Set_IfcPerson_1_n::iterator it = (value->getCreators()).begin();
                writeAttribute((*it).get());
                for (it++; it != (value->getCreators()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute((*it).get());
                }
            }
        }
        outputStream() << ")";
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPurpose()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPurpose()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDuration()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDuration()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getTotalFloat()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getTotalFloat()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getStartTime()))
    {
        outputStream() << "$";
    }
    else
    {
        writeIfcDateTimeSelect(value->getStartTime());
    }
    outputStream() << ",";
    if (Step::isUnset(value->getFinishTime()))
    {
        outputStream() << "$";
    }
    else
    {
        writeIfcDateTimeSelect(value->getFinishTime());
    }
    outputStream() << ",";
    if (Step::isUnset(value->getWorkControlType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getWorkControlType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getUserDefinedControlType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getUserDefinedControlType()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcZone(IfcZone *value)
{
    outputStream() << "#" << value->getKey() << "=IFCZONE(";
    if (Step::isUnset(value->getGlobalId()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getGlobalId()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getOwnerHistory()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getOwnerHistory()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDescription()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDescription()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getObjectType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getObjectType()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

bool SPFWriter::visitIfcZShapeProfileDef(IfcZShapeProfileDef *value)
{
    outputStream() << "#" << value->getKey() << "=IFCZSHAPEPROFILEDEF(";
    if (Step::isUnset(value->getProfileType()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getProfileType()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getProfileName()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getProfileName()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getPosition()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getPosition()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getDepth()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getDepth()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getFlangeWidth()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getFlangeWidth()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getWebThickness()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getWebThickness()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getFlangeThickness()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getFlangeThickness()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getFilletRadius()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getFilletRadius()); 
    }
    outputStream() << ",";
    if (Step::isUnset(value->getEdgeRadius()))
    {
        outputStream() << "$";
    }
    else
    {
        writeAttribute(value->getEdgeRadius()); 
    }
    outputStream() << ");" << std::endl;
    return true;
}

void SPFWriter::writeIfcActionSourceTypeEnum(IfcActionSourceTypeEnum enumData)
{
    switch(enumData)
    {
    case IfcActionSourceTypeEnum_DEAD_LOAD_G:
        outputStream() << ".DEAD_LOAD_G.";
        break;
    case IfcActionSourceTypeEnum_COMPLETION_G1:
        outputStream() << ".COMPLETION_G1.";
        break;
    case IfcActionSourceTypeEnum_LIVE_LOAD_Q:
        outputStream() << ".LIVE_LOAD_Q.";
        break;
    case IfcActionSourceTypeEnum_SNOW_S:
        outputStream() << ".SNOW_S.";
        break;
    case IfcActionSourceTypeEnum_WIND_W:
        outputStream() << ".WIND_W.";
        break;
    case IfcActionSourceTypeEnum_PRESTRESSING_P:
        outputStream() << ".PRESTRESSING_P.";
        break;
    case IfcActionSourceTypeEnum_SETTLEMENT_U:
        outputStream() << ".SETTLEMENT_U.";
        break;
    case IfcActionSourceTypeEnum_TEMPERATURE_T:
        outputStream() << ".TEMPERATURE_T.";
        break;
    case IfcActionSourceTypeEnum_EARTHQUAKE_E:
        outputStream() << ".EARTHQUAKE_E.";
        break;
    case IfcActionSourceTypeEnum_FIRE:
        outputStream() << ".FIRE.";
        break;
    case IfcActionSourceTypeEnum_IMPULSE:
        outputStream() << ".IMPULSE.";
        break;
    case IfcActionSourceTypeEnum_IMPACT:
        outputStream() << ".IMPACT.";
        break;
    case IfcActionSourceTypeEnum_TRANSPORT:
        outputStream() << ".TRANSPORT.";
        break;
    case IfcActionSourceTypeEnum_ERECTION:
        outputStream() << ".ERECTION.";
        break;
    case IfcActionSourceTypeEnum_PROPPING:
        outputStream() << ".PROPPING.";
        break;
    case IfcActionSourceTypeEnum_SYSTEM_IMPERFECTION:
        outputStream() << ".SYSTEM_IMPERFECTION.";
        break;
    case IfcActionSourceTypeEnum_SHRINKAGE:
        outputStream() << ".SHRINKAGE.";
        break;
    case IfcActionSourceTypeEnum_CREEP:
        outputStream() << ".CREEP.";
        break;
    case IfcActionSourceTypeEnum_LACK_OF_FIT:
        outputStream() << ".LACK_OF_FIT.";
        break;
    case IfcActionSourceTypeEnum_BUOYANCY:
        outputStream() << ".BUOYANCY.";
        break;
    case IfcActionSourceTypeEnum_ICE:
        outputStream() << ".ICE.";
        break;
    case IfcActionSourceTypeEnum_CURRENT:
        outputStream() << ".CURRENT.";
        break;
    case IfcActionSourceTypeEnum_WAVE:
        outputStream() << ".WAVE.";
        break;
    case IfcActionSourceTypeEnum_RAIN:
        outputStream() << ".RAIN.";
        break;
    case IfcActionSourceTypeEnum_BRAKES:
        outputStream() << ".BRAKES.";
        break;
    case IfcActionSourceTypeEnum_USERDEFINED:
        outputStream() << ".USERDEFINED.";
        break;
    case IfcActionSourceTypeEnum_NOTDEFINED:
        outputStream() << ".NOTDEFINED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcActionTypeEnum(IfcActionTypeEnum enumData)
{
    switch(enumData)
    {
    case IfcActionTypeEnum_PERMANENT_G:
        outputStream() << ".PERMANENT_G.";
        break;
    case IfcActionTypeEnum_VARIABLE_Q:
        outputStream() << ".VARIABLE_Q.";
        break;
    case IfcActionTypeEnum_EXTRAORDINARY_A:
        outputStream() << ".EXTRAORDINARY_A.";
        break;
    case IfcActionTypeEnum_USERDEFINED:
        outputStream() << ".USERDEFINED.";
        break;
    case IfcActionTypeEnum_NOTDEFINED:
        outputStream() << ".NOTDEFINED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcActuatorTypeEnum(IfcActuatorTypeEnum enumData)
{
    switch(enumData)
    {
    case IfcActuatorTypeEnum_ELECTRICACTUATOR:
        outputStream() << ".ELECTRICACTUATOR.";
        break;
    case IfcActuatorTypeEnum_HANDOPERATEDACTUATOR:
        outputStream() << ".HANDOPERATEDACTUATOR.";
        break;
    case IfcActuatorTypeEnum_HYDRAULICACTUATOR:
        outputStream() << ".HYDRAULICACTUATOR.";
        break;
    case IfcActuatorTypeEnum_PNEUMATICACTUATOR:
        outputStream() << ".PNEUMATICACTUATOR.";
        break;
    case IfcActuatorTypeEnum_THERMOSTATICACTUATOR:
        outputStream() << ".THERMOSTATICACTUATOR.";
        break;
    case IfcActuatorTypeEnum_USERDEFINED:
        outputStream() << ".USERDEFINED.";
        break;
    case IfcActuatorTypeEnum_NOTDEFINED:
        outputStream() << ".NOTDEFINED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcAddressTypeEnum(IfcAddressTypeEnum enumData)
{
    switch(enumData)
    {
    case IfcAddressTypeEnum_OFFICE:
        outputStream() << ".OFFICE.";
        break;
    case IfcAddressTypeEnum_SITE:
        outputStream() << ".SITE.";
        break;
    case IfcAddressTypeEnum_HOME:
        outputStream() << ".HOME.";
        break;
    case IfcAddressTypeEnum_DISTRIBUTIONPOINT:
        outputStream() << ".DISTRIBUTIONPOINT.";
        break;
    case IfcAddressTypeEnum_USERDEFINED:
        outputStream() << ".USERDEFINED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcAheadOrBehind(IfcAheadOrBehind enumData)
{
    switch(enumData)
    {
    case IfcAheadOrBehind_AHEAD:
        outputStream() << ".AHEAD.";
        break;
    case IfcAheadOrBehind_BEHIND:
        outputStream() << ".BEHIND.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcAirTerminalBoxTypeEnum(IfcAirTerminalBoxTypeEnum enumData)
{
    switch(enumData)
    {
    case IfcAirTerminalBoxTypeEnum_CONSTANTFLOW:
        outputStream() << ".CONSTANTFLOW.";
        break;
    case IfcAirTerminalBoxTypeEnum_VARIABLEFLOWPRESSUREDEPENDANT:
        outputStream() << ".VARIABLEFLOWPRESSUREDEPENDANT.";
        break;
    case IfcAirTerminalBoxTypeEnum_VARIABLEFLOWPRESSUREINDEPENDANT:
        outputStream() << ".VARIABLEFLOWPRESSUREINDEPENDANT.";
        break;
    case IfcAirTerminalBoxTypeEnum_USERDEFINED:
        outputStream() << ".USERDEFINED.";
        break;
    case IfcAirTerminalBoxTypeEnum_NOTDEFINED:
        outputStream() << ".NOTDEFINED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcAirTerminalTypeEnum(IfcAirTerminalTypeEnum enumData)
{
    switch(enumData)
    {
    case IfcAirTerminalTypeEnum_GRILLE:
        outputStream() << ".GRILLE.";
        break;
    case IfcAirTerminalTypeEnum_REGISTER:
        outputStream() << ".REGISTER.";
        break;
    case IfcAirTerminalTypeEnum_DIFFUSER:
        outputStream() << ".DIFFUSER.";
        break;
    case IfcAirTerminalTypeEnum_EYEBALL:
        outputStream() << ".EYEBALL.";
        break;
    case IfcAirTerminalTypeEnum_IRIS:
        outputStream() << ".IRIS.";
        break;
    case IfcAirTerminalTypeEnum_LINEARGRILLE:
        outputStream() << ".LINEARGRILLE.";
        break;
    case IfcAirTerminalTypeEnum_LINEARDIFFUSER:
        outputStream() << ".LINEARDIFFUSER.";
        break;
    case IfcAirTerminalTypeEnum_USERDEFINED:
        outputStream() << ".USERDEFINED.";
        break;
    case IfcAirTerminalTypeEnum_NOTDEFINED:
        outputStream() << ".NOTDEFINED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcAirToAirHeatRecoveryTypeEnum(IfcAirToAirHeatRecoveryTypeEnum enumData)
{
    switch(enumData)
    {
    case IfcAirToAirHeatRecoveryTypeEnum_FIXEDPLATECOUNTERFLOWEXCHANGER:
        outputStream() << ".FIXEDPLATECOUNTERFLOWEXCHANGER.";
        break;
    case IfcAirToAirHeatRecoveryTypeEnum_FIXEDPLATECROSSFLOWEXCHANGER:
        outputStream() << ".FIXEDPLATECROSSFLOWEXCHANGER.";
        break;
    case IfcAirToAirHeatRecoveryTypeEnum_FIXEDPLATEPARALLELFLOWEXCHANGER:
        outputStream() << ".FIXEDPLATEPARALLELFLOWEXCHANGER.";
        break;
    case IfcAirToAirHeatRecoveryTypeEnum_ROTARYWHEEL:
        outputStream() << ".ROTARYWHEEL.";
        break;
    case IfcAirToAirHeatRecoveryTypeEnum_RUNAROUNDCOILLOOP:
        outputStream() << ".RUNAROUNDCOILLOOP.";
        break;
    case IfcAirToAirHeatRecoveryTypeEnum_HEATPIPE:
        outputStream() << ".HEATPIPE.";
        break;
    case IfcAirToAirHeatRecoveryTypeEnum_TWINTOWERENTHALPYRECOVERYLOOPS:
        outputStream() << ".TWINTOWERENTHALPYRECOVERYLOOPS.";
        break;
    case IfcAirToAirHeatRecoveryTypeEnum_THERMOSIPHONSEALEDTUBEHEATEXCHANGERS:
        outputStream() << ".THERMOSIPHONSEALEDTUBEHEATEXCHANGERS.";
        break;
    case IfcAirToAirHeatRecoveryTypeEnum_THERMOSIPHONCOILTYPEHEATEXCHANGERS:
        outputStream() << ".THERMOSIPHONCOILTYPEHEATEXCHANGERS.";
        break;
    case IfcAirToAirHeatRecoveryTypeEnum_USERDEFINED:
        outputStream() << ".USERDEFINED.";
        break;
    case IfcAirToAirHeatRecoveryTypeEnum_NOTDEFINED:
        outputStream() << ".NOTDEFINED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcAlarmTypeEnum(IfcAlarmTypeEnum enumData)
{
    switch(enumData)
    {
    case IfcAlarmTypeEnum_BELL:
        outputStream() << ".BELL.";
        break;
    case IfcAlarmTypeEnum_BREAKGLASSBUTTON:
        outputStream() << ".BREAKGLASSBUTTON.";
        break;
    case IfcAlarmTypeEnum_LIGHT:
        outputStream() << ".LIGHT.";
        break;
    case IfcAlarmTypeEnum_MANUALPULLBOX:
        outputStream() << ".MANUALPULLBOX.";
        break;
    case IfcAlarmTypeEnum_SIREN:
        outputStream() << ".SIREN.";
        break;
    case IfcAlarmTypeEnum_WHISTLE:
        outputStream() << ".WHISTLE.";
        break;
    case IfcAlarmTypeEnum_USERDEFINED:
        outputStream() << ".USERDEFINED.";
        break;
    case IfcAlarmTypeEnum_NOTDEFINED:
        outputStream() << ".NOTDEFINED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcAnalysisModelTypeEnum(IfcAnalysisModelTypeEnum enumData)
{
    switch(enumData)
    {
    case IfcAnalysisModelTypeEnum_IN_PLANE_LOADING_2D:
        outputStream() << ".IN_PLANE_LOADING_2D.";
        break;
    case IfcAnalysisModelTypeEnum_OUT_PLANE_LOADING_2D:
        outputStream() << ".OUT_PLANE_LOADING_2D.";
        break;
    case IfcAnalysisModelTypeEnum_LOADING_3D:
        outputStream() << ".LOADING_3D.";
        break;
    case IfcAnalysisModelTypeEnum_USERDEFINED:
        outputStream() << ".USERDEFINED.";
        break;
    case IfcAnalysisModelTypeEnum_NOTDEFINED:
        outputStream() << ".NOTDEFINED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcAnalysisTheoryTypeEnum(IfcAnalysisTheoryTypeEnum enumData)
{
    switch(enumData)
    {
    case IfcAnalysisTheoryTypeEnum_FIRST_ORDER_THEORY:
        outputStream() << ".FIRST_ORDER_THEORY.";
        break;
    case IfcAnalysisTheoryTypeEnum_SECOND_ORDER_THEORY:
        outputStream() << ".SECOND_ORDER_THEORY.";
        break;
    case IfcAnalysisTheoryTypeEnum_THIRD_ORDER_THEORY:
        outputStream() << ".THIRD_ORDER_THEORY.";
        break;
    case IfcAnalysisTheoryTypeEnum_FULL_NONLINEAR_THEORY:
        outputStream() << ".FULL_NONLINEAR_THEORY.";
        break;
    case IfcAnalysisTheoryTypeEnum_USERDEFINED:
        outputStream() << ".USERDEFINED.";
        break;
    case IfcAnalysisTheoryTypeEnum_NOTDEFINED:
        outputStream() << ".NOTDEFINED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcArithmeticOperatorEnum(IfcArithmeticOperatorEnum enumData)
{
    switch(enumData)
    {
    case IfcArithmeticOperatorEnum_ADD:
        outputStream() << ".ADD.";
        break;
    case IfcArithmeticOperatorEnum_DIVIDE:
        outputStream() << ".DIVIDE.";
        break;
    case IfcArithmeticOperatorEnum_MULTIPLY:
        outputStream() << ".MULTIPLY.";
        break;
    case IfcArithmeticOperatorEnum_SUBTRACT:
        outputStream() << ".SUBTRACT.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcAssemblyPlaceEnum(IfcAssemblyPlaceEnum enumData)
{
    switch(enumData)
    {
    case IfcAssemblyPlaceEnum_SITE:
        outputStream() << ".SITE.";
        break;
    case IfcAssemblyPlaceEnum_FACTORY:
        outputStream() << ".FACTORY.";
        break;
    case IfcAssemblyPlaceEnum_NOTDEFINED:
        outputStream() << ".NOTDEFINED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcBeamTypeEnum(IfcBeamTypeEnum enumData)
{
    switch(enumData)
    {
    case IfcBeamTypeEnum_BEAM:
        outputStream() << ".BEAM.";
        break;
    case IfcBeamTypeEnum_JOIST:
        outputStream() << ".JOIST.";
        break;
    case IfcBeamTypeEnum_LINTEL:
        outputStream() << ".LINTEL.";
        break;
    case IfcBeamTypeEnum_T_BEAM:
        outputStream() << ".T_BEAM.";
        break;
    case IfcBeamTypeEnum_USERDEFINED:
        outputStream() << ".USERDEFINED.";
        break;
    case IfcBeamTypeEnum_NOTDEFINED:
        outputStream() << ".NOTDEFINED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcBenchmarkEnum(IfcBenchmarkEnum enumData)
{
    switch(enumData)
    {
    case IfcBenchmarkEnum_GREATERTHAN:
        outputStream() << ".GREATERTHAN.";
        break;
    case IfcBenchmarkEnum_GREATERTHANOREQUALTO:
        outputStream() << ".GREATERTHANOREQUALTO.";
        break;
    case IfcBenchmarkEnum_LESSTHAN:
        outputStream() << ".LESSTHAN.";
        break;
    case IfcBenchmarkEnum_LESSTHANOREQUALTO:
        outputStream() << ".LESSTHANOREQUALTO.";
        break;
    case IfcBenchmarkEnum_EQUALTO:
        outputStream() << ".EQUALTO.";
        break;
    case IfcBenchmarkEnum_NOTEQUALTO:
        outputStream() << ".NOTEQUALTO.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcBoilerTypeEnum(IfcBoilerTypeEnum enumData)
{
    switch(enumData)
    {
    case IfcBoilerTypeEnum_WATER:
        outputStream() << ".WATER.";
        break;
    case IfcBoilerTypeEnum_STEAM:
        outputStream() << ".STEAM.";
        break;
    case IfcBoilerTypeEnum_USERDEFINED:
        outputStream() << ".USERDEFINED.";
        break;
    case IfcBoilerTypeEnum_NOTDEFINED:
        outputStream() << ".NOTDEFINED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcBooleanOperator(IfcBooleanOperator enumData)
{
    switch(enumData)
    {
    case IfcBooleanOperator_UNION:
        outputStream() << ".UNION.";
        break;
    case IfcBooleanOperator_INTERSECTION:
        outputStream() << ".INTERSECTION.";
        break;
    case IfcBooleanOperator_DIFFERENCE:
        outputStream() << ".DIFFERENCE.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcBSplineCurveForm(IfcBSplineCurveForm enumData)
{
    switch(enumData)
    {
    case IfcBSplineCurveForm_POLYLINE_FORM:
        outputStream() << ".POLYLINE_FORM.";
        break;
    case IfcBSplineCurveForm_CIRCULAR_ARC:
        outputStream() << ".CIRCULAR_ARC.";
        break;
    case IfcBSplineCurveForm_ELLIPTIC_ARC:
        outputStream() << ".ELLIPTIC_ARC.";
        break;
    case IfcBSplineCurveForm_PARABOLIC_ARC:
        outputStream() << ".PARABOLIC_ARC.";
        break;
    case IfcBSplineCurveForm_HYPERBOLIC_ARC:
        outputStream() << ".HYPERBOLIC_ARC.";
        break;
    case IfcBSplineCurveForm_UNSPECIFIED:
        outputStream() << ".UNSPECIFIED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcBuildingElementProxyTypeEnum(IfcBuildingElementProxyTypeEnum enumData)
{
    switch(enumData)
    {
    case IfcBuildingElementProxyTypeEnum_USERDEFINED:
        outputStream() << ".USERDEFINED.";
        break;
    case IfcBuildingElementProxyTypeEnum_NOTDEFINED:
        outputStream() << ".NOTDEFINED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcCableCarrierFittingTypeEnum(IfcCableCarrierFittingTypeEnum enumData)
{
    switch(enumData)
    {
    case IfcCableCarrierFittingTypeEnum_BEND:
        outputStream() << ".BEND.";
        break;
    case IfcCableCarrierFittingTypeEnum_CROSS:
        outputStream() << ".CROSS.";
        break;
    case IfcCableCarrierFittingTypeEnum_REDUCER:
        outputStream() << ".REDUCER.";
        break;
    case IfcCableCarrierFittingTypeEnum_TEE:
        outputStream() << ".TEE.";
        break;
    case IfcCableCarrierFittingTypeEnum_USERDEFINED:
        outputStream() << ".USERDEFINED.";
        break;
    case IfcCableCarrierFittingTypeEnum_NOTDEFINED:
        outputStream() << ".NOTDEFINED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcCableCarrierSegmentTypeEnum(IfcCableCarrierSegmentTypeEnum enumData)
{
    switch(enumData)
    {
    case IfcCableCarrierSegmentTypeEnum_CABLELADDERSEGMENT:
        outputStream() << ".CABLELADDERSEGMENT.";
        break;
    case IfcCableCarrierSegmentTypeEnum_CABLETRAYSEGMENT:
        outputStream() << ".CABLETRAYSEGMENT.";
        break;
    case IfcCableCarrierSegmentTypeEnum_CABLETRUNKINGSEGMENT:
        outputStream() << ".CABLETRUNKINGSEGMENT.";
        break;
    case IfcCableCarrierSegmentTypeEnum_CONDUITSEGMENT:
        outputStream() << ".CONDUITSEGMENT.";
        break;
    case IfcCableCarrierSegmentTypeEnum_USERDEFINED:
        outputStream() << ".USERDEFINED.";
        break;
    case IfcCableCarrierSegmentTypeEnum_NOTDEFINED:
        outputStream() << ".NOTDEFINED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcCableSegmentTypeEnum(IfcCableSegmentTypeEnum enumData)
{
    switch(enumData)
    {
    case IfcCableSegmentTypeEnum_CABLESEGMENT:
        outputStream() << ".CABLESEGMENT.";
        break;
    case IfcCableSegmentTypeEnum_CONDUCTORSEGMENT:
        outputStream() << ".CONDUCTORSEGMENT.";
        break;
    case IfcCableSegmentTypeEnum_USERDEFINED:
        outputStream() << ".USERDEFINED.";
        break;
    case IfcCableSegmentTypeEnum_NOTDEFINED:
        outputStream() << ".NOTDEFINED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcChangeActionEnum(IfcChangeActionEnum enumData)
{
    switch(enumData)
    {
    case IfcChangeActionEnum_NOCHANGE:
        outputStream() << ".NOCHANGE.";
        break;
    case IfcChangeActionEnum_MODIFIED:
        outputStream() << ".MODIFIED.";
        break;
    case IfcChangeActionEnum_ADDED:
        outputStream() << ".ADDED.";
        break;
    case IfcChangeActionEnum_DELETED:
        outputStream() << ".DELETED.";
        break;
    case IfcChangeActionEnum_MODIFIEDADDED:
        outputStream() << ".MODIFIEDADDED.";
        break;
    case IfcChangeActionEnum_MODIFIEDDELETED:
        outputStream() << ".MODIFIEDDELETED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcChillerTypeEnum(IfcChillerTypeEnum enumData)
{
    switch(enumData)
    {
    case IfcChillerTypeEnum_AIRCOOLED:
        outputStream() << ".AIRCOOLED.";
        break;
    case IfcChillerTypeEnum_WATERCOOLED:
        outputStream() << ".WATERCOOLED.";
        break;
    case IfcChillerTypeEnum_HEATRECOVERY:
        outputStream() << ".HEATRECOVERY.";
        break;
    case IfcChillerTypeEnum_USERDEFINED:
        outputStream() << ".USERDEFINED.";
        break;
    case IfcChillerTypeEnum_NOTDEFINED:
        outputStream() << ".NOTDEFINED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcCoilTypeEnum(IfcCoilTypeEnum enumData)
{
    switch(enumData)
    {
    case IfcCoilTypeEnum_DXCOOLINGCOIL:
        outputStream() << ".DXCOOLINGCOIL.";
        break;
    case IfcCoilTypeEnum_WATERCOOLINGCOIL:
        outputStream() << ".WATERCOOLINGCOIL.";
        break;
    case IfcCoilTypeEnum_STEAMHEATINGCOIL:
        outputStream() << ".STEAMHEATINGCOIL.";
        break;
    case IfcCoilTypeEnum_WATERHEATINGCOIL:
        outputStream() << ".WATERHEATINGCOIL.";
        break;
    case IfcCoilTypeEnum_ELECTRICHEATINGCOIL:
        outputStream() << ".ELECTRICHEATINGCOIL.";
        break;
    case IfcCoilTypeEnum_GASHEATINGCOIL:
        outputStream() << ".GASHEATINGCOIL.";
        break;
    case IfcCoilTypeEnum_USERDEFINED:
        outputStream() << ".USERDEFINED.";
        break;
    case IfcCoilTypeEnum_NOTDEFINED:
        outputStream() << ".NOTDEFINED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcColumnTypeEnum(IfcColumnTypeEnum enumData)
{
    switch(enumData)
    {
    case IfcColumnTypeEnum_COLUMN:
        outputStream() << ".COLUMN.";
        break;
    case IfcColumnTypeEnum_USERDEFINED:
        outputStream() << ".USERDEFINED.";
        break;
    case IfcColumnTypeEnum_NOTDEFINED:
        outputStream() << ".NOTDEFINED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcCompressorTypeEnum(IfcCompressorTypeEnum enumData)
{
    switch(enumData)
    {
    case IfcCompressorTypeEnum_DYNAMIC:
        outputStream() << ".DYNAMIC.";
        break;
    case IfcCompressorTypeEnum_RECIPROCATING:
        outputStream() << ".RECIPROCATING.";
        break;
    case IfcCompressorTypeEnum_ROTARY:
        outputStream() << ".ROTARY.";
        break;
    case IfcCompressorTypeEnum_SCROLL:
        outputStream() << ".SCROLL.";
        break;
    case IfcCompressorTypeEnum_TROCHOIDAL:
        outputStream() << ".TROCHOIDAL.";
        break;
    case IfcCompressorTypeEnum_SINGLESTAGE:
        outputStream() << ".SINGLESTAGE.";
        break;
    case IfcCompressorTypeEnum_BOOSTER:
        outputStream() << ".BOOSTER.";
        break;
    case IfcCompressorTypeEnum_OPENTYPE:
        outputStream() << ".OPENTYPE.";
        break;
    case IfcCompressorTypeEnum_HERMETIC:
        outputStream() << ".HERMETIC.";
        break;
    case IfcCompressorTypeEnum_SEMIHERMETIC:
        outputStream() << ".SEMIHERMETIC.";
        break;
    case IfcCompressorTypeEnum_WELDEDSHELLHERMETIC:
        outputStream() << ".WELDEDSHELLHERMETIC.";
        break;
    case IfcCompressorTypeEnum_ROLLINGPISTON:
        outputStream() << ".ROLLINGPISTON.";
        break;
    case IfcCompressorTypeEnum_ROTARYVANE:
        outputStream() << ".ROTARYVANE.";
        break;
    case IfcCompressorTypeEnum_SINGLESCREW:
        outputStream() << ".SINGLESCREW.";
        break;
    case IfcCompressorTypeEnum_TWINSCREW:
        outputStream() << ".TWINSCREW.";
        break;
    case IfcCompressorTypeEnum_USERDEFINED:
        outputStream() << ".USERDEFINED.";
        break;
    case IfcCompressorTypeEnum_NOTDEFINED:
        outputStream() << ".NOTDEFINED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcCondenserTypeEnum(IfcCondenserTypeEnum enumData)
{
    switch(enumData)
    {
    case IfcCondenserTypeEnum_WATERCOOLEDSHELLTUBE:
        outputStream() << ".WATERCOOLEDSHELLTUBE.";
        break;
    case IfcCondenserTypeEnum_WATERCOOLEDSHELLCOIL:
        outputStream() << ".WATERCOOLEDSHELLCOIL.";
        break;
    case IfcCondenserTypeEnum_WATERCOOLEDTUBEINTUBE:
        outputStream() << ".WATERCOOLEDTUBEINTUBE.";
        break;
    case IfcCondenserTypeEnum_WATERCOOLEDBRAZEDPLATE:
        outputStream() << ".WATERCOOLEDBRAZEDPLATE.";
        break;
    case IfcCondenserTypeEnum_AIRCOOLED:
        outputStream() << ".AIRCOOLED.";
        break;
    case IfcCondenserTypeEnum_EVAPORATIVECOOLED:
        outputStream() << ".EVAPORATIVECOOLED.";
        break;
    case IfcCondenserTypeEnum_USERDEFINED:
        outputStream() << ".USERDEFINED.";
        break;
    case IfcCondenserTypeEnum_NOTDEFINED:
        outputStream() << ".NOTDEFINED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcConnectionTypeEnum(IfcConnectionTypeEnum enumData)
{
    switch(enumData)
    {
    case IfcConnectionTypeEnum_ATPATH:
        outputStream() << ".ATPATH.";
        break;
    case IfcConnectionTypeEnum_ATSTART:
        outputStream() << ".ATSTART.";
        break;
    case IfcConnectionTypeEnum_ATEND:
        outputStream() << ".ATEND.";
        break;
    case IfcConnectionTypeEnum_NOTDEFINED:
        outputStream() << ".NOTDEFINED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcConstraintEnum(IfcConstraintEnum enumData)
{
    switch(enumData)
    {
    case IfcConstraintEnum_HARD:
        outputStream() << ".HARD.";
        break;
    case IfcConstraintEnum_SOFT:
        outputStream() << ".SOFT.";
        break;
    case IfcConstraintEnum_ADVISORY:
        outputStream() << ".ADVISORY.";
        break;
    case IfcConstraintEnum_USERDEFINED:
        outputStream() << ".USERDEFINED.";
        break;
    case IfcConstraintEnum_NOTDEFINED:
        outputStream() << ".NOTDEFINED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcControllerTypeEnum(IfcControllerTypeEnum enumData)
{
    switch(enumData)
    {
    case IfcControllerTypeEnum_FLOATING:
        outputStream() << ".FLOATING.";
        break;
    case IfcControllerTypeEnum_PROPORTIONAL:
        outputStream() << ".PROPORTIONAL.";
        break;
    case IfcControllerTypeEnum_PROPORTIONALINTEGRAL:
        outputStream() << ".PROPORTIONALINTEGRAL.";
        break;
    case IfcControllerTypeEnum_PROPORTIONALINTEGRALDERIVATIVE:
        outputStream() << ".PROPORTIONALINTEGRALDERIVATIVE.";
        break;
    case IfcControllerTypeEnum_TIMEDTWOPOSITION:
        outputStream() << ".TIMEDTWOPOSITION.";
        break;
    case IfcControllerTypeEnum_TWOPOSITION:
        outputStream() << ".TWOPOSITION.";
        break;
    case IfcControllerTypeEnum_USERDEFINED:
        outputStream() << ".USERDEFINED.";
        break;
    case IfcControllerTypeEnum_NOTDEFINED:
        outputStream() << ".NOTDEFINED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcCooledBeamTypeEnum(IfcCooledBeamTypeEnum enumData)
{
    switch(enumData)
    {
    case IfcCooledBeamTypeEnum_ACTIVE:
        outputStream() << ".ACTIVE.";
        break;
    case IfcCooledBeamTypeEnum_PASSIVE:
        outputStream() << ".PASSIVE.";
        break;
    case IfcCooledBeamTypeEnum_USERDEFINED:
        outputStream() << ".USERDEFINED.";
        break;
    case IfcCooledBeamTypeEnum_NOTDEFINED:
        outputStream() << ".NOTDEFINED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcCoolingTowerTypeEnum(IfcCoolingTowerTypeEnum enumData)
{
    switch(enumData)
    {
    case IfcCoolingTowerTypeEnum_NATURALDRAFT:
        outputStream() << ".NATURALDRAFT.";
        break;
    case IfcCoolingTowerTypeEnum_MECHANICALINDUCEDDRAFT:
        outputStream() << ".MECHANICALINDUCEDDRAFT.";
        break;
    case IfcCoolingTowerTypeEnum_MECHANICALFORCEDDRAFT:
        outputStream() << ".MECHANICALFORCEDDRAFT.";
        break;
    case IfcCoolingTowerTypeEnum_USERDEFINED:
        outputStream() << ".USERDEFINED.";
        break;
    case IfcCoolingTowerTypeEnum_NOTDEFINED:
        outputStream() << ".NOTDEFINED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcCostScheduleTypeEnum(IfcCostScheduleTypeEnum enumData)
{
    switch(enumData)
    {
    case IfcCostScheduleTypeEnum_BUDGET:
        outputStream() << ".BUDGET.";
        break;
    case IfcCostScheduleTypeEnum_COSTPLAN:
        outputStream() << ".COSTPLAN.";
        break;
    case IfcCostScheduleTypeEnum_ESTIMATE:
        outputStream() << ".ESTIMATE.";
        break;
    case IfcCostScheduleTypeEnum_TENDER:
        outputStream() << ".TENDER.";
        break;
    case IfcCostScheduleTypeEnum_PRICEDBILLOFQUANTITIES:
        outputStream() << ".PRICEDBILLOFQUANTITIES.";
        break;
    case IfcCostScheduleTypeEnum_UNPRICEDBILLOFQUANTITIES:
        outputStream() << ".UNPRICEDBILLOFQUANTITIES.";
        break;
    case IfcCostScheduleTypeEnum_SCHEDULEOFRATES:
        outputStream() << ".SCHEDULEOFRATES.";
        break;
    case IfcCostScheduleTypeEnum_USERDEFINED:
        outputStream() << ".USERDEFINED.";
        break;
    case IfcCostScheduleTypeEnum_NOTDEFINED:
        outputStream() << ".NOTDEFINED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcCoveringTypeEnum(IfcCoveringTypeEnum enumData)
{
    switch(enumData)
    {
    case IfcCoveringTypeEnum_CEILING:
        outputStream() << ".CEILING.";
        break;
    case IfcCoveringTypeEnum_FLOORING:
        outputStream() << ".FLOORING.";
        break;
    case IfcCoveringTypeEnum_CLADDING:
        outputStream() << ".CLADDING.";
        break;
    case IfcCoveringTypeEnum_ROOFING:
        outputStream() << ".ROOFING.";
        break;
    case IfcCoveringTypeEnum_INSULATION:
        outputStream() << ".INSULATION.";
        break;
    case IfcCoveringTypeEnum_MEMBRANE:
        outputStream() << ".MEMBRANE.";
        break;
    case IfcCoveringTypeEnum_SLEEVING:
        outputStream() << ".SLEEVING.";
        break;
    case IfcCoveringTypeEnum_WRAPPING:
        outputStream() << ".WRAPPING.";
        break;
    case IfcCoveringTypeEnum_USERDEFINED:
        outputStream() << ".USERDEFINED.";
        break;
    case IfcCoveringTypeEnum_NOTDEFINED:
        outputStream() << ".NOTDEFINED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcCurrencyEnum(IfcCurrencyEnum enumData)
{
    switch(enumData)
    {
    case IfcCurrencyEnum_AED:
        outputStream() << ".AED.";
        break;
    case IfcCurrencyEnum_AES:
        outputStream() << ".AES.";
        break;
    case IfcCurrencyEnum_ATS:
        outputStream() << ".ATS.";
        break;
    case IfcCurrencyEnum_AUD:
        outputStream() << ".AUD.";
        break;
    case IfcCurrencyEnum_BBD:
        outputStream() << ".BBD.";
        break;
    case IfcCurrencyEnum_BEG:
        outputStream() << ".BEG.";
        break;
    case IfcCurrencyEnum_BGL:
        outputStream() << ".BGL.";
        break;
    case IfcCurrencyEnum_BHD:
        outputStream() << ".BHD.";
        break;
    case IfcCurrencyEnum_BMD:
        outputStream() << ".BMD.";
        break;
    case IfcCurrencyEnum_BND:
        outputStream() << ".BND.";
        break;
    case IfcCurrencyEnum_BRL:
        outputStream() << ".BRL.";
        break;
    case IfcCurrencyEnum_BSD:
        outputStream() << ".BSD.";
        break;
    case IfcCurrencyEnum_BWP:
        outputStream() << ".BWP.";
        break;
    case IfcCurrencyEnum_BZD:
        outputStream() << ".BZD.";
        break;
    case IfcCurrencyEnum_CAD:
        outputStream() << ".CAD.";
        break;
    case IfcCurrencyEnum_CBD:
        outputStream() << ".CBD.";
        break;
    case IfcCurrencyEnum_CHF:
        outputStream() << ".CHF.";
        break;
    case IfcCurrencyEnum_CLP:
        outputStream() << ".CLP.";
        break;
    case IfcCurrencyEnum_CNY:
        outputStream() << ".CNY.";
        break;
    case IfcCurrencyEnum_CYS:
        outputStream() << ".CYS.";
        break;
    case IfcCurrencyEnum_CZK:
        outputStream() << ".CZK.";
        break;
    case IfcCurrencyEnum_DDP:
        outputStream() << ".DDP.";
        break;
    case IfcCurrencyEnum_DEM:
        outputStream() << ".DEM.";
        break;
    case IfcCurrencyEnum_DKK:
        outputStream() << ".DKK.";
        break;
    case IfcCurrencyEnum_EGL:
        outputStream() << ".EGL.";
        break;
    case IfcCurrencyEnum_EST:
        outputStream() << ".EST.";
        break;
    case IfcCurrencyEnum_EUR:
        outputStream() << ".EUR.";
        break;
    case IfcCurrencyEnum_FAK:
        outputStream() << ".FAK.";
        break;
    case IfcCurrencyEnum_FIM:
        outputStream() << ".FIM.";
        break;
    case IfcCurrencyEnum_FJD:
        outputStream() << ".FJD.";
        break;
    case IfcCurrencyEnum_FKP:
        outputStream() << ".FKP.";
        break;
    case IfcCurrencyEnum_FRF:
        outputStream() << ".FRF.";
        break;
    case IfcCurrencyEnum_GBP:
        outputStream() << ".GBP.";
        break;
    case IfcCurrencyEnum_GIP:
        outputStream() << ".GIP.";
        break;
    case IfcCurrencyEnum_GMD:
        outputStream() << ".GMD.";
        break;
    case IfcCurrencyEnum_GRX:
        outputStream() << ".GRX.";
        break;
    case IfcCurrencyEnum_HKD:
        outputStream() << ".HKD.";
        break;
    case IfcCurrencyEnum_HUF:
        outputStream() << ".HUF.";
        break;
    case IfcCurrencyEnum_ICK:
        outputStream() << ".ICK.";
        break;
    case IfcCurrencyEnum_IDR:
        outputStream() << ".IDR.";
        break;
    case IfcCurrencyEnum_ILS:
        outputStream() << ".ILS.";
        break;
    case IfcCurrencyEnum_INR:
        outputStream() << ".INR.";
        break;
    case IfcCurrencyEnum_IRP:
        outputStream() << ".IRP.";
        break;
    case IfcCurrencyEnum_ITL:
        outputStream() << ".ITL.";
        break;
    case IfcCurrencyEnum_JMD:
        outputStream() << ".JMD.";
        break;
    case IfcCurrencyEnum_JOD:
        outputStream() << ".JOD.";
        break;
    case IfcCurrencyEnum_JPY:
        outputStream() << ".JPY.";
        break;
    case IfcCurrencyEnum_KES:
        outputStream() << ".KES.";
        break;
    case IfcCurrencyEnum_KRW:
        outputStream() << ".KRW.";
        break;
    case IfcCurrencyEnum_KWD:
        outputStream() << ".KWD.";
        break;
    case IfcCurrencyEnum_KYD:
        outputStream() << ".KYD.";
        break;
    case IfcCurrencyEnum_LKR:
        outputStream() << ".LKR.";
        break;
    case IfcCurrencyEnum_LUF:
        outputStream() << ".LUF.";
        break;
    case IfcCurrencyEnum_MTL:
        outputStream() << ".MTL.";
        break;
    case IfcCurrencyEnum_MUR:
        outputStream() << ".MUR.";
        break;
    case IfcCurrencyEnum_MXN:
        outputStream() << ".MXN.";
        break;
    case IfcCurrencyEnum_MYR:
        outputStream() << ".MYR.";
        break;
    case IfcCurrencyEnum_NLG:
        outputStream() << ".NLG.";
        break;
    case IfcCurrencyEnum_NZD:
        outputStream() << ".NZD.";
        break;
    case IfcCurrencyEnum_OMR:
        outputStream() << ".OMR.";
        break;
    case IfcCurrencyEnum_PGK:
        outputStream() << ".PGK.";
        break;
    case IfcCurrencyEnum_PHP:
        outputStream() << ".PHP.";
        break;
    case IfcCurrencyEnum_PKR:
        outputStream() << ".PKR.";
        break;
    case IfcCurrencyEnum_PLN:
        outputStream() << ".PLN.";
        break;
    case IfcCurrencyEnum_PTN:
        outputStream() << ".PTN.";
        break;
    case IfcCurrencyEnum_QAR:
        outputStream() << ".QAR.";
        break;
    case IfcCurrencyEnum_RUR:
        outputStream() << ".RUR.";
        break;
    case IfcCurrencyEnum_SAR:
        outputStream() << ".SAR.";
        break;
    case IfcCurrencyEnum_SCR:
        outputStream() << ".SCR.";
        break;
    case IfcCurrencyEnum_SEK:
        outputStream() << ".SEK.";
        break;
    case IfcCurrencyEnum_SGD:
        outputStream() << ".SGD.";
        break;
    case IfcCurrencyEnum_SKP:
        outputStream() << ".SKP.";
        break;
    case IfcCurrencyEnum_THB:
        outputStream() << ".THB.";
        break;
    case IfcCurrencyEnum_TRL:
        outputStream() << ".TRL.";
        break;
    case IfcCurrencyEnum_TTD:
        outputStream() << ".TTD.";
        break;
    case IfcCurrencyEnum_TWD:
        outputStream() << ".TWD.";
        break;
    case IfcCurrencyEnum_USD:
        outputStream() << ".USD.";
        break;
    case IfcCurrencyEnum_VEB:
        outputStream() << ".VEB.";
        break;
    case IfcCurrencyEnum_VND:
        outputStream() << ".VND.";
        break;
    case IfcCurrencyEnum_XEU:
        outputStream() << ".XEU.";
        break;
    case IfcCurrencyEnum_ZAR:
        outputStream() << ".ZAR.";
        break;
    case IfcCurrencyEnum_ZWD:
        outputStream() << ".ZWD.";
        break;
    case IfcCurrencyEnum_NOK:
        outputStream() << ".NOK.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcCurtainWallTypeEnum(IfcCurtainWallTypeEnum enumData)
{
    switch(enumData)
    {
    case IfcCurtainWallTypeEnum_USERDEFINED:
        outputStream() << ".USERDEFINED.";
        break;
    case IfcCurtainWallTypeEnum_NOTDEFINED:
        outputStream() << ".NOTDEFINED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcDamperTypeEnum(IfcDamperTypeEnum enumData)
{
    switch(enumData)
    {
    case IfcDamperTypeEnum_CONTROLDAMPER:
        outputStream() << ".CONTROLDAMPER.";
        break;
    case IfcDamperTypeEnum_FIREDAMPER:
        outputStream() << ".FIREDAMPER.";
        break;
    case IfcDamperTypeEnum_SMOKEDAMPER:
        outputStream() << ".SMOKEDAMPER.";
        break;
    case IfcDamperTypeEnum_FIRESMOKEDAMPER:
        outputStream() << ".FIRESMOKEDAMPER.";
        break;
    case IfcDamperTypeEnum_BACKDRAFTDAMPER:
        outputStream() << ".BACKDRAFTDAMPER.";
        break;
    case IfcDamperTypeEnum_RELIEFDAMPER:
        outputStream() << ".RELIEFDAMPER.";
        break;
    case IfcDamperTypeEnum_BLASTDAMPER:
        outputStream() << ".BLASTDAMPER.";
        break;
    case IfcDamperTypeEnum_GRAVITYDAMPER:
        outputStream() << ".GRAVITYDAMPER.";
        break;
    case IfcDamperTypeEnum_GRAVITYRELIEFDAMPER:
        outputStream() << ".GRAVITYRELIEFDAMPER.";
        break;
    case IfcDamperTypeEnum_BALANCINGDAMPER:
        outputStream() << ".BALANCINGDAMPER.";
        break;
    case IfcDamperTypeEnum_FUMEHOODEXHAUST:
        outputStream() << ".FUMEHOODEXHAUST.";
        break;
    case IfcDamperTypeEnum_USERDEFINED:
        outputStream() << ".USERDEFINED.";
        break;
    case IfcDamperTypeEnum_NOTDEFINED:
        outputStream() << ".NOTDEFINED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcDataOriginEnum(IfcDataOriginEnum enumData)
{
    switch(enumData)
    {
    case IfcDataOriginEnum_MEASURED:
        outputStream() << ".MEASURED.";
        break;
    case IfcDataOriginEnum_PREDICTED:
        outputStream() << ".PREDICTED.";
        break;
    case IfcDataOriginEnum_SIMULATED:
        outputStream() << ".SIMULATED.";
        break;
    case IfcDataOriginEnum_USERDEFINED:
        outputStream() << ".USERDEFINED.";
        break;
    case IfcDataOriginEnum_NOTDEFINED:
        outputStream() << ".NOTDEFINED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcDerivedUnitEnum(IfcDerivedUnitEnum enumData)
{
    switch(enumData)
    {
    case IfcDerivedUnitEnum_ANGULARVELOCITYUNIT:
        outputStream() << ".ANGULARVELOCITYUNIT.";
        break;
    case IfcDerivedUnitEnum_COMPOUNDPLANEANGLEUNIT:
        outputStream() << ".COMPOUNDPLANEANGLEUNIT.";
        break;
    case IfcDerivedUnitEnum_DYNAMICVISCOSITYUNIT:
        outputStream() << ".DYNAMICVISCOSITYUNIT.";
        break;
    case IfcDerivedUnitEnum_HEATFLUXDENSITYUNIT:
        outputStream() << ".HEATFLUXDENSITYUNIT.";
        break;
    case IfcDerivedUnitEnum_INTEGERCOUNTRATEUNIT:
        outputStream() << ".INTEGERCOUNTRATEUNIT.";
        break;
    case IfcDerivedUnitEnum_ISOTHERMALMOISTURECAPACITYUNIT:
        outputStream() << ".ISOTHERMALMOISTURECAPACITYUNIT.";
        break;
    case IfcDerivedUnitEnum_KINEMATICVISCOSITYUNIT:
        outputStream() << ".KINEMATICVISCOSITYUNIT.";
        break;
    case IfcDerivedUnitEnum_LINEARVELOCITYUNIT:
        outputStream() << ".LINEARVELOCITYUNIT.";
        break;
    case IfcDerivedUnitEnum_MASSDENSITYUNIT:
        outputStream() << ".MASSDENSITYUNIT.";
        break;
    case IfcDerivedUnitEnum_MASSFLOWRATEUNIT:
        outputStream() << ".MASSFLOWRATEUNIT.";
        break;
    case IfcDerivedUnitEnum_MOISTUREDIFFUSIVITYUNIT:
        outputStream() << ".MOISTUREDIFFUSIVITYUNIT.";
        break;
    case IfcDerivedUnitEnum_MOLECULARWEIGHTUNIT:
        outputStream() << ".MOLECULARWEIGHTUNIT.";
        break;
    case IfcDerivedUnitEnum_SPECIFICHEATCAPACITYUNIT:
        outputStream() << ".SPECIFICHEATCAPACITYUNIT.";
        break;
    case IfcDerivedUnitEnum_THERMALADMITTANCEUNIT:
        outputStream() << ".THERMALADMITTANCEUNIT.";
        break;
    case IfcDerivedUnitEnum_THERMALCONDUCTANCEUNIT:
        outputStream() << ".THERMALCONDUCTANCEUNIT.";
        break;
    case IfcDerivedUnitEnum_THERMALRESISTANCEUNIT:
        outputStream() << ".THERMALRESISTANCEUNIT.";
        break;
    case IfcDerivedUnitEnum_THERMALTRANSMITTANCEUNIT:
        outputStream() << ".THERMALTRANSMITTANCEUNIT.";
        break;
    case IfcDerivedUnitEnum_VAPORPERMEABILITYUNIT:
        outputStream() << ".VAPORPERMEABILITYUNIT.";
        break;
    case IfcDerivedUnitEnum_VOLUMETRICFLOWRATEUNIT:
        outputStream() << ".VOLUMETRICFLOWRATEUNIT.";
        break;
    case IfcDerivedUnitEnum_ROTATIONALFREQUENCYUNIT:
        outputStream() << ".ROTATIONALFREQUENCYUNIT.";
        break;
    case IfcDerivedUnitEnum_TORQUEUNIT:
        outputStream() << ".TORQUEUNIT.";
        break;
    case IfcDerivedUnitEnum_MOMENTOFINERTIAUNIT:
        outputStream() << ".MOMENTOFINERTIAUNIT.";
        break;
    case IfcDerivedUnitEnum_LINEARMOMENTUNIT:
        outputStream() << ".LINEARMOMENTUNIT.";
        break;
    case IfcDerivedUnitEnum_LINEARFORCEUNIT:
        outputStream() << ".LINEARFORCEUNIT.";
        break;
    case IfcDerivedUnitEnum_PLANARFORCEUNIT:
        outputStream() << ".PLANARFORCEUNIT.";
        break;
    case IfcDerivedUnitEnum_MODULUSOFELASTICITYUNIT:
        outputStream() << ".MODULUSOFELASTICITYUNIT.";
        break;
    case IfcDerivedUnitEnum_SHEARMODULUSUNIT:
        outputStream() << ".SHEARMODULUSUNIT.";
        break;
    case IfcDerivedUnitEnum_LINEARSTIFFNESSUNIT:
        outputStream() << ".LINEARSTIFFNESSUNIT.";
        break;
    case IfcDerivedUnitEnum_ROTATIONALSTIFFNESSUNIT:
        outputStream() << ".ROTATIONALSTIFFNESSUNIT.";
        break;
    case IfcDerivedUnitEnum_MODULUSOFSUBGRADEREACTIONUNIT:
        outputStream() << ".MODULUSOFSUBGRADEREACTIONUNIT.";
        break;
    case IfcDerivedUnitEnum_ACCELERATIONUNIT:
        outputStream() << ".ACCELERATIONUNIT.";
        break;
    case IfcDerivedUnitEnum_CURVATUREUNIT:
        outputStream() << ".CURVATUREUNIT.";
        break;
    case IfcDerivedUnitEnum_HEATINGVALUEUNIT:
        outputStream() << ".HEATINGVALUEUNIT.";
        break;
    case IfcDerivedUnitEnum_IONCONCENTRATIONUNIT:
        outputStream() << ".IONCONCENTRATIONUNIT.";
        break;
    case IfcDerivedUnitEnum_LUMINOUSINTENSITYDISTRIBUTIONUNIT:
        outputStream() << ".LUMINOUSINTENSITYDISTRIBUTIONUNIT.";
        break;
    case IfcDerivedUnitEnum_MASSPERLENGTHUNIT:
        outputStream() << ".MASSPERLENGTHUNIT.";
        break;
    case IfcDerivedUnitEnum_MODULUSOFLINEARSUBGRADEREACTIONUNIT:
        outputStream() << ".MODULUSOFLINEARSUBGRADEREACTIONUNIT.";
        break;
    case IfcDerivedUnitEnum_MODULUSOFROTATIONALSUBGRADEREACTIONUNIT:
        outputStream() << ".MODULUSOFROTATIONALSUBGRADEREACTIONUNIT.";
        break;
    case IfcDerivedUnitEnum_PHUNIT:
        outputStream() << ".PHUNIT.";
        break;
    case IfcDerivedUnitEnum_ROTATIONALMASSUNIT:
        outputStream() << ".ROTATIONALMASSUNIT.";
        break;
    case IfcDerivedUnitEnum_SECTIONAREAINTEGRALUNIT:
        outputStream() << ".SECTIONAREAINTEGRALUNIT.";
        break;
    case IfcDerivedUnitEnum_SECTIONMODULUSUNIT:
        outputStream() << ".SECTIONMODULUSUNIT.";
        break;
    case IfcDerivedUnitEnum_SOUNDPOWERUNIT:
        outputStream() << ".SOUNDPOWERUNIT.";
        break;
    case IfcDerivedUnitEnum_SOUNDPRESSUREUNIT:
        outputStream() << ".SOUNDPRESSUREUNIT.";
        break;
    case IfcDerivedUnitEnum_TEMPERATUREGRADIENTUNIT:
        outputStream() << ".TEMPERATUREGRADIENTUNIT.";
        break;
    case IfcDerivedUnitEnum_THERMALEXPANSIONCOEFFICIENTUNIT:
        outputStream() << ".THERMALEXPANSIONCOEFFICIENTUNIT.";
        break;
    case IfcDerivedUnitEnum_WARPINGCONSTANTUNIT:
        outputStream() << ".WARPINGCONSTANTUNIT.";
        break;
    case IfcDerivedUnitEnum_WARPINGMOMENTUNIT:
        outputStream() << ".WARPINGMOMENTUNIT.";
        break;
    case IfcDerivedUnitEnum_USERDEFINED:
        outputStream() << ".USERDEFINED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcDimensionExtentUsage(IfcDimensionExtentUsage enumData)
{
    switch(enumData)
    {
    case IfcDimensionExtentUsage_ORIGIN:
        outputStream() << ".ORIGIN.";
        break;
    case IfcDimensionExtentUsage_TARGET:
        outputStream() << ".TARGET.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcDirectionSenseEnum(IfcDirectionSenseEnum enumData)
{
    switch(enumData)
    {
    case IfcDirectionSenseEnum_POSITIVE:
        outputStream() << ".POSITIVE.";
        break;
    case IfcDirectionSenseEnum_NEGATIVE:
        outputStream() << ".NEGATIVE.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcDistributionChamberElementTypeEnum(IfcDistributionChamberElementTypeEnum enumData)
{
    switch(enumData)
    {
    case IfcDistributionChamberElementTypeEnum_FORMEDDUCT:
        outputStream() << ".FORMEDDUCT.";
        break;
    case IfcDistributionChamberElementTypeEnum_INSPECTIONCHAMBER:
        outputStream() << ".INSPECTIONCHAMBER.";
        break;
    case IfcDistributionChamberElementTypeEnum_INSPECTIONPIT:
        outputStream() << ".INSPECTIONPIT.";
        break;
    case IfcDistributionChamberElementTypeEnum_MANHOLE:
        outputStream() << ".MANHOLE.";
        break;
    case IfcDistributionChamberElementTypeEnum_METERCHAMBER:
        outputStream() << ".METERCHAMBER.";
        break;
    case IfcDistributionChamberElementTypeEnum_SUMP:
        outputStream() << ".SUMP.";
        break;
    case IfcDistributionChamberElementTypeEnum_TRENCH:
        outputStream() << ".TRENCH.";
        break;
    case IfcDistributionChamberElementTypeEnum_VALVECHAMBER:
        outputStream() << ".VALVECHAMBER.";
        break;
    case IfcDistributionChamberElementTypeEnum_USERDEFINED:
        outputStream() << ".USERDEFINED.";
        break;
    case IfcDistributionChamberElementTypeEnum_NOTDEFINED:
        outputStream() << ".NOTDEFINED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcDocumentConfidentialityEnum(IfcDocumentConfidentialityEnum enumData)
{
    switch(enumData)
    {
    case IfcDocumentConfidentialityEnum_PUBLIC:
        outputStream() << ".PUBLIC.";
        break;
    case IfcDocumentConfidentialityEnum_RESTRICTED:
        outputStream() << ".RESTRICTED.";
        break;
    case IfcDocumentConfidentialityEnum_CONFIDENTIAL:
        outputStream() << ".CONFIDENTIAL.";
        break;
    case IfcDocumentConfidentialityEnum_PERSONAL:
        outputStream() << ".PERSONAL.";
        break;
    case IfcDocumentConfidentialityEnum_USERDEFINED:
        outputStream() << ".USERDEFINED.";
        break;
    case IfcDocumentConfidentialityEnum_NOTDEFINED:
        outputStream() << ".NOTDEFINED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcDocumentStatusEnum(IfcDocumentStatusEnum enumData)
{
    switch(enumData)
    {
    case IfcDocumentStatusEnum_DRAFT:
        outputStream() << ".DRAFT.";
        break;
    case IfcDocumentStatusEnum_FINALDRAFT:
        outputStream() << ".FINALDRAFT.";
        break;
    case IfcDocumentStatusEnum_FINAL:
        outputStream() << ".FINAL.";
        break;
    case IfcDocumentStatusEnum_REVISION:
        outputStream() << ".REVISION.";
        break;
    case IfcDocumentStatusEnum_NOTDEFINED:
        outputStream() << ".NOTDEFINED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcDoorPanelOperationEnum(IfcDoorPanelOperationEnum enumData)
{
    switch(enumData)
    {
    case IfcDoorPanelOperationEnum_SWINGING:
        outputStream() << ".SWINGING.";
        break;
    case IfcDoorPanelOperationEnum_DOUBLE_ACTING:
        outputStream() << ".DOUBLE_ACTING.";
        break;
    case IfcDoorPanelOperationEnum_SLIDING:
        outputStream() << ".SLIDING.";
        break;
    case IfcDoorPanelOperationEnum_FOLDING:
        outputStream() << ".FOLDING.";
        break;
    case IfcDoorPanelOperationEnum_REVOLVING:
        outputStream() << ".REVOLVING.";
        break;
    case IfcDoorPanelOperationEnum_ROLLINGUP:
        outputStream() << ".ROLLINGUP.";
        break;
    case IfcDoorPanelOperationEnum_USERDEFINED:
        outputStream() << ".USERDEFINED.";
        break;
    case IfcDoorPanelOperationEnum_NOTDEFINED:
        outputStream() << ".NOTDEFINED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcDoorPanelPositionEnum(IfcDoorPanelPositionEnum enumData)
{
    switch(enumData)
    {
    case IfcDoorPanelPositionEnum_LEFT:
        outputStream() << ".LEFT.";
        break;
    case IfcDoorPanelPositionEnum_MIDDLE:
        outputStream() << ".MIDDLE.";
        break;
    case IfcDoorPanelPositionEnum_RIGHT:
        outputStream() << ".RIGHT.";
        break;
    case IfcDoorPanelPositionEnum_NOTDEFINED:
        outputStream() << ".NOTDEFINED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcDoorStyleConstructionEnum(IfcDoorStyleConstructionEnum enumData)
{
    switch(enumData)
    {
    case IfcDoorStyleConstructionEnum_ALUMINIUM:
        outputStream() << ".ALUMINIUM.";
        break;
    case IfcDoorStyleConstructionEnum_HIGH_GRADE_STEEL:
        outputStream() << ".HIGH_GRADE_STEEL.";
        break;
    case IfcDoorStyleConstructionEnum_STEEL:
        outputStream() << ".STEEL.";
        break;
    case IfcDoorStyleConstructionEnum_WOOD:
        outputStream() << ".WOOD.";
        break;
    case IfcDoorStyleConstructionEnum_ALUMINIUM_WOOD:
        outputStream() << ".ALUMINIUM_WOOD.";
        break;
    case IfcDoorStyleConstructionEnum_ALUMINIUM_PLASTIC:
        outputStream() << ".ALUMINIUM_PLASTIC.";
        break;
    case IfcDoorStyleConstructionEnum_PLASTIC:
        outputStream() << ".PLASTIC.";
        break;
    case IfcDoorStyleConstructionEnum_USERDEFINED:
        outputStream() << ".USERDEFINED.";
        break;
    case IfcDoorStyleConstructionEnum_NOTDEFINED:
        outputStream() << ".NOTDEFINED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcDoorStyleOperationEnum(IfcDoorStyleOperationEnum enumData)
{
    switch(enumData)
    {
    case IfcDoorStyleOperationEnum_SINGLE_SWING_LEFT:
        outputStream() << ".SINGLE_SWING_LEFT.";
        break;
    case IfcDoorStyleOperationEnum_SINGLE_SWING_RIGHT:
        outputStream() << ".SINGLE_SWING_RIGHT.";
        break;
    case IfcDoorStyleOperationEnum_DOUBLE_DOOR_SINGLE_SWING:
        outputStream() << ".DOUBLE_DOOR_SINGLE_SWING.";
        break;
    case IfcDoorStyleOperationEnum_DOUBLE_DOOR_SINGLE_SWING_OPPOSITE_LEFT:
        outputStream() << ".DOUBLE_DOOR_SINGLE_SWING_OPPOSITE_LEFT.";
        break;
    case IfcDoorStyleOperationEnum_DOUBLE_DOOR_SINGLE_SWING_OPPOSITE_RIGHT:
        outputStream() << ".DOUBLE_DOOR_SINGLE_SWING_OPPOSITE_RIGHT.";
        break;
    case IfcDoorStyleOperationEnum_DOUBLE_SWING_LEFT:
        outputStream() << ".DOUBLE_SWING_LEFT.";
        break;
    case IfcDoorStyleOperationEnum_DOUBLE_SWING_RIGHT:
        outputStream() << ".DOUBLE_SWING_RIGHT.";
        break;
    case IfcDoorStyleOperationEnum_DOUBLE_DOOR_DOUBLE_SWING:
        outputStream() << ".DOUBLE_DOOR_DOUBLE_SWING.";
        break;
    case IfcDoorStyleOperationEnum_SLIDING_TO_LEFT:
        outputStream() << ".SLIDING_TO_LEFT.";
        break;
    case IfcDoorStyleOperationEnum_SLIDING_TO_RIGHT:
        outputStream() << ".SLIDING_TO_RIGHT.";
        break;
    case IfcDoorStyleOperationEnum_DOUBLE_DOOR_SLIDING:
        outputStream() << ".DOUBLE_DOOR_SLIDING.";
        break;
    case IfcDoorStyleOperationEnum_FOLDING_TO_LEFT:
        outputStream() << ".FOLDING_TO_LEFT.";
        break;
    case IfcDoorStyleOperationEnum_FOLDING_TO_RIGHT:
        outputStream() << ".FOLDING_TO_RIGHT.";
        break;
    case IfcDoorStyleOperationEnum_DOUBLE_DOOR_FOLDING:
        outputStream() << ".DOUBLE_DOOR_FOLDING.";
        break;
    case IfcDoorStyleOperationEnum_REVOLVING:
        outputStream() << ".REVOLVING.";
        break;
    case IfcDoorStyleOperationEnum_ROLLINGUP:
        outputStream() << ".ROLLINGUP.";
        break;
    case IfcDoorStyleOperationEnum_USERDEFINED:
        outputStream() << ".USERDEFINED.";
        break;
    case IfcDoorStyleOperationEnum_NOTDEFINED:
        outputStream() << ".NOTDEFINED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcDuctFittingTypeEnum(IfcDuctFittingTypeEnum enumData)
{
    switch(enumData)
    {
    case IfcDuctFittingTypeEnum_BEND:
        outputStream() << ".BEND.";
        break;
    case IfcDuctFittingTypeEnum_CONNECTOR:
        outputStream() << ".CONNECTOR.";
        break;
    case IfcDuctFittingTypeEnum_ENTRY:
        outputStream() << ".ENTRY.";
        break;
    case IfcDuctFittingTypeEnum_EXIT:
        outputStream() << ".EXIT.";
        break;
    case IfcDuctFittingTypeEnum_JUNCTION:
        outputStream() << ".JUNCTION.";
        break;
    case IfcDuctFittingTypeEnum_OBSTRUCTION:
        outputStream() << ".OBSTRUCTION.";
        break;
    case IfcDuctFittingTypeEnum_TRANSITION:
        outputStream() << ".TRANSITION.";
        break;
    case IfcDuctFittingTypeEnum_USERDEFINED:
        outputStream() << ".USERDEFINED.";
        break;
    case IfcDuctFittingTypeEnum_NOTDEFINED:
        outputStream() << ".NOTDEFINED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcDuctSegmentTypeEnum(IfcDuctSegmentTypeEnum enumData)
{
    switch(enumData)
    {
    case IfcDuctSegmentTypeEnum_RIGIDSEGMENT:
        outputStream() << ".RIGIDSEGMENT.";
        break;
    case IfcDuctSegmentTypeEnum_FLEXIBLESEGMENT:
        outputStream() << ".FLEXIBLESEGMENT.";
        break;
    case IfcDuctSegmentTypeEnum_USERDEFINED:
        outputStream() << ".USERDEFINED.";
        break;
    case IfcDuctSegmentTypeEnum_NOTDEFINED:
        outputStream() << ".NOTDEFINED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcDuctSilencerTypeEnum(IfcDuctSilencerTypeEnum enumData)
{
    switch(enumData)
    {
    case IfcDuctSilencerTypeEnum_FLATOVAL:
        outputStream() << ".FLATOVAL.";
        break;
    case IfcDuctSilencerTypeEnum_RECTANGULAR:
        outputStream() << ".RECTANGULAR.";
        break;
    case IfcDuctSilencerTypeEnum_ROUND:
        outputStream() << ".ROUND.";
        break;
    case IfcDuctSilencerTypeEnum_USERDEFINED:
        outputStream() << ".USERDEFINED.";
        break;
    case IfcDuctSilencerTypeEnum_NOTDEFINED:
        outputStream() << ".NOTDEFINED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcElectricApplianceTypeEnum(IfcElectricApplianceTypeEnum enumData)
{
    switch(enumData)
    {
    case IfcElectricApplianceTypeEnum_COMPUTER:
        outputStream() << ".COMPUTER.";
        break;
    case IfcElectricApplianceTypeEnum_DIRECTWATERHEATER:
        outputStream() << ".DIRECTWATERHEATER.";
        break;
    case IfcElectricApplianceTypeEnum_DISHWASHER:
        outputStream() << ".DISHWASHER.";
        break;
    case IfcElectricApplianceTypeEnum_ELECTRICCOOKER:
        outputStream() << ".ELECTRICCOOKER.";
        break;
    case IfcElectricApplianceTypeEnum_ELECTRICHEATER:
        outputStream() << ".ELECTRICHEATER.";
        break;
    case IfcElectricApplianceTypeEnum_FACSIMILE:
        outputStream() << ".FACSIMILE.";
        break;
    case IfcElectricApplianceTypeEnum_FREESTANDINGFAN:
        outputStream() << ".FREESTANDINGFAN.";
        break;
    case IfcElectricApplianceTypeEnum_FREEZER:
        outputStream() << ".FREEZER.";
        break;
    case IfcElectricApplianceTypeEnum_FRIDGE_FREEZER:
        outputStream() << ".FRIDGE_FREEZER.";
        break;
    case IfcElectricApplianceTypeEnum_HANDDRYER:
        outputStream() << ".HANDDRYER.";
        break;
    case IfcElectricApplianceTypeEnum_INDIRECTWATERHEATER:
        outputStream() << ".INDIRECTWATERHEATER.";
        break;
    case IfcElectricApplianceTypeEnum_MICROWAVE:
        outputStream() << ".MICROWAVE.";
        break;
    case IfcElectricApplianceTypeEnum_PHOTOCOPIER:
        outputStream() << ".PHOTOCOPIER.";
        break;
    case IfcElectricApplianceTypeEnum_PRINTER:
        outputStream() << ".PRINTER.";
        break;
    case IfcElectricApplianceTypeEnum_REFRIGERATOR:
        outputStream() << ".REFRIGERATOR.";
        break;
    case IfcElectricApplianceTypeEnum_RADIANTHEATER:
        outputStream() << ".RADIANTHEATER.";
        break;
    case IfcElectricApplianceTypeEnum_SCANNER:
        outputStream() << ".SCANNER.";
        break;
    case IfcElectricApplianceTypeEnum_TELEPHONE:
        outputStream() << ".TELEPHONE.";
        break;
    case IfcElectricApplianceTypeEnum_TUMBLEDRYER:
        outputStream() << ".TUMBLEDRYER.";
        break;
    case IfcElectricApplianceTypeEnum_TV:
        outputStream() << ".TV.";
        break;
    case IfcElectricApplianceTypeEnum_VENDINGMACHINE:
        outputStream() << ".VENDINGMACHINE.";
        break;
    case IfcElectricApplianceTypeEnum_WASHINGMACHINE:
        outputStream() << ".WASHINGMACHINE.";
        break;
    case IfcElectricApplianceTypeEnum_WATERHEATER:
        outputStream() << ".WATERHEATER.";
        break;
    case IfcElectricApplianceTypeEnum_WATERCOOLER:
        outputStream() << ".WATERCOOLER.";
        break;
    case IfcElectricApplianceTypeEnum_USERDEFINED:
        outputStream() << ".USERDEFINED.";
        break;
    case IfcElectricApplianceTypeEnum_NOTDEFINED:
        outputStream() << ".NOTDEFINED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcElectricCurrentEnum(IfcElectricCurrentEnum enumData)
{
    switch(enumData)
    {
    case IfcElectricCurrentEnum_ALTERNATING:
        outputStream() << ".ALTERNATING.";
        break;
    case IfcElectricCurrentEnum_DIRECT:
        outputStream() << ".DIRECT.";
        break;
    case IfcElectricCurrentEnum_NOTDEFINED:
        outputStream() << ".NOTDEFINED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcElectricDistributionPointFunctionEnum(IfcElectricDistributionPointFunctionEnum enumData)
{
    switch(enumData)
    {
    case IfcElectricDistributionPointFunctionEnum_ALARMPANEL:
        outputStream() << ".ALARMPANEL.";
        break;
    case IfcElectricDistributionPointFunctionEnum_CONSUMERUNIT:
        outputStream() << ".CONSUMERUNIT.";
        break;
    case IfcElectricDistributionPointFunctionEnum_CONTROLPANEL:
        outputStream() << ".CONTROLPANEL.";
        break;
    case IfcElectricDistributionPointFunctionEnum_DISTRIBUTIONBOARD:
        outputStream() << ".DISTRIBUTIONBOARD.";
        break;
    case IfcElectricDistributionPointFunctionEnum_GASDETECTORPANEL:
        outputStream() << ".GASDETECTORPANEL.";
        break;
    case IfcElectricDistributionPointFunctionEnum_INDICATORPANEL:
        outputStream() << ".INDICATORPANEL.";
        break;
    case IfcElectricDistributionPointFunctionEnum_MIMICPANEL:
        outputStream() << ".MIMICPANEL.";
        break;
    case IfcElectricDistributionPointFunctionEnum_MOTORCONTROLCENTRE:
        outputStream() << ".MOTORCONTROLCENTRE.";
        break;
    case IfcElectricDistributionPointFunctionEnum_SWITCHBOARD:
        outputStream() << ".SWITCHBOARD.";
        break;
    case IfcElectricDistributionPointFunctionEnum_USERDEFINED:
        outputStream() << ".USERDEFINED.";
        break;
    case IfcElectricDistributionPointFunctionEnum_NOTDEFINED:
        outputStream() << ".NOTDEFINED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcElectricFlowStorageDeviceTypeEnum(IfcElectricFlowStorageDeviceTypeEnum enumData)
{
    switch(enumData)
    {
    case IfcElectricFlowStorageDeviceTypeEnum_BATTERY:
        outputStream() << ".BATTERY.";
        break;
    case IfcElectricFlowStorageDeviceTypeEnum_CAPACITORBANK:
        outputStream() << ".CAPACITORBANK.";
        break;
    case IfcElectricFlowStorageDeviceTypeEnum_HARMONICFILTER:
        outputStream() << ".HARMONICFILTER.";
        break;
    case IfcElectricFlowStorageDeviceTypeEnum_INDUCTORBANK:
        outputStream() << ".INDUCTORBANK.";
        break;
    case IfcElectricFlowStorageDeviceTypeEnum_UPS:
        outputStream() << ".UPS.";
        break;
    case IfcElectricFlowStorageDeviceTypeEnum_USERDEFINED:
        outputStream() << ".USERDEFINED.";
        break;
    case IfcElectricFlowStorageDeviceTypeEnum_NOTDEFINED:
        outputStream() << ".NOTDEFINED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcElectricGeneratorTypeEnum(IfcElectricGeneratorTypeEnum enumData)
{
    switch(enumData)
    {
    case IfcElectricGeneratorTypeEnum_USERDEFINED:
        outputStream() << ".USERDEFINED.";
        break;
    case IfcElectricGeneratorTypeEnum_NOTDEFINED:
        outputStream() << ".NOTDEFINED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcElectricHeaterTypeEnum(IfcElectricHeaterTypeEnum enumData)
{
    switch(enumData)
    {
    case IfcElectricHeaterTypeEnum_ELECTRICPOINTHEATER:
        outputStream() << ".ELECTRICPOINTHEATER.";
        break;
    case IfcElectricHeaterTypeEnum_ELECTRICCABLEHEATER:
        outputStream() << ".ELECTRICCABLEHEATER.";
        break;
    case IfcElectricHeaterTypeEnum_ELECTRICMATHEATER:
        outputStream() << ".ELECTRICMATHEATER.";
        break;
    case IfcElectricHeaterTypeEnum_USERDEFINED:
        outputStream() << ".USERDEFINED.";
        break;
    case IfcElectricHeaterTypeEnum_NOTDEFINED:
        outputStream() << ".NOTDEFINED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcElectricMotorTypeEnum(IfcElectricMotorTypeEnum enumData)
{
    switch(enumData)
    {
    case IfcElectricMotorTypeEnum_DC:
        outputStream() << ".DC.";
        break;
    case IfcElectricMotorTypeEnum_INDUCTION:
        outputStream() << ".INDUCTION.";
        break;
    case IfcElectricMotorTypeEnum_POLYPHASE:
        outputStream() << ".POLYPHASE.";
        break;
    case IfcElectricMotorTypeEnum_RELUCTANCESYNCHRONOUS:
        outputStream() << ".RELUCTANCESYNCHRONOUS.";
        break;
    case IfcElectricMotorTypeEnum_SYNCHRONOUS:
        outputStream() << ".SYNCHRONOUS.";
        break;
    case IfcElectricMotorTypeEnum_USERDEFINED:
        outputStream() << ".USERDEFINED.";
        break;
    case IfcElectricMotorTypeEnum_NOTDEFINED:
        outputStream() << ".NOTDEFINED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcElectricTimeControlTypeEnum(IfcElectricTimeControlTypeEnum enumData)
{
    switch(enumData)
    {
    case IfcElectricTimeControlTypeEnum_TIMECLOCK:
        outputStream() << ".TIMECLOCK.";
        break;
    case IfcElectricTimeControlTypeEnum_TIMEDELAY:
        outputStream() << ".TIMEDELAY.";
        break;
    case IfcElectricTimeControlTypeEnum_RELAY:
        outputStream() << ".RELAY.";
        break;
    case IfcElectricTimeControlTypeEnum_USERDEFINED:
        outputStream() << ".USERDEFINED.";
        break;
    case IfcElectricTimeControlTypeEnum_NOTDEFINED:
        outputStream() << ".NOTDEFINED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcElementAssemblyTypeEnum(IfcElementAssemblyTypeEnum enumData)
{
    switch(enumData)
    {
    case IfcElementAssemblyTypeEnum_ACCESSORY_ASSEMBLY:
        outputStream() << ".ACCESSORY_ASSEMBLY.";
        break;
    case IfcElementAssemblyTypeEnum_ARCH:
        outputStream() << ".ARCH.";
        break;
    case IfcElementAssemblyTypeEnum_BEAM_GRID:
        outputStream() << ".BEAM_GRID.";
        break;
    case IfcElementAssemblyTypeEnum_BRACED_FRAME:
        outputStream() << ".BRACED_FRAME.";
        break;
    case IfcElementAssemblyTypeEnum_GIRDER:
        outputStream() << ".GIRDER.";
        break;
    case IfcElementAssemblyTypeEnum_REINFORCEMENT_UNIT:
        outputStream() << ".REINFORCEMENT_UNIT.";
        break;
    case IfcElementAssemblyTypeEnum_RIGID_FRAME:
        outputStream() << ".RIGID_FRAME.";
        break;
    case IfcElementAssemblyTypeEnum_SLAB_FIELD:
        outputStream() << ".SLAB_FIELD.";
        break;
    case IfcElementAssemblyTypeEnum_TRUSS:
        outputStream() << ".TRUSS.";
        break;
    case IfcElementAssemblyTypeEnum_USERDEFINED:
        outputStream() << ".USERDEFINED.";
        break;
    case IfcElementAssemblyTypeEnum_NOTDEFINED:
        outputStream() << ".NOTDEFINED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcElementCompositionEnum(IfcElementCompositionEnum enumData)
{
    switch(enumData)
    {
    case IfcElementCompositionEnum_COMPLEX:
        outputStream() << ".COMPLEX.";
        break;
    case IfcElementCompositionEnum_ELEMENT:
        outputStream() << ".ELEMENT.";
        break;
    case IfcElementCompositionEnum_PARTIAL:
        outputStream() << ".PARTIAL.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcEnergySequenceEnum(IfcEnergySequenceEnum enumData)
{
    switch(enumData)
    {
    case IfcEnergySequenceEnum_PRIMARY:
        outputStream() << ".PRIMARY.";
        break;
    case IfcEnergySequenceEnum_SECONDARY:
        outputStream() << ".SECONDARY.";
        break;
    case IfcEnergySequenceEnum_TERTIARY:
        outputStream() << ".TERTIARY.";
        break;
    case IfcEnergySequenceEnum_AUXILIARY:
        outputStream() << ".AUXILIARY.";
        break;
    case IfcEnergySequenceEnum_USERDEFINED:
        outputStream() << ".USERDEFINED.";
        break;
    case IfcEnergySequenceEnum_NOTDEFINED:
        outputStream() << ".NOTDEFINED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcEnvironmentalImpactCategoryEnum(IfcEnvironmentalImpactCategoryEnum enumData)
{
    switch(enumData)
    {
    case IfcEnvironmentalImpactCategoryEnum_COMBINEDVALUE:
        outputStream() << ".COMBINEDVALUE.";
        break;
    case IfcEnvironmentalImpactCategoryEnum_DISPOSAL:
        outputStream() << ".DISPOSAL.";
        break;
    case IfcEnvironmentalImpactCategoryEnum_EXTRACTION:
        outputStream() << ".EXTRACTION.";
        break;
    case IfcEnvironmentalImpactCategoryEnum_INSTALLATION:
        outputStream() << ".INSTALLATION.";
        break;
    case IfcEnvironmentalImpactCategoryEnum_MANUFACTURE:
        outputStream() << ".MANUFACTURE.";
        break;
    case IfcEnvironmentalImpactCategoryEnum_TRANSPORTATION:
        outputStream() << ".TRANSPORTATION.";
        break;
    case IfcEnvironmentalImpactCategoryEnum_USERDEFINED:
        outputStream() << ".USERDEFINED.";
        break;
    case IfcEnvironmentalImpactCategoryEnum_NOTDEFINED:
        outputStream() << ".NOTDEFINED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcEvaporativeCoolerTypeEnum(IfcEvaporativeCoolerTypeEnum enumData)
{
    switch(enumData)
    {
    case IfcEvaporativeCoolerTypeEnum_DIRECTEVAPORATIVERANDOMMEDIAAIRCOOLER:
        outputStream() << ".DIRECTEVAPORATIVERANDOMMEDIAAIRCOOLER.";
        break;
    case IfcEvaporativeCoolerTypeEnum_DIRECTEVAPORATIVERIGIDMEDIAAIRCOOLER:
        outputStream() << ".DIRECTEVAPORATIVERIGIDMEDIAAIRCOOLER.";
        break;
    case IfcEvaporativeCoolerTypeEnum_DIRECTEVAPORATIVESLINGERSPACKAGEDAIRCOOLER:
        outputStream() << ".DIRECTEVAPORATIVESLINGERSPACKAGEDAIRCOOLER.";
        break;
    case IfcEvaporativeCoolerTypeEnum_DIRECTEVAPORATIVEPACKAGEDROTARYAIRCOOLER:
        outputStream() << ".DIRECTEVAPORATIVEPACKAGEDROTARYAIRCOOLER.";
        break;
    case IfcEvaporativeCoolerTypeEnum_DIRECTEVAPORATIVEAIRWASHER:
        outputStream() << ".DIRECTEVAPORATIVEAIRWASHER.";
        break;
    case IfcEvaporativeCoolerTypeEnum_INDIRECTEVAPORATIVEPACKAGEAIRCOOLER:
        outputStream() << ".INDIRECTEVAPORATIVEPACKAGEAIRCOOLER.";
        break;
    case IfcEvaporativeCoolerTypeEnum_INDIRECTEVAPORATIVEWETCOIL:
        outputStream() << ".INDIRECTEVAPORATIVEWETCOIL.";
        break;
    case IfcEvaporativeCoolerTypeEnum_INDIRECTEVAPORATIVECOOLINGTOWERORCOILCOOLER:
        outputStream() << ".INDIRECTEVAPORATIVECOOLINGTOWERORCOILCOOLER.";
        break;
    case IfcEvaporativeCoolerTypeEnum_INDIRECTDIRECTCOMBINATION:
        outputStream() << ".INDIRECTDIRECTCOMBINATION.";
        break;
    case IfcEvaporativeCoolerTypeEnum_USERDEFINED:
        outputStream() << ".USERDEFINED.";
        break;
    case IfcEvaporativeCoolerTypeEnum_NOTDEFINED:
        outputStream() << ".NOTDEFINED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcEvaporatorTypeEnum(IfcEvaporatorTypeEnum enumData)
{
    switch(enumData)
    {
    case IfcEvaporatorTypeEnum_DIRECTEXPANSIONSHELLANDTUBE:
        outputStream() << ".DIRECTEXPANSIONSHELLANDTUBE.";
        break;
    case IfcEvaporatorTypeEnum_DIRECTEXPANSIONTUBEINTUBE:
        outputStream() << ".DIRECTEXPANSIONTUBEINTUBE.";
        break;
    case IfcEvaporatorTypeEnum_DIRECTEXPANSIONBRAZEDPLATE:
        outputStream() << ".DIRECTEXPANSIONBRAZEDPLATE.";
        break;
    case IfcEvaporatorTypeEnum_FLOODEDSHELLANDTUBE:
        outputStream() << ".FLOODEDSHELLANDTUBE.";
        break;
    case IfcEvaporatorTypeEnum_SHELLANDCOIL:
        outputStream() << ".SHELLANDCOIL.";
        break;
    case IfcEvaporatorTypeEnum_USERDEFINED:
        outputStream() << ".USERDEFINED.";
        break;
    case IfcEvaporatorTypeEnum_NOTDEFINED:
        outputStream() << ".NOTDEFINED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcFanTypeEnum(IfcFanTypeEnum enumData)
{
    switch(enumData)
    {
    case IfcFanTypeEnum_CENTRIFUGALFORWARDCURVED:
        outputStream() << ".CENTRIFUGALFORWARDCURVED.";
        break;
    case IfcFanTypeEnum_CENTRIFUGALRADIAL:
        outputStream() << ".CENTRIFUGALRADIAL.";
        break;
    case IfcFanTypeEnum_CENTRIFUGALBACKWARDINCLINEDCURVED:
        outputStream() << ".CENTRIFUGALBACKWARDINCLINEDCURVED.";
        break;
    case IfcFanTypeEnum_CENTRIFUGALAIRFOIL:
        outputStream() << ".CENTRIFUGALAIRFOIL.";
        break;
    case IfcFanTypeEnum_TUBEAXIAL:
        outputStream() << ".TUBEAXIAL.";
        break;
    case IfcFanTypeEnum_VANEAXIAL:
        outputStream() << ".VANEAXIAL.";
        break;
    case IfcFanTypeEnum_PROPELLORAXIAL:
        outputStream() << ".PROPELLORAXIAL.";
        break;
    case IfcFanTypeEnum_USERDEFINED:
        outputStream() << ".USERDEFINED.";
        break;
    case IfcFanTypeEnum_NOTDEFINED:
        outputStream() << ".NOTDEFINED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcFilterTypeEnum(IfcFilterTypeEnum enumData)
{
    switch(enumData)
    {
    case IfcFilterTypeEnum_AIRPARTICLEFILTER:
        outputStream() << ".AIRPARTICLEFILTER.";
        break;
    case IfcFilterTypeEnum_ODORFILTER:
        outputStream() << ".ODORFILTER.";
        break;
    case IfcFilterTypeEnum_OILFILTER:
        outputStream() << ".OILFILTER.";
        break;
    case IfcFilterTypeEnum_STRAINER:
        outputStream() << ".STRAINER.";
        break;
    case IfcFilterTypeEnum_WATERFILTER:
        outputStream() << ".WATERFILTER.";
        break;
    case IfcFilterTypeEnum_USERDEFINED:
        outputStream() << ".USERDEFINED.";
        break;
    case IfcFilterTypeEnum_NOTDEFINED:
        outputStream() << ".NOTDEFINED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcFireSuppressionTerminalTypeEnum(IfcFireSuppressionTerminalTypeEnum enumData)
{
    switch(enumData)
    {
    case IfcFireSuppressionTerminalTypeEnum_BREECHINGINLET:
        outputStream() << ".BREECHINGINLET.";
        break;
    case IfcFireSuppressionTerminalTypeEnum_FIREHYDRANT:
        outputStream() << ".FIREHYDRANT.";
        break;
    case IfcFireSuppressionTerminalTypeEnum_HOSEREEL:
        outputStream() << ".HOSEREEL.";
        break;
    case IfcFireSuppressionTerminalTypeEnum_SPRINKLER:
        outputStream() << ".SPRINKLER.";
        break;
    case IfcFireSuppressionTerminalTypeEnum_SPRINKLERDEFLECTOR:
        outputStream() << ".SPRINKLERDEFLECTOR.";
        break;
    case IfcFireSuppressionTerminalTypeEnum_USERDEFINED:
        outputStream() << ".USERDEFINED.";
        break;
    case IfcFireSuppressionTerminalTypeEnum_NOTDEFINED:
        outputStream() << ".NOTDEFINED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcFlowDirectionEnum(IfcFlowDirectionEnum enumData)
{
    switch(enumData)
    {
    case IfcFlowDirectionEnum_SOURCE:
        outputStream() << ".SOURCE.";
        break;
    case IfcFlowDirectionEnum_SINK:
        outputStream() << ".SINK.";
        break;
    case IfcFlowDirectionEnum_SOURCEANDSINK:
        outputStream() << ".SOURCEANDSINK.";
        break;
    case IfcFlowDirectionEnum_NOTDEFINED:
        outputStream() << ".NOTDEFINED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcFlowInstrumentTypeEnum(IfcFlowInstrumentTypeEnum enumData)
{
    switch(enumData)
    {
    case IfcFlowInstrumentTypeEnum_PRESSUREGAUGE:
        outputStream() << ".PRESSUREGAUGE.";
        break;
    case IfcFlowInstrumentTypeEnum_THERMOMETER:
        outputStream() << ".THERMOMETER.";
        break;
    case IfcFlowInstrumentTypeEnum_AMMETER:
        outputStream() << ".AMMETER.";
        break;
    case IfcFlowInstrumentTypeEnum_FREQUENCYMETER:
        outputStream() << ".FREQUENCYMETER.";
        break;
    case IfcFlowInstrumentTypeEnum_POWERFACTORMETER:
        outputStream() << ".POWERFACTORMETER.";
        break;
    case IfcFlowInstrumentTypeEnum_PHASEANGLEMETER:
        outputStream() << ".PHASEANGLEMETER.";
        break;
    case IfcFlowInstrumentTypeEnum_VOLTMETER_PEAK:
        outputStream() << ".VOLTMETER_PEAK.";
        break;
    case IfcFlowInstrumentTypeEnum_VOLTMETER_RMS:
        outputStream() << ".VOLTMETER_RMS.";
        break;
    case IfcFlowInstrumentTypeEnum_USERDEFINED:
        outputStream() << ".USERDEFINED.";
        break;
    case IfcFlowInstrumentTypeEnum_NOTDEFINED:
        outputStream() << ".NOTDEFINED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcFlowMeterTypeEnum(IfcFlowMeterTypeEnum enumData)
{
    switch(enumData)
    {
    case IfcFlowMeterTypeEnum_ELECTRICMETER:
        outputStream() << ".ELECTRICMETER.";
        break;
    case IfcFlowMeterTypeEnum_ENERGYMETER:
        outputStream() << ".ENERGYMETER.";
        break;
    case IfcFlowMeterTypeEnum_FLOWMETER:
        outputStream() << ".FLOWMETER.";
        break;
    case IfcFlowMeterTypeEnum_GASMETER:
        outputStream() << ".GASMETER.";
        break;
    case IfcFlowMeterTypeEnum_OILMETER:
        outputStream() << ".OILMETER.";
        break;
    case IfcFlowMeterTypeEnum_WATERMETER:
        outputStream() << ".WATERMETER.";
        break;
    case IfcFlowMeterTypeEnum_USERDEFINED:
        outputStream() << ".USERDEFINED.";
        break;
    case IfcFlowMeterTypeEnum_NOTDEFINED:
        outputStream() << ".NOTDEFINED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcFootingTypeEnum(IfcFootingTypeEnum enumData)
{
    switch(enumData)
    {
    case IfcFootingTypeEnum_FOOTING_BEAM:
        outputStream() << ".FOOTING_BEAM.";
        break;
    case IfcFootingTypeEnum_PAD_FOOTING:
        outputStream() << ".PAD_FOOTING.";
        break;
    case IfcFootingTypeEnum_PILE_CAP:
        outputStream() << ".PILE_CAP.";
        break;
    case IfcFootingTypeEnum_STRIP_FOOTING:
        outputStream() << ".STRIP_FOOTING.";
        break;
    case IfcFootingTypeEnum_USERDEFINED:
        outputStream() << ".USERDEFINED.";
        break;
    case IfcFootingTypeEnum_NOTDEFINED:
        outputStream() << ".NOTDEFINED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcGasTerminalTypeEnum(IfcGasTerminalTypeEnum enumData)
{
    switch(enumData)
    {
    case IfcGasTerminalTypeEnum_GASAPPLIANCE:
        outputStream() << ".GASAPPLIANCE.";
        break;
    case IfcGasTerminalTypeEnum_GASBOOSTER:
        outputStream() << ".GASBOOSTER.";
        break;
    case IfcGasTerminalTypeEnum_GASBURNER:
        outputStream() << ".GASBURNER.";
        break;
    case IfcGasTerminalTypeEnum_USERDEFINED:
        outputStream() << ".USERDEFINED.";
        break;
    case IfcGasTerminalTypeEnum_NOTDEFINED:
        outputStream() << ".NOTDEFINED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcGeometricProjectionEnum(IfcGeometricProjectionEnum enumData)
{
    switch(enumData)
    {
    case IfcGeometricProjectionEnum_GRAPH_VIEW:
        outputStream() << ".GRAPH_VIEW.";
        break;
    case IfcGeometricProjectionEnum_SKETCH_VIEW:
        outputStream() << ".SKETCH_VIEW.";
        break;
    case IfcGeometricProjectionEnum_MODEL_VIEW:
        outputStream() << ".MODEL_VIEW.";
        break;
    case IfcGeometricProjectionEnum_PLAN_VIEW:
        outputStream() << ".PLAN_VIEW.";
        break;
    case IfcGeometricProjectionEnum_REFLECTED_PLAN_VIEW:
        outputStream() << ".REFLECTED_PLAN_VIEW.";
        break;
    case IfcGeometricProjectionEnum_SECTION_VIEW:
        outputStream() << ".SECTION_VIEW.";
        break;
    case IfcGeometricProjectionEnum_ELEVATION_VIEW:
        outputStream() << ".ELEVATION_VIEW.";
        break;
    case IfcGeometricProjectionEnum_USERDEFINED:
        outputStream() << ".USERDEFINED.";
        break;
    case IfcGeometricProjectionEnum_NOTDEFINED:
        outputStream() << ".NOTDEFINED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcGlobalOrLocalEnum(IfcGlobalOrLocalEnum enumData)
{
    switch(enumData)
    {
    case IfcGlobalOrLocalEnum_GLOBAL_COORDS:
        outputStream() << ".GLOBAL_COORDS.";
        break;
    case IfcGlobalOrLocalEnum_LOCAL_COORDS:
        outputStream() << ".LOCAL_COORDS.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcHeatExchangerTypeEnum(IfcHeatExchangerTypeEnum enumData)
{
    switch(enumData)
    {
    case IfcHeatExchangerTypeEnum_PLATE:
        outputStream() << ".PLATE.";
        break;
    case IfcHeatExchangerTypeEnum_SHELLANDTUBE:
        outputStream() << ".SHELLANDTUBE.";
        break;
    case IfcHeatExchangerTypeEnum_USERDEFINED:
        outputStream() << ".USERDEFINED.";
        break;
    case IfcHeatExchangerTypeEnum_NOTDEFINED:
        outputStream() << ".NOTDEFINED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcHumidifierTypeEnum(IfcHumidifierTypeEnum enumData)
{
    switch(enumData)
    {
    case IfcHumidifierTypeEnum_STEAMINJECTION:
        outputStream() << ".STEAMINJECTION.";
        break;
    case IfcHumidifierTypeEnum_ADIABATICAIRWASHER:
        outputStream() << ".ADIABATICAIRWASHER.";
        break;
    case IfcHumidifierTypeEnum_ADIABATICPAN:
        outputStream() << ".ADIABATICPAN.";
        break;
    case IfcHumidifierTypeEnum_ADIABATICWETTEDELEMENT:
        outputStream() << ".ADIABATICWETTEDELEMENT.";
        break;
    case IfcHumidifierTypeEnum_ADIABATICATOMIZING:
        outputStream() << ".ADIABATICATOMIZING.";
        break;
    case IfcHumidifierTypeEnum_ADIABATICULTRASONIC:
        outputStream() << ".ADIABATICULTRASONIC.";
        break;
    case IfcHumidifierTypeEnum_ADIABATICRIGIDMEDIA:
        outputStream() << ".ADIABATICRIGIDMEDIA.";
        break;
    case IfcHumidifierTypeEnum_ADIABATICCOMPRESSEDAIRNOZZLE:
        outputStream() << ".ADIABATICCOMPRESSEDAIRNOZZLE.";
        break;
    case IfcHumidifierTypeEnum_ASSISTEDELECTRIC:
        outputStream() << ".ASSISTEDELECTRIC.";
        break;
    case IfcHumidifierTypeEnum_ASSISTEDNATURALGAS:
        outputStream() << ".ASSISTEDNATURALGAS.";
        break;
    case IfcHumidifierTypeEnum_ASSISTEDPROPANE:
        outputStream() << ".ASSISTEDPROPANE.";
        break;
    case IfcHumidifierTypeEnum_ASSISTEDBUTANE:
        outputStream() << ".ASSISTEDBUTANE.";
        break;
    case IfcHumidifierTypeEnum_ASSISTEDSTEAM:
        outputStream() << ".ASSISTEDSTEAM.";
        break;
    case IfcHumidifierTypeEnum_USERDEFINED:
        outputStream() << ".USERDEFINED.";
        break;
    case IfcHumidifierTypeEnum_NOTDEFINED:
        outputStream() << ".NOTDEFINED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcInternalOrExternalEnum(IfcInternalOrExternalEnum enumData)
{
    switch(enumData)
    {
    case IfcInternalOrExternalEnum_INTERNAL:
        outputStream() << ".INTERNAL.";
        break;
    case IfcInternalOrExternalEnum_EXTERNAL:
        outputStream() << ".EXTERNAL.";
        break;
    case IfcInternalOrExternalEnum_NOTDEFINED:
        outputStream() << ".NOTDEFINED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcInventoryTypeEnum(IfcInventoryTypeEnum enumData)
{
    switch(enumData)
    {
    case IfcInventoryTypeEnum_ASSETINVENTORY:
        outputStream() << ".ASSETINVENTORY.";
        break;
    case IfcInventoryTypeEnum_SPACEINVENTORY:
        outputStream() << ".SPACEINVENTORY.";
        break;
    case IfcInventoryTypeEnum_FURNITUREINVENTORY:
        outputStream() << ".FURNITUREINVENTORY.";
        break;
    case IfcInventoryTypeEnum_USERDEFINED:
        outputStream() << ".USERDEFINED.";
        break;
    case IfcInventoryTypeEnum_NOTDEFINED:
        outputStream() << ".NOTDEFINED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcJunctionBoxTypeEnum(IfcJunctionBoxTypeEnum enumData)
{
    switch(enumData)
    {
    case IfcJunctionBoxTypeEnum_USERDEFINED:
        outputStream() << ".USERDEFINED.";
        break;
    case IfcJunctionBoxTypeEnum_NOTDEFINED:
        outputStream() << ".NOTDEFINED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcLampTypeEnum(IfcLampTypeEnum enumData)
{
    switch(enumData)
    {
    case IfcLampTypeEnum_COMPACTFLUORESCENT:
        outputStream() << ".COMPACTFLUORESCENT.";
        break;
    case IfcLampTypeEnum_FLUORESCENT:
        outputStream() << ".FLUORESCENT.";
        break;
    case IfcLampTypeEnum_HIGHPRESSUREMERCURY:
        outputStream() << ".HIGHPRESSUREMERCURY.";
        break;
    case IfcLampTypeEnum_HIGHPRESSURESODIUM:
        outputStream() << ".HIGHPRESSURESODIUM.";
        break;
    case IfcLampTypeEnum_METALHALIDE:
        outputStream() << ".METALHALIDE.";
        break;
    case IfcLampTypeEnum_TUNGSTENFILAMENT:
        outputStream() << ".TUNGSTENFILAMENT.";
        break;
    case IfcLampTypeEnum_USERDEFINED:
        outputStream() << ".USERDEFINED.";
        break;
    case IfcLampTypeEnum_NOTDEFINED:
        outputStream() << ".NOTDEFINED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcLayerSetDirectionEnum(IfcLayerSetDirectionEnum enumData)
{
    switch(enumData)
    {
    case IfcLayerSetDirectionEnum_AXIS1:
        outputStream() << ".AXIS1.";
        break;
    case IfcLayerSetDirectionEnum_AXIS2:
        outputStream() << ".AXIS2.";
        break;
    case IfcLayerSetDirectionEnum_AXIS3:
        outputStream() << ".AXIS3.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcLightDistributionCurveEnum(IfcLightDistributionCurveEnum enumData)
{
    switch(enumData)
    {
    case IfcLightDistributionCurveEnum_TYPE_A:
        outputStream() << ".TYPE_A.";
        break;
    case IfcLightDistributionCurveEnum_TYPE_B:
        outputStream() << ".TYPE_B.";
        break;
    case IfcLightDistributionCurveEnum_TYPE_C:
        outputStream() << ".TYPE_C.";
        break;
    case IfcLightDistributionCurveEnum_NOTDEFINED:
        outputStream() << ".NOTDEFINED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcLightEmissionSourceEnum(IfcLightEmissionSourceEnum enumData)
{
    switch(enumData)
    {
    case IfcLightEmissionSourceEnum_COMPACTFLUORESCENT:
        outputStream() << ".COMPACTFLUORESCENT.";
        break;
    case IfcLightEmissionSourceEnum_FLUORESCENT:
        outputStream() << ".FLUORESCENT.";
        break;
    case IfcLightEmissionSourceEnum_HIGHPRESSUREMERCURY:
        outputStream() << ".HIGHPRESSUREMERCURY.";
        break;
    case IfcLightEmissionSourceEnum_HIGHPRESSURESODIUM:
        outputStream() << ".HIGHPRESSURESODIUM.";
        break;
    case IfcLightEmissionSourceEnum_LIGHTEMITTINGDIODE:
        outputStream() << ".LIGHTEMITTINGDIODE.";
        break;
    case IfcLightEmissionSourceEnum_LOWPRESSURESODIUM:
        outputStream() << ".LOWPRESSURESODIUM.";
        break;
    case IfcLightEmissionSourceEnum_LOWVOLTAGEHALOGEN:
        outputStream() << ".LOWVOLTAGEHALOGEN.";
        break;
    case IfcLightEmissionSourceEnum_MAINVOLTAGEHALOGEN:
        outputStream() << ".MAINVOLTAGEHALOGEN.";
        break;
    case IfcLightEmissionSourceEnum_METALHALIDE:
        outputStream() << ".METALHALIDE.";
        break;
    case IfcLightEmissionSourceEnum_TUNGSTENFILAMENT:
        outputStream() << ".TUNGSTENFILAMENT.";
        break;
    case IfcLightEmissionSourceEnum_NOTDEFINED:
        outputStream() << ".NOTDEFINED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcLightFixtureTypeEnum(IfcLightFixtureTypeEnum enumData)
{
    switch(enumData)
    {
    case IfcLightFixtureTypeEnum_POINTSOURCE:
        outputStream() << ".POINTSOURCE.";
        break;
    case IfcLightFixtureTypeEnum_DIRECTIONSOURCE:
        outputStream() << ".DIRECTIONSOURCE.";
        break;
    case IfcLightFixtureTypeEnum_USERDEFINED:
        outputStream() << ".USERDEFINED.";
        break;
    case IfcLightFixtureTypeEnum_NOTDEFINED:
        outputStream() << ".NOTDEFINED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcLoadGroupTypeEnum(IfcLoadGroupTypeEnum enumData)
{
    switch(enumData)
    {
    case IfcLoadGroupTypeEnum_LOAD_GROUP:
        outputStream() << ".LOAD_GROUP.";
        break;
    case IfcLoadGroupTypeEnum_LOAD_CASE:
        outputStream() << ".LOAD_CASE.";
        break;
    case IfcLoadGroupTypeEnum_LOAD_COMBINATION_GROUP:
        outputStream() << ".LOAD_COMBINATION_GROUP.";
        break;
    case IfcLoadGroupTypeEnum_LOAD_COMBINATION:
        outputStream() << ".LOAD_COMBINATION.";
        break;
    case IfcLoadGroupTypeEnum_USERDEFINED:
        outputStream() << ".USERDEFINED.";
        break;
    case IfcLoadGroupTypeEnum_NOTDEFINED:
        outputStream() << ".NOTDEFINED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcLogicalOperatorEnum(IfcLogicalOperatorEnum enumData)
{
    switch(enumData)
    {
    case IfcLogicalOperatorEnum_LOGICALAND:
        outputStream() << ".LOGICALAND.";
        break;
    case IfcLogicalOperatorEnum_LOGICALOR:
        outputStream() << ".LOGICALOR.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcMemberTypeEnum(IfcMemberTypeEnum enumData)
{
    switch(enumData)
    {
    case IfcMemberTypeEnum_BRACE:
        outputStream() << ".BRACE.";
        break;
    case IfcMemberTypeEnum_CHORD:
        outputStream() << ".CHORD.";
        break;
    case IfcMemberTypeEnum_COLLAR:
        outputStream() << ".COLLAR.";
        break;
    case IfcMemberTypeEnum_MEMBER:
        outputStream() << ".MEMBER.";
        break;
    case IfcMemberTypeEnum_MULLION:
        outputStream() << ".MULLION.";
        break;
    case IfcMemberTypeEnum_PLATE:
        outputStream() << ".PLATE.";
        break;
    case IfcMemberTypeEnum_POST:
        outputStream() << ".POST.";
        break;
    case IfcMemberTypeEnum_PURLIN:
        outputStream() << ".PURLIN.";
        break;
    case IfcMemberTypeEnum_RAFTER:
        outputStream() << ".RAFTER.";
        break;
    case IfcMemberTypeEnum_STRINGER:
        outputStream() << ".STRINGER.";
        break;
    case IfcMemberTypeEnum_STRUT:
        outputStream() << ".STRUT.";
        break;
    case IfcMemberTypeEnum_STUD:
        outputStream() << ".STUD.";
        break;
    case IfcMemberTypeEnum_USERDEFINED:
        outputStream() << ".USERDEFINED.";
        break;
    case IfcMemberTypeEnum_NOTDEFINED:
        outputStream() << ".NOTDEFINED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcMotorConnectionTypeEnum(IfcMotorConnectionTypeEnum enumData)
{
    switch(enumData)
    {
    case IfcMotorConnectionTypeEnum_BELTDRIVE:
        outputStream() << ".BELTDRIVE.";
        break;
    case IfcMotorConnectionTypeEnum_COUPLING:
        outputStream() << ".COUPLING.";
        break;
    case IfcMotorConnectionTypeEnum_DIRECTDRIVE:
        outputStream() << ".DIRECTDRIVE.";
        break;
    case IfcMotorConnectionTypeEnum_USERDEFINED:
        outputStream() << ".USERDEFINED.";
        break;
    case IfcMotorConnectionTypeEnum_NOTDEFINED:
        outputStream() << ".NOTDEFINED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcNullStyle(IfcNullStyle enumData)
{
    switch(enumData)
    {
    case IfcNullStyle_NULL:
        outputStream() << ".NULL.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcObjectiveEnum(IfcObjectiveEnum enumData)
{
    switch(enumData)
    {
    case IfcObjectiveEnum_CODECOMPLIANCE:
        outputStream() << ".CODECOMPLIANCE.";
        break;
    case IfcObjectiveEnum_DESIGNINTENT:
        outputStream() << ".DESIGNINTENT.";
        break;
    case IfcObjectiveEnum_HEALTHANDSAFETY:
        outputStream() << ".HEALTHANDSAFETY.";
        break;
    case IfcObjectiveEnum_REQUIREMENT:
        outputStream() << ".REQUIREMENT.";
        break;
    case IfcObjectiveEnum_SPECIFICATION:
        outputStream() << ".SPECIFICATION.";
        break;
    case IfcObjectiveEnum_TRIGGERCONDITION:
        outputStream() << ".TRIGGERCONDITION.";
        break;
    case IfcObjectiveEnum_USERDEFINED:
        outputStream() << ".USERDEFINED.";
        break;
    case IfcObjectiveEnum_NOTDEFINED:
        outputStream() << ".NOTDEFINED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcObjectTypeEnum(IfcObjectTypeEnum enumData)
{
    switch(enumData)
    {
    case IfcObjectTypeEnum_PRODUCT:
        outputStream() << ".PRODUCT.";
        break;
    case IfcObjectTypeEnum_PROCESS:
        outputStream() << ".PROCESS.";
        break;
    case IfcObjectTypeEnum_CONTROL:
        outputStream() << ".CONTROL.";
        break;
    case IfcObjectTypeEnum_RESOURCE:
        outputStream() << ".RESOURCE.";
        break;
    case IfcObjectTypeEnum_ACTOR:
        outputStream() << ".ACTOR.";
        break;
    case IfcObjectTypeEnum_GROUP:
        outputStream() << ".GROUP.";
        break;
    case IfcObjectTypeEnum_PROJECT:
        outputStream() << ".PROJECT.";
        break;
    case IfcObjectTypeEnum_NOTDEFINED:
        outputStream() << ".NOTDEFINED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcOccupantTypeEnum(IfcOccupantTypeEnum enumData)
{
    switch(enumData)
    {
    case IfcOccupantTypeEnum_ASSIGNEE:
        outputStream() << ".ASSIGNEE.";
        break;
    case IfcOccupantTypeEnum_ASSIGNOR:
        outputStream() << ".ASSIGNOR.";
        break;
    case IfcOccupantTypeEnum_LESSEE:
        outputStream() << ".LESSEE.";
        break;
    case IfcOccupantTypeEnum_LESSOR:
        outputStream() << ".LESSOR.";
        break;
    case IfcOccupantTypeEnum_LETTINGAGENT:
        outputStream() << ".LETTINGAGENT.";
        break;
    case IfcOccupantTypeEnum_OWNER:
        outputStream() << ".OWNER.";
        break;
    case IfcOccupantTypeEnum_TENANT:
        outputStream() << ".TENANT.";
        break;
    case IfcOccupantTypeEnum_USERDEFINED:
        outputStream() << ".USERDEFINED.";
        break;
    case IfcOccupantTypeEnum_NOTDEFINED:
        outputStream() << ".NOTDEFINED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcOutletTypeEnum(IfcOutletTypeEnum enumData)
{
    switch(enumData)
    {
    case IfcOutletTypeEnum_AUDIOVISUALOUTLET:
        outputStream() << ".AUDIOVISUALOUTLET.";
        break;
    case IfcOutletTypeEnum_COMMUNICATIONSOUTLET:
        outputStream() << ".COMMUNICATIONSOUTLET.";
        break;
    case IfcOutletTypeEnum_POWEROUTLET:
        outputStream() << ".POWEROUTLET.";
        break;
    case IfcOutletTypeEnum_USERDEFINED:
        outputStream() << ".USERDEFINED.";
        break;
    case IfcOutletTypeEnum_NOTDEFINED:
        outputStream() << ".NOTDEFINED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcPermeableCoveringOperationEnum(IfcPermeableCoveringOperationEnum enumData)
{
    switch(enumData)
    {
    case IfcPermeableCoveringOperationEnum_GRILL:
        outputStream() << ".GRILL.";
        break;
    case IfcPermeableCoveringOperationEnum_LOUVER:
        outputStream() << ".LOUVER.";
        break;
    case IfcPermeableCoveringOperationEnum_SCREEN:
        outputStream() << ".SCREEN.";
        break;
    case IfcPermeableCoveringOperationEnum_USERDEFINED:
        outputStream() << ".USERDEFINED.";
        break;
    case IfcPermeableCoveringOperationEnum_NOTDEFINED:
        outputStream() << ".NOTDEFINED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcPhysicalOrVirtualEnum(IfcPhysicalOrVirtualEnum enumData)
{
    switch(enumData)
    {
    case IfcPhysicalOrVirtualEnum_PHYSICAL:
        outputStream() << ".PHYSICAL.";
        break;
    case IfcPhysicalOrVirtualEnum_VIRTUAL:
        outputStream() << ".VIRTUAL.";
        break;
    case IfcPhysicalOrVirtualEnum_NOTDEFINED:
        outputStream() << ".NOTDEFINED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcPileConstructionEnum(IfcPileConstructionEnum enumData)
{
    switch(enumData)
    {
    case IfcPileConstructionEnum_CAST_IN_PLACE:
        outputStream() << ".CAST_IN_PLACE.";
        break;
    case IfcPileConstructionEnum_COMPOSITE:
        outputStream() << ".COMPOSITE.";
        break;
    case IfcPileConstructionEnum_PRECAST_CONCRETE:
        outputStream() << ".PRECAST_CONCRETE.";
        break;
    case IfcPileConstructionEnum_PREFAB_STEEL:
        outputStream() << ".PREFAB_STEEL.";
        break;
    case IfcPileConstructionEnum_USERDEFINED:
        outputStream() << ".USERDEFINED.";
        break;
    case IfcPileConstructionEnum_NOTDEFINED:
        outputStream() << ".NOTDEFINED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcPileTypeEnum(IfcPileTypeEnum enumData)
{
    switch(enumData)
    {
    case IfcPileTypeEnum_COHESION:
        outputStream() << ".COHESION.";
        break;
    case IfcPileTypeEnum_FRICTION:
        outputStream() << ".FRICTION.";
        break;
    case IfcPileTypeEnum_SUPPORT:
        outputStream() << ".SUPPORT.";
        break;
    case IfcPileTypeEnum_USERDEFINED:
        outputStream() << ".USERDEFINED.";
        break;
    case IfcPileTypeEnum_NOTDEFINED:
        outputStream() << ".NOTDEFINED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcPipeFittingTypeEnum(IfcPipeFittingTypeEnum enumData)
{
    switch(enumData)
    {
    case IfcPipeFittingTypeEnum_BEND:
        outputStream() << ".BEND.";
        break;
    case IfcPipeFittingTypeEnum_CONNECTOR:
        outputStream() << ".CONNECTOR.";
        break;
    case IfcPipeFittingTypeEnum_ENTRY:
        outputStream() << ".ENTRY.";
        break;
    case IfcPipeFittingTypeEnum_EXIT:
        outputStream() << ".EXIT.";
        break;
    case IfcPipeFittingTypeEnum_JUNCTION:
        outputStream() << ".JUNCTION.";
        break;
    case IfcPipeFittingTypeEnum_OBSTRUCTION:
        outputStream() << ".OBSTRUCTION.";
        break;
    case IfcPipeFittingTypeEnum_TRANSITION:
        outputStream() << ".TRANSITION.";
        break;
    case IfcPipeFittingTypeEnum_USERDEFINED:
        outputStream() << ".USERDEFINED.";
        break;
    case IfcPipeFittingTypeEnum_NOTDEFINED:
        outputStream() << ".NOTDEFINED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcPipeSegmentTypeEnum(IfcPipeSegmentTypeEnum enumData)
{
    switch(enumData)
    {
    case IfcPipeSegmentTypeEnum_FLEXIBLESEGMENT:
        outputStream() << ".FLEXIBLESEGMENT.";
        break;
    case IfcPipeSegmentTypeEnum_RIGIDSEGMENT:
        outputStream() << ".RIGIDSEGMENT.";
        break;
    case IfcPipeSegmentTypeEnum_GUTTER:
        outputStream() << ".GUTTER.";
        break;
    case IfcPipeSegmentTypeEnum_SPOOL:
        outputStream() << ".SPOOL.";
        break;
    case IfcPipeSegmentTypeEnum_USERDEFINED:
        outputStream() << ".USERDEFINED.";
        break;
    case IfcPipeSegmentTypeEnum_NOTDEFINED:
        outputStream() << ".NOTDEFINED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcPlateTypeEnum(IfcPlateTypeEnum enumData)
{
    switch(enumData)
    {
    case IfcPlateTypeEnum_CURTAIN_PANEL:
        outputStream() << ".CURTAIN_PANEL.";
        break;
    case IfcPlateTypeEnum_SHEET:
        outputStream() << ".SHEET.";
        break;
    case IfcPlateTypeEnum_USERDEFINED:
        outputStream() << ".USERDEFINED.";
        break;
    case IfcPlateTypeEnum_NOTDEFINED:
        outputStream() << ".NOTDEFINED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcProcedureTypeEnum(IfcProcedureTypeEnum enumData)
{
    switch(enumData)
    {
    case IfcProcedureTypeEnum_ADVICE_CAUTION:
        outputStream() << ".ADVICE_CAUTION.";
        break;
    case IfcProcedureTypeEnum_ADVICE_NOTE:
        outputStream() << ".ADVICE_NOTE.";
        break;
    case IfcProcedureTypeEnum_ADVICE_WARNING:
        outputStream() << ".ADVICE_WARNING.";
        break;
    case IfcProcedureTypeEnum_CALIBRATION:
        outputStream() << ".CALIBRATION.";
        break;
    case IfcProcedureTypeEnum_DIAGNOSTIC:
        outputStream() << ".DIAGNOSTIC.";
        break;
    case IfcProcedureTypeEnum_SHUTDOWN:
        outputStream() << ".SHUTDOWN.";
        break;
    case IfcProcedureTypeEnum_STARTUP:
        outputStream() << ".STARTUP.";
        break;
    case IfcProcedureTypeEnum_USERDEFINED:
        outputStream() << ".USERDEFINED.";
        break;
    case IfcProcedureTypeEnum_NOTDEFINED:
        outputStream() << ".NOTDEFINED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcProfileTypeEnum(IfcProfileTypeEnum enumData)
{
    switch(enumData)
    {
    case IfcProfileTypeEnum_CURVE:
        outputStream() << ".CURVE.";
        break;
    case IfcProfileTypeEnum_AREA:
        outputStream() << ".AREA.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcProjectedOrTrueLengthEnum(IfcProjectedOrTrueLengthEnum enumData)
{
    switch(enumData)
    {
    case IfcProjectedOrTrueLengthEnum_PROJECTED_LENGTH:
        outputStream() << ".PROJECTED_LENGTH.";
        break;
    case IfcProjectedOrTrueLengthEnum_TRUE_LENGTH:
        outputStream() << ".TRUE_LENGTH.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcProjectOrderRecordTypeEnum(IfcProjectOrderRecordTypeEnum enumData)
{
    switch(enumData)
    {
    case IfcProjectOrderRecordTypeEnum_CHANGE:
        outputStream() << ".CHANGE.";
        break;
    case IfcProjectOrderRecordTypeEnum_MAINTENANCE:
        outputStream() << ".MAINTENANCE.";
        break;
    case IfcProjectOrderRecordTypeEnum_MOVE:
        outputStream() << ".MOVE.";
        break;
    case IfcProjectOrderRecordTypeEnum_PURCHASE:
        outputStream() << ".PURCHASE.";
        break;
    case IfcProjectOrderRecordTypeEnum_WORK:
        outputStream() << ".WORK.";
        break;
    case IfcProjectOrderRecordTypeEnum_USERDEFINED:
        outputStream() << ".USERDEFINED.";
        break;
    case IfcProjectOrderRecordTypeEnum_NOTDEFINED:
        outputStream() << ".NOTDEFINED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcProjectOrderTypeEnum(IfcProjectOrderTypeEnum enumData)
{
    switch(enumData)
    {
    case IfcProjectOrderTypeEnum_CHANGEORDER:
        outputStream() << ".CHANGEORDER.";
        break;
    case IfcProjectOrderTypeEnum_MAINTENANCEWORKORDER:
        outputStream() << ".MAINTENANCEWORKORDER.";
        break;
    case IfcProjectOrderTypeEnum_MOVEORDER:
        outputStream() << ".MOVEORDER.";
        break;
    case IfcProjectOrderTypeEnum_PURCHASEORDER:
        outputStream() << ".PURCHASEORDER.";
        break;
    case IfcProjectOrderTypeEnum_WORKORDER:
        outputStream() << ".WORKORDER.";
        break;
    case IfcProjectOrderTypeEnum_USERDEFINED:
        outputStream() << ".USERDEFINED.";
        break;
    case IfcProjectOrderTypeEnum_NOTDEFINED:
        outputStream() << ".NOTDEFINED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcPropertySourceEnum(IfcPropertySourceEnum enumData)
{
    switch(enumData)
    {
    case IfcPropertySourceEnum_DESIGN:
        outputStream() << ".DESIGN.";
        break;
    case IfcPropertySourceEnum_DESIGNMAXIMUM:
        outputStream() << ".DESIGNMAXIMUM.";
        break;
    case IfcPropertySourceEnum_DESIGNMINIMUM:
        outputStream() << ".DESIGNMINIMUM.";
        break;
    case IfcPropertySourceEnum_SIMULATED:
        outputStream() << ".SIMULATED.";
        break;
    case IfcPropertySourceEnum_ASBUILT:
        outputStream() << ".ASBUILT.";
        break;
    case IfcPropertySourceEnum_COMMISSIONING:
        outputStream() << ".COMMISSIONING.";
        break;
    case IfcPropertySourceEnum_MEASURED:
        outputStream() << ".MEASURED.";
        break;
    case IfcPropertySourceEnum_USERDEFINED:
        outputStream() << ".USERDEFINED.";
        break;
    case IfcPropertySourceEnum_NOTKNOWN:
        outputStream() << ".NOTKNOWN.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcProtectiveDeviceTypeEnum(IfcProtectiveDeviceTypeEnum enumData)
{
    switch(enumData)
    {
    case IfcProtectiveDeviceTypeEnum_FUSEDISCONNECTOR:
        outputStream() << ".FUSEDISCONNECTOR.";
        break;
    case IfcProtectiveDeviceTypeEnum_CIRCUITBREAKER:
        outputStream() << ".CIRCUITBREAKER.";
        break;
    case IfcProtectiveDeviceTypeEnum_EARTHFAILUREDEVICE:
        outputStream() << ".EARTHFAILUREDEVICE.";
        break;
    case IfcProtectiveDeviceTypeEnum_RESIDUALCURRENTCIRCUITBREAKER:
        outputStream() << ".RESIDUALCURRENTCIRCUITBREAKER.";
        break;
    case IfcProtectiveDeviceTypeEnum_RESIDUALCURRENTSWITCH:
        outputStream() << ".RESIDUALCURRENTSWITCH.";
        break;
    case IfcProtectiveDeviceTypeEnum_VARISTOR:
        outputStream() << ".VARISTOR.";
        break;
    case IfcProtectiveDeviceTypeEnum_USERDEFINED:
        outputStream() << ".USERDEFINED.";
        break;
    case IfcProtectiveDeviceTypeEnum_NOTDEFINED:
        outputStream() << ".NOTDEFINED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcPumpTypeEnum(IfcPumpTypeEnum enumData)
{
    switch(enumData)
    {
    case IfcPumpTypeEnum_CIRCULATOR:
        outputStream() << ".CIRCULATOR.";
        break;
    case IfcPumpTypeEnum_ENDSUCTION:
        outputStream() << ".ENDSUCTION.";
        break;
    case IfcPumpTypeEnum_SPLITCASE:
        outputStream() << ".SPLITCASE.";
        break;
    case IfcPumpTypeEnum_VERTICALINLINE:
        outputStream() << ".VERTICALINLINE.";
        break;
    case IfcPumpTypeEnum_VERTICALTURBINE:
        outputStream() << ".VERTICALTURBINE.";
        break;
    case IfcPumpTypeEnum_USERDEFINED:
        outputStream() << ".USERDEFINED.";
        break;
    case IfcPumpTypeEnum_NOTDEFINED:
        outputStream() << ".NOTDEFINED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcRailingTypeEnum(IfcRailingTypeEnum enumData)
{
    switch(enumData)
    {
    case IfcRailingTypeEnum_HANDRAIL:
        outputStream() << ".HANDRAIL.";
        break;
    case IfcRailingTypeEnum_GUARDRAIL:
        outputStream() << ".GUARDRAIL.";
        break;
    case IfcRailingTypeEnum_BALUSTRADE:
        outputStream() << ".BALUSTRADE.";
        break;
    case IfcRailingTypeEnum_USERDEFINED:
        outputStream() << ".USERDEFINED.";
        break;
    case IfcRailingTypeEnum_NOTDEFINED:
        outputStream() << ".NOTDEFINED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcRampFlightTypeEnum(IfcRampFlightTypeEnum enumData)
{
    switch(enumData)
    {
    case IfcRampFlightTypeEnum_STRAIGHT:
        outputStream() << ".STRAIGHT.";
        break;
    case IfcRampFlightTypeEnum_SPIRAL:
        outputStream() << ".SPIRAL.";
        break;
    case IfcRampFlightTypeEnum_USERDEFINED:
        outputStream() << ".USERDEFINED.";
        break;
    case IfcRampFlightTypeEnum_NOTDEFINED:
        outputStream() << ".NOTDEFINED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcRampTypeEnum(IfcRampTypeEnum enumData)
{
    switch(enumData)
    {
    case IfcRampTypeEnum_STRAIGHT_RUN_RAMP:
        outputStream() << ".STRAIGHT_RUN_RAMP.";
        break;
    case IfcRampTypeEnum_TWO_STRAIGHT_RUN_RAMP:
        outputStream() << ".TWO_STRAIGHT_RUN_RAMP.";
        break;
    case IfcRampTypeEnum_QUARTER_TURN_RAMP:
        outputStream() << ".QUARTER_TURN_RAMP.";
        break;
    case IfcRampTypeEnum_TWO_QUARTER_TURN_RAMP:
        outputStream() << ".TWO_QUARTER_TURN_RAMP.";
        break;
    case IfcRampTypeEnum_HALF_TURN_RAMP:
        outputStream() << ".HALF_TURN_RAMP.";
        break;
    case IfcRampTypeEnum_SPIRAL_RAMP:
        outputStream() << ".SPIRAL_RAMP.";
        break;
    case IfcRampTypeEnum_USERDEFINED:
        outputStream() << ".USERDEFINED.";
        break;
    case IfcRampTypeEnum_NOTDEFINED:
        outputStream() << ".NOTDEFINED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcReflectanceMethodEnum(IfcReflectanceMethodEnum enumData)
{
    switch(enumData)
    {
    case IfcReflectanceMethodEnum_BLINN:
        outputStream() << ".BLINN.";
        break;
    case IfcReflectanceMethodEnum_FLAT:
        outputStream() << ".FLAT.";
        break;
    case IfcReflectanceMethodEnum_GLASS:
        outputStream() << ".GLASS.";
        break;
    case IfcReflectanceMethodEnum_MATT:
        outputStream() << ".MATT.";
        break;
    case IfcReflectanceMethodEnum_METAL:
        outputStream() << ".METAL.";
        break;
    case IfcReflectanceMethodEnum_MIRROR:
        outputStream() << ".MIRROR.";
        break;
    case IfcReflectanceMethodEnum_PHONG:
        outputStream() << ".PHONG.";
        break;
    case IfcReflectanceMethodEnum_PLASTIC:
        outputStream() << ".PLASTIC.";
        break;
    case IfcReflectanceMethodEnum_STRAUSS:
        outputStream() << ".STRAUSS.";
        break;
    case IfcReflectanceMethodEnum_NOTDEFINED:
        outputStream() << ".NOTDEFINED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcReinforcingBarRoleEnum(IfcReinforcingBarRoleEnum enumData)
{
    switch(enumData)
    {
    case IfcReinforcingBarRoleEnum_MAIN:
        outputStream() << ".MAIN.";
        break;
    case IfcReinforcingBarRoleEnum_SHEAR:
        outputStream() << ".SHEAR.";
        break;
    case IfcReinforcingBarRoleEnum_LIGATURE:
        outputStream() << ".LIGATURE.";
        break;
    case IfcReinforcingBarRoleEnum_STUD:
        outputStream() << ".STUD.";
        break;
    case IfcReinforcingBarRoleEnum_PUNCHING:
        outputStream() << ".PUNCHING.";
        break;
    case IfcReinforcingBarRoleEnum_EDGE:
        outputStream() << ".EDGE.";
        break;
    case IfcReinforcingBarRoleEnum_RING:
        outputStream() << ".RING.";
        break;
    case IfcReinforcingBarRoleEnum_USERDEFINED:
        outputStream() << ".USERDEFINED.";
        break;
    case IfcReinforcingBarRoleEnum_NOTDEFINED:
        outputStream() << ".NOTDEFINED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcReinforcingBarSurfaceEnum(IfcReinforcingBarSurfaceEnum enumData)
{
    switch(enumData)
    {
    case IfcReinforcingBarSurfaceEnum_PLAIN:
        outputStream() << ".PLAIN.";
        break;
    case IfcReinforcingBarSurfaceEnum_TEXTURED:
        outputStream() << ".TEXTURED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcResourceConsumptionEnum(IfcResourceConsumptionEnum enumData)
{
    switch(enumData)
    {
    case IfcResourceConsumptionEnum_CONSUMED:
        outputStream() << ".CONSUMED.";
        break;
    case IfcResourceConsumptionEnum_PARTIALLYCONSUMED:
        outputStream() << ".PARTIALLYCONSUMED.";
        break;
    case IfcResourceConsumptionEnum_NOTCONSUMED:
        outputStream() << ".NOTCONSUMED.";
        break;
    case IfcResourceConsumptionEnum_OCCUPIED:
        outputStream() << ".OCCUPIED.";
        break;
    case IfcResourceConsumptionEnum_PARTIALLYOCCUPIED:
        outputStream() << ".PARTIALLYOCCUPIED.";
        break;
    case IfcResourceConsumptionEnum_NOTOCCUPIED:
        outputStream() << ".NOTOCCUPIED.";
        break;
    case IfcResourceConsumptionEnum_USERDEFINED:
        outputStream() << ".USERDEFINED.";
        break;
    case IfcResourceConsumptionEnum_NOTDEFINED:
        outputStream() << ".NOTDEFINED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcRibPlateDirectionEnum(IfcRibPlateDirectionEnum enumData)
{
    switch(enumData)
    {
    case IfcRibPlateDirectionEnum_DIRECTION_X:
        outputStream() << ".DIRECTION_X.";
        break;
    case IfcRibPlateDirectionEnum_DIRECTION_Y:
        outputStream() << ".DIRECTION_Y.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcRoleEnum(IfcRoleEnum enumData)
{
    switch(enumData)
    {
    case IfcRoleEnum_SUPPLIER:
        outputStream() << ".SUPPLIER.";
        break;
    case IfcRoleEnum_MANUFACTURER:
        outputStream() << ".MANUFACTURER.";
        break;
    case IfcRoleEnum_CONTRACTOR:
        outputStream() << ".CONTRACTOR.";
        break;
    case IfcRoleEnum_SUBCONTRACTOR:
        outputStream() << ".SUBCONTRACTOR.";
        break;
    case IfcRoleEnum_ARCHITECT:
        outputStream() << ".ARCHITECT.";
        break;
    case IfcRoleEnum_STRUCTURALENGINEER:
        outputStream() << ".STRUCTURALENGINEER.";
        break;
    case IfcRoleEnum_COSTENGINEER:
        outputStream() << ".COSTENGINEER.";
        break;
    case IfcRoleEnum_CLIENT:
        outputStream() << ".CLIENT.";
        break;
    case IfcRoleEnum_BUILDINGOWNER:
        outputStream() << ".BUILDINGOWNER.";
        break;
    case IfcRoleEnum_BUILDINGOPERATOR:
        outputStream() << ".BUILDINGOPERATOR.";
        break;
    case IfcRoleEnum_MECHANICALENGINEER:
        outputStream() << ".MECHANICALENGINEER.";
        break;
    case IfcRoleEnum_ELECTRICALENGINEER:
        outputStream() << ".ELECTRICALENGINEER.";
        break;
    case IfcRoleEnum_PROJECTMANAGER:
        outputStream() << ".PROJECTMANAGER.";
        break;
    case IfcRoleEnum_FACILITIESMANAGER:
        outputStream() << ".FACILITIESMANAGER.";
        break;
    case IfcRoleEnum_CIVILENGINEER:
        outputStream() << ".CIVILENGINEER.";
        break;
    case IfcRoleEnum_COMISSIONINGENGINEER:
        outputStream() << ".COMISSIONINGENGINEER.";
        break;
    case IfcRoleEnum_ENGINEER:
        outputStream() << ".ENGINEER.";
        break;
    case IfcRoleEnum_OWNER:
        outputStream() << ".OWNER.";
        break;
    case IfcRoleEnum_CONSULTANT:
        outputStream() << ".CONSULTANT.";
        break;
    case IfcRoleEnum_CONSTRUCTIONMANAGER:
        outputStream() << ".CONSTRUCTIONMANAGER.";
        break;
    case IfcRoleEnum_FIELDCONSTRUCTIONMANAGER:
        outputStream() << ".FIELDCONSTRUCTIONMANAGER.";
        break;
    case IfcRoleEnum_RESELLER:
        outputStream() << ".RESELLER.";
        break;
    case IfcRoleEnum_USERDEFINED:
        outputStream() << ".USERDEFINED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcRoofTypeEnum(IfcRoofTypeEnum enumData)
{
    switch(enumData)
    {
    case IfcRoofTypeEnum_FLAT_ROOF:
        outputStream() << ".FLAT_ROOF.";
        break;
    case IfcRoofTypeEnum_SHED_ROOF:
        outputStream() << ".SHED_ROOF.";
        break;
    case IfcRoofTypeEnum_GABLE_ROOF:
        outputStream() << ".GABLE_ROOF.";
        break;
    case IfcRoofTypeEnum_HIP_ROOF:
        outputStream() << ".HIP_ROOF.";
        break;
    case IfcRoofTypeEnum_HIPPED_GABLE_ROOF:
        outputStream() << ".HIPPED_GABLE_ROOF.";
        break;
    case IfcRoofTypeEnum_GAMBREL_ROOF:
        outputStream() << ".GAMBREL_ROOF.";
        break;
    case IfcRoofTypeEnum_MANSARD_ROOF:
        outputStream() << ".MANSARD_ROOF.";
        break;
    case IfcRoofTypeEnum_BARREL_ROOF:
        outputStream() << ".BARREL_ROOF.";
        break;
    case IfcRoofTypeEnum_RAINBOW_ROOF:
        outputStream() << ".RAINBOW_ROOF.";
        break;
    case IfcRoofTypeEnum_BUTTERFLY_ROOF:
        outputStream() << ".BUTTERFLY_ROOF.";
        break;
    case IfcRoofTypeEnum_PAVILION_ROOF:
        outputStream() << ".PAVILION_ROOF.";
        break;
    case IfcRoofTypeEnum_DOME_ROOF:
        outputStream() << ".DOME_ROOF.";
        break;
    case IfcRoofTypeEnum_FREEFORM:
        outputStream() << ".FREEFORM.";
        break;
    case IfcRoofTypeEnum_NOTDEFINED:
        outputStream() << ".NOTDEFINED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcSanitaryTerminalTypeEnum(IfcSanitaryTerminalTypeEnum enumData)
{
    switch(enumData)
    {
    case IfcSanitaryTerminalTypeEnum_BATH:
        outputStream() << ".BATH.";
        break;
    case IfcSanitaryTerminalTypeEnum_BIDET:
        outputStream() << ".BIDET.";
        break;
    case IfcSanitaryTerminalTypeEnum_CISTERN:
        outputStream() << ".CISTERN.";
        break;
    case IfcSanitaryTerminalTypeEnum_SHOWER:
        outputStream() << ".SHOWER.";
        break;
    case IfcSanitaryTerminalTypeEnum_SINK:
        outputStream() << ".SINK.";
        break;
    case IfcSanitaryTerminalTypeEnum_SANITARYFOUNTAIN:
        outputStream() << ".SANITARYFOUNTAIN.";
        break;
    case IfcSanitaryTerminalTypeEnum_TOILETPAN:
        outputStream() << ".TOILETPAN.";
        break;
    case IfcSanitaryTerminalTypeEnum_URINAL:
        outputStream() << ".URINAL.";
        break;
    case IfcSanitaryTerminalTypeEnum_WASHHANDBASIN:
        outputStream() << ".WASHHANDBASIN.";
        break;
    case IfcSanitaryTerminalTypeEnum_WCSEAT:
        outputStream() << ".WCSEAT.";
        break;
    case IfcSanitaryTerminalTypeEnum_USERDEFINED:
        outputStream() << ".USERDEFINED.";
        break;
    case IfcSanitaryTerminalTypeEnum_NOTDEFINED:
        outputStream() << ".NOTDEFINED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcSectionTypeEnum(IfcSectionTypeEnum enumData)
{
    switch(enumData)
    {
    case IfcSectionTypeEnum_UNIFORM:
        outputStream() << ".UNIFORM.";
        break;
    case IfcSectionTypeEnum_TAPERED:
        outputStream() << ".TAPERED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcSensorTypeEnum(IfcSensorTypeEnum enumData)
{
    switch(enumData)
    {
    case IfcSensorTypeEnum_CO2SENSOR:
        outputStream() << ".CO2SENSOR.";
        break;
    case IfcSensorTypeEnum_FIRESENSOR:
        outputStream() << ".FIRESENSOR.";
        break;
    case IfcSensorTypeEnum_FLOWSENSOR:
        outputStream() << ".FLOWSENSOR.";
        break;
    case IfcSensorTypeEnum_GASSENSOR:
        outputStream() << ".GASSENSOR.";
        break;
    case IfcSensorTypeEnum_HEATSENSOR:
        outputStream() << ".HEATSENSOR.";
        break;
    case IfcSensorTypeEnum_HUMIDITYSENSOR:
        outputStream() << ".HUMIDITYSENSOR.";
        break;
    case IfcSensorTypeEnum_LIGHTSENSOR:
        outputStream() << ".LIGHTSENSOR.";
        break;
    case IfcSensorTypeEnum_MOISTURESENSOR:
        outputStream() << ".MOISTURESENSOR.";
        break;
    case IfcSensorTypeEnum_MOVEMENTSENSOR:
        outputStream() << ".MOVEMENTSENSOR.";
        break;
    case IfcSensorTypeEnum_PRESSURESENSOR:
        outputStream() << ".PRESSURESENSOR.";
        break;
    case IfcSensorTypeEnum_SMOKESENSOR:
        outputStream() << ".SMOKESENSOR.";
        break;
    case IfcSensorTypeEnum_SOUNDSENSOR:
        outputStream() << ".SOUNDSENSOR.";
        break;
    case IfcSensorTypeEnum_TEMPERATURESENSOR:
        outputStream() << ".TEMPERATURESENSOR.";
        break;
    case IfcSensorTypeEnum_USERDEFINED:
        outputStream() << ".USERDEFINED.";
        break;
    case IfcSensorTypeEnum_NOTDEFINED:
        outputStream() << ".NOTDEFINED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcSequenceEnum(IfcSequenceEnum enumData)
{
    switch(enumData)
    {
    case IfcSequenceEnum_START_START:
        outputStream() << ".START_START.";
        break;
    case IfcSequenceEnum_START_FINISH:
        outputStream() << ".START_FINISH.";
        break;
    case IfcSequenceEnum_FINISH_START:
        outputStream() << ".FINISH_START.";
        break;
    case IfcSequenceEnum_FINISH_FINISH:
        outputStream() << ".FINISH_FINISH.";
        break;
    case IfcSequenceEnum_NOTDEFINED:
        outputStream() << ".NOTDEFINED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcServiceLifeFactorTypeEnum(IfcServiceLifeFactorTypeEnum enumData)
{
    switch(enumData)
    {
    case IfcServiceLifeFactorTypeEnum_A_QUALITYOFCOMPONENTS:
        outputStream() << ".A_QUALITYOFCOMPONENTS.";
        break;
    case IfcServiceLifeFactorTypeEnum_B_DESIGNLEVEL:
        outputStream() << ".B_DESIGNLEVEL.";
        break;
    case IfcServiceLifeFactorTypeEnum_C_WORKEXECUTIONLEVEL:
        outputStream() << ".C_WORKEXECUTIONLEVEL.";
        break;
    case IfcServiceLifeFactorTypeEnum_D_INDOORENVIRONMENT:
        outputStream() << ".D_INDOORENVIRONMENT.";
        break;
    case IfcServiceLifeFactorTypeEnum_E_OUTDOORENVIRONMENT:
        outputStream() << ".E_OUTDOORENVIRONMENT.";
        break;
    case IfcServiceLifeFactorTypeEnum_F_INUSECONDITIONS:
        outputStream() << ".F_INUSECONDITIONS.";
        break;
    case IfcServiceLifeFactorTypeEnum_G_MAINTENANCELEVEL:
        outputStream() << ".G_MAINTENANCELEVEL.";
        break;
    case IfcServiceLifeFactorTypeEnum_USERDEFINED:
        outputStream() << ".USERDEFINED.";
        break;
    case IfcServiceLifeFactorTypeEnum_NOTDEFINED:
        outputStream() << ".NOTDEFINED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcServiceLifeTypeEnum(IfcServiceLifeTypeEnum enumData)
{
    switch(enumData)
    {
    case IfcServiceLifeTypeEnum_ACTUALSERVICELIFE:
        outputStream() << ".ACTUALSERVICELIFE.";
        break;
    case IfcServiceLifeTypeEnum_EXPECTEDSERVICELIFE:
        outputStream() << ".EXPECTEDSERVICELIFE.";
        break;
    case IfcServiceLifeTypeEnum_OPTIMISTICREFERENCESERVICELIFE:
        outputStream() << ".OPTIMISTICREFERENCESERVICELIFE.";
        break;
    case IfcServiceLifeTypeEnum_PESSIMISTICREFERENCESERVICELIFE:
        outputStream() << ".PESSIMISTICREFERENCESERVICELIFE.";
        break;
    case IfcServiceLifeTypeEnum_REFERENCESERVICELIFE:
        outputStream() << ".REFERENCESERVICELIFE.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcSIPrefix(IfcSIPrefix enumData)
{
    switch(enumData)
    {
    case IfcSIPrefix_EXA:
        outputStream() << ".EXA.";
        break;
    case IfcSIPrefix_PETA:
        outputStream() << ".PETA.";
        break;
    case IfcSIPrefix_TERA:
        outputStream() << ".TERA.";
        break;
    case IfcSIPrefix_GIGA:
        outputStream() << ".GIGA.";
        break;
    case IfcSIPrefix_MEGA:
        outputStream() << ".MEGA.";
        break;
    case IfcSIPrefix_KILO:
        outputStream() << ".KILO.";
        break;
    case IfcSIPrefix_HECTO:
        outputStream() << ".HECTO.";
        break;
    case IfcSIPrefix_DECA:
        outputStream() << ".DECA.";
        break;
    case IfcSIPrefix_DECI:
        outputStream() << ".DECI.";
        break;
    case IfcSIPrefix_CENTI:
        outputStream() << ".CENTI.";
        break;
    case IfcSIPrefix_MILLI:
        outputStream() << ".MILLI.";
        break;
    case IfcSIPrefix_MICRO:
        outputStream() << ".MICRO.";
        break;
    case IfcSIPrefix_NANO:
        outputStream() << ".NANO.";
        break;
    case IfcSIPrefix_PICO:
        outputStream() << ".PICO.";
        break;
    case IfcSIPrefix_FEMTO:
        outputStream() << ".FEMTO.";
        break;
    case IfcSIPrefix_ATTO:
        outputStream() << ".ATTO.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcSIUnitName(IfcSIUnitName enumData)
{
    switch(enumData)
    {
    case IfcSIUnitName_AMPERE:
        outputStream() << ".AMPERE.";
        break;
    case IfcSIUnitName_BECQUEREL:
        outputStream() << ".BECQUEREL.";
        break;
    case IfcSIUnitName_CANDELA:
        outputStream() << ".CANDELA.";
        break;
    case IfcSIUnitName_COULOMB:
        outputStream() << ".COULOMB.";
        break;
    case IfcSIUnitName_CUBIC_METRE:
        outputStream() << ".CUBIC_METRE.";
        break;
    case IfcSIUnitName_DEGREE_CELSIUS:
        outputStream() << ".DEGREE_CELSIUS.";
        break;
    case IfcSIUnitName_FARAD:
        outputStream() << ".FARAD.";
        break;
    case IfcSIUnitName_GRAM:
        outputStream() << ".GRAM.";
        break;
    case IfcSIUnitName_GRAY:
        outputStream() << ".GRAY.";
        break;
    case IfcSIUnitName_HENRY:
        outputStream() << ".HENRY.";
        break;
    case IfcSIUnitName_HERTZ:
        outputStream() << ".HERTZ.";
        break;
    case IfcSIUnitName_JOULE:
        outputStream() << ".JOULE.";
        break;
    case IfcSIUnitName_KELVIN:
        outputStream() << ".KELVIN.";
        break;
    case IfcSIUnitName_LUMEN:
        outputStream() << ".LUMEN.";
        break;
    case IfcSIUnitName_LUX:
        outputStream() << ".LUX.";
        break;
    case IfcSIUnitName_METRE:
        outputStream() << ".METRE.";
        break;
    case IfcSIUnitName_MOLE:
        outputStream() << ".MOLE.";
        break;
    case IfcSIUnitName_NEWTON:
        outputStream() << ".NEWTON.";
        break;
    case IfcSIUnitName_OHM:
        outputStream() << ".OHM.";
        break;
    case IfcSIUnitName_PASCAL:
        outputStream() << ".PASCAL.";
        break;
    case IfcSIUnitName_RADIAN:
        outputStream() << ".RADIAN.";
        break;
    case IfcSIUnitName_SECOND:
        outputStream() << ".SECOND.";
        break;
    case IfcSIUnitName_SIEMENS:
        outputStream() << ".SIEMENS.";
        break;
    case IfcSIUnitName_SIEVERT:
        outputStream() << ".SIEVERT.";
        break;
    case IfcSIUnitName_SQUARE_METRE:
        outputStream() << ".SQUARE_METRE.";
        break;
    case IfcSIUnitName_STERADIAN:
        outputStream() << ".STERADIAN.";
        break;
    case IfcSIUnitName_TESLA:
        outputStream() << ".TESLA.";
        break;
    case IfcSIUnitName_VOLT:
        outputStream() << ".VOLT.";
        break;
    case IfcSIUnitName_WATT:
        outputStream() << ".WATT.";
        break;
    case IfcSIUnitName_WEBER:
        outputStream() << ".WEBER.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcSlabTypeEnum(IfcSlabTypeEnum enumData)
{
    switch(enumData)
    {
    case IfcSlabTypeEnum_FLOOR:
        outputStream() << ".FLOOR.";
        break;
    case IfcSlabTypeEnum_ROOF:
        outputStream() << ".ROOF.";
        break;
    case IfcSlabTypeEnum_LANDING:
        outputStream() << ".LANDING.";
        break;
    case IfcSlabTypeEnum_BASESLAB:
        outputStream() << ".BASESLAB.";
        break;
    case IfcSlabTypeEnum_USERDEFINED:
        outputStream() << ".USERDEFINED.";
        break;
    case IfcSlabTypeEnum_NOTDEFINED:
        outputStream() << ".NOTDEFINED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcSoundScaleEnum(IfcSoundScaleEnum enumData)
{
    switch(enumData)
    {
    case IfcSoundScaleEnum_DBA:
        outputStream() << ".DBA.";
        break;
    case IfcSoundScaleEnum_DBB:
        outputStream() << ".DBB.";
        break;
    case IfcSoundScaleEnum_DBC:
        outputStream() << ".DBC.";
        break;
    case IfcSoundScaleEnum_NC:
        outputStream() << ".NC.";
        break;
    case IfcSoundScaleEnum_NR:
        outputStream() << ".NR.";
        break;
    case IfcSoundScaleEnum_USERDEFINED:
        outputStream() << ".USERDEFINED.";
        break;
    case IfcSoundScaleEnum_NOTDEFINED:
        outputStream() << ".NOTDEFINED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcSpaceHeaterTypeEnum(IfcSpaceHeaterTypeEnum enumData)
{
    switch(enumData)
    {
    case IfcSpaceHeaterTypeEnum_SECTIONALRADIATOR:
        outputStream() << ".SECTIONALRADIATOR.";
        break;
    case IfcSpaceHeaterTypeEnum_PANELRADIATOR:
        outputStream() << ".PANELRADIATOR.";
        break;
    case IfcSpaceHeaterTypeEnum_TUBULARRADIATOR:
        outputStream() << ".TUBULARRADIATOR.";
        break;
    case IfcSpaceHeaterTypeEnum_CONVECTOR:
        outputStream() << ".CONVECTOR.";
        break;
    case IfcSpaceHeaterTypeEnum_BASEBOARDHEATER:
        outputStream() << ".BASEBOARDHEATER.";
        break;
    case IfcSpaceHeaterTypeEnum_FINNEDTUBEUNIT:
        outputStream() << ".FINNEDTUBEUNIT.";
        break;
    case IfcSpaceHeaterTypeEnum_UNITHEATER:
        outputStream() << ".UNITHEATER.";
        break;
    case IfcSpaceHeaterTypeEnum_USERDEFINED:
        outputStream() << ".USERDEFINED.";
        break;
    case IfcSpaceHeaterTypeEnum_NOTDEFINED:
        outputStream() << ".NOTDEFINED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcSpaceTypeEnum(IfcSpaceTypeEnum enumData)
{
    switch(enumData)
    {
    case IfcSpaceTypeEnum_USERDEFINED:
        outputStream() << ".USERDEFINED.";
        break;
    case IfcSpaceTypeEnum_NOTDEFINED:
        outputStream() << ".NOTDEFINED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcStackTerminalTypeEnum(IfcStackTerminalTypeEnum enumData)
{
    switch(enumData)
    {
    case IfcStackTerminalTypeEnum_BIRDCAGE:
        outputStream() << ".BIRDCAGE.";
        break;
    case IfcStackTerminalTypeEnum_COWL:
        outputStream() << ".COWL.";
        break;
    case IfcStackTerminalTypeEnum_RAINWATERHOPPER:
        outputStream() << ".RAINWATERHOPPER.";
        break;
    case IfcStackTerminalTypeEnum_USERDEFINED:
        outputStream() << ".USERDEFINED.";
        break;
    case IfcStackTerminalTypeEnum_NOTDEFINED:
        outputStream() << ".NOTDEFINED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcStairFlightTypeEnum(IfcStairFlightTypeEnum enumData)
{
    switch(enumData)
    {
    case IfcStairFlightTypeEnum_STRAIGHT:
        outputStream() << ".STRAIGHT.";
        break;
    case IfcStairFlightTypeEnum_WINDER:
        outputStream() << ".WINDER.";
        break;
    case IfcStairFlightTypeEnum_SPIRAL:
        outputStream() << ".SPIRAL.";
        break;
    case IfcStairFlightTypeEnum_CURVED:
        outputStream() << ".CURVED.";
        break;
    case IfcStairFlightTypeEnum_FREEFORM:
        outputStream() << ".FREEFORM.";
        break;
    case IfcStairFlightTypeEnum_USERDEFINED:
        outputStream() << ".USERDEFINED.";
        break;
    case IfcStairFlightTypeEnum_NOTDEFINED:
        outputStream() << ".NOTDEFINED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcStairTypeEnum(IfcStairTypeEnum enumData)
{
    switch(enumData)
    {
    case IfcStairTypeEnum_STRAIGHT_RUN_STAIR:
        outputStream() << ".STRAIGHT_RUN_STAIR.";
        break;
    case IfcStairTypeEnum_TWO_STRAIGHT_RUN_STAIR:
        outputStream() << ".TWO_STRAIGHT_RUN_STAIR.";
        break;
    case IfcStairTypeEnum_QUARTER_WINDING_STAIR:
        outputStream() << ".QUARTER_WINDING_STAIR.";
        break;
    case IfcStairTypeEnum_QUARTER_TURN_STAIR:
        outputStream() << ".QUARTER_TURN_STAIR.";
        break;
    case IfcStairTypeEnum_HALF_WINDING_STAIR:
        outputStream() << ".HALF_WINDING_STAIR.";
        break;
    case IfcStairTypeEnum_HALF_TURN_STAIR:
        outputStream() << ".HALF_TURN_STAIR.";
        break;
    case IfcStairTypeEnum_TWO_QUARTER_WINDING_STAIR:
        outputStream() << ".TWO_QUARTER_WINDING_STAIR.";
        break;
    case IfcStairTypeEnum_TWO_QUARTER_TURN_STAIR:
        outputStream() << ".TWO_QUARTER_TURN_STAIR.";
        break;
    case IfcStairTypeEnum_THREE_QUARTER_WINDING_STAIR:
        outputStream() << ".THREE_QUARTER_WINDING_STAIR.";
        break;
    case IfcStairTypeEnum_THREE_QUARTER_TURN_STAIR:
        outputStream() << ".THREE_QUARTER_TURN_STAIR.";
        break;
    case IfcStairTypeEnum_SPIRAL_STAIR:
        outputStream() << ".SPIRAL_STAIR.";
        break;
    case IfcStairTypeEnum_DOUBLE_RETURN_STAIR:
        outputStream() << ".DOUBLE_RETURN_STAIR.";
        break;
    case IfcStairTypeEnum_CURVED_RUN_STAIR:
        outputStream() << ".CURVED_RUN_STAIR.";
        break;
    case IfcStairTypeEnum_TWO_CURVED_RUN_STAIR:
        outputStream() << ".TWO_CURVED_RUN_STAIR.";
        break;
    case IfcStairTypeEnum_USERDEFINED:
        outputStream() << ".USERDEFINED.";
        break;
    case IfcStairTypeEnum_NOTDEFINED:
        outputStream() << ".NOTDEFINED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcStateEnum(IfcStateEnum enumData)
{
    switch(enumData)
    {
    case IfcStateEnum_READWRITE:
        outputStream() << ".READWRITE.";
        break;
    case IfcStateEnum_READONLY:
        outputStream() << ".READONLY.";
        break;
    case IfcStateEnum_LOCKED:
        outputStream() << ".LOCKED.";
        break;
    case IfcStateEnum_READWRITELOCKED:
        outputStream() << ".READWRITELOCKED.";
        break;
    case IfcStateEnum_READONLYLOCKED:
        outputStream() << ".READONLYLOCKED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcStructuralCurveTypeEnum(IfcStructuralCurveTypeEnum enumData)
{
    switch(enumData)
    {
    case IfcStructuralCurveTypeEnum_RIGID_JOINED_MEMBER:
        outputStream() << ".RIGID_JOINED_MEMBER.";
        break;
    case IfcStructuralCurveTypeEnum_PIN_JOINED_MEMBER:
        outputStream() << ".PIN_JOINED_MEMBER.";
        break;
    case IfcStructuralCurveTypeEnum_CABLE:
        outputStream() << ".CABLE.";
        break;
    case IfcStructuralCurveTypeEnum_TENSION_MEMBER:
        outputStream() << ".TENSION_MEMBER.";
        break;
    case IfcStructuralCurveTypeEnum_COMPRESSION_MEMBER:
        outputStream() << ".COMPRESSION_MEMBER.";
        break;
    case IfcStructuralCurveTypeEnum_USERDEFINED:
        outputStream() << ".USERDEFINED.";
        break;
    case IfcStructuralCurveTypeEnum_NOTDEFINED:
        outputStream() << ".NOTDEFINED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcStructuralSurfaceTypeEnum(IfcStructuralSurfaceTypeEnum enumData)
{
    switch(enumData)
    {
    case IfcStructuralSurfaceTypeEnum_BENDING_ELEMENT:
        outputStream() << ".BENDING_ELEMENT.";
        break;
    case IfcStructuralSurfaceTypeEnum_MEMBRANE_ELEMENT:
        outputStream() << ".MEMBRANE_ELEMENT.";
        break;
    case IfcStructuralSurfaceTypeEnum_SHELL:
        outputStream() << ".SHELL.";
        break;
    case IfcStructuralSurfaceTypeEnum_USERDEFINED:
        outputStream() << ".USERDEFINED.";
        break;
    case IfcStructuralSurfaceTypeEnum_NOTDEFINED:
        outputStream() << ".NOTDEFINED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcSurfaceSide(IfcSurfaceSide enumData)
{
    switch(enumData)
    {
    case IfcSurfaceSide_POSITIVE:
        outputStream() << ".POSITIVE.";
        break;
    case IfcSurfaceSide_NEGATIVE:
        outputStream() << ".NEGATIVE.";
        break;
    case IfcSurfaceSide_BOTH:
        outputStream() << ".BOTH.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcSurfaceTextureEnum(IfcSurfaceTextureEnum enumData)
{
    switch(enumData)
    {
    case IfcSurfaceTextureEnum_BUMP:
        outputStream() << ".BUMP.";
        break;
    case IfcSurfaceTextureEnum_OPACITY:
        outputStream() << ".OPACITY.";
        break;
    case IfcSurfaceTextureEnum_REFLECTION:
        outputStream() << ".REFLECTION.";
        break;
    case IfcSurfaceTextureEnum_SELFILLUMINATION:
        outputStream() << ".SELFILLUMINATION.";
        break;
    case IfcSurfaceTextureEnum_SHININESS:
        outputStream() << ".SHININESS.";
        break;
    case IfcSurfaceTextureEnum_SPECULAR:
        outputStream() << ".SPECULAR.";
        break;
    case IfcSurfaceTextureEnum_TEXTURE:
        outputStream() << ".TEXTURE.";
        break;
    case IfcSurfaceTextureEnum_TRANSPARENCYMAP:
        outputStream() << ".TRANSPARENCYMAP.";
        break;
    case IfcSurfaceTextureEnum_NOTDEFINED:
        outputStream() << ".NOTDEFINED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcSwitchingDeviceTypeEnum(IfcSwitchingDeviceTypeEnum enumData)
{
    switch(enumData)
    {
    case IfcSwitchingDeviceTypeEnum_CONTACTOR:
        outputStream() << ".CONTACTOR.";
        break;
    case IfcSwitchingDeviceTypeEnum_EMERGENCYSTOP:
        outputStream() << ".EMERGENCYSTOP.";
        break;
    case IfcSwitchingDeviceTypeEnum_STARTER:
        outputStream() << ".STARTER.";
        break;
    case IfcSwitchingDeviceTypeEnum_SWITCHDISCONNECTOR:
        outputStream() << ".SWITCHDISCONNECTOR.";
        break;
    case IfcSwitchingDeviceTypeEnum_TOGGLESWITCH:
        outputStream() << ".TOGGLESWITCH.";
        break;
    case IfcSwitchingDeviceTypeEnum_USERDEFINED:
        outputStream() << ".USERDEFINED.";
        break;
    case IfcSwitchingDeviceTypeEnum_NOTDEFINED:
        outputStream() << ".NOTDEFINED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcTankTypeEnum(IfcTankTypeEnum enumData)
{
    switch(enumData)
    {
    case IfcTankTypeEnum_PREFORMED:
        outputStream() << ".PREFORMED.";
        break;
    case IfcTankTypeEnum_SECTIONAL:
        outputStream() << ".SECTIONAL.";
        break;
    case IfcTankTypeEnum_EXPANSION:
        outputStream() << ".EXPANSION.";
        break;
    case IfcTankTypeEnum_PRESSUREVESSEL:
        outputStream() << ".PRESSUREVESSEL.";
        break;
    case IfcTankTypeEnum_USERDEFINED:
        outputStream() << ".USERDEFINED.";
        break;
    case IfcTankTypeEnum_NOTDEFINED:
        outputStream() << ".NOTDEFINED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcTendonTypeEnum(IfcTendonTypeEnum enumData)
{
    switch(enumData)
    {
    case IfcTendonTypeEnum_STRAND:
        outputStream() << ".STRAND.";
        break;
    case IfcTendonTypeEnum_WIRE:
        outputStream() << ".WIRE.";
        break;
    case IfcTendonTypeEnum_BAR:
        outputStream() << ".BAR.";
        break;
    case IfcTendonTypeEnum_COATED:
        outputStream() << ".COATED.";
        break;
    case IfcTendonTypeEnum_USERDEFINED:
        outputStream() << ".USERDEFINED.";
        break;
    case IfcTendonTypeEnum_NOTDEFINED:
        outputStream() << ".NOTDEFINED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcTextPath(IfcTextPath enumData)
{
    switch(enumData)
    {
    case IfcTextPath_LEFT:
        outputStream() << ".LEFT.";
        break;
    case IfcTextPath_RIGHT:
        outputStream() << ".RIGHT.";
        break;
    case IfcTextPath_UP:
        outputStream() << ".UP.";
        break;
    case IfcTextPath_DOWN:
        outputStream() << ".DOWN.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcThermalLoadSourceEnum(IfcThermalLoadSourceEnum enumData)
{
    switch(enumData)
    {
    case IfcThermalLoadSourceEnum_PEOPLE:
        outputStream() << ".PEOPLE.";
        break;
    case IfcThermalLoadSourceEnum_LIGHTING:
        outputStream() << ".LIGHTING.";
        break;
    case IfcThermalLoadSourceEnum_EQUIPMENT:
        outputStream() << ".EQUIPMENT.";
        break;
    case IfcThermalLoadSourceEnum_VENTILATIONINDOORAIR:
        outputStream() << ".VENTILATIONINDOORAIR.";
        break;
    case IfcThermalLoadSourceEnum_VENTILATIONOUTSIDEAIR:
        outputStream() << ".VENTILATIONOUTSIDEAIR.";
        break;
    case IfcThermalLoadSourceEnum_RECIRCULATEDAIR:
        outputStream() << ".RECIRCULATEDAIR.";
        break;
    case IfcThermalLoadSourceEnum_EXHAUSTAIR:
        outputStream() << ".EXHAUSTAIR.";
        break;
    case IfcThermalLoadSourceEnum_AIREXCHANGERATE:
        outputStream() << ".AIREXCHANGERATE.";
        break;
    case IfcThermalLoadSourceEnum_DRYBULBTEMPERATURE:
        outputStream() << ".DRYBULBTEMPERATURE.";
        break;
    case IfcThermalLoadSourceEnum_RELATIVEHUMIDITY:
        outputStream() << ".RELATIVEHUMIDITY.";
        break;
    case IfcThermalLoadSourceEnum_INFILTRATION:
        outputStream() << ".INFILTRATION.";
        break;
    case IfcThermalLoadSourceEnum_USERDEFINED:
        outputStream() << ".USERDEFINED.";
        break;
    case IfcThermalLoadSourceEnum_NOTDEFINED:
        outputStream() << ".NOTDEFINED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcThermalLoadTypeEnum(IfcThermalLoadTypeEnum enumData)
{
    switch(enumData)
    {
    case IfcThermalLoadTypeEnum_SENSIBLE:
        outputStream() << ".SENSIBLE.";
        break;
    case IfcThermalLoadTypeEnum_LATENT:
        outputStream() << ".LATENT.";
        break;
    case IfcThermalLoadTypeEnum_RADIANT:
        outputStream() << ".RADIANT.";
        break;
    case IfcThermalLoadTypeEnum_NOTDEFINED:
        outputStream() << ".NOTDEFINED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcTimeSeriesDataTypeEnum(IfcTimeSeriesDataTypeEnum enumData)
{
    switch(enumData)
    {
    case IfcTimeSeriesDataTypeEnum_CONTINUOUS:
        outputStream() << ".CONTINUOUS.";
        break;
    case IfcTimeSeriesDataTypeEnum_DISCRETE:
        outputStream() << ".DISCRETE.";
        break;
    case IfcTimeSeriesDataTypeEnum_DISCRETEBINARY:
        outputStream() << ".DISCRETEBINARY.";
        break;
    case IfcTimeSeriesDataTypeEnum_PIECEWISEBINARY:
        outputStream() << ".PIECEWISEBINARY.";
        break;
    case IfcTimeSeriesDataTypeEnum_PIECEWISECONSTANT:
        outputStream() << ".PIECEWISECONSTANT.";
        break;
    case IfcTimeSeriesDataTypeEnum_PIECEWISECONTINUOUS:
        outputStream() << ".PIECEWISECONTINUOUS.";
        break;
    case IfcTimeSeriesDataTypeEnum_NOTDEFINED:
        outputStream() << ".NOTDEFINED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcTimeSeriesScheduleTypeEnum(IfcTimeSeriesScheduleTypeEnum enumData)
{
    switch(enumData)
    {
    case IfcTimeSeriesScheduleTypeEnum_ANNUAL:
        outputStream() << ".ANNUAL.";
        break;
    case IfcTimeSeriesScheduleTypeEnum_MONTHLY:
        outputStream() << ".MONTHLY.";
        break;
    case IfcTimeSeriesScheduleTypeEnum_WEEKLY:
        outputStream() << ".WEEKLY.";
        break;
    case IfcTimeSeriesScheduleTypeEnum_DAILY:
        outputStream() << ".DAILY.";
        break;
    case IfcTimeSeriesScheduleTypeEnum_USERDEFINED:
        outputStream() << ".USERDEFINED.";
        break;
    case IfcTimeSeriesScheduleTypeEnum_NOTDEFINED:
        outputStream() << ".NOTDEFINED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcTransformerTypeEnum(IfcTransformerTypeEnum enumData)
{
    switch(enumData)
    {
    case IfcTransformerTypeEnum_CURRENT:
        outputStream() << ".CURRENT.";
        break;
    case IfcTransformerTypeEnum_FREQUENCY:
        outputStream() << ".FREQUENCY.";
        break;
    case IfcTransformerTypeEnum_VOLTAGE:
        outputStream() << ".VOLTAGE.";
        break;
    case IfcTransformerTypeEnum_USERDEFINED:
        outputStream() << ".USERDEFINED.";
        break;
    case IfcTransformerTypeEnum_NOTDEFINED:
        outputStream() << ".NOTDEFINED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcTransitionCode(IfcTransitionCode enumData)
{
    switch(enumData)
    {
    case IfcTransitionCode_DISCONTINUOUS:
        outputStream() << ".DISCONTINUOUS.";
        break;
    case IfcTransitionCode_CONTINUOUS:
        outputStream() << ".CONTINUOUS.";
        break;
    case IfcTransitionCode_CONTSAMEGRADIENT:
        outputStream() << ".CONTSAMEGRADIENT.";
        break;
    case IfcTransitionCode_CONTSAMEGRADIENTSAMECURVATURE:
        outputStream() << ".CONTSAMEGRADIENTSAMECURVATURE.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcTransportElementTypeEnum(IfcTransportElementTypeEnum enumData)
{
    switch(enumData)
    {
    case IfcTransportElementTypeEnum_ELEVATOR:
        outputStream() << ".ELEVATOR.";
        break;
    case IfcTransportElementTypeEnum_ESCALATOR:
        outputStream() << ".ESCALATOR.";
        break;
    case IfcTransportElementTypeEnum_MOVINGWALKWAY:
        outputStream() << ".MOVINGWALKWAY.";
        break;
    case IfcTransportElementTypeEnum_USERDEFINED:
        outputStream() << ".USERDEFINED.";
        break;
    case IfcTransportElementTypeEnum_NOTDEFINED:
        outputStream() << ".NOTDEFINED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcTrimmingPreference(IfcTrimmingPreference enumData)
{
    switch(enumData)
    {
    case IfcTrimmingPreference_CARTESIAN:
        outputStream() << ".CARTESIAN.";
        break;
    case IfcTrimmingPreference_PARAMETER:
        outputStream() << ".PARAMETER.";
        break;
    case IfcTrimmingPreference_UNSPECIFIED:
        outputStream() << ".UNSPECIFIED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcTubeBundleTypeEnum(IfcTubeBundleTypeEnum enumData)
{
    switch(enumData)
    {
    case IfcTubeBundleTypeEnum_FINNED:
        outputStream() << ".FINNED.";
        break;
    case IfcTubeBundleTypeEnum_USERDEFINED:
        outputStream() << ".USERDEFINED.";
        break;
    case IfcTubeBundleTypeEnum_NOTDEFINED:
        outputStream() << ".NOTDEFINED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcUnitaryEquipmentTypeEnum(IfcUnitaryEquipmentTypeEnum enumData)
{
    switch(enumData)
    {
    case IfcUnitaryEquipmentTypeEnum_AIRHANDLER:
        outputStream() << ".AIRHANDLER.";
        break;
    case IfcUnitaryEquipmentTypeEnum_AIRCONDITIONINGUNIT:
        outputStream() << ".AIRCONDITIONINGUNIT.";
        break;
    case IfcUnitaryEquipmentTypeEnum_SPLITSYSTEM:
        outputStream() << ".SPLITSYSTEM.";
        break;
    case IfcUnitaryEquipmentTypeEnum_ROOFTOPUNIT:
        outputStream() << ".ROOFTOPUNIT.";
        break;
    case IfcUnitaryEquipmentTypeEnum_USERDEFINED:
        outputStream() << ".USERDEFINED.";
        break;
    case IfcUnitaryEquipmentTypeEnum_NOTDEFINED:
        outputStream() << ".NOTDEFINED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcUnitEnum(IfcUnitEnum enumData)
{
    switch(enumData)
    {
    case IfcUnitEnum_ABSORBEDDOSEUNIT:
        outputStream() << ".ABSORBEDDOSEUNIT.";
        break;
    case IfcUnitEnum_AMOUNTOFSUBSTANCEUNIT:
        outputStream() << ".AMOUNTOFSUBSTANCEUNIT.";
        break;
    case IfcUnitEnum_AREAUNIT:
        outputStream() << ".AREAUNIT.";
        break;
    case IfcUnitEnum_DOSEEQUIVALENTUNIT:
        outputStream() << ".DOSEEQUIVALENTUNIT.";
        break;
    case IfcUnitEnum_ELECTRICCAPACITANCEUNIT:
        outputStream() << ".ELECTRICCAPACITANCEUNIT.";
        break;
    case IfcUnitEnum_ELECTRICCHARGEUNIT:
        outputStream() << ".ELECTRICCHARGEUNIT.";
        break;
    case IfcUnitEnum_ELECTRICCONDUCTANCEUNIT:
        outputStream() << ".ELECTRICCONDUCTANCEUNIT.";
        break;
    case IfcUnitEnum_ELECTRICCURRENTUNIT:
        outputStream() << ".ELECTRICCURRENTUNIT.";
        break;
    case IfcUnitEnum_ELECTRICRESISTANCEUNIT:
        outputStream() << ".ELECTRICRESISTANCEUNIT.";
        break;
    case IfcUnitEnum_ELECTRICVOLTAGEUNIT:
        outputStream() << ".ELECTRICVOLTAGEUNIT.";
        break;
    case IfcUnitEnum_ENERGYUNIT:
        outputStream() << ".ENERGYUNIT.";
        break;
    case IfcUnitEnum_FORCEUNIT:
        outputStream() << ".FORCEUNIT.";
        break;
    case IfcUnitEnum_FREQUENCYUNIT:
        outputStream() << ".FREQUENCYUNIT.";
        break;
    case IfcUnitEnum_ILLUMINANCEUNIT:
        outputStream() << ".ILLUMINANCEUNIT.";
        break;
    case IfcUnitEnum_INDUCTANCEUNIT:
        outputStream() << ".INDUCTANCEUNIT.";
        break;
    case IfcUnitEnum_LENGTHUNIT:
        outputStream() << ".LENGTHUNIT.";
        break;
    case IfcUnitEnum_LUMINOUSFLUXUNIT:
        outputStream() << ".LUMINOUSFLUXUNIT.";
        break;
    case IfcUnitEnum_LUMINOUSINTENSITYUNIT:
        outputStream() << ".LUMINOUSINTENSITYUNIT.";
        break;
    case IfcUnitEnum_MAGNETICFLUXDENSITYUNIT:
        outputStream() << ".MAGNETICFLUXDENSITYUNIT.";
        break;
    case IfcUnitEnum_MAGNETICFLUXUNIT:
        outputStream() << ".MAGNETICFLUXUNIT.";
        break;
    case IfcUnitEnum_MASSUNIT:
        outputStream() << ".MASSUNIT.";
        break;
    case IfcUnitEnum_PLANEANGLEUNIT:
        outputStream() << ".PLANEANGLEUNIT.";
        break;
    case IfcUnitEnum_POWERUNIT:
        outputStream() << ".POWERUNIT.";
        break;
    case IfcUnitEnum_PRESSUREUNIT:
        outputStream() << ".PRESSUREUNIT.";
        break;
    case IfcUnitEnum_RADIOACTIVITYUNIT:
        outputStream() << ".RADIOACTIVITYUNIT.";
        break;
    case IfcUnitEnum_SOLIDANGLEUNIT:
        outputStream() << ".SOLIDANGLEUNIT.";
        break;
    case IfcUnitEnum_THERMODYNAMICTEMPERATUREUNIT:
        outputStream() << ".THERMODYNAMICTEMPERATUREUNIT.";
        break;
    case IfcUnitEnum_TIMEUNIT:
        outputStream() << ".TIMEUNIT.";
        break;
    case IfcUnitEnum_VOLUMEUNIT:
        outputStream() << ".VOLUMEUNIT.";
        break;
    case IfcUnitEnum_USERDEFINED:
        outputStream() << ".USERDEFINED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcValveTypeEnum(IfcValveTypeEnum enumData)
{
    switch(enumData)
    {
    case IfcValveTypeEnum_AIRRELEASE:
        outputStream() << ".AIRRELEASE.";
        break;
    case IfcValveTypeEnum_ANTIVACUUM:
        outputStream() << ".ANTIVACUUM.";
        break;
    case IfcValveTypeEnum_CHANGEOVER:
        outputStream() << ".CHANGEOVER.";
        break;
    case IfcValveTypeEnum_CHECK:
        outputStream() << ".CHECK.";
        break;
    case IfcValveTypeEnum_COMMISSIONING:
        outputStream() << ".COMMISSIONING.";
        break;
    case IfcValveTypeEnum_DIVERTING:
        outputStream() << ".DIVERTING.";
        break;
    case IfcValveTypeEnum_DRAWOFFCOCK:
        outputStream() << ".DRAWOFFCOCK.";
        break;
    case IfcValveTypeEnum_DOUBLECHECK:
        outputStream() << ".DOUBLECHECK.";
        break;
    case IfcValveTypeEnum_DOUBLEREGULATING:
        outputStream() << ".DOUBLEREGULATING.";
        break;
    case IfcValveTypeEnum_FAUCET:
        outputStream() << ".FAUCET.";
        break;
    case IfcValveTypeEnum_FLUSHING:
        outputStream() << ".FLUSHING.";
        break;
    case IfcValveTypeEnum_GASCOCK:
        outputStream() << ".GASCOCK.";
        break;
    case IfcValveTypeEnum_GASTAP:
        outputStream() << ".GASTAP.";
        break;
    case IfcValveTypeEnum_ISOLATING:
        outputStream() << ".ISOLATING.";
        break;
    case IfcValveTypeEnum_MIXING:
        outputStream() << ".MIXING.";
        break;
    case IfcValveTypeEnum_PRESSUREREDUCING:
        outputStream() << ".PRESSUREREDUCING.";
        break;
    case IfcValveTypeEnum_PRESSURERELIEF:
        outputStream() << ".PRESSURERELIEF.";
        break;
    case IfcValveTypeEnum_REGULATING:
        outputStream() << ".REGULATING.";
        break;
    case IfcValveTypeEnum_SAFETYCUTOFF:
        outputStream() << ".SAFETYCUTOFF.";
        break;
    case IfcValveTypeEnum_STEAMTRAP:
        outputStream() << ".STEAMTRAP.";
        break;
    case IfcValveTypeEnum_STOPCOCK:
        outputStream() << ".STOPCOCK.";
        break;
    case IfcValveTypeEnum_USERDEFINED:
        outputStream() << ".USERDEFINED.";
        break;
    case IfcValveTypeEnum_NOTDEFINED:
        outputStream() << ".NOTDEFINED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcVibrationIsolatorTypeEnum(IfcVibrationIsolatorTypeEnum enumData)
{
    switch(enumData)
    {
    case IfcVibrationIsolatorTypeEnum_COMPRESSION:
        outputStream() << ".COMPRESSION.";
        break;
    case IfcVibrationIsolatorTypeEnum_SPRING:
        outputStream() << ".SPRING.";
        break;
    case IfcVibrationIsolatorTypeEnum_USERDEFINED:
        outputStream() << ".USERDEFINED.";
        break;
    case IfcVibrationIsolatorTypeEnum_NOTDEFINED:
        outputStream() << ".NOTDEFINED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcWallTypeEnum(IfcWallTypeEnum enumData)
{
    switch(enumData)
    {
    case IfcWallTypeEnum_STANDARD:
        outputStream() << ".STANDARD.";
        break;
    case IfcWallTypeEnum_POLYGONAL:
        outputStream() << ".POLYGONAL.";
        break;
    case IfcWallTypeEnum_SHEAR:
        outputStream() << ".SHEAR.";
        break;
    case IfcWallTypeEnum_ELEMENTEDWALL:
        outputStream() << ".ELEMENTEDWALL.";
        break;
    case IfcWallTypeEnum_PLUMBINGWALL:
        outputStream() << ".PLUMBINGWALL.";
        break;
    case IfcWallTypeEnum_USERDEFINED:
        outputStream() << ".USERDEFINED.";
        break;
    case IfcWallTypeEnum_NOTDEFINED:
        outputStream() << ".NOTDEFINED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcWasteTerminalTypeEnum(IfcWasteTerminalTypeEnum enumData)
{
    switch(enumData)
    {
    case IfcWasteTerminalTypeEnum_FLOORTRAP:
        outputStream() << ".FLOORTRAP.";
        break;
    case IfcWasteTerminalTypeEnum_FLOORWASTE:
        outputStream() << ".FLOORWASTE.";
        break;
    case IfcWasteTerminalTypeEnum_GULLYSUMP:
        outputStream() << ".GULLYSUMP.";
        break;
    case IfcWasteTerminalTypeEnum_GULLYTRAP:
        outputStream() << ".GULLYTRAP.";
        break;
    case IfcWasteTerminalTypeEnum_GREASEINTERCEPTOR:
        outputStream() << ".GREASEINTERCEPTOR.";
        break;
    case IfcWasteTerminalTypeEnum_OILINTERCEPTOR:
        outputStream() << ".OILINTERCEPTOR.";
        break;
    case IfcWasteTerminalTypeEnum_PETROLINTERCEPTOR:
        outputStream() << ".PETROLINTERCEPTOR.";
        break;
    case IfcWasteTerminalTypeEnum_ROOFDRAIN:
        outputStream() << ".ROOFDRAIN.";
        break;
    case IfcWasteTerminalTypeEnum_WASTEDISPOSALUNIT:
        outputStream() << ".WASTEDISPOSALUNIT.";
        break;
    case IfcWasteTerminalTypeEnum_WASTETRAP:
        outputStream() << ".WASTETRAP.";
        break;
    case IfcWasteTerminalTypeEnum_USERDEFINED:
        outputStream() << ".USERDEFINED.";
        break;
    case IfcWasteTerminalTypeEnum_NOTDEFINED:
        outputStream() << ".NOTDEFINED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcWindowPanelOperationEnum(IfcWindowPanelOperationEnum enumData)
{
    switch(enumData)
    {
    case IfcWindowPanelOperationEnum_SIDEHUNGRIGHTHAND:
        outputStream() << ".SIDEHUNGRIGHTHAND.";
        break;
    case IfcWindowPanelOperationEnum_SIDEHUNGLEFTHAND:
        outputStream() << ".SIDEHUNGLEFTHAND.";
        break;
    case IfcWindowPanelOperationEnum_TILTANDTURNRIGHTHAND:
        outputStream() << ".TILTANDTURNRIGHTHAND.";
        break;
    case IfcWindowPanelOperationEnum_TILTANDTURNLEFTHAND:
        outputStream() << ".TILTANDTURNLEFTHAND.";
        break;
    case IfcWindowPanelOperationEnum_TOPHUNG:
        outputStream() << ".TOPHUNG.";
        break;
    case IfcWindowPanelOperationEnum_BOTTOMHUNG:
        outputStream() << ".BOTTOMHUNG.";
        break;
    case IfcWindowPanelOperationEnum_PIVOTHORIZONTAL:
        outputStream() << ".PIVOTHORIZONTAL.";
        break;
    case IfcWindowPanelOperationEnum_PIVOTVERTICAL:
        outputStream() << ".PIVOTVERTICAL.";
        break;
    case IfcWindowPanelOperationEnum_SLIDINGHORIZONTAL:
        outputStream() << ".SLIDINGHORIZONTAL.";
        break;
    case IfcWindowPanelOperationEnum_SLIDINGVERTICAL:
        outputStream() << ".SLIDINGVERTICAL.";
        break;
    case IfcWindowPanelOperationEnum_REMOVABLECASEMENT:
        outputStream() << ".REMOVABLECASEMENT.";
        break;
    case IfcWindowPanelOperationEnum_FIXEDCASEMENT:
        outputStream() << ".FIXEDCASEMENT.";
        break;
    case IfcWindowPanelOperationEnum_OTHEROPERATION:
        outputStream() << ".OTHEROPERATION.";
        break;
    case IfcWindowPanelOperationEnum_NOTDEFINED:
        outputStream() << ".NOTDEFINED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcWindowPanelPositionEnum(IfcWindowPanelPositionEnum enumData)
{
    switch(enumData)
    {
    case IfcWindowPanelPositionEnum_LEFT:
        outputStream() << ".LEFT.";
        break;
    case IfcWindowPanelPositionEnum_MIDDLE:
        outputStream() << ".MIDDLE.";
        break;
    case IfcWindowPanelPositionEnum_RIGHT:
        outputStream() << ".RIGHT.";
        break;
    case IfcWindowPanelPositionEnum_BOTTOM:
        outputStream() << ".BOTTOM.";
        break;
    case IfcWindowPanelPositionEnum_TOP:
        outputStream() << ".TOP.";
        break;
    case IfcWindowPanelPositionEnum_NOTDEFINED:
        outputStream() << ".NOTDEFINED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcWindowStyleConstructionEnum(IfcWindowStyleConstructionEnum enumData)
{
    switch(enumData)
    {
    case IfcWindowStyleConstructionEnum_ALUMINIUM:
        outputStream() << ".ALUMINIUM.";
        break;
    case IfcWindowStyleConstructionEnum_HIGH_GRADE_STEEL:
        outputStream() << ".HIGH_GRADE_STEEL.";
        break;
    case IfcWindowStyleConstructionEnum_STEEL:
        outputStream() << ".STEEL.";
        break;
    case IfcWindowStyleConstructionEnum_WOOD:
        outputStream() << ".WOOD.";
        break;
    case IfcWindowStyleConstructionEnum_ALUMINIUM_WOOD:
        outputStream() << ".ALUMINIUM_WOOD.";
        break;
    case IfcWindowStyleConstructionEnum_PLASTIC:
        outputStream() << ".PLASTIC.";
        break;
    case IfcWindowStyleConstructionEnum_OTHER_CONSTRUCTION:
        outputStream() << ".OTHER_CONSTRUCTION.";
        break;
    case IfcWindowStyleConstructionEnum_NOTDEFINED:
        outputStream() << ".NOTDEFINED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcWindowStyleOperationEnum(IfcWindowStyleOperationEnum enumData)
{
    switch(enumData)
    {
    case IfcWindowStyleOperationEnum_SINGLE_PANEL:
        outputStream() << ".SINGLE_PANEL.";
        break;
    case IfcWindowStyleOperationEnum_DOUBLE_PANEL_VERTICAL:
        outputStream() << ".DOUBLE_PANEL_VERTICAL.";
        break;
    case IfcWindowStyleOperationEnum_DOUBLE_PANEL_HORIZONTAL:
        outputStream() << ".DOUBLE_PANEL_HORIZONTAL.";
        break;
    case IfcWindowStyleOperationEnum_TRIPLE_PANEL_VERTICAL:
        outputStream() << ".TRIPLE_PANEL_VERTICAL.";
        break;
    case IfcWindowStyleOperationEnum_TRIPLE_PANEL_BOTTOM:
        outputStream() << ".TRIPLE_PANEL_BOTTOM.";
        break;
    case IfcWindowStyleOperationEnum_TRIPLE_PANEL_TOP:
        outputStream() << ".TRIPLE_PANEL_TOP.";
        break;
    case IfcWindowStyleOperationEnum_TRIPLE_PANEL_LEFT:
        outputStream() << ".TRIPLE_PANEL_LEFT.";
        break;
    case IfcWindowStyleOperationEnum_TRIPLE_PANEL_RIGHT:
        outputStream() << ".TRIPLE_PANEL_RIGHT.";
        break;
    case IfcWindowStyleOperationEnum_TRIPLE_PANEL_HORIZONTAL:
        outputStream() << ".TRIPLE_PANEL_HORIZONTAL.";
        break;
    case IfcWindowStyleOperationEnum_USERDEFINED:
        outputStream() << ".USERDEFINED.";
        break;
    case IfcWindowStyleOperationEnum_NOTDEFINED:
        outputStream() << ".NOTDEFINED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcWorkControlTypeEnum(IfcWorkControlTypeEnum enumData)
{
    switch(enumData)
    {
    case IfcWorkControlTypeEnum_ACTUAL:
        outputStream() << ".ACTUAL.";
        break;
    case IfcWorkControlTypeEnum_BASELINE:
        outputStream() << ".BASELINE.";
        break;
    case IfcWorkControlTypeEnum_PLANNED:
        outputStream() << ".PLANNED.";
        break;
    case IfcWorkControlTypeEnum_USERDEFINED:
        outputStream() << ".USERDEFINED.";
        break;
    case IfcWorkControlTypeEnum_NOTDEFINED:
        outputStream() << ".NOTDEFINED.";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcActorSelect(IfcActorSelect *selectData)
{
    switch(selectData->currentType())
    {
    case IfcActorSelect::IFCORGANIZATION:
        outputStream() << "IFCORGANIZATION(";
        writeAttribute(selectData->getIfcOrganization());
        outputStream() << ")";
        break;
    case IfcActorSelect::IFCPERSON:
        outputStream() << "IFCPERSON(";
        writeAttribute(selectData->getIfcPerson());
        outputStream() << ")";
        break;
    case IfcActorSelect::IFCPERSONANDORGANIZATION:
        outputStream() << "IFCPERSONANDORGANIZATION(";
        writeAttribute(selectData->getIfcPersonAndOrganization());
        outputStream() << ")";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcAppliedValueSelect(IfcAppliedValueSelect *selectData)
{
    switch(selectData->currentType())
    {
    case IfcAppliedValueSelect::IFCRATIOMEASURE:
        outputStream() << "IFCRATIOMEASURE(";
        writeAttribute(selectData->getIfcRatioMeasure());
        outputStream() << ")";
        break;
    case IfcAppliedValueSelect::IFCMEASUREWITHUNIT:
        outputStream() << "IFCMEASUREWITHUNIT(";
        writeAttribute(selectData->getIfcMeasureWithUnit());
        outputStream() << ")";
        break;
    case IfcAppliedValueSelect::IFCMONETARYMEASURE:
        outputStream() << "IFCMONETARYMEASURE(";
        writeAttribute(selectData->getIfcMonetaryMeasure());
        outputStream() << ")";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcAxis2Placement(IfcAxis2Placement *selectData)
{
    switch(selectData->currentType())
    {
    case IfcAxis2Placement::IFCAXIS2PLACEMENT2D:
        outputStream() << "IFCAXIS2PLACEMENT2D(";
        writeAttribute(selectData->getIfcAxis2Placement2D());
        outputStream() << ")";
        break;
    case IfcAxis2Placement::IFCAXIS2PLACEMENT3D:
        outputStream() << "IFCAXIS2PLACEMENT3D(";
        writeAttribute(selectData->getIfcAxis2Placement3D());
        outputStream() << ")";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcBooleanOperand(IfcBooleanOperand *selectData)
{
    switch(selectData->currentType())
    {
    case IfcBooleanOperand::IFCSOLIDMODEL:
        outputStream() << "IFCSOLIDMODEL(";
        writeAttribute(selectData->getIfcSolidModel());
        outputStream() << ")";
        break;
    case IfcBooleanOperand::IFCHALFSPACESOLID:
        outputStream() << "IFCHALFSPACESOLID(";
        writeAttribute(selectData->getIfcHalfSpaceSolid());
        outputStream() << ")";
        break;
    case IfcBooleanOperand::IFCBOOLEANRESULT:
        outputStream() << "IFCBOOLEANRESULT(";
        writeAttribute(selectData->getIfcBooleanResult());
        outputStream() << ")";
        break;
    case IfcBooleanOperand::IFCCSGPRIMITIVE3D:
        outputStream() << "IFCCSGPRIMITIVE3D(";
        writeAttribute(selectData->getIfcCsgPrimitive3D());
        outputStream() << ")";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcCharacterStyleSelect(IfcCharacterStyleSelect *selectData)
{
    switch(selectData->currentType())
    {
    case IfcCharacterStyleSelect::IFCTEXTSTYLEFORDEFINEDFONT:
        outputStream() << "IFCTEXTSTYLEFORDEFINEDFONT(";
        writeAttribute(selectData->getIfcTextStyleForDefinedFont());
        outputStream() << ")";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcClassificationNotationSelect(IfcClassificationNotationSelect *selectData)
{
    switch(selectData->currentType())
    {
    case IfcClassificationNotationSelect::IFCCLASSIFICATIONNOTATION:
        outputStream() << "IFCCLASSIFICATIONNOTATION(";
        writeAttribute(selectData->getIfcClassificationNotation());
        outputStream() << ")";
        break;
    case IfcClassificationNotationSelect::IFCCLASSIFICATIONREFERENCE:
        outputStream() << "IFCCLASSIFICATIONREFERENCE(";
        writeAttribute(selectData->getIfcClassificationReference());
        outputStream() << ")";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcColour(IfcColour *selectData)
{
    switch(selectData->currentType())
    {
    case IfcColour::IFCCOLOURSPECIFICATION:
        outputStream() << "IFCCOLOURSPECIFICATION(";
        writeAttribute(selectData->getIfcColourSpecification());
        outputStream() << ")";
        break;
    case IfcColour::IFCPREDEFINEDCOLOUR:
        outputStream() << "IFCPREDEFINEDCOLOUR(";
        writeAttribute(selectData->getIfcPreDefinedColour());
        outputStream() << ")";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcColourOrFactor(IfcColourOrFactor *selectData)
{
    switch(selectData->currentType())
    {
    case IfcColourOrFactor::IFCCOLOURRGB:
        outputStream() << "IFCCOLOURRGB(";
        writeAttribute(selectData->getIfcColourRgb());
        outputStream() << ")";
        break;
    case IfcColourOrFactor::IFCNORMALISEDRATIOMEASURE:
        outputStream() << "IFCNORMALISEDRATIOMEASURE(";
        writeAttribute(selectData->getIfcNormalisedRatioMeasure());
        outputStream() << ")";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcConditionCriterionSelect(IfcConditionCriterionSelect *selectData)
{
    switch(selectData->currentType())
    {
    case IfcConditionCriterionSelect::IFCLABEL:
        outputStream() << "IFCLABEL(";
        writeAttribute(selectData->getIfcLabel());
        outputStream() << ")";
        break;
    case IfcConditionCriterionSelect::IFCMEASUREWITHUNIT:
        outputStream() << "IFCMEASUREWITHUNIT(";
        writeAttribute(selectData->getIfcMeasureWithUnit());
        outputStream() << ")";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcCsgSelect(IfcCsgSelect *selectData)
{
    switch(selectData->currentType())
    {
    case IfcCsgSelect::IFCBOOLEANRESULT:
        outputStream() << "IFCBOOLEANRESULT(";
        writeAttribute(selectData->getIfcBooleanResult());
        outputStream() << ")";
        break;
    case IfcCsgSelect::IFCCSGPRIMITIVE3D:
        outputStream() << "IFCCSGPRIMITIVE3D(";
        writeAttribute(selectData->getIfcCsgPrimitive3D());
        outputStream() << ")";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcCurveFontOrScaledCurveFontSelect(IfcCurveFontOrScaledCurveFontSelect *selectData)
{
    switch(selectData->currentType())
    {
    case IfcCurveFontOrScaledCurveFontSelect::IFCPREDEFINEDCURVEFONT:
        outputStream() << "IFCPREDEFINEDCURVEFONT(";
        writeAttribute(selectData->getIfcPreDefinedCurveFont());
        outputStream() << ")";
        break;
    case IfcCurveFontOrScaledCurveFontSelect::IFCCURVESTYLEFONT:
        outputStream() << "IFCCURVESTYLEFONT(";
        writeAttribute(selectData->getIfcCurveStyleFont());
        outputStream() << ")";
        break;
    case IfcCurveFontOrScaledCurveFontSelect::IFCCURVESTYLEFONTANDSCALING:
        outputStream() << "IFCCURVESTYLEFONTANDSCALING(";
        writeAttribute(selectData->getIfcCurveStyleFontAndScaling());
        outputStream() << ")";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcCurveOrEdgeCurve(IfcCurveOrEdgeCurve *selectData)
{
    switch(selectData->currentType())
    {
    case IfcCurveOrEdgeCurve::IFCBOUNDEDCURVE:
        outputStream() << "IFCBOUNDEDCURVE(";
        writeAttribute(selectData->getIfcBoundedCurve());
        outputStream() << ")";
        break;
    case IfcCurveOrEdgeCurve::IFCEDGECURVE:
        outputStream() << "IFCEDGECURVE(";
        writeAttribute(selectData->getIfcEdgeCurve());
        outputStream() << ")";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcCurveStyleFontSelect(IfcCurveStyleFontSelect *selectData)
{
    switch(selectData->currentType())
    {
    case IfcCurveStyleFontSelect::IFCPREDEFINEDCURVEFONT:
        outputStream() << "IFCPREDEFINEDCURVEFONT(";
        writeAttribute(selectData->getIfcPreDefinedCurveFont());
        outputStream() << ")";
        break;
    case IfcCurveStyleFontSelect::IFCCURVESTYLEFONT:
        outputStream() << "IFCCURVESTYLEFONT(";
        writeAttribute(selectData->getIfcCurveStyleFont());
        outputStream() << ")";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcDateTimeSelect(IfcDateTimeSelect *selectData)
{
    switch(selectData->currentType())
    {
    case IfcDateTimeSelect::IFCCALENDARDATE:
        outputStream() << "IFCCALENDARDATE(";
        writeAttribute(selectData->getIfcCalendarDate());
        outputStream() << ")";
        break;
    case IfcDateTimeSelect::IFCLOCALTIME:
        outputStream() << "IFCLOCALTIME(";
        writeAttribute(selectData->getIfcLocalTime());
        outputStream() << ")";
        break;
    case IfcDateTimeSelect::IFCDATEANDTIME:
        outputStream() << "IFCDATEANDTIME(";
        writeAttribute(selectData->getIfcDateAndTime());
        outputStream() << ")";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcDefinedSymbolSelect(IfcDefinedSymbolSelect *selectData)
{
    switch(selectData->currentType())
    {
    case IfcDefinedSymbolSelect::IFCPREDEFINEDSYMBOL:
        outputStream() << "IFCPREDEFINEDSYMBOL(";
        writeAttribute(selectData->getIfcPreDefinedSymbol());
        outputStream() << ")";
        break;
    case IfcDefinedSymbolSelect::IFCEXTERNALLYDEFINEDSYMBOL:
        outputStream() << "IFCEXTERNALLYDEFINEDSYMBOL(";
        writeAttribute(selectData->getIfcExternallyDefinedSymbol());
        outputStream() << ")";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcDerivedMeasureValue(IfcDerivedMeasureValue *selectData)
{
    switch(selectData->currentType())
    {
    case IfcDerivedMeasureValue::IFCVOLUMETRICFLOWRATEMEASURE:
        outputStream() << "IFCVOLUMETRICFLOWRATEMEASURE(";
        writeAttribute(selectData->getIfcVolumetricFlowRateMeasure());
        outputStream() << ")";
        break;
    case IfcDerivedMeasureValue::IFCTIMESTAMP:
        outputStream() << "IFCTIMESTAMP(";
        writeAttribute(selectData->getIfcTimeStamp());
        outputStream() << ")";
        break;
    case IfcDerivedMeasureValue::IFCTHERMALTRANSMITTANCEMEASURE:
        outputStream() << "IFCTHERMALTRANSMITTANCEMEASURE(";
        writeAttribute(selectData->getIfcThermalTransmittanceMeasure());
        outputStream() << ")";
        break;
    case IfcDerivedMeasureValue::IFCTHERMALRESISTANCEMEASURE:
        outputStream() << "IFCTHERMALRESISTANCEMEASURE(";
        writeAttribute(selectData->getIfcThermalResistanceMeasure());
        outputStream() << ")";
        break;
    case IfcDerivedMeasureValue::IFCTHERMALADMITTANCEMEASURE:
        outputStream() << "IFCTHERMALADMITTANCEMEASURE(";
        writeAttribute(selectData->getIfcThermalAdmittanceMeasure());
        outputStream() << ")";
        break;
    case IfcDerivedMeasureValue::IFCPRESSUREMEASURE:
        outputStream() << "IFCPRESSUREMEASURE(";
        writeAttribute(selectData->getIfcPressureMeasure());
        outputStream() << ")";
        break;
    case IfcDerivedMeasureValue::IFCPOWERMEASURE:
        outputStream() << "IFCPOWERMEASURE(";
        writeAttribute(selectData->getIfcPowerMeasure());
        outputStream() << ")";
        break;
    case IfcDerivedMeasureValue::IFCMASSFLOWRATEMEASURE:
        outputStream() << "IFCMASSFLOWRATEMEASURE(";
        writeAttribute(selectData->getIfcMassFlowRateMeasure());
        outputStream() << ")";
        break;
    case IfcDerivedMeasureValue::IFCMASSDENSITYMEASURE:
        outputStream() << "IFCMASSDENSITYMEASURE(";
        writeAttribute(selectData->getIfcMassDensityMeasure());
        outputStream() << ")";
        break;
    case IfcDerivedMeasureValue::IFCLINEARVELOCITYMEASURE:
        outputStream() << "IFCLINEARVELOCITYMEASURE(";
        writeAttribute(selectData->getIfcLinearVelocityMeasure());
        outputStream() << ")";
        break;
    case IfcDerivedMeasureValue::IFCKINEMATICVISCOSITYMEASURE:
        outputStream() << "IFCKINEMATICVISCOSITYMEASURE(";
        writeAttribute(selectData->getIfcKinematicViscosityMeasure());
        outputStream() << ")";
        break;
    case IfcDerivedMeasureValue::IFCINTEGERCOUNTRATEMEASURE:
        outputStream() << "IFCINTEGERCOUNTRATEMEASURE(";
        writeAttribute(selectData->getIfcIntegerCountRateMeasure());
        outputStream() << ")";
        break;
    case IfcDerivedMeasureValue::IFCHEATFLUXDENSITYMEASURE:
        outputStream() << "IFCHEATFLUXDENSITYMEASURE(";
        writeAttribute(selectData->getIfcHeatFluxDensityMeasure());
        outputStream() << ")";
        break;
    case IfcDerivedMeasureValue::IFCFREQUENCYMEASURE:
        outputStream() << "IFCFREQUENCYMEASURE(";
        writeAttribute(selectData->getIfcFrequencyMeasure());
        outputStream() << ")";
        break;
    case IfcDerivedMeasureValue::IFCENERGYMEASURE:
        outputStream() << "IFCENERGYMEASURE(";
        writeAttribute(selectData->getIfcEnergyMeasure());
        outputStream() << ")";
        break;
    case IfcDerivedMeasureValue::IFCELECTRICVOLTAGEMEASURE:
        outputStream() << "IFCELECTRICVOLTAGEMEASURE(";
        writeAttribute(selectData->getIfcElectricVoltageMeasure());
        outputStream() << ")";
        break;
    case IfcDerivedMeasureValue::IFCDYNAMICVISCOSITYMEASURE:
        outputStream() << "IFCDYNAMICVISCOSITYMEASURE(";
        writeAttribute(selectData->getIfcDynamicViscosityMeasure());
        outputStream() << ")";
        break;
    case IfcDerivedMeasureValue::IFCCOMPOUNDPLANEANGLEMEASURE:
        outputStream() << "IFCCOMPOUNDPLANEANGLEMEASURE(";
        outputStream() << "(";
        {
            if ((selectData->getIfcCompoundPlaneAngleMeasure()).size())
            {
                IfcCompoundPlaneAngleMeasure::iterator it = (selectData->getIfcCompoundPlaneAngleMeasure()).begin();
                writeAttribute(*it);
                for (it++; it != (selectData->getIfcCompoundPlaneAngleMeasure()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute(*it);
                }
            }
        }
        outputStream() << ")";
        outputStream() << ")";
        break;
    case IfcDerivedMeasureValue::IFCANGULARVELOCITYMEASURE:
        outputStream() << "IFCANGULARVELOCITYMEASURE(";
        writeAttribute(selectData->getIfcAngularVelocityMeasure());
        outputStream() << ")";
        break;
    case IfcDerivedMeasureValue::IFCTHERMALCONDUCTIVITYMEASURE:
        outputStream() << "IFCTHERMALCONDUCTIVITYMEASURE(";
        writeAttribute(selectData->getIfcThermalConductivityMeasure());
        outputStream() << ")";
        break;
    case IfcDerivedMeasureValue::IFCMOLECULARWEIGHTMEASURE:
        outputStream() << "IFCMOLECULARWEIGHTMEASURE(";
        writeAttribute(selectData->getIfcMolecularWeightMeasure());
        outputStream() << ")";
        break;
    case IfcDerivedMeasureValue::IFCVAPORPERMEABILITYMEASURE:
        outputStream() << "IFCVAPORPERMEABILITYMEASURE(";
        writeAttribute(selectData->getIfcVaporPermeabilityMeasure());
        outputStream() << ")";
        break;
    case IfcDerivedMeasureValue::IFCMOISTUREDIFFUSIVITYMEASURE:
        outputStream() << "IFCMOISTUREDIFFUSIVITYMEASURE(";
        writeAttribute(selectData->getIfcMoistureDiffusivityMeasure());
        outputStream() << ")";
        break;
    case IfcDerivedMeasureValue::IFCISOTHERMALMOISTURECAPACITYMEASURE:
        outputStream() << "IFCISOTHERMALMOISTURECAPACITYMEASURE(";
        writeAttribute(selectData->getIfcIsothermalMoistureCapacityMeasure());
        outputStream() << ")";
        break;
    case IfcDerivedMeasureValue::IFCSPECIFICHEATCAPACITYMEASURE:
        outputStream() << "IFCSPECIFICHEATCAPACITYMEASURE(";
        writeAttribute(selectData->getIfcSpecificHeatCapacityMeasure());
        outputStream() << ")";
        break;
    case IfcDerivedMeasureValue::IFCMONETARYMEASURE:
        outputStream() << "IFCMONETARYMEASURE(";
        writeAttribute(selectData->getIfcMonetaryMeasure());
        outputStream() << ")";
        break;
    case IfcDerivedMeasureValue::IFCMAGNETICFLUXDENSITYMEASURE:
        outputStream() << "IFCMAGNETICFLUXDENSITYMEASURE(";
        writeAttribute(selectData->getIfcMagneticFluxDensityMeasure());
        outputStream() << ")";
        break;
    case IfcDerivedMeasureValue::IFCMAGNETICFLUXMEASURE:
        outputStream() << "IFCMAGNETICFLUXMEASURE(";
        writeAttribute(selectData->getIfcMagneticFluxMeasure());
        outputStream() << ")";
        break;
    case IfcDerivedMeasureValue::IFCLUMINOUSFLUXMEASURE:
        outputStream() << "IFCLUMINOUSFLUXMEASURE(";
        writeAttribute(selectData->getIfcLuminousFluxMeasure());
        outputStream() << ")";
        break;
    case IfcDerivedMeasureValue::IFCFORCEMEASURE:
        outputStream() << "IFCFORCEMEASURE(";
        writeAttribute(selectData->getIfcForceMeasure());
        outputStream() << ")";
        break;
    case IfcDerivedMeasureValue::IFCINDUCTANCEMEASURE:
        outputStream() << "IFCINDUCTANCEMEASURE(";
        writeAttribute(selectData->getIfcInductanceMeasure());
        outputStream() << ")";
        break;
    case IfcDerivedMeasureValue::IFCILLUMINANCEMEASURE:
        outputStream() << "IFCILLUMINANCEMEASURE(";
        writeAttribute(selectData->getIfcIlluminanceMeasure());
        outputStream() << ")";
        break;
    case IfcDerivedMeasureValue::IFCELECTRICRESISTANCEMEASURE:
        outputStream() << "IFCELECTRICRESISTANCEMEASURE(";
        writeAttribute(selectData->getIfcElectricResistanceMeasure());
        outputStream() << ")";
        break;
    case IfcDerivedMeasureValue::IFCELECTRICCONDUCTANCEMEASURE:
        outputStream() << "IFCELECTRICCONDUCTANCEMEASURE(";
        writeAttribute(selectData->getIfcElectricConductanceMeasure());
        outputStream() << ")";
        break;
    case IfcDerivedMeasureValue::IFCELECTRICCHARGEMEASURE:
        outputStream() << "IFCELECTRICCHARGEMEASURE(";
        writeAttribute(selectData->getIfcElectricChargeMeasure());
        outputStream() << ")";
        break;
    case IfcDerivedMeasureValue::IFCDOSEEQUIVALENTMEASURE:
        outputStream() << "IFCDOSEEQUIVALENTMEASURE(";
        writeAttribute(selectData->getIfcDoseEquivalentMeasure());
        outputStream() << ")";
        break;
    case IfcDerivedMeasureValue::IFCELECTRICCAPACITANCEMEASURE:
        outputStream() << "IFCELECTRICCAPACITANCEMEASURE(";
        writeAttribute(selectData->getIfcElectricCapacitanceMeasure());
        outputStream() << ")";
        break;
    case IfcDerivedMeasureValue::IFCABSORBEDDOSEMEASURE:
        outputStream() << "IFCABSORBEDDOSEMEASURE(";
        writeAttribute(selectData->getIfcAbsorbedDoseMeasure());
        outputStream() << ")";
        break;
    case IfcDerivedMeasureValue::IFCRADIOACTIVITYMEASURE:
        outputStream() << "IFCRADIOACTIVITYMEASURE(";
        writeAttribute(selectData->getIfcRadioActivityMeasure());
        outputStream() << ")";
        break;
    case IfcDerivedMeasureValue::IFCROTATIONALFREQUENCYMEASURE:
        outputStream() << "IFCROTATIONALFREQUENCYMEASURE(";
        writeAttribute(selectData->getIfcRotationalFrequencyMeasure());
        outputStream() << ")";
        break;
    case IfcDerivedMeasureValue::IFCTORQUEMEASURE:
        outputStream() << "IFCTORQUEMEASURE(";
        writeAttribute(selectData->getIfcTorqueMeasure());
        outputStream() << ")";
        break;
    case IfcDerivedMeasureValue::IFCACCELERATIONMEASURE:
        outputStream() << "IFCACCELERATIONMEASURE(";
        writeAttribute(selectData->getIfcAccelerationMeasure());
        outputStream() << ")";
        break;
    case IfcDerivedMeasureValue::IFCLINEARFORCEMEASURE:
        outputStream() << "IFCLINEARFORCEMEASURE(";
        writeAttribute(selectData->getIfcLinearForceMeasure());
        outputStream() << ")";
        break;
    case IfcDerivedMeasureValue::IFCLINEARSTIFFNESSMEASURE:
        outputStream() << "IFCLINEARSTIFFNESSMEASURE(";
        writeAttribute(selectData->getIfcLinearStiffnessMeasure());
        outputStream() << ")";
        break;
    case IfcDerivedMeasureValue::IFCMODULUSOFSUBGRADEREACTIONMEASURE:
        outputStream() << "IFCMODULUSOFSUBGRADEREACTIONMEASURE(";
        writeAttribute(selectData->getIfcModulusOfSubgradeReactionMeasure());
        outputStream() << ")";
        break;
    case IfcDerivedMeasureValue::IFCMODULUSOFELASTICITYMEASURE:
        outputStream() << "IFCMODULUSOFELASTICITYMEASURE(";
        writeAttribute(selectData->getIfcModulusOfElasticityMeasure());
        outputStream() << ")";
        break;
    case IfcDerivedMeasureValue::IFCMOMENTOFINERTIAMEASURE:
        outputStream() << "IFCMOMENTOFINERTIAMEASURE(";
        writeAttribute(selectData->getIfcMomentOfInertiaMeasure());
        outputStream() << ")";
        break;
    case IfcDerivedMeasureValue::IFCPLANARFORCEMEASURE:
        outputStream() << "IFCPLANARFORCEMEASURE(";
        writeAttribute(selectData->getIfcPlanarForceMeasure());
        outputStream() << ")";
        break;
    case IfcDerivedMeasureValue::IFCROTATIONALSTIFFNESSMEASURE:
        outputStream() << "IFCROTATIONALSTIFFNESSMEASURE(";
        writeAttribute(selectData->getIfcRotationalStiffnessMeasure());
        outputStream() << ")";
        break;
    case IfcDerivedMeasureValue::IFCSHEARMODULUSMEASURE:
        outputStream() << "IFCSHEARMODULUSMEASURE(";
        writeAttribute(selectData->getIfcShearModulusMeasure());
        outputStream() << ")";
        break;
    case IfcDerivedMeasureValue::IFCLINEARMOMENTMEASURE:
        outputStream() << "IFCLINEARMOMENTMEASURE(";
        writeAttribute(selectData->getIfcLinearMomentMeasure());
        outputStream() << ")";
        break;
    case IfcDerivedMeasureValue::IFCLUMINOUSINTENSITYDISTRIBUTIONMEASURE:
        outputStream() << "IFCLUMINOUSINTENSITYDISTRIBUTIONMEASURE(";
        writeAttribute(selectData->getIfcLuminousIntensityDistributionMeasure());
        outputStream() << ")";
        break;
    case IfcDerivedMeasureValue::IFCCURVATUREMEASURE:
        outputStream() << "IFCCURVATUREMEASURE(";
        writeAttribute(selectData->getIfcCurvatureMeasure());
        outputStream() << ")";
        break;
    case IfcDerivedMeasureValue::IFCMASSPERLENGTHMEASURE:
        outputStream() << "IFCMASSPERLENGTHMEASURE(";
        writeAttribute(selectData->getIfcMassPerLengthMeasure());
        outputStream() << ")";
        break;
    case IfcDerivedMeasureValue::IFCMODULUSOFLINEARSUBGRADEREACTIONMEASURE:
        outputStream() << "IFCMODULUSOFLINEARSUBGRADEREACTIONMEASURE(";
        writeAttribute(selectData->getIfcModulusOfLinearSubgradeReactionMeasure());
        outputStream() << ")";
        break;
    case IfcDerivedMeasureValue::IFCMODULUSOFROTATIONALSUBGRADEREACTIONMEASURE:
        outputStream() << "IFCMODULUSOFROTATIONALSUBGRADEREACTIONMEASURE(";
        writeAttribute(selectData->getIfcModulusOfRotationalSubgradeReactionMeasure());
        outputStream() << ")";
        break;
    case IfcDerivedMeasureValue::IFCROTATIONALMASSMEASURE:
        outputStream() << "IFCROTATIONALMASSMEASURE(";
        writeAttribute(selectData->getIfcRotationalMassMeasure());
        outputStream() << ")";
        break;
    case IfcDerivedMeasureValue::IFCSECTIONALAREAINTEGRALMEASURE:
        outputStream() << "IFCSECTIONALAREAINTEGRALMEASURE(";
        writeAttribute(selectData->getIfcSectionalAreaIntegralMeasure());
        outputStream() << ")";
        break;
    case IfcDerivedMeasureValue::IFCSECTIONMODULUSMEASURE:
        outputStream() << "IFCSECTIONMODULUSMEASURE(";
        writeAttribute(selectData->getIfcSectionModulusMeasure());
        outputStream() << ")";
        break;
    case IfcDerivedMeasureValue::IFCTEMPERATUREGRADIENTMEASURE:
        outputStream() << "IFCTEMPERATUREGRADIENTMEASURE(";
        writeAttribute(selectData->getIfcTemperatureGradientMeasure());
        outputStream() << ")";
        break;
    case IfcDerivedMeasureValue::IFCTHERMALEXPANSIONCOEFFICIENTMEASURE:
        outputStream() << "IFCTHERMALEXPANSIONCOEFFICIENTMEASURE(";
        writeAttribute(selectData->getIfcThermalExpansionCoefficientMeasure());
        outputStream() << ")";
        break;
    case IfcDerivedMeasureValue::IFCWARPINGCONSTANTMEASURE:
        outputStream() << "IFCWARPINGCONSTANTMEASURE(";
        writeAttribute(selectData->getIfcWarpingConstantMeasure());
        outputStream() << ")";
        break;
    case IfcDerivedMeasureValue::IFCWARPINGMOMENTMEASURE:
        outputStream() << "IFCWARPINGMOMENTMEASURE(";
        writeAttribute(selectData->getIfcWarpingMomentMeasure());
        outputStream() << ")";
        break;
    case IfcDerivedMeasureValue::IFCSOUNDPOWERMEASURE:
        outputStream() << "IFCSOUNDPOWERMEASURE(";
        writeAttribute(selectData->getIfcSoundPowerMeasure());
        outputStream() << ")";
        break;
    case IfcDerivedMeasureValue::IFCSOUNDPRESSUREMEASURE:
        outputStream() << "IFCSOUNDPRESSUREMEASURE(";
        writeAttribute(selectData->getIfcSoundPressureMeasure());
        outputStream() << ")";
        break;
    case IfcDerivedMeasureValue::IFCHEATINGVALUEMEASURE:
        outputStream() << "IFCHEATINGVALUEMEASURE(";
        writeAttribute(selectData->getIfcHeatingValueMeasure());
        outputStream() << ")";
        break;
    case IfcDerivedMeasureValue::IFCPHMEASURE:
        outputStream() << "IFCPHMEASURE(";
        writeAttribute(selectData->getIfcPHMeasure());
        outputStream() << ")";
        break;
    case IfcDerivedMeasureValue::IFCIONCONCENTRATIONMEASURE:
        outputStream() << "IFCIONCONCENTRATIONMEASURE(";
        writeAttribute(selectData->getIfcIonConcentrationMeasure());
        outputStream() << ")";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcDocumentSelect(IfcDocumentSelect *selectData)
{
    switch(selectData->currentType())
    {
    case IfcDocumentSelect::IFCDOCUMENTREFERENCE:
        outputStream() << "IFCDOCUMENTREFERENCE(";
        writeAttribute(selectData->getIfcDocumentReference());
        outputStream() << ")";
        break;
    case IfcDocumentSelect::IFCDOCUMENTINFORMATION:
        outputStream() << "IFCDOCUMENTINFORMATION(";
        writeAttribute(selectData->getIfcDocumentInformation());
        outputStream() << ")";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcDraughtingCalloutElement(IfcDraughtingCalloutElement *selectData)
{
    switch(selectData->currentType())
    {
    case IfcDraughtingCalloutElement::IFCANNOTATIONCURVEOCCURRENCE:
        outputStream() << "IFCANNOTATIONCURVEOCCURRENCE(";
        writeAttribute(selectData->getIfcAnnotationCurveOccurrence());
        outputStream() << ")";
        break;
    case IfcDraughtingCalloutElement::IFCANNOTATIONTEXTOCCURRENCE:
        outputStream() << "IFCANNOTATIONTEXTOCCURRENCE(";
        writeAttribute(selectData->getIfcAnnotationTextOccurrence());
        outputStream() << ")";
        break;
    case IfcDraughtingCalloutElement::IFCANNOTATIONSYMBOLOCCURRENCE:
        outputStream() << "IFCANNOTATIONSYMBOLOCCURRENCE(";
        writeAttribute(selectData->getIfcAnnotationSymbolOccurrence());
        outputStream() << ")";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcFillAreaStyleTileShapeSelect(IfcFillAreaStyleTileShapeSelect *selectData)
{
    switch(selectData->currentType())
    {
    case IfcFillAreaStyleTileShapeSelect::IFCFILLAREASTYLETILESYMBOLWITHSTYLE:
        outputStream() << "IFCFILLAREASTYLETILESYMBOLWITHSTYLE(";
        writeAttribute(selectData->getIfcFillAreaStyleTileSymbolWithStyle());
        outputStream() << ")";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcFillStyleSelect(IfcFillStyleSelect *selectData)
{
    switch(selectData->currentType())
    {
    case IfcFillStyleSelect::IFCFILLAREASTYLEHATCHING:
        outputStream() << "IFCFILLAREASTYLEHATCHING(";
        writeAttribute(selectData->getIfcFillAreaStyleHatching());
        outputStream() << ")";
        break;
    case IfcFillStyleSelect::IFCFILLAREASTYLETILES:
        outputStream() << "IFCFILLAREASTYLETILES(";
        writeAttribute(selectData->getIfcFillAreaStyleTiles());
        outputStream() << ")";
        break;
    case IfcFillStyleSelect::IFCCOLOURSPECIFICATION:
        outputStream() << "IFCCOLOURSPECIFICATION(";
        writeAttribute(selectData->getIfcColourSpecification());
        outputStream() << ")";
        break;
    case IfcFillStyleSelect::IFCPREDEFINEDCOLOUR:
        outputStream() << "IFCPREDEFINEDCOLOUR(";
        writeAttribute(selectData->getIfcPreDefinedColour());
        outputStream() << ")";
        break;
    case IfcFillStyleSelect::IFCEXTERNALLYDEFINEDHATCHSTYLE:
        outputStream() << "IFCEXTERNALLYDEFINEDHATCHSTYLE(";
        writeAttribute(selectData->getIfcExternallyDefinedHatchStyle());
        outputStream() << ")";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcGeometricSetSelect(IfcGeometricSetSelect *selectData)
{
    switch(selectData->currentType())
    {
    case IfcGeometricSetSelect::IFCPOINT:
        outputStream() << "IFCPOINT(";
        writeAttribute(selectData->getIfcPoint());
        outputStream() << ")";
        break;
    case IfcGeometricSetSelect::IFCCURVE:
        outputStream() << "IFCCURVE(";
        writeAttribute(selectData->getIfcCurve());
        outputStream() << ")";
        break;
    case IfcGeometricSetSelect::IFCSURFACE:
        outputStream() << "IFCSURFACE(";
        writeAttribute(selectData->getIfcSurface());
        outputStream() << ")";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcHatchLineDistanceSelect(IfcHatchLineDistanceSelect *selectData)
{
    switch(selectData->currentType())
    {
    case IfcHatchLineDistanceSelect::IFCONEDIRECTIONREPEATFACTOR:
        outputStream() << "IFCONEDIRECTIONREPEATFACTOR(";
        writeAttribute(selectData->getIfcOneDirectionRepeatFactor());
        outputStream() << ")";
        break;
    case IfcHatchLineDistanceSelect::IFCPOSITIVELENGTHMEASURE:
        outputStream() << "IFCPOSITIVELENGTHMEASURE(";
        writeAttribute(selectData->getIfcPositiveLengthMeasure());
        outputStream() << ")";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcLayeredItem(IfcLayeredItem *selectData)
{
    switch(selectData->currentType())
    {
    case IfcLayeredItem::IFCREPRESENTATIONITEM:
        outputStream() << "IFCREPRESENTATIONITEM(";
        writeAttribute(selectData->getIfcRepresentationItem());
        outputStream() << ")";
        break;
    case IfcLayeredItem::IFCREPRESENTATION:
        outputStream() << "IFCREPRESENTATION(";
        writeAttribute(selectData->getIfcRepresentation());
        outputStream() << ")";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcLibrarySelect(IfcLibrarySelect *selectData)
{
    switch(selectData->currentType())
    {
    case IfcLibrarySelect::IFCLIBRARYREFERENCE:
        outputStream() << "IFCLIBRARYREFERENCE(";
        writeAttribute(selectData->getIfcLibraryReference());
        outputStream() << ")";
        break;
    case IfcLibrarySelect::IFCLIBRARYINFORMATION:
        outputStream() << "IFCLIBRARYINFORMATION(";
        writeAttribute(selectData->getIfcLibraryInformation());
        outputStream() << ")";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcLightDistributionDataSourceSelect(IfcLightDistributionDataSourceSelect *selectData)
{
    switch(selectData->currentType())
    {
    case IfcLightDistributionDataSourceSelect::IFCEXTERNALREFERENCE:
        outputStream() << "IFCEXTERNALREFERENCE(";
        writeAttribute(selectData->getIfcExternalReference());
        outputStream() << ")";
        break;
    case IfcLightDistributionDataSourceSelect::IFCLIGHTINTENSITYDISTRIBUTION:
        outputStream() << "IFCLIGHTINTENSITYDISTRIBUTION(";
        writeAttribute(selectData->getIfcLightIntensityDistribution());
        outputStream() << ")";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcMaterialSelect(IfcMaterialSelect *selectData)
{
    switch(selectData->currentType())
    {
    case IfcMaterialSelect::IFCMATERIAL:
        outputStream() << "IFCMATERIAL(";
        writeAttribute(selectData->getIfcMaterial());
        outputStream() << ")";
        break;
    case IfcMaterialSelect::IFCMATERIALLIST:
        outputStream() << "IFCMATERIALLIST(";
        writeAttribute(selectData->getIfcMaterialList());
        outputStream() << ")";
        break;
    case IfcMaterialSelect::IFCMATERIALLAYERSETUSAGE:
        outputStream() << "IFCMATERIALLAYERSETUSAGE(";
        writeAttribute(selectData->getIfcMaterialLayerSetUsage());
        outputStream() << ")";
        break;
    case IfcMaterialSelect::IFCMATERIALLAYERSET:
        outputStream() << "IFCMATERIALLAYERSET(";
        writeAttribute(selectData->getIfcMaterialLayerSet());
        outputStream() << ")";
        break;
    case IfcMaterialSelect::IFCMATERIALLAYER:
        outputStream() << "IFCMATERIALLAYER(";
        writeAttribute(selectData->getIfcMaterialLayer());
        outputStream() << ")";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcMeasureValue(IfcMeasureValue *selectData)
{
    switch(selectData->currentType())
    {
    case IfcMeasureValue::IFCVOLUMEMEASURE:
        outputStream() << "IFCVOLUMEMEASURE(";
        writeAttribute(selectData->getIfcVolumeMeasure());
        outputStream() << ")";
        break;
    case IfcMeasureValue::IFCTIMEMEASURE:
        outputStream() << "IFCTIMEMEASURE(";
        writeAttribute(selectData->getIfcTimeMeasure());
        outputStream() << ")";
        break;
    case IfcMeasureValue::IFCTHERMODYNAMICTEMPERATUREMEASURE:
        outputStream() << "IFCTHERMODYNAMICTEMPERATUREMEASURE(";
        writeAttribute(selectData->getIfcThermodynamicTemperatureMeasure());
        outputStream() << ")";
        break;
    case IfcMeasureValue::IFCSOLIDANGLEMEASURE:
        outputStream() << "IFCSOLIDANGLEMEASURE(";
        writeAttribute(selectData->getIfcSolidAngleMeasure());
        outputStream() << ")";
        break;
    case IfcMeasureValue::IFCPOSITIVERATIOMEASURE:
        outputStream() << "IFCPOSITIVERATIOMEASURE(";
        writeAttribute(selectData->getIfcPositiveRatioMeasure());
        outputStream() << ")";
        break;
    case IfcMeasureValue::IFCRATIOMEASURE:
        outputStream() << "IFCRATIOMEASURE(";
        writeAttribute(selectData->getIfcRatioMeasure());
        outputStream() << ")";
        break;
    case IfcMeasureValue::IFCPOSITIVEPLANEANGLEMEASURE:
        outputStream() << "IFCPOSITIVEPLANEANGLEMEASURE(";
        writeAttribute(selectData->getIfcPositivePlaneAngleMeasure());
        outputStream() << ")";
        break;
    case IfcMeasureValue::IFCPLANEANGLEMEASURE:
        outputStream() << "IFCPLANEANGLEMEASURE(";
        writeAttribute(selectData->getIfcPlaneAngleMeasure());
        outputStream() << ")";
        break;
    case IfcMeasureValue::IFCPARAMETERVALUE:
        outputStream() << "IFCPARAMETERVALUE(";
        writeAttribute(selectData->getIfcParameterValue());
        outputStream() << ")";
        break;
    case IfcMeasureValue::IFCNUMERICMEASURE:
        outputStream() << "IFCNUMERICMEASURE(";
        writeAttribute(selectData->getIfcNumericMeasure());
        outputStream() << ")";
        break;
    case IfcMeasureValue::IFCMASSMEASURE:
        outputStream() << "IFCMASSMEASURE(";
        writeAttribute(selectData->getIfcMassMeasure());
        outputStream() << ")";
        break;
    case IfcMeasureValue::IFCPOSITIVELENGTHMEASURE:
        outputStream() << "IFCPOSITIVELENGTHMEASURE(";
        writeAttribute(selectData->getIfcPositiveLengthMeasure());
        outputStream() << ")";
        break;
    case IfcMeasureValue::IFCLENGTHMEASURE:
        outputStream() << "IFCLENGTHMEASURE(";
        writeAttribute(selectData->getIfcLengthMeasure());
        outputStream() << ")";
        break;
    case IfcMeasureValue::IFCELECTRICCURRENTMEASURE:
        outputStream() << "IFCELECTRICCURRENTMEASURE(";
        writeAttribute(selectData->getIfcElectricCurrentMeasure());
        outputStream() << ")";
        break;
    case IfcMeasureValue::IFCDESCRIPTIVEMEASURE:
        outputStream() << "IFCDESCRIPTIVEMEASURE(";
        writeAttribute(selectData->getIfcDescriptiveMeasure());
        outputStream() << ")";
        break;
    case IfcMeasureValue::IFCCOUNTMEASURE:
        outputStream() << "IFCCOUNTMEASURE(";
        writeAttribute(selectData->getIfcCountMeasure());
        outputStream() << ")";
        break;
    case IfcMeasureValue::IFCCONTEXTDEPENDENTMEASURE:
        outputStream() << "IFCCONTEXTDEPENDENTMEASURE(";
        writeAttribute(selectData->getIfcContextDependentMeasure());
        outputStream() << ")";
        break;
    case IfcMeasureValue::IFCAREAMEASURE:
        outputStream() << "IFCAREAMEASURE(";
        writeAttribute(selectData->getIfcAreaMeasure());
        outputStream() << ")";
        break;
    case IfcMeasureValue::IFCAMOUNTOFSUBSTANCEMEASURE:
        outputStream() << "IFCAMOUNTOFSUBSTANCEMEASURE(";
        writeAttribute(selectData->getIfcAmountOfSubstanceMeasure());
        outputStream() << ")";
        break;
    case IfcMeasureValue::IFCLUMINOUSINTENSITYMEASURE:
        outputStream() << "IFCLUMINOUSINTENSITYMEASURE(";
        writeAttribute(selectData->getIfcLuminousIntensityMeasure());
        outputStream() << ")";
        break;
    case IfcMeasureValue::IFCNORMALISEDRATIOMEASURE:
        outputStream() << "IFCNORMALISEDRATIOMEASURE(";
        writeAttribute(selectData->getIfcNormalisedRatioMeasure());
        outputStream() << ")";
        break;
    case IfcMeasureValue::IFCCOMPLEXNUMBER:
        outputStream() << "IFCCOMPLEXNUMBER(";
        outputStream() << "(";
        {
            if ((selectData->getIfcComplexNumber()).size())
            {
                IfcComplexNumber::iterator it = (selectData->getIfcComplexNumber()).begin();
                writeAttribute(*it);
                for (it++; it != (selectData->getIfcComplexNumber()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute(*it);
                }
            }
        }
        outputStream() << ")";
        outputStream() << ")";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcMetricValueSelect(IfcMetricValueSelect *selectData)
{
    switch(selectData->currentType())
    {
    case IfcMetricValueSelect::IFCCALENDARDATE:
        outputStream() << "IFCCALENDARDATE(";
        writeAttribute(selectData->getIfcCalendarDate());
        outputStream() << ")";
        break;
    case IfcMetricValueSelect::IFCLOCALTIME:
        outputStream() << "IFCLOCALTIME(";
        writeAttribute(selectData->getIfcLocalTime());
        outputStream() << ")";
        break;
    case IfcMetricValueSelect::IFCDATEANDTIME:
        outputStream() << "IFCDATEANDTIME(";
        writeAttribute(selectData->getIfcDateAndTime());
        outputStream() << ")";
        break;
    case IfcMetricValueSelect::IFCMEASUREWITHUNIT:
        outputStream() << "IFCMEASUREWITHUNIT(";
        writeAttribute(selectData->getIfcMeasureWithUnit());
        outputStream() << ")";
        break;
    case IfcMetricValueSelect::IFCTABLE:
        outputStream() << "IFCTABLE(";
        writeAttribute(selectData->getIfcTable());
        outputStream() << ")";
        break;
    case IfcMetricValueSelect::IFCTEXT:
        outputStream() << "IFCTEXT(";
        writeAttribute(selectData->getIfcText());
        outputStream() << ")";
        break;
    case IfcMetricValueSelect::IFCTIMESERIES:
        outputStream() << "IFCTIMESERIES(";
        writeAttribute(selectData->getIfcTimeSeries());
        outputStream() << ")";
        break;
    case IfcMetricValueSelect::IFCCOSTVALUE:
        outputStream() << "IFCCOSTVALUE(";
        writeAttribute(selectData->getIfcCostValue());
        outputStream() << ")";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcObjectReferenceSelect(IfcObjectReferenceSelect *selectData)
{
    switch(selectData->currentType())
    {
    case IfcObjectReferenceSelect::IFCMATERIAL:
        outputStream() << "IFCMATERIAL(";
        writeAttribute(selectData->getIfcMaterial());
        outputStream() << ")";
        break;
    case IfcObjectReferenceSelect::IFCPERSON:
        outputStream() << "IFCPERSON(";
        writeAttribute(selectData->getIfcPerson());
        outputStream() << ")";
        break;
    case IfcObjectReferenceSelect::IFCDATEANDTIME:
        outputStream() << "IFCDATEANDTIME(";
        writeAttribute(selectData->getIfcDateAndTime());
        outputStream() << ")";
        break;
    case IfcObjectReferenceSelect::IFCMATERIALLIST:
        outputStream() << "IFCMATERIALLIST(";
        writeAttribute(selectData->getIfcMaterialList());
        outputStream() << ")";
        break;
    case IfcObjectReferenceSelect::IFCORGANIZATION:
        outputStream() << "IFCORGANIZATION(";
        writeAttribute(selectData->getIfcOrganization());
        outputStream() << ")";
        break;
    case IfcObjectReferenceSelect::IFCCALENDARDATE:
        outputStream() << "IFCCALENDARDATE(";
        writeAttribute(selectData->getIfcCalendarDate());
        outputStream() << ")";
        break;
    case IfcObjectReferenceSelect::IFCLOCALTIME:
        outputStream() << "IFCLOCALTIME(";
        writeAttribute(selectData->getIfcLocalTime());
        outputStream() << ")";
        break;
    case IfcObjectReferenceSelect::IFCPERSONANDORGANIZATION:
        outputStream() << "IFCPERSONANDORGANIZATION(";
        writeAttribute(selectData->getIfcPersonAndOrganization());
        outputStream() << ")";
        break;
    case IfcObjectReferenceSelect::IFCMATERIALLAYER:
        outputStream() << "IFCMATERIALLAYER(";
        writeAttribute(selectData->getIfcMaterialLayer());
        outputStream() << ")";
        break;
    case IfcObjectReferenceSelect::IFCEXTERNALREFERENCE:
        outputStream() << "IFCEXTERNALREFERENCE(";
        writeAttribute(selectData->getIfcExternalReference());
        outputStream() << ")";
        break;
    case IfcObjectReferenceSelect::IFCTIMESERIES:
        outputStream() << "IFCTIMESERIES(";
        writeAttribute(selectData->getIfcTimeSeries());
        outputStream() << ")";
        break;
    case IfcObjectReferenceSelect::IFCADDRESS:
        outputStream() << "IFCADDRESS(";
        writeAttribute(selectData->getIfcAddress());
        outputStream() << ")";
        break;
    case IfcObjectReferenceSelect::IFCAPPLIEDVALUE:
        outputStream() << "IFCAPPLIEDVALUE(";
        writeAttribute(selectData->getIfcAppliedValue());
        outputStream() << ")";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcOrientationSelect(IfcOrientationSelect *selectData)
{
    switch(selectData->currentType())
    {
    case IfcOrientationSelect::IFCPLANEANGLEMEASURE:
        outputStream() << "IFCPLANEANGLEMEASURE(";
        writeAttribute(selectData->getIfcPlaneAngleMeasure());
        outputStream() << ")";
        break;
    case IfcOrientationSelect::IFCDIRECTION:
        outputStream() << "IFCDIRECTION(";
        writeAttribute(selectData->getIfcDirection());
        outputStream() << ")";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcPointOrVertexPoint(IfcPointOrVertexPoint *selectData)
{
    switch(selectData->currentType())
    {
    case IfcPointOrVertexPoint::IFCPOINT:
        outputStream() << "IFCPOINT(";
        writeAttribute(selectData->getIfcPoint());
        outputStream() << ")";
        break;
    case IfcPointOrVertexPoint::IFCVERTEXPOINT:
        outputStream() << "IFCVERTEXPOINT(";
        writeAttribute(selectData->getIfcVertexPoint());
        outputStream() << ")";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcPresentationStyleSelect(IfcPresentationStyleSelect *selectData)
{
    switch(selectData->currentType())
    {
    case IfcPresentationStyleSelect::IFCNULLSTYLE:
        outputStream() << "IFCNULLSTYLE(";
        writeAttribute(selectData->getIfcNullStyle());
        outputStream() << ")";
        break;
    case IfcPresentationStyleSelect::IFCCURVESTYLE:
        outputStream() << "IFCCURVESTYLE(";
        writeAttribute(selectData->getIfcCurveStyle());
        outputStream() << ")";
        break;
    case IfcPresentationStyleSelect::IFCSYMBOLSTYLE:
        outputStream() << "IFCSYMBOLSTYLE(";
        writeAttribute(selectData->getIfcSymbolStyle());
        outputStream() << ")";
        break;
    case IfcPresentationStyleSelect::IFCFILLAREASTYLE:
        outputStream() << "IFCFILLAREASTYLE(";
        writeAttribute(selectData->getIfcFillAreaStyle());
        outputStream() << ")";
        break;
    case IfcPresentationStyleSelect::IFCTEXTSTYLE:
        outputStream() << "IFCTEXTSTYLE(";
        writeAttribute(selectData->getIfcTextStyle());
        outputStream() << ")";
        break;
    case IfcPresentationStyleSelect::IFCSURFACESTYLE:
        outputStream() << "IFCSURFACESTYLE(";
        writeAttribute(selectData->getIfcSurfaceStyle());
        outputStream() << ")";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcShell(IfcShell *selectData)
{
    switch(selectData->currentType())
    {
    case IfcShell::IFCCLOSEDSHELL:
        outputStream() << "IFCCLOSEDSHELL(";
        writeAttribute(selectData->getIfcClosedShell());
        outputStream() << ")";
        break;
    case IfcShell::IFCOPENSHELL:
        outputStream() << "IFCOPENSHELL(";
        writeAttribute(selectData->getIfcOpenShell());
        outputStream() << ")";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcSimpleValue(IfcSimpleValue *selectData)
{
    switch(selectData->currentType())
    {
    case IfcSimpleValue::IFCINTEGER:
        outputStream() << "IFCINTEGER(";
        writeAttribute(selectData->getIfcInteger());
        outputStream() << ")";
        break;
    case IfcSimpleValue::IFCREAL:
        outputStream() << "IFCREAL(";
        writeAttribute(selectData->getIfcReal());
        outputStream() << ")";
        break;
    case IfcSimpleValue::IFCBOOLEAN:
        outputStream() << "IFCBOOLEAN(";
        writeAttribute(selectData->getIfcBoolean());
        outputStream() << ")";
        break;
    case IfcSimpleValue::IFCIDENTIFIER:
        outputStream() << "IFCIDENTIFIER(";
        writeAttribute(selectData->getIfcIdentifier());
        outputStream() << ")";
        break;
    case IfcSimpleValue::IFCTEXT:
        outputStream() << "IFCTEXT(";
        writeAttribute(selectData->getIfcText());
        outputStream() << ")";
        break;
    case IfcSimpleValue::IFCLABEL:
        outputStream() << "IFCLABEL(";
        writeAttribute(selectData->getIfcLabel());
        outputStream() << ")";
        break;
    case IfcSimpleValue::IFCLOGICAL:
        outputStream() << "IFCLOGICAL(";
        writeAttribute(selectData->getIfcLogical());
        outputStream() << ")";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcSizeSelect(IfcSizeSelect *selectData)
{
    switch(selectData->currentType())
    {
    case IfcSizeSelect::IFCRATIOMEASURE:
        outputStream() << "IFCRATIOMEASURE(";
        writeAttribute(selectData->getIfcRatioMeasure());
        outputStream() << ")";
        break;
    case IfcSizeSelect::IFCLENGTHMEASURE:
        outputStream() << "IFCLENGTHMEASURE(";
        writeAttribute(selectData->getIfcLengthMeasure());
        outputStream() << ")";
        break;
    case IfcSizeSelect::IFCDESCRIPTIVEMEASURE:
        outputStream() << "IFCDESCRIPTIVEMEASURE(";
        writeAttribute(selectData->getIfcDescriptiveMeasure());
        outputStream() << ")";
        break;
    case IfcSizeSelect::IFCPOSITIVELENGTHMEASURE:
        outputStream() << "IFCPOSITIVELENGTHMEASURE(";
        writeAttribute(selectData->getIfcPositiveLengthMeasure());
        outputStream() << ")";
        break;
    case IfcSizeSelect::IFCNORMALISEDRATIOMEASURE:
        outputStream() << "IFCNORMALISEDRATIOMEASURE(";
        writeAttribute(selectData->getIfcNormalisedRatioMeasure());
        outputStream() << ")";
        break;
    case IfcSizeSelect::IFCPOSITIVERATIOMEASURE:
        outputStream() << "IFCPOSITIVERATIOMEASURE(";
        writeAttribute(selectData->getIfcPositiveRatioMeasure());
        outputStream() << ")";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcSpecularHighlightSelect(IfcSpecularHighlightSelect *selectData)
{
    switch(selectData->currentType())
    {
    case IfcSpecularHighlightSelect::IFCSPECULAREXPONENT:
        outputStream() << "IFCSPECULAREXPONENT(";
        writeAttribute(selectData->getIfcSpecularExponent());
        outputStream() << ")";
        break;
    case IfcSpecularHighlightSelect::IFCSPECULARROUGHNESS:
        outputStream() << "IFCSPECULARROUGHNESS(";
        writeAttribute(selectData->getIfcSpecularRoughness());
        outputStream() << ")";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcStructuralActivityAssignmentSelect(IfcStructuralActivityAssignmentSelect *selectData)
{
    switch(selectData->currentType())
    {
    case IfcStructuralActivityAssignmentSelect::IFCSTRUCTURALITEM:
        outputStream() << "IFCSTRUCTURALITEM(";
        writeAttribute(selectData->getIfcStructuralItem());
        outputStream() << ")";
        break;
    case IfcStructuralActivityAssignmentSelect::IFCELEMENT:
        outputStream() << "IFCELEMENT(";
        writeAttribute(selectData->getIfcElement());
        outputStream() << ")";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcSurfaceOrFaceSurface(IfcSurfaceOrFaceSurface *selectData)
{
    switch(selectData->currentType())
    {
    case IfcSurfaceOrFaceSurface::IFCSURFACE:
        outputStream() << "IFCSURFACE(";
        writeAttribute(selectData->getIfcSurface());
        outputStream() << ")";
        break;
    case IfcSurfaceOrFaceSurface::IFCFACESURFACE:
        outputStream() << "IFCFACESURFACE(";
        writeAttribute(selectData->getIfcFaceSurface());
        outputStream() << ")";
        break;
    case IfcSurfaceOrFaceSurface::IFCFACEBASEDSURFACEMODEL:
        outputStream() << "IFCFACEBASEDSURFACEMODEL(";
        writeAttribute(selectData->getIfcFaceBasedSurfaceModel());
        outputStream() << ")";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcSurfaceStyleElementSelect(IfcSurfaceStyleElementSelect *selectData)
{
    switch(selectData->currentType())
    {
    case IfcSurfaceStyleElementSelect::IFCSURFACESTYLESHADING:
        outputStream() << "IFCSURFACESTYLESHADING(";
        writeAttribute(selectData->getIfcSurfaceStyleShading());
        outputStream() << ")";
        break;
    case IfcSurfaceStyleElementSelect::IFCSURFACESTYLELIGHTING:
        outputStream() << "IFCSURFACESTYLELIGHTING(";
        writeAttribute(selectData->getIfcSurfaceStyleLighting());
        outputStream() << ")";
        break;
    case IfcSurfaceStyleElementSelect::IFCSURFACESTYLEWITHTEXTURES:
        outputStream() << "IFCSURFACESTYLEWITHTEXTURES(";
        writeAttribute(selectData->getIfcSurfaceStyleWithTextures());
        outputStream() << ")";
        break;
    case IfcSurfaceStyleElementSelect::IFCEXTERNALLYDEFINEDSURFACESTYLE:
        outputStream() << "IFCEXTERNALLYDEFINEDSURFACESTYLE(";
        writeAttribute(selectData->getIfcExternallyDefinedSurfaceStyle());
        outputStream() << ")";
        break;
    case IfcSurfaceStyleElementSelect::IFCSURFACESTYLEREFRACTION:
        outputStream() << "IFCSURFACESTYLEREFRACTION(";
        writeAttribute(selectData->getIfcSurfaceStyleRefraction());
        outputStream() << ")";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcSymbolStyleSelect(IfcSymbolStyleSelect *selectData)
{
    switch(selectData->currentType())
    {
    case IfcSymbolStyleSelect::IFCCOLOURSPECIFICATION:
        outputStream() << "IFCCOLOURSPECIFICATION(";
        writeAttribute(selectData->getIfcColourSpecification());
        outputStream() << ")";
        break;
    case IfcSymbolStyleSelect::IFCPREDEFINEDCOLOUR:
        outputStream() << "IFCPREDEFINEDCOLOUR(";
        writeAttribute(selectData->getIfcPreDefinedColour());
        outputStream() << ")";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcTextFontSelect(IfcTextFontSelect *selectData)
{
    switch(selectData->currentType())
    {
    case IfcTextFontSelect::IFCPREDEFINEDTEXTFONT:
        outputStream() << "IFCPREDEFINEDTEXTFONT(";
        writeAttribute(selectData->getIfcPreDefinedTextFont());
        outputStream() << ")";
        break;
    case IfcTextFontSelect::IFCEXTERNALLYDEFINEDTEXTFONT:
        outputStream() << "IFCEXTERNALLYDEFINEDTEXTFONT(";
        writeAttribute(selectData->getIfcExternallyDefinedTextFont());
        outputStream() << ")";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcTextStyleSelect(IfcTextStyleSelect *selectData)
{
    switch(selectData->currentType())
    {
    case IfcTextStyleSelect::IFCTEXTSTYLEWITHBOXCHARACTERISTICS:
        outputStream() << "IFCTEXTSTYLEWITHBOXCHARACTERISTICS(";
        writeAttribute(selectData->getIfcTextStyleWithBoxCharacteristics());
        outputStream() << ")";
        break;
    case IfcTextStyleSelect::IFCTEXTSTYLETEXTMODEL:
        outputStream() << "IFCTEXTSTYLETEXTMODEL(";
        writeAttribute(selectData->getIfcTextStyleTextModel());
        outputStream() << ")";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcTrimmingSelect(IfcTrimmingSelect *selectData)
{
    switch(selectData->currentType())
    {
    case IfcTrimmingSelect::IFCCARTESIANPOINT:
        outputStream() << "IFCCARTESIANPOINT(";
        writeAttribute(selectData->getIfcCartesianPoint());
        outputStream() << ")";
        break;
    case IfcTrimmingSelect::IFCPARAMETERVALUE:
        outputStream() << "IFCPARAMETERVALUE(";
        writeAttribute(selectData->getIfcParameterValue());
        outputStream() << ")";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcUnit(IfcUnit *selectData)
{
    switch(selectData->currentType())
    {
    case IfcUnit::IFCDERIVEDUNIT:
        outputStream() << "IFCDERIVEDUNIT(";
        writeAttribute(selectData->getIfcDerivedUnit());
        outputStream() << ")";
        break;
    case IfcUnit::IFCNAMEDUNIT:
        outputStream() << "IFCNAMEDUNIT(";
        writeAttribute(selectData->getIfcNamedUnit());
        outputStream() << ")";
        break;
    case IfcUnit::IFCMONETARYUNIT:
        outputStream() << "IFCMONETARYUNIT(";
        writeAttribute(selectData->getIfcMonetaryUnit());
        outputStream() << ")";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcValue(IfcValue *selectData)
{
    switch(selectData->currentType())
    {
    case IfcValue::IFCVOLUMEMEASURE:
        outputStream() << "IFCVOLUMEMEASURE(";
        writeAttribute(selectData->getIfcVolumeMeasure());
        outputStream() << ")";
        break;
    case IfcValue::IFCTIMEMEASURE:
        outputStream() << "IFCTIMEMEASURE(";
        writeAttribute(selectData->getIfcTimeMeasure());
        outputStream() << ")";
        break;
    case IfcValue::IFCTHERMODYNAMICTEMPERATUREMEASURE:
        outputStream() << "IFCTHERMODYNAMICTEMPERATUREMEASURE(";
        writeAttribute(selectData->getIfcThermodynamicTemperatureMeasure());
        outputStream() << ")";
        break;
    case IfcValue::IFCSOLIDANGLEMEASURE:
        outputStream() << "IFCSOLIDANGLEMEASURE(";
        writeAttribute(selectData->getIfcSolidAngleMeasure());
        outputStream() << ")";
        break;
    case IfcValue::IFCPOSITIVERATIOMEASURE:
        outputStream() << "IFCPOSITIVERATIOMEASURE(";
        writeAttribute(selectData->getIfcPositiveRatioMeasure());
        outputStream() << ")";
        break;
    case IfcValue::IFCRATIOMEASURE:
        outputStream() << "IFCRATIOMEASURE(";
        writeAttribute(selectData->getIfcRatioMeasure());
        outputStream() << ")";
        break;
    case IfcValue::IFCPOSITIVEPLANEANGLEMEASURE:
        outputStream() << "IFCPOSITIVEPLANEANGLEMEASURE(";
        writeAttribute(selectData->getIfcPositivePlaneAngleMeasure());
        outputStream() << ")";
        break;
    case IfcValue::IFCPLANEANGLEMEASURE:
        outputStream() << "IFCPLANEANGLEMEASURE(";
        writeAttribute(selectData->getIfcPlaneAngleMeasure());
        outputStream() << ")";
        break;
    case IfcValue::IFCPARAMETERVALUE:
        outputStream() << "IFCPARAMETERVALUE(";
        writeAttribute(selectData->getIfcParameterValue());
        outputStream() << ")";
        break;
    case IfcValue::IFCNUMERICMEASURE:
        outputStream() << "IFCNUMERICMEASURE(";
        writeAttribute(selectData->getIfcNumericMeasure());
        outputStream() << ")";
        break;
    case IfcValue::IFCMASSMEASURE:
        outputStream() << "IFCMASSMEASURE(";
        writeAttribute(selectData->getIfcMassMeasure());
        outputStream() << ")";
        break;
    case IfcValue::IFCPOSITIVELENGTHMEASURE:
        outputStream() << "IFCPOSITIVELENGTHMEASURE(";
        writeAttribute(selectData->getIfcPositiveLengthMeasure());
        outputStream() << ")";
        break;
    case IfcValue::IFCLENGTHMEASURE:
        outputStream() << "IFCLENGTHMEASURE(";
        writeAttribute(selectData->getIfcLengthMeasure());
        outputStream() << ")";
        break;
    case IfcValue::IFCELECTRICCURRENTMEASURE:
        outputStream() << "IFCELECTRICCURRENTMEASURE(";
        writeAttribute(selectData->getIfcElectricCurrentMeasure());
        outputStream() << ")";
        break;
    case IfcValue::IFCDESCRIPTIVEMEASURE:
        outputStream() << "IFCDESCRIPTIVEMEASURE(";
        writeAttribute(selectData->getIfcDescriptiveMeasure());
        outputStream() << ")";
        break;
    case IfcValue::IFCCOUNTMEASURE:
        outputStream() << "IFCCOUNTMEASURE(";
        writeAttribute(selectData->getIfcCountMeasure());
        outputStream() << ")";
        break;
    case IfcValue::IFCCONTEXTDEPENDENTMEASURE:
        outputStream() << "IFCCONTEXTDEPENDENTMEASURE(";
        writeAttribute(selectData->getIfcContextDependentMeasure());
        outputStream() << ")";
        break;
    case IfcValue::IFCAREAMEASURE:
        outputStream() << "IFCAREAMEASURE(";
        writeAttribute(selectData->getIfcAreaMeasure());
        outputStream() << ")";
        break;
    case IfcValue::IFCAMOUNTOFSUBSTANCEMEASURE:
        outputStream() << "IFCAMOUNTOFSUBSTANCEMEASURE(";
        writeAttribute(selectData->getIfcAmountOfSubstanceMeasure());
        outputStream() << ")";
        break;
    case IfcValue::IFCLUMINOUSINTENSITYMEASURE:
        outputStream() << "IFCLUMINOUSINTENSITYMEASURE(";
        writeAttribute(selectData->getIfcLuminousIntensityMeasure());
        outputStream() << ")";
        break;
    case IfcValue::IFCNORMALISEDRATIOMEASURE:
        outputStream() << "IFCNORMALISEDRATIOMEASURE(";
        writeAttribute(selectData->getIfcNormalisedRatioMeasure());
        outputStream() << ")";
        break;
    case IfcValue::IFCCOMPLEXNUMBER:
        outputStream() << "IFCCOMPLEXNUMBER(";
        outputStream() << "(";
        {
            if ((selectData->getIfcComplexNumber()).size())
            {
                IfcComplexNumber::iterator it = (selectData->getIfcComplexNumber()).begin();
                writeAttribute(*it);
                for (it++; it != (selectData->getIfcComplexNumber()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute(*it);
                }
            }
        }
        outputStream() << ")";
        outputStream() << ")";
        break;
    case IfcValue::IFCINTEGER:
        outputStream() << "IFCINTEGER(";
        writeAttribute(selectData->getIfcInteger());
        outputStream() << ")";
        break;
    case IfcValue::IFCREAL:
        outputStream() << "IFCREAL(";
        writeAttribute(selectData->getIfcReal());
        outputStream() << ")";
        break;
    case IfcValue::IFCBOOLEAN:
        outputStream() << "IFCBOOLEAN(";
        writeAttribute(selectData->getIfcBoolean());
        outputStream() << ")";
        break;
    case IfcValue::IFCIDENTIFIER:
        outputStream() << "IFCIDENTIFIER(";
        writeAttribute(selectData->getIfcIdentifier());
        outputStream() << ")";
        break;
    case IfcValue::IFCTEXT:
        outputStream() << "IFCTEXT(";
        writeAttribute(selectData->getIfcText());
        outputStream() << ")";
        break;
    case IfcValue::IFCLABEL:
        outputStream() << "IFCLABEL(";
        writeAttribute(selectData->getIfcLabel());
        outputStream() << ")";
        break;
    case IfcValue::IFCLOGICAL:
        outputStream() << "IFCLOGICAL(";
        writeAttribute(selectData->getIfcLogical());
        outputStream() << ")";
        break;
    case IfcValue::IFCVOLUMETRICFLOWRATEMEASURE:
        outputStream() << "IFCVOLUMETRICFLOWRATEMEASURE(";
        writeAttribute(selectData->getIfcVolumetricFlowRateMeasure());
        outputStream() << ")";
        break;
    case IfcValue::IFCTIMESTAMP:
        outputStream() << "IFCTIMESTAMP(";
        writeAttribute(selectData->getIfcTimeStamp());
        outputStream() << ")";
        break;
    case IfcValue::IFCTHERMALTRANSMITTANCEMEASURE:
        outputStream() << "IFCTHERMALTRANSMITTANCEMEASURE(";
        writeAttribute(selectData->getIfcThermalTransmittanceMeasure());
        outputStream() << ")";
        break;
    case IfcValue::IFCTHERMALRESISTANCEMEASURE:
        outputStream() << "IFCTHERMALRESISTANCEMEASURE(";
        writeAttribute(selectData->getIfcThermalResistanceMeasure());
        outputStream() << ")";
        break;
    case IfcValue::IFCTHERMALADMITTANCEMEASURE:
        outputStream() << "IFCTHERMALADMITTANCEMEASURE(";
        writeAttribute(selectData->getIfcThermalAdmittanceMeasure());
        outputStream() << ")";
        break;
    case IfcValue::IFCPRESSUREMEASURE:
        outputStream() << "IFCPRESSUREMEASURE(";
        writeAttribute(selectData->getIfcPressureMeasure());
        outputStream() << ")";
        break;
    case IfcValue::IFCPOWERMEASURE:
        outputStream() << "IFCPOWERMEASURE(";
        writeAttribute(selectData->getIfcPowerMeasure());
        outputStream() << ")";
        break;
    case IfcValue::IFCMASSFLOWRATEMEASURE:
        outputStream() << "IFCMASSFLOWRATEMEASURE(";
        writeAttribute(selectData->getIfcMassFlowRateMeasure());
        outputStream() << ")";
        break;
    case IfcValue::IFCMASSDENSITYMEASURE:
        outputStream() << "IFCMASSDENSITYMEASURE(";
        writeAttribute(selectData->getIfcMassDensityMeasure());
        outputStream() << ")";
        break;
    case IfcValue::IFCLINEARVELOCITYMEASURE:
        outputStream() << "IFCLINEARVELOCITYMEASURE(";
        writeAttribute(selectData->getIfcLinearVelocityMeasure());
        outputStream() << ")";
        break;
    case IfcValue::IFCKINEMATICVISCOSITYMEASURE:
        outputStream() << "IFCKINEMATICVISCOSITYMEASURE(";
        writeAttribute(selectData->getIfcKinematicViscosityMeasure());
        outputStream() << ")";
        break;
    case IfcValue::IFCINTEGERCOUNTRATEMEASURE:
        outputStream() << "IFCINTEGERCOUNTRATEMEASURE(";
        writeAttribute(selectData->getIfcIntegerCountRateMeasure());
        outputStream() << ")";
        break;
    case IfcValue::IFCHEATFLUXDENSITYMEASURE:
        outputStream() << "IFCHEATFLUXDENSITYMEASURE(";
        writeAttribute(selectData->getIfcHeatFluxDensityMeasure());
        outputStream() << ")";
        break;
    case IfcValue::IFCFREQUENCYMEASURE:
        outputStream() << "IFCFREQUENCYMEASURE(";
        writeAttribute(selectData->getIfcFrequencyMeasure());
        outputStream() << ")";
        break;
    case IfcValue::IFCENERGYMEASURE:
        outputStream() << "IFCENERGYMEASURE(";
        writeAttribute(selectData->getIfcEnergyMeasure());
        outputStream() << ")";
        break;
    case IfcValue::IFCELECTRICVOLTAGEMEASURE:
        outputStream() << "IFCELECTRICVOLTAGEMEASURE(";
        writeAttribute(selectData->getIfcElectricVoltageMeasure());
        outputStream() << ")";
        break;
    case IfcValue::IFCDYNAMICVISCOSITYMEASURE:
        outputStream() << "IFCDYNAMICVISCOSITYMEASURE(";
        writeAttribute(selectData->getIfcDynamicViscosityMeasure());
        outputStream() << ")";
        break;
    case IfcValue::IFCCOMPOUNDPLANEANGLEMEASURE:
        outputStream() << "IFCCOMPOUNDPLANEANGLEMEASURE(";
        outputStream() << "(";
        {
            if ((selectData->getIfcCompoundPlaneAngleMeasure()).size())
            {
                IfcCompoundPlaneAngleMeasure::iterator it = (selectData->getIfcCompoundPlaneAngleMeasure()).begin();
                writeAttribute(*it);
                for (it++; it != (selectData->getIfcCompoundPlaneAngleMeasure()).end(); it++)
                {
                    outputStream() << ",";
                    writeAttribute(*it);
                }
            }
        }
        outputStream() << ")";
        outputStream() << ")";
        break;
    case IfcValue::IFCANGULARVELOCITYMEASURE:
        outputStream() << "IFCANGULARVELOCITYMEASURE(";
        writeAttribute(selectData->getIfcAngularVelocityMeasure());
        outputStream() << ")";
        break;
    case IfcValue::IFCTHERMALCONDUCTIVITYMEASURE:
        outputStream() << "IFCTHERMALCONDUCTIVITYMEASURE(";
        writeAttribute(selectData->getIfcThermalConductivityMeasure());
        outputStream() << ")";
        break;
    case IfcValue::IFCMOLECULARWEIGHTMEASURE:
        outputStream() << "IFCMOLECULARWEIGHTMEASURE(";
        writeAttribute(selectData->getIfcMolecularWeightMeasure());
        outputStream() << ")";
        break;
    case IfcValue::IFCVAPORPERMEABILITYMEASURE:
        outputStream() << "IFCVAPORPERMEABILITYMEASURE(";
        writeAttribute(selectData->getIfcVaporPermeabilityMeasure());
        outputStream() << ")";
        break;
    case IfcValue::IFCMOISTUREDIFFUSIVITYMEASURE:
        outputStream() << "IFCMOISTUREDIFFUSIVITYMEASURE(";
        writeAttribute(selectData->getIfcMoistureDiffusivityMeasure());
        outputStream() << ")";
        break;
    case IfcValue::IFCISOTHERMALMOISTURECAPACITYMEASURE:
        outputStream() << "IFCISOTHERMALMOISTURECAPACITYMEASURE(";
        writeAttribute(selectData->getIfcIsothermalMoistureCapacityMeasure());
        outputStream() << ")";
        break;
    case IfcValue::IFCSPECIFICHEATCAPACITYMEASURE:
        outputStream() << "IFCSPECIFICHEATCAPACITYMEASURE(";
        writeAttribute(selectData->getIfcSpecificHeatCapacityMeasure());
        outputStream() << ")";
        break;
    case IfcValue::IFCMONETARYMEASURE:
        outputStream() << "IFCMONETARYMEASURE(";
        writeAttribute(selectData->getIfcMonetaryMeasure());
        outputStream() << ")";
        break;
    case IfcValue::IFCMAGNETICFLUXDENSITYMEASURE:
        outputStream() << "IFCMAGNETICFLUXDENSITYMEASURE(";
        writeAttribute(selectData->getIfcMagneticFluxDensityMeasure());
        outputStream() << ")";
        break;
    case IfcValue::IFCMAGNETICFLUXMEASURE:
        outputStream() << "IFCMAGNETICFLUXMEASURE(";
        writeAttribute(selectData->getIfcMagneticFluxMeasure());
        outputStream() << ")";
        break;
    case IfcValue::IFCLUMINOUSFLUXMEASURE:
        outputStream() << "IFCLUMINOUSFLUXMEASURE(";
        writeAttribute(selectData->getIfcLuminousFluxMeasure());
        outputStream() << ")";
        break;
    case IfcValue::IFCFORCEMEASURE:
        outputStream() << "IFCFORCEMEASURE(";
        writeAttribute(selectData->getIfcForceMeasure());
        outputStream() << ")";
        break;
    case IfcValue::IFCINDUCTANCEMEASURE:
        outputStream() << "IFCINDUCTANCEMEASURE(";
        writeAttribute(selectData->getIfcInductanceMeasure());
        outputStream() << ")";
        break;
    case IfcValue::IFCILLUMINANCEMEASURE:
        outputStream() << "IFCILLUMINANCEMEASURE(";
        writeAttribute(selectData->getIfcIlluminanceMeasure());
        outputStream() << ")";
        break;
    case IfcValue::IFCELECTRICRESISTANCEMEASURE:
        outputStream() << "IFCELECTRICRESISTANCEMEASURE(";
        writeAttribute(selectData->getIfcElectricResistanceMeasure());
        outputStream() << ")";
        break;
    case IfcValue::IFCELECTRICCONDUCTANCEMEASURE:
        outputStream() << "IFCELECTRICCONDUCTANCEMEASURE(";
        writeAttribute(selectData->getIfcElectricConductanceMeasure());
        outputStream() << ")";
        break;
    case IfcValue::IFCELECTRICCHARGEMEASURE:
        outputStream() << "IFCELECTRICCHARGEMEASURE(";
        writeAttribute(selectData->getIfcElectricChargeMeasure());
        outputStream() << ")";
        break;
    case IfcValue::IFCDOSEEQUIVALENTMEASURE:
        outputStream() << "IFCDOSEEQUIVALENTMEASURE(";
        writeAttribute(selectData->getIfcDoseEquivalentMeasure());
        outputStream() << ")";
        break;
    case IfcValue::IFCELECTRICCAPACITANCEMEASURE:
        outputStream() << "IFCELECTRICCAPACITANCEMEASURE(";
        writeAttribute(selectData->getIfcElectricCapacitanceMeasure());
        outputStream() << ")";
        break;
    case IfcValue::IFCABSORBEDDOSEMEASURE:
        outputStream() << "IFCABSORBEDDOSEMEASURE(";
        writeAttribute(selectData->getIfcAbsorbedDoseMeasure());
        outputStream() << ")";
        break;
    case IfcValue::IFCRADIOACTIVITYMEASURE:
        outputStream() << "IFCRADIOACTIVITYMEASURE(";
        writeAttribute(selectData->getIfcRadioActivityMeasure());
        outputStream() << ")";
        break;
    case IfcValue::IFCROTATIONALFREQUENCYMEASURE:
        outputStream() << "IFCROTATIONALFREQUENCYMEASURE(";
        writeAttribute(selectData->getIfcRotationalFrequencyMeasure());
        outputStream() << ")";
        break;
    case IfcValue::IFCTORQUEMEASURE:
        outputStream() << "IFCTORQUEMEASURE(";
        writeAttribute(selectData->getIfcTorqueMeasure());
        outputStream() << ")";
        break;
    case IfcValue::IFCACCELERATIONMEASURE:
        outputStream() << "IFCACCELERATIONMEASURE(";
        writeAttribute(selectData->getIfcAccelerationMeasure());
        outputStream() << ")";
        break;
    case IfcValue::IFCLINEARFORCEMEASURE:
        outputStream() << "IFCLINEARFORCEMEASURE(";
        writeAttribute(selectData->getIfcLinearForceMeasure());
        outputStream() << ")";
        break;
    case IfcValue::IFCLINEARSTIFFNESSMEASURE:
        outputStream() << "IFCLINEARSTIFFNESSMEASURE(";
        writeAttribute(selectData->getIfcLinearStiffnessMeasure());
        outputStream() << ")";
        break;
    case IfcValue::IFCMODULUSOFSUBGRADEREACTIONMEASURE:
        outputStream() << "IFCMODULUSOFSUBGRADEREACTIONMEASURE(";
        writeAttribute(selectData->getIfcModulusOfSubgradeReactionMeasure());
        outputStream() << ")";
        break;
    case IfcValue::IFCMODULUSOFELASTICITYMEASURE:
        outputStream() << "IFCMODULUSOFELASTICITYMEASURE(";
        writeAttribute(selectData->getIfcModulusOfElasticityMeasure());
        outputStream() << ")";
        break;
    case IfcValue::IFCMOMENTOFINERTIAMEASURE:
        outputStream() << "IFCMOMENTOFINERTIAMEASURE(";
        writeAttribute(selectData->getIfcMomentOfInertiaMeasure());
        outputStream() << ")";
        break;
    case IfcValue::IFCPLANARFORCEMEASURE:
        outputStream() << "IFCPLANARFORCEMEASURE(";
        writeAttribute(selectData->getIfcPlanarForceMeasure());
        outputStream() << ")";
        break;
    case IfcValue::IFCROTATIONALSTIFFNESSMEASURE:
        outputStream() << "IFCROTATIONALSTIFFNESSMEASURE(";
        writeAttribute(selectData->getIfcRotationalStiffnessMeasure());
        outputStream() << ")";
        break;
    case IfcValue::IFCSHEARMODULUSMEASURE:
        outputStream() << "IFCSHEARMODULUSMEASURE(";
        writeAttribute(selectData->getIfcShearModulusMeasure());
        outputStream() << ")";
        break;
    case IfcValue::IFCLINEARMOMENTMEASURE:
        outputStream() << "IFCLINEARMOMENTMEASURE(";
        writeAttribute(selectData->getIfcLinearMomentMeasure());
        outputStream() << ")";
        break;
    case IfcValue::IFCLUMINOUSINTENSITYDISTRIBUTIONMEASURE:
        outputStream() << "IFCLUMINOUSINTENSITYDISTRIBUTIONMEASURE(";
        writeAttribute(selectData->getIfcLuminousIntensityDistributionMeasure());
        outputStream() << ")";
        break;
    case IfcValue::IFCCURVATUREMEASURE:
        outputStream() << "IFCCURVATUREMEASURE(";
        writeAttribute(selectData->getIfcCurvatureMeasure());
        outputStream() << ")";
        break;
    case IfcValue::IFCMASSPERLENGTHMEASURE:
        outputStream() << "IFCMASSPERLENGTHMEASURE(";
        writeAttribute(selectData->getIfcMassPerLengthMeasure());
        outputStream() << ")";
        break;
    case IfcValue::IFCMODULUSOFLINEARSUBGRADEREACTIONMEASURE:
        outputStream() << "IFCMODULUSOFLINEARSUBGRADEREACTIONMEASURE(";
        writeAttribute(selectData->getIfcModulusOfLinearSubgradeReactionMeasure());
        outputStream() << ")";
        break;
    case IfcValue::IFCMODULUSOFROTATIONALSUBGRADEREACTIONMEASURE:
        outputStream() << "IFCMODULUSOFROTATIONALSUBGRADEREACTIONMEASURE(";
        writeAttribute(selectData->getIfcModulusOfRotationalSubgradeReactionMeasure());
        outputStream() << ")";
        break;
    case IfcValue::IFCROTATIONALMASSMEASURE:
        outputStream() << "IFCROTATIONALMASSMEASURE(";
        writeAttribute(selectData->getIfcRotationalMassMeasure());
        outputStream() << ")";
        break;
    case IfcValue::IFCSECTIONALAREAINTEGRALMEASURE:
        outputStream() << "IFCSECTIONALAREAINTEGRALMEASURE(";
        writeAttribute(selectData->getIfcSectionalAreaIntegralMeasure());
        outputStream() << ")";
        break;
    case IfcValue::IFCSECTIONMODULUSMEASURE:
        outputStream() << "IFCSECTIONMODULUSMEASURE(";
        writeAttribute(selectData->getIfcSectionModulusMeasure());
        outputStream() << ")";
        break;
    case IfcValue::IFCTEMPERATUREGRADIENTMEASURE:
        outputStream() << "IFCTEMPERATUREGRADIENTMEASURE(";
        writeAttribute(selectData->getIfcTemperatureGradientMeasure());
        outputStream() << ")";
        break;
    case IfcValue::IFCTHERMALEXPANSIONCOEFFICIENTMEASURE:
        outputStream() << "IFCTHERMALEXPANSIONCOEFFICIENTMEASURE(";
        writeAttribute(selectData->getIfcThermalExpansionCoefficientMeasure());
        outputStream() << ")";
        break;
    case IfcValue::IFCWARPINGCONSTANTMEASURE:
        outputStream() << "IFCWARPINGCONSTANTMEASURE(";
        writeAttribute(selectData->getIfcWarpingConstantMeasure());
        outputStream() << ")";
        break;
    case IfcValue::IFCWARPINGMOMENTMEASURE:
        outputStream() << "IFCWARPINGMOMENTMEASURE(";
        writeAttribute(selectData->getIfcWarpingMomentMeasure());
        outputStream() << ")";
        break;
    case IfcValue::IFCSOUNDPOWERMEASURE:
        outputStream() << "IFCSOUNDPOWERMEASURE(";
        writeAttribute(selectData->getIfcSoundPowerMeasure());
        outputStream() << ")";
        break;
    case IfcValue::IFCSOUNDPRESSUREMEASURE:
        outputStream() << "IFCSOUNDPRESSUREMEASURE(";
        writeAttribute(selectData->getIfcSoundPressureMeasure());
        outputStream() << ")";
        break;
    case IfcValue::IFCHEATINGVALUEMEASURE:
        outputStream() << "IFCHEATINGVALUEMEASURE(";
        writeAttribute(selectData->getIfcHeatingValueMeasure());
        outputStream() << ")";
        break;
    case IfcValue::IFCPHMEASURE:
        outputStream() << "IFCPHMEASURE(";
        writeAttribute(selectData->getIfcPHMeasure());
        outputStream() << ")";
        break;
    case IfcValue::IFCIONCONCENTRATIONMEASURE:
        outputStream() << "IFCIONCONCENTRATIONMEASURE(";
        writeAttribute(selectData->getIfcIonConcentrationMeasure());
        outputStream() << ")";
        break;
    default:
        break;
    }
}

void SPFWriter::writeIfcVectorOrDirection(IfcVectorOrDirection *selectData)
{
    switch(selectData->currentType())
    {
    case IfcVectorOrDirection::IFCDIRECTION:
        outputStream() << "IFCDIRECTION(";
        writeAttribute(selectData->getIfcDirection());
        outputStream() << ")";
        break;
    case IfcVectorOrDirection::IFCVECTOR:
        outputStream() << "IFCVECTOR(";
        writeAttribute(selectData->getIfcVector());
        outputStream() << ")";
        break;
    default:
        break;
    }
}

